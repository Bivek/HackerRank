{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.1", "generated_at": "2021-05-13T14:35:28.011805Z", "invocation_id": "371698b8-8548-4910-b5cb-e8a560b92e4b", "env": {}, "project_id": "151bef5624d2839482b1d021f9eddb83", "user_id": "c4b73e2f-d03f-4fea-ba7d-d8e37468ac7a", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.edw.dim_location": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select \n        * \n    from {{ ref('stg_hist_freshdesk_locations') }}\n),\nrenamed as (\n    select distinct\n        location_key,\n        ifnull(country, 'Unknown') as country,\n        ifnull(city, 'Unknown') as city,\n        ifnull(location_type, 'Unknown') as location_type,\n        ifnull(building, 'Unknown') as building,\n        dim_location_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_locations"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "dimensions", "dim_location"], "unique_id": "model.edw.dim_location", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/dimensions/dim_location.sql", "original_file_path": "models/marts/experience/dimensions/dim_location.sql", "name": "dim_location", "alias": "dim_location", "checksum": {"name": "sha256", "checksum": "3da28e4833a5e5ea6e570e71a0fac33f34e6cd210c1607a2342971df4e2fa545"}, "tags": [], "refs": [["stg_hist_freshdesk_locations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/dimensions/dim_location.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select \n        * \n    from psa_dev.scratch_brana.stg_hist_freshdesk_locations\n),\nrenamed as (\n    select distinct\n        location_key,\n        ifnull(country, 'Unknown') as country,\n        ifnull(city, 'Unknown') as city,\n        ifnull(location_type, 'Unknown') as location_type,\n        ifnull(building, 'Unknown') as building,\n        dim_location_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_location"}, "model.edw.dim_rating": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_freshdesk_ticket_ratings') }}\n),\nrenamed as (\n    select\n        rating_key,\n        case\n            when ratings[0]:value = 100 then 'Neutral'\n            when ratings[0]:value > 100 then 'Promoter'\n            when ratings[0]:value < 100 then 'Detractor'\n        end as disposition,\n        dim_rating_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_ticket_ratings"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "dimensions", "dim_rating"], "unique_id": "model.edw.dim_rating", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/dimensions/dim_rating.sql", "original_file_path": "models/marts/experience/dimensions/dim_rating.sql", "name": "dim_rating", "alias": "dim_rating", "checksum": {"name": "sha256", "checksum": "8672be4cdb4a4ddd4e2a0015ca8e68b23c8e6d36a41971ff16bdec5b6e8c3556"}, "tags": [], "refs": [["stg_hist_freshdesk_ticket_ratings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/dimensions/dim_rating.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_freshdesk_ticket_ratings\n),\nrenamed as (\n    select\n        rating_key,\n        case\n            when ratings[0]:value = 100 then 'Neutral'\n            when ratings[0]:value > 100 then 'Promoter'\n            when ratings[0]:value < 100 then 'Detractor'\n        end as disposition,\n        dim_rating_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_rating"}, "model.edw.dim_agent": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n\nwith source as (\n    select \n        * \n    from {{ ref('stg_hist_freshdesk_agents') }}\n),\nrenamed as (\n    select\n        agent_key,\n        ifnull(agent_type, 'Unknown') as agent_type,\n        ifnull(agent_email, 'Unknown') as agent_email,\n        ifnull(job_title, 'Unknown') as agent_job_title,\n        ifnull(mobile_phone, 'Unknown') as agent_mobile_phone,\n        ifnull(phone, 'Unknown') as agent_phone,\n        ifnull(agent_language, 'Unknown') as agent_language,\n        ifnull(agent_signature, 'Unknown') as agent_signature,\n        ifnull(ticket_scope, 'Unknown') as ticket_scope,\n        case is_occasional\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_occasional,\n        ifnull(time_zone, 'Unknown') as time_zone,\n        case is_active\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end  as is_active,\n        case is_available\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_available,\n        dim_agent_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "dimensions", "dim_agent"], "unique_id": "model.edw.dim_agent", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/dimensions/dim_agent.sql", "original_file_path": "models/marts/experience/dimensions/dim_agent.sql", "name": "dim_agent", "alias": "dim_agent", "checksum": {"name": "sha256", "checksum": "e5a6081fd051d603249abeb639943d7fefeb26ac38ef2264624fef6792506197"}, "tags": [], "refs": [["stg_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/dimensions/dim_agent.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\n\nwith source as (\n    select \n        * \n    from psa_dev.scratch_brana.stg_hist_freshdesk_agents\n),\nrenamed as (\n    select\n        agent_key,\n        ifnull(agent_type, 'Unknown') as agent_type,\n        ifnull(agent_email, 'Unknown') as agent_email,\n        ifnull(job_title, 'Unknown') as agent_job_title,\n        ifnull(mobile_phone, 'Unknown') as agent_mobile_phone,\n        ifnull(phone, 'Unknown') as agent_phone,\n        ifnull(agent_language, 'Unknown') as agent_language,\n        ifnull(agent_signature, 'Unknown') as agent_signature,\n        ifnull(ticket_scope, 'Unknown') as ticket_scope,\n        case is_occasional\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_occasional,\n        ifnull(time_zone, 'Unknown') as time_zone,\n        case is_active\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end  as is_active,\n        case is_available\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_available,\n        dim_agent_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_agent"}, "model.edw.dim_ticket": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select \n        * \n    from {{ ref('stg_hist_freshdesk_tickets') }}\n    where dbt_valid_to is null\n),\nrenamed as (\n    select distinct\n        dim_ticket_hash_diff as ticket_key,\n        ifnull(reason, 'Unknown') as ticket_reason,\n        ifnull(related_with, 'Unknown') as related_with,\n        ifnull(issue, 'Unknown') as ticket_issue,\n        ifnull(ticket_status, 'Unknown') as ticket_status,\n        ifnull(ticket_type, 'Unknown') as ticket_type,\n        ifnull(priority, 'Unknown') as priority,\n        case is_escalated\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_escalated,\n        case is_fr_escalated\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_fr_escalated,\n        ifnull(ticket_source, 'Unknown') as ticket_source,\n        ifnull(tags, 'Unknown') as tags,\n        ifnull(association_type, 'Unknown') as association_type,\n        case is_spam\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_spam,\n        case is_deleted\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_deleted,\n        ifnull(fwd_emails, 'Unknown') as fwd_emails,\n        dim_ticket_hash_diff as hash_diff\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "dimensions", "dim_ticket"], "unique_id": "model.edw.dim_ticket", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/dimensions/dim_ticket.sql", "original_file_path": "models/marts/experience/dimensions/dim_ticket.sql", "name": "dim_ticket", "alias": "dim_ticket", "checksum": {"name": "sha256", "checksum": "ad15c62e563490065449b982ae08b4647da4ff6b809be9d1a4fe1adcb36141f1"}, "tags": [], "refs": [["stg_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/dimensions/dim_ticket.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select \n        * \n    from psa_dev.scratch_brana.stg_hist_freshdesk_tickets\n    where dbt_valid_to is null\n),\nrenamed as (\n    select distinct\n        dim_ticket_hash_diff as ticket_key,\n        ifnull(reason, 'Unknown') as ticket_reason,\n        ifnull(related_with, 'Unknown') as related_with,\n        ifnull(issue, 'Unknown') as ticket_issue,\n        ifnull(ticket_status, 'Unknown') as ticket_status,\n        ifnull(ticket_type, 'Unknown') as ticket_type,\n        ifnull(priority, 'Unknown') as priority,\n        case is_escalated\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_escalated,\n        case is_fr_escalated\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_fr_escalated,\n        ifnull(ticket_source, 'Unknown') as ticket_source,\n        ifnull(tags, 'Unknown') as tags,\n        ifnull(association_type, 'Unknown') as association_type,\n        case is_spam\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_spam,\n        case is_deleted\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end as is_deleted,\n        ifnull(fwd_emails, 'Unknown') as fwd_emails,\n        dim_ticket_hash_diff as hash_diff\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_ticket"}, "model.edw.dim_requester": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select \n        * \n    from {{ ref('stg_freshdesk_requesters') }}\n),\nrenamed as (\n    select\n        requester_key,\n        ifnull(requester_name, 'Unknown') as requester_name,\n        ifnull(requester_email, 'Unknown') as requester_email,\n        ifnull(requester_mobile, 'Unknown') as requester_mobile,\n        ifnull(requester_phone, 'Unknown') as requester_phone,\n        hash_diff\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_freshdesk_requesters"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "dimensions", "dim_requester"], "unique_id": "model.edw.dim_requester", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/dimensions/dim_requester.sql", "original_file_path": "models/marts/experience/dimensions/dim_requester.sql", "name": "dim_requester", "alias": "dim_requester", "checksum": {"name": "sha256", "checksum": "f6a28e52b5c74d7614d630d4b372e8ee54c05dd6c8fe81a36a876fcff5bfb3fb"}, "tags": [], "refs": [["stg_freshdesk_requesters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/dimensions/dim_requester.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select \n        * \n    from psa_dev.scratch_brana.stg_freshdesk_requesters\n),\nrenamed as (\n    select\n        requester_key,\n        ifnull(requester_name, 'Unknown') as requester_name,\n        ifnull(requester_email, 'Unknown') as requester_email,\n        ifnull(requester_mobile, 'Unknown') as requester_mobile,\n        ifnull(requester_phone, 'Unknown') as requester_phone,\n        hash_diff\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_requester"}, "model.edw.fact_ratings": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_freshdesk_ticket_ratings') }} where dbt_valid_to is null\n),\ntickets as (\n    select * from {{ ref('stg_hist_freshdesk_tickets') }} where dbt_valid_to is null\n),\nrenamed as (\n    select  \n        tickets.dim_ticket_hash_diff as ticket_key,\n        source.agent_key,\n        tickets.location_key,\n        source.rating_key,\n        tickets.requester_key,\n        to_date(source.created_at) as date_created_key,\n        1 as rating_count,\n        case\n            when source.ratings[0]:value > 100 then 1\n            else 0\n        end as promoter_count,\n        case \n            when source.ratings[0]:value < 100 then 1\n            else 0\n        end as detractor_count,\n        source.ratings[0]:value as rating_number\n    from source\n    inner join tickets\n        on source.ticket_id = tickets.ticket_id\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_ticket_ratings", "model.edw.stg_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "facts", "fact_ratings"], "unique_id": "model.edw.fact_ratings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/facts/fact_ratings.sql", "original_file_path": "models/marts/experience/facts/fact_ratings.sql", "name": "fact_ratings", "alias": "fact_ratings", "checksum": {"name": "sha256", "checksum": "e48497348493821bf6f8a492414affc2a867e43d07e8d5af68abe885edf116e3"}, "tags": [], "refs": [["stg_hist_freshdesk_ticket_ratings"], ["stg_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/facts/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/facts/fact_ratings.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_freshdesk_ticket_ratings where dbt_valid_to is null\n),\ntickets as (\n    select * from psa_dev.scratch_brana.stg_hist_freshdesk_tickets where dbt_valid_to is null\n),\nrenamed as (\n    select  \n        tickets.dim_ticket_hash_diff as ticket_key,\n        source.agent_key,\n        tickets.location_key,\n        source.rating_key,\n        tickets.requester_key,\n        to_date(source.created_at) as date_created_key,\n        1 as rating_count,\n        case\n            when source.ratings[0]:value > 100 then 1\n            else 0\n        end as promoter_count,\n        case \n            when source.ratings[0]:value < 100 then 1\n            else 0\n        end as detractor_count,\n        source.ratings[0]:value as rating_number\n    from source\n    inner join tickets\n        on source.ticket_id = tickets.ticket_id\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_ratings"}, "model.edw.fact_tickets": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select \n    * \n    from {{ ref('stg_hist_freshdesk_tickets') }}\n    where dbt_valid_to is null\n),\nrenamed as (\n    select\n        dim_ticket_hash_diff as ticket_key,\n        requester_key,\n        location_key,\n        agent_key,\n        date_created_key,\n        date_resolved_key,\n        ticket_id,\n        1 as ticket_count,\n        datediff(seconds, created_at, resolved_at) as resolution_time_seconds,\n        datediff(seconds, created_at, first_responded_at) as first_response_time_seconds\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experience", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "experience", "facts", "fact_tickets"], "unique_id": "model.edw.fact_tickets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/experience/facts/fact_tickets.sql", "original_file_path": "models/marts/experience/facts/fact_tickets.sql", "name": "fact_tickets", "alias": "fact_tickets", "checksum": {"name": "sha256", "checksum": "771e252ad265ff9f0a5665c2b19d3c607fac6276efcf45feaa57c9ec11f91cf9"}, "tags": [], "refs": [["stg_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/experience/facts/schema.yml", "build_path": "target/compiled/edw/models/marts/experience/facts/fact_tickets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "experience", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select \n    * \n    from psa_dev.scratch_brana.stg_hist_freshdesk_tickets\n    where dbt_valid_to is null\n),\nrenamed as (\n    select\n        dim_ticket_hash_diff as ticket_key,\n        requester_key,\n        location_key,\n        agent_key,\n        date_created_key,\n        date_resolved_key,\n        ticket_id,\n        1 as ticket_count,\n        datediff(seconds, created_at, resolved_at) as resolution_time_seconds,\n        datediff(seconds, created_at, first_responded_at) as first_response_time_seconds\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_tickets"}, "model.edw.dataloop_asset_stages": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith task_event_stats as (\n\n    select * from {{ ref('stg_pulseviz_task_event_stats') }}\n\n)\n, projects as (\n\n    select * from {{ ref('base_projects_projects') }} where package_type = 'Data Annotation Solution'\n\n)\n, filtered as (\n\n    select\n        task_event_stats.*\n    from task_event_stats\n    inner join projects\n        on task_event_stats.project_id = projects.project_uid\n        \n)\nselect * from filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_pulseviz_task_event_stats", "model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dataloop", "database": "analytics", "tags": ["dataloop"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "dataloop", "dataloop_asset_stages"], "unique_id": "model.edw.dataloop_asset_stages", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/dataloop/dataloop_asset_stages.sql", "original_file_path": "models/marts/clients/dataloop/dataloop_asset_stages.sql", "name": "dataloop_asset_stages", "alias": "dataloop_asset_stages", "checksum": {"name": "sha256", "checksum": "4427b5e3046b29ba6f46d3f5f4f6e62c84ead76450b52df3d14108ce7fe4133b"}, "tags": ["dataloop"], "refs": [["stg_pulseviz_task_event_stats"], ["base_projects_projects"]], "sources": [], "description": "", "columns": {"email": {"name": "email", "description": "email of worker", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/dataloop/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/dataloop/dataloop_asset_stages.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "dataloop", "enabled": true, "tags": "dataloop"}, "compiled_sql": "\n\nwith task_event_stats as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n\n)\n, projects as (\n\n    select * from psa_dev.scratch_brana.base_projects_projects where package_type = 'Data Annotation Solution'\n\n)\n, filtered as (\n\n    select\n        task_event_stats.*\n    from task_event_stats\n    inner join projects\n        on task_event_stats.project_id = projects.project_uid\n        \n)\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dataloop_asset_stages"}, "model.edw.agt_asset_stages": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_v7_agt') }}\n\n)\n, asset_stages as (\n\n    select\n        dataset_id,\n        cw_email,\n        task_started_at,\n        to_date(task_started_at) as task_started_date,\n        task_submitted_at,\n        to_date(task_submitted_at) as task_submitted_date,\n        asset_id,\n        from_stage_number,\n        from_stage_name,\n        to_stage_number,\n        to_stage_name,\n        task_type,\n        stage_duration,\n        asset_annotation_running_total,\n        ifnull(\n            abs(asset_annotation_running_total - lag(asset_annotation_running_total, 1) over (partition by asset_id order by task_submitted_at)),\n            asset_annotation_running_total\n        ) as annotation_count,\n        workflow_id\n    from source\n)\nselect * from asset_stages", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "agt", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "agt", "agt_asset_stages"], "unique_id": "model.edw.agt_asset_stages", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/agt/agt_asset_stages.sql", "original_file_path": "models/marts/clients/agt/agt_asset_stages.sql", "name": "agt_asset_stages", "alias": "agt_asset_stages", "checksum": {"name": "sha256", "checksum": "0e0d2e1757611640bb57e32d2ad48a2db1c716013b812208c2eedacb53335afc"}, "tags": [], "refs": [["base_v7_agt"]], "sources": [], "description": "asset stage change events for AGT", "columns": {"dataset_id": {"name": "dataset_id", "description": "id of the v7 dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cw_email": {"name": "cw_email", "description": "email of the party responsible for the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date": {"name": "task_started_date", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_submitted_at": {"name": "task_submitted_at", "description": "timestamp of the asset stage change event; with asset_id it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_submitted_date": {"name": "task_submitted_date", "description": "date of the asset stage change event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_id": {"name": "asset_id", "description": "id of the asset; with task_submitted_at it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_number": {"name": "from_stage_number", "description": "stage number of the asset prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_name": {"name": "from_stage_name", "description": "stage name of the asset prior to the event; appears to be always null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_number": {"name": "to_stage_number", "description": "stage number of the asset after the event; can be null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_name": {"name": "to_stage_name", "description": "stage name of the asset after the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_duration": {"name": "stage_duration", "description": "duration of time the asset was in the from_stage prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_annotation_running_total": {"name": "asset_annotation_running_total", "description": "total number of annotations completed on this asset up to the point of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation_count": {"name": "annotation_count", "description": "number of annotations completed in the from_stage", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/agt/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/agt/agt_asset_stages.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "agt", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_v7_agt\n\n)\n, asset_stages as (\n\n    select\n        dataset_id,\n        cw_email,\n        task_started_at,\n        to_date(task_started_at) as task_started_date,\n        task_submitted_at,\n        to_date(task_submitted_at) as task_submitted_date,\n        asset_id,\n        from_stage_number,\n        from_stage_name,\n        to_stage_number,\n        to_stage_name,\n        task_type,\n        stage_duration,\n        asset_annotation_running_total,\n        ifnull(\n            abs(asset_annotation_running_total - lag(asset_annotation_running_total, 1) over (partition by asset_id order by task_submitted_at)),\n            asset_annotation_running_total\n        ) as annotation_count,\n        workflow_id\n    from source\n)\nselect * from asset_stages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.agt_asset_stages"}, "model.edw.agt_datasets": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_v7_agt') }}\n\n)\n, datasets as (\n\n    select distinct\n        dataset_id,\n        dataset_name,\n        ifnull(dataset_name_slug,'unknown') as dataset_name_slug,\n        ifnull(dataset_owner_id,-1)       as dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n\n        ifnull(max(dataset_inserted_at), '1900-01-01 00:00:00')         as dataset_inserted_at,\n        ifnull(to_date(max(dataset_inserted_at)), '1900-01-01') as dataset_inserted_date,\n        ifnull(max(dataset_updated_at), '1900-01-01 00:00:00')             as dataset_updated_at,\n        ifnull(to_date(max(dataset_updated_at)), '1900-01-01')  as dataset_updated_date,\n        max(dataset_progress)             as dataset_progress,\n        max(dataset_asset_count)          as dataset_asset_count,\n        max(dataset_annotation_count)     as dataset_annotation_count,\n        max(dataset_annotators_count)     as dataset_annotators_count,\n        max(dataset_classes_count)        as dataset_classes_count,\n        max(dataset_videos_count)         as dataset_videos_count\n        \n    from source\n    group by 1,2,3,4,5,6\n\n)\nselect * from datasets", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "agt", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "agt", "agt_datasets"], "unique_id": "model.edw.agt_datasets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/agt/agt_datasets.sql", "original_file_path": "models/marts/clients/agt/agt_datasets.sql", "name": "agt_datasets", "alias": "agt_datasets", "checksum": {"name": "sha256", "checksum": "78b3f1c62fbad7f79179e7457a6e96cfde91112bad4726bb12ae8610426792ea"}, "tags": [], "refs": [["base_v7_agt"]], "sources": [], "description": "v7 datasets for AGT", "columns": {"dataset_id": {"name": "dataset_id", "description": "unique id of the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name": {"name": "dataset_name", "description": "name of the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name_slug": {"name": "dataset_name_slug", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_owner_id": {"name": "dataset_owner_id", "description": "id of the dataset owner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_id": {"name": "cloudfactory_workstream_id", "description": "id of the cloudfactory workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_api_key": {"name": "cloudfactory_workstream_api_key", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_inserted_at": {"name": "dataset_inserted_at", "description": "timestamp the dataset was loaded to v7", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_inserted_date": {"name": "dataset_inserted_date", "description": "date the dataset was loaded to v7", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_updated_at": {"name": "dataset_updated_at", "description": "timestamp of most recent change to the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_updated_date": {"name": "dataset_updated_date", "description": "date of most recent change to the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_progress": {"name": "dataset_progress", "description": "unknown; possibly the percent of total images that have completed annotation and review", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_asset_count": {"name": "dataset_asset_count", "description": "number of image assets in the dataset (please verify)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotation_count": {"name": "dataset_annotation_count", "description": "number of annotations on the dataset across all assets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotators_count": {"name": "dataset_annotators_count", "description": "total number of annotators who have worked on the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_classes_count": {"name": "dataset_classes_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_videos_count": {"name": "dataset_videos_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/agt/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/agt/agt_datasets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "agt", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_v7_agt\n\n)\n, datasets as (\n\n    select distinct\n        dataset_id,\n        dataset_name,\n        ifnull(dataset_name_slug,'unknown') as dataset_name_slug,\n        ifnull(dataset_owner_id,-1)       as dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n\n        ifnull(max(dataset_inserted_at), '1900-01-01 00:00:00')         as dataset_inserted_at,\n        ifnull(to_date(max(dataset_inserted_at)), '1900-01-01') as dataset_inserted_date,\n        ifnull(max(dataset_updated_at), '1900-01-01 00:00:00')             as dataset_updated_at,\n        ifnull(to_date(max(dataset_updated_at)), '1900-01-01')  as dataset_updated_date,\n        max(dataset_progress)             as dataset_progress,\n        max(dataset_asset_count)          as dataset_asset_count,\n        max(dataset_annotation_count)     as dataset_annotation_count,\n        max(dataset_annotators_count)     as dataset_annotators_count,\n        max(dataset_classes_count)        as dataset_classes_count,\n        max(dataset_videos_count)         as dataset_videos_count\n        \n    from source\n    group by 1,2,3,4,5,6\n\n)\nselect * from datasets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.agt_datasets"}, "model.edw.avid_quality_control": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith avid_source as (\n    select * from {{ ref('stg_avid_raw_qc_data') }}\n)\n, cf_source as (\n\n    select * from {{ ref('stg_avid_accuracy_stats') }}\n\n)\n, unioned as (\n\n    select * from avid_source\n    union \n    select * from cf_source\n\n)\nselect * from unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_avid_raw_qc_data", "model.edw.stg_avid_accuracy_stats"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "avid", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "avid", "avid_quality_control"], "unique_id": "model.edw.avid_quality_control", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/avid/avid_quality_control.sql", "original_file_path": "models/marts/clients/avid/avid_quality_control.sql", "name": "avid_quality_control", "alias": "avid_quality_control", "checksum": {"name": "sha256", "checksum": "66890847c0a476c352e2a04f67b6970f00dffbe5edd782e7fc506a0252047055"}, "tags": [], "refs": [["stg_avid_raw_qc_data"], ["stg_avid_accuracy_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/avid/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/avid/avid_quality_control.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "avid", "enabled": true}, "compiled_sql": "\n\nwith avid_source as (\n    select * from psa_dev.scratch_brana.stg_avid_raw_qc_data\n)\n, cf_source as (\n\n    select * from psa_dev.scratch_brana.stg_avid_accuracy_stats\n\n)\n, unioned as (\n\n    select * from avid_source\n    union \n    select * from cf_source\n\n)\nselect * from unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.avid_quality_control"}, "model.edw.ibotta_completed_task": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith task_event_stats as (\n    select * from {{ ref('stg_pulseviz_task_event_stats') }} where event_type = 1\n)\n, projects as (\n    select * from {{ ref('base_projects_projects') }} where project_name in ('Ibotta - Moderation', 'Ibotta - Moderation QA')\n)\n, filtered as (\n    select\n        task_event_stats.event_type,\n        task_event_stats.task_event_id,\n        task_event_stats.worker_email,\n        task_event_stats.project_id,\n        projects.project_name,\n        task_event_stats.task_id,\n        task_event_stats.task_type,\n        task_event_stats.task_started_at,\n        task_event_stats.task_started_date,\n        task_event_stats.task_completed_at,\n        task_event_stats.task_completed_date,\n        task_event_stats.task_duration\n    from task_event_stats\n    inner join projects\n        on task_event_stats.project_id = projects.project_uid\n)\nselect * from filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_pulseviz_task_event_stats", "model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "ibotta", "database": "analytics", "tags": ["ibotta"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "ibotta", "ibotta_completed_task"], "unique_id": "model.edw.ibotta_completed_task", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/ibotta/ibotta_completed_task.sql", "original_file_path": "models/marts/clients/ibotta/ibotta_completed_task.sql", "name": "ibotta_completed_task", "alias": "ibotta_completed_task", "checksum": {"name": "sha256", "checksum": "47a02bbf3bf998bbbfdc729d4e8cd60d2cae431e561ce5323f322e903ba7ba3e"}, "tags": ["ibotta"], "refs": [["stg_pulseviz_task_event_stats"], ["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/ibotta/ibotta_completed_task.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "ibotta", "enabled": true, "tags": "ibotta"}, "compiled_sql": "\n\nwith task_event_stats as (\n    select * from psa_dev.scratch_brana.stg_pulseviz_task_event_stats where event_type = 1\n)\n, projects as (\n    select * from psa_dev.scratch_brana.base_projects_projects where project_name in ('Ibotta - Moderation', 'Ibotta - Moderation QA')\n)\n, filtered as (\n    select\n        task_event_stats.event_type,\n        task_event_stats.task_event_id,\n        task_event_stats.worker_email,\n        task_event_stats.project_id,\n        projects.project_name,\n        task_event_stats.task_id,\n        task_event_stats.task_type,\n        task_event_stats.task_started_at,\n        task_event_stats.task_started_date,\n        task_event_stats.task_completed_at,\n        task_event_stats.task_completed_date,\n        task_event_stats.task_duration\n    from task_event_stats\n    inner join projects\n        on task_event_stats.project_id = projects.project_uid\n)\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.ibotta_completed_task"}, "model.edw.football_volleyball_performance": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source_training as (\n\n    select * from {{ ref('base_hudl_daily_fb_vb_training')}}\n\n)\n, source_production as (\n\n    select * from {{ ref('base_hudl_daily_fb_vb_production')}}\n\n)\n, shifts as (\n    \n    select * from {{ ref('hudl_grid_formation_shifts') }}\n\n)\n, new_workers as (\n\n    select * from {{ ref('hudl_new_workers') }}\n\n)\n, tier_payouts as (\n\n    select * from {{ ref('hudl_quality_tier_payouts') }}\n\n)\n, t_values as (\n\n    select * from {{ ref('hudl_t_values') }}\n\n)\n, training as (\n    \n    select\n        analyst_id,\n        queue_item_id,\n        case \n            when contains(lower(tagging_view_type), 'football') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'grid') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'volleyball') > 0 then 'Volleyball'\n            when contains(lower(tagging_view_type), 'basketball') > 0 then 'Basketball'\n            else tagging_view_type\n        end as sport_type,\n        case \n            when contains(lower(tagging_view_type), 'grid') > 0 then 'Grid'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'Formation'\n            else tagging_view_type\n        end as tagging_view_type,\n        event_name,\n        analyst_name,\n        shifts.shift_name,\n        email_address,\n        completed_at,\n        to_date(completed_at) as completed_date,\n        dateadd(minutes, tag_time_minutes * -1, completed_at) as started_at,\n        to_date(started_at) as started_date,\n        to_timestamp(NULL) as task_completed_at,\n        to_date(NULL) as task_completed_date,\n        NULL::varchar as current_status,\n        NULL::number as percent_complete,\n        qc_score,\n        tag_time_minutes,\n        NULL as  matching_level,\n        NULL as game_sets,\n        NULL as user_rating,\n        'training' as queue_type,\n        iff(new_workers.email is null, 'return', 'new') as tenure\n    from source_training\n    inner join shifts\n        on to_time(dateadd(minutes, source_training.tag_time_minutes * -1, source_training.completed_at)) >= start_time\n        and to_time(dateadd(minutes, source_training.tag_time_minutes * -1, source_training.completed_at)) < end_time\n    left join new_workers\n        on source_training.email_address = new_workers.email\n\n),\nproduction as (\n\n    select\n        analyst_id,\n        queue_item_id,\n        case \n            when contains(lower(tagging_view_type), 'football') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'grid') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'volleyball') > 0 then 'Volleyball'\n            when contains(lower(tagging_view_type), 'basketball') > 0 then 'Basketball'\n            else tagging_view_type\n        end as sport_type,\n        case \n            when contains(lower(tagging_view_type), 'grid') > 0 then 'Grid'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'Formation'\n            else tagging_view_type\n        end as tagging_view_type,\n        event_name,\n        analyst_name,\n        shifts.shift_name,\n        email_address,\n        completed_at,\n        to_date(completed_at) as completed_date,\n        dateadd(minutes, tag_time_minutes * -1, completed_at) as started_at,\n        to_date(started_at) as started_date,\n        to_timestamp(task_completed_at) as task_completed_at,\n        to_date(task_completed_at) as task_completed_date,\n        current_status,\n        percent_complete,\n        qc_score,\n        tag_time_minutes,\n        matching_level,\n        game_sets,\n        user_rating,\n        'production' as queue_type,\n        iff(new_workers.email is null, 'return', 'new') as tenure\n    from source_production\n    inner join shifts\n        on to_time(dateadd(minutes, source_production.tag_time_minutes * -1, source_production.task_completed_at)) >= start_time\n        and to_time(dateadd(minutes, source_production.tag_time_minutes * -1, source_production.task_completed_at)) < end_time\n    left join new_workers\n        on source_production.email_address = new_workers.email\n\n)\n, union_prod_and_training as (\n\n    select * from training\n    union\n    select * from production\n\n)\n, game_counts as (\n\n    select \n        queue_item_id,\n        sum( iff(lower(tagging_view_type) = 'grid', 1, 0)) as grid_count,\n        sum( iff(lower(tagging_view_type) = 'grid', percent_complete, 0)) as grid_percent_sum,\n        sum( iff(lower(tagging_view_type) = 'formation', 1, 0)) as formation_count,\n        sum( iff(lower(tagging_view_type) = 'formation', percent_complete, 0)) as formation_percent_sum\n    from union_prod_and_training\n    where lower(sport_type) = 'american football'\n    group by 1\n\n)\n, payout_percent_complete as (\n\n    select \n        union_prod_and_training.*,\n        case \n            when grid_count = 1 and formation_count = 0 and percent_complete >= 70 then 100\n            when grid_count = 1 and formation_count = 0 and percent_complete <= 70 then percent_complete\n            when grid_count = 1 and formation_count = 1 then 100\n            when grid_count > 1 and lower(tagging_view_type) = 'grid' then 100 * percent_complete / nullifzero(grid_percent_sum)\n            when formation_count > 1 and lower(tagging_view_type) = 'formation' then 100 * percent_complete / nullifzero(formation_percent_sum)\n            when lower(sport_type) <> 'american football' then percent_complete\n            else NULL\n        end as payout_percent_complete\n    from union_prod_and_training\n    left join game_counts \n        on union_prod_and_training.queue_item_id = game_counts.queue_item_id\n\n)\n, tagging_type_quality_scores as (\n    \n    select\n        queue_type,\n        tagging_view_type,\n        {# What is the binary element here? #}\n        count(qc_score) as quality_scores_count,\n        avg(qc_score) as quality_score_mean,\n        stddev(qc_score) as quality_score_standard_deviation,\n\n        quality_score_mean + 1.96 * ( quality_score_standard_deviation / sqrt(quality_scores_count)) as tagging_type_upper_limit_confidence_interval,\n        quality_score_mean - 1.96 * ( quality_score_standard_deviation / sqrt(quality_scores_count)) as tagging_type_lower_limit_confidence_interval\n\n    from payout_percent_complete\n    group by 1, 2 \n)\n, analyst_tagging_type_counts as (\n\n    select\n        analyst_id,\n        queue_type,\n        tagging_view_type,\n        count(queue_item_id) as task_count,\n        count(qc_score) as quality_scores_count,\n        quality_scores_count - 1 as degrees_of_freedom,\n        avg(qc_score) as quality_score_mean,\n        stddev(qc_score) as quality_score_standard_deviation,\n        sqrt(quality_scores_count) as sample_size_square_root\n    from payout_percent_complete\n    group by 1, 2, 3\n    \n)\n, analyst_tagging_type_quality_scores as (\n\n    select\n        analyst_id,\n        queue_type,\n        tagging_view_type,\n        quality_score_mean,\n        task_count,\n        quality_scores_count,\n        analyst_tagging_type_counts.degrees_of_freedom,\n        t_values.t_value,\n\n        case\n            when analyst_tagging_type_counts.degrees_of_freedom <= 30 then\n                quality_score_mean + t_value * (quality_score_standard_deviation / sample_size_square_root) \n            else\n                quality_score_mean + 1.96 * ( quality_score_standard_deviation / sample_size_square_root)\n        end as analyst_tagging_type_upper_limit_confidence_interval,\n        case\n            when analyst_tagging_type_counts.degrees_of_freedom <= 30 then\n                quality_score_mean - t_value * (quality_score_standard_deviation / sample_size_square_root) \n            else\n                quality_score_mean - t_value * (quality_score_standard_deviation / sample_size_square_root) \n        end as analyst_tagging_type_lower_limit_confidence_interval\n    from analyst_tagging_type_counts\n    left join t_values\n        on analyst_tagging_type_counts.degrees_of_freedom - 1 = t_values.degrees_of_freedom\n\n)\n, quality_score_tiers as (\n\n    select distinct\n        ppc.*,\n\n        case \n            when ppc.qc_score is null and attqs.quality_scores_count <= 1 then \n                case \n                    when ttqs.tagging_type_upper_limit_confidence_interval < .95 then 'bot'\n                    when ttqs.tagging_type_lower_limit_confidence_interval > .98 then 'top'\n                    else 'mid'\n                end\n            when ppc.qc_score is null and attqs.quality_scores_count > 1 then \n                case\n                    when attqs.analyst_tagging_type_upper_limit_confidence_interval < .95 then 'bot'\n                    when attqs.analyst_tagging_type_lower_limit_confidence_interval > .98 then 'top'\n                    else 'mid'\n                end\n            when ppc.qc_score is not null then\n                case\n                    when ppc.qc_score < .95 then 'bot'\n                    when ppc.qc_score > .98 then 'top'\n                    else 'mid'\n                end\n        end as quality_score_tier\n    from payout_percent_complete ppc\n    left join tagging_type_quality_scores ttqs\n        on ppc.queue_type = ttqs.queue_type\n        and ppc.tagging_view_type = ttqs.tagging_view_type\n    left join analyst_tagging_type_quality_scores attqs\n        on ppc.analyst_id = attqs.analyst_id\n        and ppc.queue_type = attqs.queue_type\n        and ppc.tagging_view_type = attqs.tagging_view_type\n\n)\n, payout as (\n\n    select\n        quality_score_tiers.*,\n\n        tier_payouts.payout as quality_payout,\n        tier_payouts.payout * payout_percent_complete/100.0 as final_payout\n    from quality_score_tiers\n    left join tier_payouts \n        on quality_score_tiers.shift_name = tier_payouts.shift\n        and quality_score_tiers.quality_score_tier = tier_payouts.quality_score_tier\n        and lower(quality_score_tiers.tagging_view_type) = tier_payouts.task_type \n        and quality_score_tiers.tenure = tier_payouts.tenure\n        and quality_score_tiers.started_at >= tier_payouts.start_date\n        and quality_score_tiers.started_at < tier_payouts.end_date\n        \n)\n\nselect * from payout", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hudl_daily_fb_vb_training", "model.edw.base_hudl_daily_fb_vb_production", "seed.edw.hudl_grid_formation_shifts", "seed.edw.hudl_new_workers", "seed.edw.hudl_quality_tier_payouts", "seed.edw.hudl_t_values"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "hudl", "football_volleyball_performance"], "unique_id": "model.edw.football_volleyball_performance", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/hudl/football_volleyball_performance.sql", "original_file_path": "models/marts/clients/hudl/football_volleyball_performance.sql", "name": "football_volleyball_performance", "alias": "football_volleyball_performance", "checksum": {"name": "sha256", "checksum": "eac394d413aa0d2457a0f9a37a6b439a1a90cdc1242c937dd63de767fad94e55"}, "tags": [], "refs": [["base_hudl_daily_fb_vb_training"], ["base_hudl_daily_fb_vb_production"], ["hudl_grid_formation_shifts"], ["hudl_new_workers"], ["hudl_quality_tier_payouts"], ["hudl_t_values"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/hudl/football_volleyball_performance.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "hudl", "enabled": true}, "compiled_sql": "\n\nwith source_training as (\n\n    select * from psa_dev.scratch_brana.base_hudl_daily_fb_vb_training\n\n)\n, source_production as (\n\n    select * from psa_dev.scratch_brana.base_hudl_daily_fb_vb_production\n\n)\n, shifts as (\n    \n    select * from psa_dev.scratch_brana.hudl_grid_formation_shifts\n\n)\n, new_workers as (\n\n    select * from psa_dev.scratch_brana.hudl_new_workers\n\n)\n, tier_payouts as (\n\n    select * from psa_dev.scratch_brana.hudl_quality_tier_payouts\n\n)\n, t_values as (\n\n    select * from psa_dev.scratch_brana.hudl_t_values\n\n)\n, training as (\n    \n    select\n        analyst_id,\n        queue_item_id,\n        case \n            when contains(lower(tagging_view_type), 'football') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'grid') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'volleyball') > 0 then 'Volleyball'\n            when contains(lower(tagging_view_type), 'basketball') > 0 then 'Basketball'\n            else tagging_view_type\n        end as sport_type,\n        case \n            when contains(lower(tagging_view_type), 'grid') > 0 then 'Grid'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'Formation'\n            else tagging_view_type\n        end as tagging_view_type,\n        event_name,\n        analyst_name,\n        shifts.shift_name,\n        email_address,\n        completed_at,\n        to_date(completed_at) as completed_date,\n        dateadd(minutes, tag_time_minutes * -1, completed_at) as started_at,\n        to_date(started_at) as started_date,\n        to_timestamp(NULL) as task_completed_at,\n        to_date(NULL) as task_completed_date,\n        NULL::varchar as current_status,\n        NULL::number as percent_complete,\n        qc_score,\n        tag_time_minutes,\n        NULL as  matching_level,\n        NULL as game_sets,\n        NULL as user_rating,\n        'training' as queue_type,\n        iff(new_workers.email is null, 'return', 'new') as tenure\n    from source_training\n    inner join shifts\n        on to_time(dateadd(minutes, source_training.tag_time_minutes * -1, source_training.completed_at)) >= start_time\n        and to_time(dateadd(minutes, source_training.tag_time_minutes * -1, source_training.completed_at)) < end_time\n    left join new_workers\n        on source_training.email_address = new_workers.email\n\n),\nproduction as (\n\n    select\n        analyst_id,\n        queue_item_id,\n        case \n            when contains(lower(tagging_view_type), 'football') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'grid') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'American Football'\n            when contains(lower(tagging_view_type), 'volleyball') > 0 then 'Volleyball'\n            when contains(lower(tagging_view_type), 'basketball') > 0 then 'Basketball'\n            else tagging_view_type\n        end as sport_type,\n        case \n            when contains(lower(tagging_view_type), 'grid') > 0 then 'Grid'\n            when contains(lower(tagging_view_type), 'formation') > 0 then 'Formation'\n            else tagging_view_type\n        end as tagging_view_type,\n        event_name,\n        analyst_name,\n        shifts.shift_name,\n        email_address,\n        completed_at,\n        to_date(completed_at) as completed_date,\n        dateadd(minutes, tag_time_minutes * -1, completed_at) as started_at,\n        to_date(started_at) as started_date,\n        to_timestamp(task_completed_at) as task_completed_at,\n        to_date(task_completed_at) as task_completed_date,\n        current_status,\n        percent_complete,\n        qc_score,\n        tag_time_minutes,\n        matching_level,\n        game_sets,\n        user_rating,\n        'production' as queue_type,\n        iff(new_workers.email is null, 'return', 'new') as tenure\n    from source_production\n    inner join shifts\n        on to_time(dateadd(minutes, source_production.tag_time_minutes * -1, source_production.task_completed_at)) >= start_time\n        and to_time(dateadd(minutes, source_production.tag_time_minutes * -1, source_production.task_completed_at)) < end_time\n    left join new_workers\n        on source_production.email_address = new_workers.email\n\n)\n, union_prod_and_training as (\n\n    select * from training\n    union\n    select * from production\n\n)\n, game_counts as (\n\n    select \n        queue_item_id,\n        sum( iff(lower(tagging_view_type) = 'grid', 1, 0)) as grid_count,\n        sum( iff(lower(tagging_view_type) = 'grid', percent_complete, 0)) as grid_percent_sum,\n        sum( iff(lower(tagging_view_type) = 'formation', 1, 0)) as formation_count,\n        sum( iff(lower(tagging_view_type) = 'formation', percent_complete, 0)) as formation_percent_sum\n    from union_prod_and_training\n    where lower(sport_type) = 'american football'\n    group by 1\n\n)\n, payout_percent_complete as (\n\n    select \n        union_prod_and_training.*,\n        case \n            when grid_count = 1 and formation_count = 0 and percent_complete >= 70 then 100\n            when grid_count = 1 and formation_count = 0 and percent_complete <= 70 then percent_complete\n            when grid_count = 1 and formation_count = 1 then 100\n            when grid_count > 1 and lower(tagging_view_type) = 'grid' then 100 * percent_complete / nullifzero(grid_percent_sum)\n            when formation_count > 1 and lower(tagging_view_type) = 'formation' then 100 * percent_complete / nullifzero(formation_percent_sum)\n            when lower(sport_type) <> 'american football' then percent_complete\n            else NULL\n        end as payout_percent_complete\n    from union_prod_and_training\n    left join game_counts \n        on union_prod_and_training.queue_item_id = game_counts.queue_item_id\n\n)\n, tagging_type_quality_scores as (\n    \n    select\n        queue_type,\n        tagging_view_type,\n        \n        count(qc_score) as quality_scores_count,\n        avg(qc_score) as quality_score_mean,\n        stddev(qc_score) as quality_score_standard_deviation,\n\n        quality_score_mean + 1.96 * ( quality_score_standard_deviation / sqrt(quality_scores_count)) as tagging_type_upper_limit_confidence_interval,\n        quality_score_mean - 1.96 * ( quality_score_standard_deviation / sqrt(quality_scores_count)) as tagging_type_lower_limit_confidence_interval\n\n    from payout_percent_complete\n    group by 1, 2 \n)\n, analyst_tagging_type_counts as (\n\n    select\n        analyst_id,\n        queue_type,\n        tagging_view_type,\n        count(queue_item_id) as task_count,\n        count(qc_score) as quality_scores_count,\n        quality_scores_count - 1 as degrees_of_freedom,\n        avg(qc_score) as quality_score_mean,\n        stddev(qc_score) as quality_score_standard_deviation,\n        sqrt(quality_scores_count) as sample_size_square_root\n    from payout_percent_complete\n    group by 1, 2, 3\n    \n)\n, analyst_tagging_type_quality_scores as (\n\n    select\n        analyst_id,\n        queue_type,\n        tagging_view_type,\n        quality_score_mean,\n        task_count,\n        quality_scores_count,\n        analyst_tagging_type_counts.degrees_of_freedom,\n        t_values.t_value,\n\n        case\n            when analyst_tagging_type_counts.degrees_of_freedom <= 30 then\n                quality_score_mean + t_value * (quality_score_standard_deviation / sample_size_square_root) \n            else\n                quality_score_mean + 1.96 * ( quality_score_standard_deviation / sample_size_square_root)\n        end as analyst_tagging_type_upper_limit_confidence_interval,\n        case\n            when analyst_tagging_type_counts.degrees_of_freedom <= 30 then\n                quality_score_mean - t_value * (quality_score_standard_deviation / sample_size_square_root) \n            else\n                quality_score_mean - t_value * (quality_score_standard_deviation / sample_size_square_root) \n        end as analyst_tagging_type_lower_limit_confidence_interval\n    from analyst_tagging_type_counts\n    left join t_values\n        on analyst_tagging_type_counts.degrees_of_freedom - 1 = t_values.degrees_of_freedom\n\n)\n, quality_score_tiers as (\n\n    select distinct\n        ppc.*,\n\n        case \n            when ppc.qc_score is null and attqs.quality_scores_count <= 1 then \n                case \n                    when ttqs.tagging_type_upper_limit_confidence_interval < .95 then 'bot'\n                    when ttqs.tagging_type_lower_limit_confidence_interval > .98 then 'top'\n                    else 'mid'\n                end\n            when ppc.qc_score is null and attqs.quality_scores_count > 1 then \n                case\n                    when attqs.analyst_tagging_type_upper_limit_confidence_interval < .95 then 'bot'\n                    when attqs.analyst_tagging_type_lower_limit_confidence_interval > .98 then 'top'\n                    else 'mid'\n                end\n            when ppc.qc_score is not null then\n                case\n                    when ppc.qc_score < .95 then 'bot'\n                    when ppc.qc_score > .98 then 'top'\n                    else 'mid'\n                end\n        end as quality_score_tier\n    from payout_percent_complete ppc\n    left join tagging_type_quality_scores ttqs\n        on ppc.queue_type = ttqs.queue_type\n        and ppc.tagging_view_type = ttqs.tagging_view_type\n    left join analyst_tagging_type_quality_scores attqs\n        on ppc.analyst_id = attqs.analyst_id\n        and ppc.queue_type = attqs.queue_type\n        and ppc.tagging_view_type = attqs.tagging_view_type\n\n)\n, payout as (\n\n    select\n        quality_score_tiers.*,\n\n        tier_payouts.payout as quality_payout,\n        tier_payouts.payout * payout_percent_complete/100.0 as final_payout\n    from quality_score_tiers\n    left join tier_payouts \n        on quality_score_tiers.shift_name = tier_payouts.shift\n        and quality_score_tiers.quality_score_tier = tier_payouts.quality_score_tier\n        and lower(quality_score_tiers.tagging_view_type) = tier_payouts.task_type \n        and quality_score_tiers.tenure = tier_payouts.tenure\n        and quality_score_tiers.started_at >= tier_payouts.start_date\n        and quality_score_tiers.started_at < tier_payouts.end_date\n        \n)\n\nselect * from payout", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.football_volleyball_performance"}, "model.edw.soccer_performance": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hudl_daily_player_tracking')}}\n),\nquality_scores as (\n    select * from {{ ref('base_hudl_quality_scores')}}\n),\nshift_source as (\n    select * from {{ ref('hudl_soccer_shifts') }}\n),\nquality_modifiers as (\n    select * from {{ ref('hudl_soccer_quality_modifiers')}}\n),\nshift_info as (\n    select\n        shift_name,\n        to_time(start_time) as start_time,\n        to_time(end_time) as end_time,\n        per_hour_pay_amount_usd\n    from shift_source\n),\nadjust_times as (\n    select\n        source.*,\n        to_date(completed_at) as completed_date,\n        dateadd(minutes, tag_time_minutes * -1, completed_at) as started_at,\n        to_date(started_at) as started_date,\n        to_time(started_at) as started_time\n    from source\n),\nshifts_modifiers as (\n    select\n        adjust_times.analyst_id,\n        adjust_times.analyst_name,\n        adjust_times.email_address,\n        adjust_times.child_job_id,\n        adjust_times.master_job_id,\n        adjust_times.job_name,\n        adjust_times.event_name,\n        adjust_times.current_status,\n        adjust_times.completed_at,\n        adjust_times.completed_date,\n        adjust_times.started_at,\n        adjust_times.started_date,\n        adjust_times.started_time,\n        adjust_times.tag_time_minutes,\n        adjust_times.percent_complete,\n        shift_info.per_hour_pay_amount_usd as per_hour_rate,\n        shift_info.shift_name,\n        quality_scores.grade as quality_score,\n        quality_modifiers.percent_modifier as quality_modifier,\n        iff(adjust_times.percent_complete = 100, 1, 0) as completion_modifier,\n        completion_modifier * quality_modifier * per_hour_rate as worker_pay_usd\n    from adjust_times\n    inner join shift_info\n        on adjust_times.started_time between shift_info.start_time and shift_info.end_time\n    inner join quality_scores\n        on adjust_times.child_job_id = quality_scores.child_job_id\n    inner join quality_modifiers\n        on quality_scores.grade = quality_modifiers.quality_grade\n\n)\nselect * from shifts_modifiers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hudl_daily_player_tracking", "model.edw.base_hudl_quality_scores", "seed.edw.hudl_soccer_shifts", "seed.edw.hudl_soccer_quality_modifiers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "hudl", "soccer_performance"], "unique_id": "model.edw.soccer_performance", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/hudl/soccer_performance.sql", "original_file_path": "models/marts/clients/hudl/soccer_performance.sql", "name": "soccer_performance", "alias": "soccer_performance", "checksum": {"name": "sha256", "checksum": "7f4f6e8254916cd108cccf8cab3b74acad578bd15c23be7ea24231521dfa7969"}, "tags": [], "refs": [["base_hudl_daily_player_tracking"], ["base_hudl_quality_scores"], ["hudl_soccer_shifts"], ["hudl_soccer_quality_modifiers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/hudl/soccer_performance.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "hudl", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hudl_daily_player_tracking\n),\nquality_scores as (\n    select * from psa_dev.scratch_brana.base_hudl_quality_scores\n),\nshift_source as (\n    select * from psa_dev.scratch_brana.hudl_soccer_shifts\n),\nquality_modifiers as (\n    select * from psa_dev.scratch_brana.hudl_soccer_quality_modifiers\n),\nshift_info as (\n    select\n        shift_name,\n        to_time(start_time) as start_time,\n        to_time(end_time) as end_time,\n        per_hour_pay_amount_usd\n    from shift_source\n),\nadjust_times as (\n    select\n        source.*,\n        to_date(completed_at) as completed_date,\n        dateadd(minutes, tag_time_minutes * -1, completed_at) as started_at,\n        to_date(started_at) as started_date,\n        to_time(started_at) as started_time\n    from source\n),\nshifts_modifiers as (\n    select\n        adjust_times.analyst_id,\n        adjust_times.analyst_name,\n        adjust_times.email_address,\n        adjust_times.child_job_id,\n        adjust_times.master_job_id,\n        adjust_times.job_name,\n        adjust_times.event_name,\n        adjust_times.current_status,\n        adjust_times.completed_at,\n        adjust_times.completed_date,\n        adjust_times.started_at,\n        adjust_times.started_date,\n        adjust_times.started_time,\n        adjust_times.tag_time_minutes,\n        adjust_times.percent_complete,\n        shift_info.per_hour_pay_amount_usd as per_hour_rate,\n        shift_info.shift_name,\n        quality_scores.grade as quality_score,\n        quality_modifiers.percent_modifier as quality_modifier,\n        iff(adjust_times.percent_complete = 100, 1, 0) as completion_modifier,\n        completion_modifier * quality_modifier * per_hour_rate as worker_pay_usd\n    from adjust_times\n    inner join shift_info\n        on adjust_times.started_time between shift_info.start_time and shift_info.end_time\n    inner join quality_scores\n        on adjust_times.child_job_id = quality_scores.child_job_id\n    inner join quality_modifiers\n        on quality_scores.grade = quality_modifiers.quality_grade\n\n)\nselect * from shifts_modifiers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.soccer_performance"}, "model.edw.abyss_asset_stages": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_abyss_solutions_v7') }}\n\n)\n, asset_stages as (\n\n    select\n        dataset_id,\n        cw_email,\n        task_started_at,\n        to_date(task_started_at) as task_started_date,\n        task_submitted_at,\n        to_date(task_submitted_at) as task_submitted_date,\n        asset_id,\n        from_stage_number,\n        from_stage_name,\n        to_stage_number,\n        to_stage_name,\n        task_type,\n        stage_duration,\n        asset_annotation_running_total,\n        ifnull(\n            abs(asset_annotation_running_total - lag(asset_annotation_running_total, 1) over (partition by asset_id order by task_submitted_at)),\n            asset_annotation_running_total\n        ) as annotation_count,\n        workflow_id\n    from source\n)\nselect * from asset_stages", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "abyss", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "abyss", "abyss_asset_stages"], "unique_id": "model.edw.abyss_asset_stages", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/abyss/abyss_asset_stages.sql", "original_file_path": "models/marts/clients/abyss/abyss_asset_stages.sql", "name": "abyss_asset_stages", "alias": "abyss_asset_stages", "checksum": {"name": "sha256", "checksum": "26fdc04b7373536479ccfc842fd326816583ea11cd3d14c50bbdc0f5cafddc3d"}, "tags": [], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "asset stage change events for abyss", "columns": {"dataset_id": {"name": "dataset_id", "description": "id of the v7 dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cw_email": {"name": "cw_email", "description": "email of the party responsible for the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date": {"name": "task_started_date", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_submitted_at": {"name": "task_submitted_at", "description": "timestamp of the asset stage change event; with asset_id it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_submitted_date": {"name": "task_submitted_date", "description": "date of the asset stage change event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_id": {"name": "asset_id", "description": "id of the asset; with task_submitted_at it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_number": {"name": "from_stage_number", "description": "stage number of the asset prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_name": {"name": "from_stage_name", "description": "stage name of the asset prior to the event; appears to be always null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_number": {"name": "to_stage_number", "description": "stage number of the asset after the event; can be null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_name": {"name": "to_stage_name", "description": "stage name of the asset after the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_duration": {"name": "stage_duration", "description": "duration of time the asset was in the from_stage prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_annotation_running_total": {"name": "asset_annotation_running_total", "description": "total number of annotations completed on this asset up to the point of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation_count": {"name": "annotation_count", "description": "number of annotations completed in the from_stage", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/abyss/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/abyss/abyss_asset_stages.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "abyss", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_abyss_solutions_v7\n\n)\n, asset_stages as (\n\n    select\n        dataset_id,\n        cw_email,\n        task_started_at,\n        to_date(task_started_at) as task_started_date,\n        task_submitted_at,\n        to_date(task_submitted_at) as task_submitted_date,\n        asset_id,\n        from_stage_number,\n        from_stage_name,\n        to_stage_number,\n        to_stage_name,\n        task_type,\n        stage_duration,\n        asset_annotation_running_total,\n        ifnull(\n            abs(asset_annotation_running_total - lag(asset_annotation_running_total, 1) over (partition by asset_id order by task_submitted_at)),\n            asset_annotation_running_total\n        ) as annotation_count,\n        workflow_id\n    from source\n)\nselect * from asset_stages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.abyss_asset_stages"}, "model.edw.abyss_datasets": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_abyss_solutions_v7') }}\n\n)\n, datasets as (\n\n    select distinct\n        dataset_id,\n        dataset_name,\n        dataset_name_slug,\n        dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n\n        max(dataset_inserted_at)          as dataset_inserted_at,\n        to_date(max(dataset_inserted_at)) as dataset_inserted_date,\n        max(dataset_updated_at)           as dataset_updated_at,\n        to_date(max(dataset_updated_at))  as dataset_updated_date,\n        max(dataset_progress)             as dataset_progress,\n        max(dataset_asset_count)          as dataset_asset_count,\n        max(dataset_annotation_count)     as dataset_annotation_count,\n        max(dataset_annotators_count)     as dataset_annotators_count,\n        max(dataset_classes_count)        as dataset_classes_count,\n        max(dataset_videos_count)         as dataset_videos_count\n        \n    from source\n    group by 1,2,3,4,5,6\n\n)\nselect * from datasets", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "abyss", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "abyss", "abyss_datasets"], "unique_id": "model.edw.abyss_datasets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/abyss/abyss_datasets.sql", "original_file_path": "models/marts/clients/abyss/abyss_datasets.sql", "name": "abyss_datasets", "alias": "abyss_datasets", "checksum": {"name": "sha256", "checksum": "b09940f4fb0d2ba1f27526b6b863ca2af4f8bd718e4d4631659c2372ca8d9d08"}, "tags": [], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "v7 datasets for abyss", "columns": {"dataset_id": {"name": "dataset_id", "description": "unique id of the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name": {"name": "dataset_name", "description": "name of the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name_slug": {"name": "dataset_name_slug", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_owner_id": {"name": "dataset_owner_id", "description": "id of the dataset owner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_id": {"name": "cloudfactory_workstream_id", "description": "id of the cloudfactory workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_api_key": {"name": "cloudfactory_workstream_api_key", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_inserted_at": {"name": "dataset_inserted_at", "description": "timestamp the dataset was loaded to v7", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_inserted_date": {"name": "dataset_inserted_date", "description": "date the dataset was loaded to v7", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_updated_at": {"name": "dataset_updated_at", "description": "timestamp of most recent change to the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_updated_date": {"name": "dataset_updated_date", "description": "date of most recent change to the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_progress": {"name": "dataset_progress", "description": "unknown; possibly the percent of total images that have completed annotation and review", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_asset_count": {"name": "dataset_asset_count", "description": "number of image assets in the dataset (please verify)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotation_count": {"name": "dataset_annotation_count", "description": "number of annotations on the dataset across all assets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotators_count": {"name": "dataset_annotators_count", "description": "total number of annotators who have worked on the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_classes_count": {"name": "dataset_classes_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_videos_count": {"name": "dataset_videos_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/abyss/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/abyss/abyss_datasets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "abyss", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_abyss_solutions_v7\n\n)\n, datasets as (\n\n    select distinct\n        dataset_id,\n        dataset_name,\n        dataset_name_slug,\n        dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n\n        max(dataset_inserted_at)          as dataset_inserted_at,\n        to_date(max(dataset_inserted_at)) as dataset_inserted_date,\n        max(dataset_updated_at)           as dataset_updated_at,\n        to_date(max(dataset_updated_at))  as dataset_updated_date,\n        max(dataset_progress)             as dataset_progress,\n        max(dataset_asset_count)          as dataset_asset_count,\n        max(dataset_annotation_count)     as dataset_annotation_count,\n        max(dataset_annotators_count)     as dataset_annotators_count,\n        max(dataset_classes_count)        as dataset_classes_count,\n        max(dataset_videos_count)         as dataset_videos_count\n        \n    from source\n    group by 1,2,3,4,5,6\n\n)\nselect * from datasets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.abyss_datasets"}, "model.edw.vw_abyss_qaqc_sample": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith stages as (\n\n    select * from {{ ref('abyss_asset_stages') }}\n\n)\n, datasets as (\n\n    select * from {{ ref('abyss_datasets') }}\n\n)\n, prep as (\n\n    select\n        datasets.dataset_id,\n        datasets.dataset_name,\n        stages.cw_email,\n        stages.task_started_at,\n        stages.task_submitted_at,\n        stages.asset_id,\n        stages.to_stage_number,\n        stages.task_type,\n        stages.annotation_count,\n        stages.stage_duration\n    from stages\n    inner join datasets\n        on stages.dataset_id = datasets.dataset_id\n    where \n        stages.to_stage_number = 5\n        and contains(stages.cw_email, '@es.cloudfactory.com') > 0\n  \n)\n{# (Z-score)2 * StdDev*(1-StdDev) / (margin of error)2 #}\nselect * from prep", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.abyss_asset_stages", "model.edw.abyss_datasets"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "abyss", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "abyss", "vw_abyss_qaqc_sample"], "unique_id": "model.edw.vw_abyss_qaqc_sample", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/abyss/vw_abyss_qaqc_sample.sql", "original_file_path": "models/marts/clients/abyss/vw_abyss_qaqc_sample.sql", "name": "vw_abyss_qaqc_sample", "alias": "vw_abyss_qaqc_sample", "checksum": {"name": "sha256", "checksum": "da2c4b18ae09af9ae582ffb2c5242a5c57ed15125d9946c5a04fbadda519fa0f"}, "tags": [], "refs": [["abyss_asset_stages"], ["abyss_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/vw_abyss_qaqc_sample.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "abyss", "enabled": true}, "compiled_sql": "\n\nwith stages as (\n\n    select * from analytics_dev.scratch_brana.abyss_asset_stages\n\n)\n, datasets as (\n\n    select * from analytics_dev.scratch_brana.abyss_datasets\n\n)\n, prep as (\n\n    select\n        datasets.dataset_id,\n        datasets.dataset_name,\n        stages.cw_email,\n        stages.task_started_at,\n        stages.task_submitted_at,\n        stages.asset_id,\n        stages.to_stage_number,\n        stages.task_type,\n        stages.annotation_count,\n        stages.stage_duration\n    from stages\n    inner join datasets\n        on stages.dataset_id = datasets.dataset_id\n    where \n        stages.to_stage_number = 5\n        and contains(stages.cw_email, '@es.cloudfactory.com') > 0\n  \n)\n\nselect * from prep", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.vw_abyss_qaqc_sample"}, "model.edw.video_walks": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source_walk_events as (\n\n    select * from {{ ref('stg_video_walk_events' ) }}\n\n)\n, source_video_walks as (\n\n    select * from {{ ref('base_struction_site_video_walks') }}\n\n)\n, pivoted as (\n    select\n        video_walk_id,\n  \n        max(\n            case\n                when event_name = 'uploaded' then event_at\n                else NULL\n            end\n        ) as uploaded_at,\n        -- recon_completed_at seems to map to path_uploaded_at in cf_video_walks\n        max(\n            case\n                when event_name = 'recon_completed' then event_at\n                else NULL\n            end\n        ) as recon_completed_at,\n        max(\n            case\n                when event_name = 'classification_completed' then event_at\n                else NULL\n            end\n        ) as classification_completed_at,\n        min(\n            case\n                when event_name = 'edit_started' then event_at\n                else NULL\n            end\n        ) as edit_started_at,\n        max(\n            case\n                when event_name = 'edit_completed' then event_at\n                else NULL\n            end\n        ) as edit_completed_at,\n        min(\n            case\n                when event_name = 'qa_review_started' then event_at\n                else NULL\n            end\n        ) as qa_review_started_at,\n        max(\n            case\n                when event_name = 'completed' then event_at\n                else NULL\n            end\n        ) as completed_at,\n        datediff(seconds, \n            uploaded_at, \n            ifnull(classification_completed_at, recon_completed_at)\n        ) as upload_to_classification_complete_duration,\n        datediff(seconds, \n            ifnull(classification_completed_at, recon_completed_at), \n            edit_started_at\n        ) as available_to_edit_start_duration,\n        datediff(seconds, \n            edit_started_at, \n            edit_completed_at\n        ) as first_edit_to_edit_complete_duration,\n        iff(\n            edit_completed_at is not null and qa_review_started_at is not null, \n            datediff(seconds, edit_completed_at, qa_review_started_at), \n            NULL\n        ) as edit_complete_to_qa_start_duration,\n        iff(\n            qa_review_started_at is not null and completed_at is not null, \n            datediff(seconds, qa_review_started_at, completed_at), \n            NULL\n        ) as qa_start_to_task_completed_duration,\n        datediff(seconds, \n            uploaded_at, \n            completed_at\n        ) as total_turnaround_duration, \n        datediff(seconds, \n            ifnull(classification_completed_at, recon_completed_at), \n            completed_at\n        ) as total_cf_duration,\n        array_agg(distinct \n            case \n                when to_state = 'editing' then handler_id\n                else NULL\n            end\n        ) as editor_list,\n        count(\n            case\n                when to_state = 'editing' then 1\n                else NULL\n            end\n        ) as total_edit_sessions,\n        sum(\n            iff(to_state = 'editing', to_next_event_duration, NULL)\n        ) as editing_time_sum,\n        count(distinct \n            case\n                when to_state = 'editing' then handler_id\n               \n                else NULL\n            end\n        ) as unique_editor_count,\n        array_agg(distinct \n            case \n                when to_state = 'qa_reviewing' then handler_id\n                else NULL\n            end\n        ) as qa_reviewer_list,\n        count(\n            case\n                when to_state = 'qa_reviewing' then 1\n                else NULL\n            end\n        ) as total_qa_review_sessions,\n        sum(\n            iff(to_state = 'qa_reviewing', to_next_event_duration, NULL)\n        ) as qa_reviewing_time_sum,\n        count(distinct \n            case\n                when to_state = 'qa_reviewing' then handler_id\n                else NULL\n            end\n        ) as unique_qa_reviewer_count,\n        boolor_agg(\n          iff(to_state = 'problematic', true, false)\n        ) as has_issue,\n        iff(has_issue=true, 1, 0) as issue_found_count,\n\n        iff( \n            to_time(uploaded_at) >= '01:00',\n            timestamp_from_parts(dateadd(day, 1, to_date(uploaded_at)), '12:00'),\n            timestamp_from_parts(to_date(uploaded_at), '12:00')\n        ) as turnaround_deadline_at,\n\n        to_date(turnaround_deadline_at) as turnaround_deadline_date,\n        case\n            when date_part(dayofweek, turnaround_deadline_date) = 1 \n                then dateadd(days, -3, turnaround_deadline_date)\n            \n            else dateadd(days, -1, turnaround_deadline_date)\n        end as upload_effective_date,\n        case\n          when completed_at <= turnaround_deadline_at then true\n          else false\n        end as has_met_turnaround_deadline\n        \n    from source_walk_events \n    group by 1\n)\n, walks as (\n  select\n    video_walk_id,\n    video_walk_uuid,\n    hil_difficulty as difficulty_level,\n    node_count,\n    node_count * 5 as frame_count\n  from source_video_walks\n)\n, joined as (\n    select\n        pivoted.*,\n        walks.video_walk_uuid,\n        walks.difficulty_level,\n        walks.node_count,\n        walks.frame_count\n    from pivoted\n    inner join walks\n        on pivoted.video_walk_id = walks.video_walk_id\n)\nselect * from joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_video_walk_events", "model.edw.base_struction_site_video_walks"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "analytics", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "struction_site", "video_walks"], "unique_id": "model.edw.video_walks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/struction_site/video_walks.sql", "original_file_path": "models/marts/clients/struction_site/video_walks.sql", "name": "video_walks", "alias": "video_walks", "checksum": {"name": "sha256", "checksum": "5ba2642e23f28e9e47a1f1c947546a740130904e97d6590df7821ed9f0d2c54e"}, "tags": ["struction_site"], "refs": [["stg_video_walk_events"], ["base_struction_site_video_walks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/clients/struction_site/schema.yml", "build_path": "target/compiled/edw/models/marts/clients/struction_site/video_walks.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "struction_site", "enabled": true, "tags": "struction_site"}, "compiled_sql": "\n\nwith source_walk_events as (\n\n    select * from psa_dev.scratch_brana.stg_video_walk_events\n\n)\n, source_video_walks as (\n\n    select * from psa_dev.scratch_brana.base_struction_site_video_walks\n\n)\n, pivoted as (\n    select\n        video_walk_id,\n  \n        max(\n            case\n                when event_name = 'uploaded' then event_at\n                else NULL\n            end\n        ) as uploaded_at,\n        -- recon_completed_at seems to map to path_uploaded_at in cf_video_walks\n        max(\n            case\n                when event_name = 'recon_completed' then event_at\n                else NULL\n            end\n        ) as recon_completed_at,\n        max(\n            case\n                when event_name = 'classification_completed' then event_at\n                else NULL\n            end\n        ) as classification_completed_at,\n        min(\n            case\n                when event_name = 'edit_started' then event_at\n                else NULL\n            end\n        ) as edit_started_at,\n        max(\n            case\n                when event_name = 'edit_completed' then event_at\n                else NULL\n            end\n        ) as edit_completed_at,\n        min(\n            case\n                when event_name = 'qa_review_started' then event_at\n                else NULL\n            end\n        ) as qa_review_started_at,\n        max(\n            case\n                when event_name = 'completed' then event_at\n                else NULL\n            end\n        ) as completed_at,\n        datediff(seconds, \n            uploaded_at, \n            ifnull(classification_completed_at, recon_completed_at)\n        ) as upload_to_classification_complete_duration,\n        datediff(seconds, \n            ifnull(classification_completed_at, recon_completed_at), \n            edit_started_at\n        ) as available_to_edit_start_duration,\n        datediff(seconds, \n            edit_started_at, \n            edit_completed_at\n        ) as first_edit_to_edit_complete_duration,\n        iff(\n            edit_completed_at is not null and qa_review_started_at is not null, \n            datediff(seconds, edit_completed_at, qa_review_started_at), \n            NULL\n        ) as edit_complete_to_qa_start_duration,\n        iff(\n            qa_review_started_at is not null and completed_at is not null, \n            datediff(seconds, qa_review_started_at, completed_at), \n            NULL\n        ) as qa_start_to_task_completed_duration,\n        datediff(seconds, \n            uploaded_at, \n            completed_at\n        ) as total_turnaround_duration, \n        datediff(seconds, \n            ifnull(classification_completed_at, recon_completed_at), \n            completed_at\n        ) as total_cf_duration,\n        array_agg(distinct \n            case \n                when to_state = 'editing' then handler_id\n                else NULL\n            end\n        ) as editor_list,\n        count(\n            case\n                when to_state = 'editing' then 1\n                else NULL\n            end\n        ) as total_edit_sessions,\n        sum(\n            iff(to_state = 'editing', to_next_event_duration, NULL)\n        ) as editing_time_sum,\n        count(distinct \n            case\n                when to_state = 'editing' then handler_id\n               \n                else NULL\n            end\n        ) as unique_editor_count,\n        array_agg(distinct \n            case \n                when to_state = 'qa_reviewing' then handler_id\n                else NULL\n            end\n        ) as qa_reviewer_list,\n        count(\n            case\n                when to_state = 'qa_reviewing' then 1\n                else NULL\n            end\n        ) as total_qa_review_sessions,\n        sum(\n            iff(to_state = 'qa_reviewing', to_next_event_duration, NULL)\n        ) as qa_reviewing_time_sum,\n        count(distinct \n            case\n                when to_state = 'qa_reviewing' then handler_id\n                else NULL\n            end\n        ) as unique_qa_reviewer_count,\n        boolor_agg(\n          iff(to_state = 'problematic', true, false)\n        ) as has_issue,\n        iff(has_issue=true, 1, 0) as issue_found_count,\n\n        iff( \n            to_time(uploaded_at) >= '01:00',\n            timestamp_from_parts(dateadd(day, 1, to_date(uploaded_at)), '12:00'),\n            timestamp_from_parts(to_date(uploaded_at), '12:00')\n        ) as turnaround_deadline_at,\n\n        to_date(turnaround_deadline_at) as turnaround_deadline_date,\n        case\n            when date_part(dayofweek, turnaround_deadline_date) = 1 \n                then dateadd(days, -3, turnaround_deadline_date)\n            \n            else dateadd(days, -1, turnaround_deadline_date)\n        end as upload_effective_date,\n        case\n          when completed_at <= turnaround_deadline_at then true\n          else false\n        end as has_met_turnaround_deadline\n        \n    from source_walk_events \n    group by 1\n)\n, walks as (\n  select\n    video_walk_id,\n    video_walk_uuid,\n    hil_difficulty as difficulty_level,\n    node_count,\n    node_count * 5 as frame_count\n  from source_video_walks\n)\n, joined as (\n    select\n        pivoted.*,\n        walks.video_walk_uuid,\n        walks.difficulty_level,\n        walks.node_count,\n        walks.frame_count\n    from pivoted\n    inner join walks\n        on pivoted.video_walk_id = walks.video_walk_id\n)\nselect * from joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.video_walks"}, "model.edw.video_walk_sessions": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source_walk_events as (\n\n    select * from {{ ref('stg_video_walk_events') }}\n\n)\n, source_video_walks as (\n\n    select * from {{ ref('base_struction_site_video_walks') }}\n)\n, filtered_events as (\n\n    select\n        *\n    from source_walk_events\n    where to_state in (\n            'editing',\n            'qa_reviewing'\n    )\n)\n, allocated_measures as (\n\n    select\n        source_video_walks.video_walk_uuid,\n        filtered_events.video_walk_id,\n        filtered_events.handler_id,\n        filtered_events.from_state,\n        filtered_events.to_state,\n        filtered_events.event_at as event_start_at,\n        filtered_events.event_name,\n        dateadd(seconds, filtered_events.to_next_event_duration, filtered_events.event_at) as event_end_at,\n        filtered_events.to_next_event_duration as event_duration,\n\n        event_duration / \n            sum(filtered_events.to_next_event_duration) over (partition by filtered_events.video_walk_id) as worker_activity_contribution,\n        worker_activity_contribution * source_video_walks.node_count as worker_attributed_nodes_count\n    from filtered_events\n    left join source_video_walks\n        on filtered_events.video_walk_id = source_video_walks.video_walk_id\n\n)\nselect * from allocated_measures", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_video_walk_events", "model.edw.base_struction_site_video_walks"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "analytics", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "clients", "struction_site", "video_walk_sessions"], "unique_id": "model.edw.video_walk_sessions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/clients/struction_site/video_walk_sessions.sql", "original_file_path": "models/marts/clients/struction_site/video_walk_sessions.sql", "name": "video_walk_sessions", "alias": "video_walk_sessions", "checksum": {"name": "sha256", "checksum": "8c637c7077e09440bcbd1463d7fee5ab7aee5fda65e31abf02567190306049b4"}, "tags": ["struction_site"], "refs": [["stg_video_walk_events"], ["base_struction_site_video_walks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/struction_site/video_walk_sessions.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "struction_site", "enabled": true, "tags": "struction_site"}, "compiled_sql": "\n\nwith source_walk_events as (\n\n    select * from psa_dev.scratch_brana.stg_video_walk_events\n\n)\n, source_video_walks as (\n\n    select * from psa_dev.scratch_brana.base_struction_site_video_walks\n)\n, filtered_events as (\n\n    select\n        *\n    from source_walk_events\n    where to_state in (\n            'editing',\n            'qa_reviewing'\n    )\n)\n, allocated_measures as (\n\n    select\n        source_video_walks.video_walk_uuid,\n        filtered_events.video_walk_id,\n        filtered_events.handler_id,\n        filtered_events.from_state,\n        filtered_events.to_state,\n        filtered_events.event_at as event_start_at,\n        filtered_events.event_name,\n        dateadd(seconds, filtered_events.to_next_event_duration, filtered_events.event_at) as event_end_at,\n        filtered_events.to_next_event_duration as event_duration,\n\n        event_duration / \n            sum(filtered_events.to_next_event_duration) over (partition by filtered_events.video_walk_id) as worker_activity_contribution,\n        worker_activity_contribution * source_video_walks.node_count as worker_attributed_nodes_count\n    from filtered_events\n    left join source_video_walks\n        on filtered_events.video_walk_id = source_video_walks.video_walk_id\n\n)\nselect * from allocated_measures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.video_walk_sessions"}, "model.edw.dim_sale": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_salesforce_opportunity') }}\n),\nrenamed as (\n    select \n        sale_key,\n        opportunity_id as sale_id,\n        ifnull(channel, 'Unknown') as channel,\n        ifnull(delivery_method, 'Unknown') as delivery_method,\n        ifnull(eu_personal_data, 'Unknown') as eu_personal_data,\n        ifnull(expansion_likelihood, 'Unknown') as expansion_likelihood,\n        ifnull(expansion_type, 'Unknown') as expansion_type,\n        ifnull(forecast_category, 'Unknown') as forecast_category,\n        ifnull(lead_category, 'Unknown') as lead_category,\n        ifnull(lead_source, 'Unknown') as lead_source,\n        ifnull(lead_source_detail, 'Unknown') as lead_source_detail,\n        ifnull(opportunity_name, 'Unknown') as sale_name,\n        ifnull(package_type, 'Unknown') as package_type,\n        ifnull(primary_tool, 'Unknown') as primary_tool,\n        ifnull(product_type, 'Unknown') as product_type,\n        ifnull(region_definition, 'Unknown') as region_definition,\n        ifnull(relationship, 'Unknown') as relationship,\n        ifnull(stage_name, 'Unknown') as stage_name,\n        ifnull(tech_application, 'Unknown') as tech_application,\n        ifnull(upgrade_reason, 'Unknown') as upgrade_reason,\n        ifnull(use_case_category, 'Unknown') as use_case_category,\n        ifnull(use_case, 'Unknown') as use_case\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_salesforce_opportunity"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sales", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "sales", "dimensions", "dim_sale"], "unique_id": "model.edw.dim_sale", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/sales/dimensions/dim_sale.sql", "original_file_path": "models/marts/sales/dimensions/dim_sale.sql", "name": "dim_sale", "alias": "dim_sale", "checksum": {"name": "sha256", "checksum": "5693f63335602a4baf6718f6af2e87f2aeea3731298985767f76b6c7b06ce77d"}, "tags": [], "refs": [["stg_hist_salesforce_opportunity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/sales/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/sales/dimensions/dim_sale.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "sales", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_salesforce_opportunity\n),\nrenamed as (\n    select \n        sale_key,\n        opportunity_id as sale_id,\n        ifnull(channel, 'Unknown') as channel,\n        ifnull(delivery_method, 'Unknown') as delivery_method,\n        ifnull(eu_personal_data, 'Unknown') as eu_personal_data,\n        ifnull(expansion_likelihood, 'Unknown') as expansion_likelihood,\n        ifnull(expansion_type, 'Unknown') as expansion_type,\n        ifnull(forecast_category, 'Unknown') as forecast_category,\n        ifnull(lead_category, 'Unknown') as lead_category,\n        ifnull(lead_source, 'Unknown') as lead_source,\n        ifnull(lead_source_detail, 'Unknown') as lead_source_detail,\n        ifnull(opportunity_name, 'Unknown') as sale_name,\n        ifnull(package_type, 'Unknown') as package_type,\n        ifnull(primary_tool, 'Unknown') as primary_tool,\n        ifnull(product_type, 'Unknown') as product_type,\n        ifnull(region_definition, 'Unknown') as region_definition,\n        ifnull(relationship, 'Unknown') as relationship,\n        ifnull(stage_name, 'Unknown') as stage_name,\n        ifnull(tech_application, 'Unknown') as tech_application,\n        ifnull(upgrade_reason, 'Unknown') as upgrade_reason,\n        ifnull(use_case_category, 'Unknown') as use_case_category,\n        ifnull(use_case, 'Unknown') as use_case\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_sale"}, "model.edw.dim_account": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_salesforce_client') }}\n),\nrenamed as (\n    select \n        client_key,\n        client_id,\n        ifnull(client_name, 'Unknown') as client_name,\n        ifnull(delivery_manager, 'Unknown') as delivery_manager,\n        ifnull(delivery_owner, 'Unknown') as delivery_owner,\n        ifnull(lead_channel, 'Unknown') as lead_channel,\n        ifnull(lead_source, 'Unknown') as lead_source,\n        ifnull(last_round_type, 'Unknown') as last_round_type,\n        ifnull(industry, 'Unknown') as industry,\n        ifnull(ideal_client_profile_score, 'Unknown') as ideal_client_profile_score,\n        ifnull(crunchbase_category, 'Unknown') as crunchbase_category,\n        ifnull(billing_country, 'Unknown') as billing_country,\n        ifnull(billing_state, 'Unknown') as billing_state,\n        ifnull(billing_city, 'Unknown') as billing_city,\n        ifnull(client_status, 'Unknown') as client_status,\n        ifnull(annual_revenue, -1) as annual_revenue,\n        ifnull(employee_range, 'Unknown') as employee_range,\n        ifnull(client_phone, 'Unknown') as client_phone,\n        ifnull(primary_focus, 'Unknown') as primary_focus,\n        ifnull(region, 'Unknown') as region,\n        ifnull(segment, 'Unknown') as segment\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_salesforce_client"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sales", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "sales", "dimensions", "dim_account"], "unique_id": "model.edw.dim_account", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/sales/dimensions/dim_account.sql", "original_file_path": "models/marts/sales/dimensions/dim_account.sql", "name": "dim_account", "alias": "dim_account", "checksum": {"name": "sha256", "checksum": "8c107fb5148d34b84b4c06bfac35de9ef1ba1ba83385081e1e9920cb90afd47b"}, "tags": [], "refs": [["stg_hist_salesforce_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/sales/dimensions/dim_account.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "sales", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_salesforce_client\n),\nrenamed as (\n    select \n        client_key,\n        client_id,\n        ifnull(client_name, 'Unknown') as client_name,\n        ifnull(delivery_manager, 'Unknown') as delivery_manager,\n        ifnull(delivery_owner, 'Unknown') as delivery_owner,\n        ifnull(lead_channel, 'Unknown') as lead_channel,\n        ifnull(lead_source, 'Unknown') as lead_source,\n        ifnull(last_round_type, 'Unknown') as last_round_type,\n        ifnull(industry, 'Unknown') as industry,\n        ifnull(ideal_client_profile_score, 'Unknown') as ideal_client_profile_score,\n        ifnull(crunchbase_category, 'Unknown') as crunchbase_category,\n        ifnull(billing_country, 'Unknown') as billing_country,\n        ifnull(billing_state, 'Unknown') as billing_state,\n        ifnull(billing_city, 'Unknown') as billing_city,\n        ifnull(client_status, 'Unknown') as client_status,\n        ifnull(annual_revenue, -1) as annual_revenue,\n        ifnull(employee_range, 'Unknown') as employee_range,\n        ifnull(client_phone, 'Unknown') as client_phone,\n        ifnull(primary_focus, 'Unknown') as primary_focus,\n        ifnull(region, 'Unknown') as region,\n        ifnull(segment, 'Unknown') as segment\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_account"}, "model.edw.dim_salesperson": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_salesforce_salesperson') }}\n),\nrenamed as (\n    select \n        salesperson_key,\n        ifnull(first_name, 'Unknown') as first_name,\n        ifnull(last_name, 'Unknown') as last_name,\n        ifnull(country, 'Unknown') as country,\n        ifnull(division, 'Unknown') as division,\n        ifnull(title, 'Unknown') as title,\n        ifnull(user_role_name, 'Unknown') as role_name,\n        dim_salesperson_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_salesforce_salesperson"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sales", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "sales", "dimensions", "dim_salesperson"], "unique_id": "model.edw.dim_salesperson", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/sales/dimensions/dim_salesperson.sql", "original_file_path": "models/marts/sales/dimensions/dim_salesperson.sql", "name": "dim_salesperson", "alias": "dim_salesperson", "checksum": {"name": "sha256", "checksum": "5e122cdd305fff8bab6fd84c11e8bc1f4f88d7332115707a5e44e96e8d0b34da"}, "tags": [], "refs": [["stg_hist_salesforce_salesperson"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/sales/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/sales/dimensions/dim_salesperson.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "sales", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_salesforce_salesperson\n),\nrenamed as (\n    select \n        salesperson_key,\n        ifnull(first_name, 'Unknown') as first_name,\n        ifnull(last_name, 'Unknown') as last_name,\n        ifnull(country, 'Unknown') as country,\n        ifnull(division, 'Unknown') as division,\n        ifnull(title, 'Unknown') as title,\n        ifnull(user_role_name, 'Unknown') as role_name,\n        dim_salesperson_hash_diff as hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_salesperson"}, "model.edw.fact_sales": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_salesforce_opportunity') }}\n),\nrenamed as (\n    select \n        sale_key,\n        salesperson_key,\n        client_key,\n        to_date(close_at) as date_created_key,\n        1 as ticket_count,\n        age_in_days,\n        amount,\n        commitment,\n        expected_mrr,\n        mrr,\n        net_expansion_mrr,\n        net_new_mrr,\n        price,\n        units,\n        weighted_mrr,\n        won_mrr\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_salesforce_opportunity"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sales", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "sales", "facts", "fact_sales"], "unique_id": "model.edw.fact_sales", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/sales/facts/fact_sales.sql", "original_file_path": "models/marts/sales/facts/fact_sales.sql", "name": "fact_sales", "alias": "fact_sales", "checksum": {"name": "sha256", "checksum": "50de76b7d7229153ee44f86191c43b2dcda74b7ca0f0bddb1dd622af7a6bc090"}, "tags": [], "refs": [["stg_hist_salesforce_opportunity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/sales/facts/schema.yml", "build_path": "target/compiled/edw/models/marts/sales/facts/fact_sales.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "sales", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_salesforce_opportunity\n),\nrenamed as (\n    select \n        sale_key,\n        salesperson_key,\n        client_key,\n        to_date(close_at) as date_created_key,\n        1 as ticket_count,\n        age_in_days,\n        amount,\n        commitment,\n        expected_mrr,\n        mrr,\n        net_expansion_mrr,\n        net_new_mrr,\n        price,\n        units,\n        weighted_mrr,\n        won_mrr\n    from source\n    where dbt_valid_to is null\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_sales"}, "model.edw.worker_payout_monthly": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_worker_payout_line_items') }}\n\n)\n, renamed as (\n\n    select\n        email,\n        payroll_date,\n        sum( \n            case \n                when work_platform = 'flow' and payroll_line_item_type = 'payment'\n                then payroll_line_item_amount \n            end \n        ) as flow_pay_amount,\n        sum( \n            case \n                when work_platform = 'scheduled' and payroll_line_item_type = 'payment'\n                then payroll_line_item_amount \n            end \n        ) as scheduled_pay_amount,\n        sum( \n            case \n                when work_platform = 'flow' and payroll_line_item_type = 'adjustment' \n                then payroll_line_item_amount \n            end \n        ) as flow_adjustment_amount,\n        sum( \n            case \n                when work_platform = 'scheduled' and payroll_line_item_type = 'adjustment' \n                then payroll_line_item_amount \n            end \n        ) as scheduled_adjustment_amount,\n        sum(payroll_line_item_amount) as total_pay_amount\n        from source\n    group by 1, 2\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_worker_payout_line_items"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "platform", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "platform", "worker_payout_monthly"], "unique_id": "model.edw.worker_payout_monthly", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/platform/worker_payout_monthly.sql", "original_file_path": "models/marts/platform/worker_payout_monthly.sql", "name": "worker_payout_monthly", "alias": "worker_payout_monthly", "checksum": {"name": "sha256", "checksum": "70fbaa433bf225b56a3947a4c4dba7c12b615e08fba894f4d08780deddc3a1f0"}, "tags": [], "refs": [["stg_worker_payout_line_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/platform/worker_payout_monthly.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "platform", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_worker_payout_line_items\n\n)\n, renamed as (\n\n    select\n        email,\n        payroll_date,\n        sum( \n            case \n                when work_platform = 'flow' and payroll_line_item_type = 'payment'\n                then payroll_line_item_amount \n            end \n        ) as flow_pay_amount,\n        sum( \n            case \n                when work_platform = 'scheduled' and payroll_line_item_type = 'payment'\n                then payroll_line_item_amount \n            end \n        ) as scheduled_pay_amount,\n        sum( \n            case \n                when work_platform = 'flow' and payroll_line_item_type = 'adjustment' \n                then payroll_line_item_amount \n            end \n        ) as flow_adjustment_amount,\n        sum( \n            case \n                when work_platform = 'scheduled' and payroll_line_item_type = 'adjustment' \n                then payroll_line_item_amount \n            end \n        ) as scheduled_adjustment_amount,\n        sum(payroll_line_item_amount) as total_pay_amount\n        from source\n    group by 1, 2\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.worker_payout_monthly"}, "model.edw.dim_incident": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_solarwinds_incidents') }}\n),\nrenamed as (\n    select distinct\n        dim_incident_hash_diff as incident_key,\n        ifnull(category_name, 'Unknown')        as category_name,\n        ifnull(subcategory_name, 'Unknown')     as subcategory_name,\n        ifnull(department_name, 'Unknown')      as department_name,\n        ifnull(resolution_code, 'Unknown')      as resolution_code,\n        case is_service_request\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end                                     as is_service_request,\n        ifnull(origin, 'Unknown')               as origin,\n        ifnull(priority, 'Unknown')             as priority,\n        ifnull(site_name, 'Unknown')            as incident_site_name,\n        ifnull(incident_state, 'Unknown')       as incident_state,\n        ifnull(incident_title, 'Unknown')       as title,\n        ifnull(workstream_primary, 'Unknown')   as workstream_primary,\n        ifnull(workstream_secondary, 'Unknown') as workstream_secondary,\n        --ifnull(incident_number, -1)             as incident_number,\n        ifnull(external_case_id, 'Unknown')     as external_case_id,\n        dim_incident_hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_solarwinds_incidents"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "infotech", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "it", "dimensions", "dim_incident"], "unique_id": "model.edw.dim_incident", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/it/dimensions/dim_incident.sql", "original_file_path": "models/marts/it/dimensions/dim_incident.sql", "name": "dim_incident", "alias": "dim_incident", "checksum": {"name": "sha256", "checksum": "160d746f5f6cc63087c9cf2bfececc20df2ba6229975d4a764f591b47138b878"}, "tags": [], "refs": [["stg_hist_solarwinds_incidents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/it/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/it/dimensions/dim_incident.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "infotech", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_solarwinds_incidents\n),\nrenamed as (\n    select distinct\n        dim_incident_hash_diff as incident_key,\n        ifnull(category_name, 'Unknown')        as category_name,\n        ifnull(subcategory_name, 'Unknown')     as subcategory_name,\n        ifnull(department_name, 'Unknown')      as department_name,\n        ifnull(resolution_code, 'Unknown')      as resolution_code,\n        case is_service_request\n            when True then 'Y'\n            when False then 'N'\n            else 'Unknown'\n        end                                     as is_service_request,\n        ifnull(origin, 'Unknown')               as origin,\n        ifnull(priority, 'Unknown')             as priority,\n        ifnull(site_name, 'Unknown')            as incident_site_name,\n        ifnull(incident_state, 'Unknown')       as incident_state,\n        ifnull(incident_title, 'Unknown')       as title,\n        ifnull(workstream_primary, 'Unknown')   as workstream_primary,\n        ifnull(workstream_secondary, 'Unknown') as workstream_secondary,\n        --ifnull(incident_number, -1)             as incident_number,\n        ifnull(external_case_id, 'Unknown')     as external_case_id,\n        dim_incident_hash_diff\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_incident"}, "model.edw.dim_user": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_hist_solarwinds_users') }}\n),\nrenamed as (\n    select distinct\n        dim_user_hash_diff as user_key,\n        ifnull(user_name, 'Unknown') as user_name,\n        ifnull(department_name, 'Unknown') as department_name,\n        ifnull(manager_name, 'Unknown') as manager_name,\n        ifnull(role_name, 'Unknown') as role_name,\n        ifnull(site_name, 'Unknown') as user_site_name,\n        ifnull(user_title, 'Unknown') as user_title\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_solarwinds_users"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "infotech", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "it", "dimensions", "dim_user"], "unique_id": "model.edw.dim_user", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/it/dimensions/dim_user.sql", "original_file_path": "models/marts/it/dimensions/dim_user.sql", "name": "dim_user", "alias": "dim_user", "checksum": {"name": "sha256", "checksum": "ed5be5e96c2306630a503caf922fbd456b54d06f7c2a77c3039207dd42f926f8"}, "tags": [], "refs": [["stg_hist_solarwinds_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/it/dimensions/schema.yml", "build_path": "target/compiled/edw/models/marts/it/dimensions/dim_user.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "infotech", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_solarwinds_users\n),\nrenamed as (\n    select distinct\n        dim_user_hash_diff as user_key,\n        ifnull(user_name, 'Unknown') as user_name,\n        ifnull(department_name, 'Unknown') as department_name,\n        ifnull(manager_name, 'Unknown') as manager_name,\n        ifnull(role_name, 'Unknown') as role_name,\n        ifnull(site_name, 'Unknown') as user_site_name,\n        ifnull(user_title, 'Unknown') as user_title\n    from source\n    where dbt_valid_to is null\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_user"}, "model.edw.fact_incidents": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select \n    * \n    from {{ ref('stg_hist_solarwinds_incidents') }}\n    where dbt_valid_to is null \n),\nrenamed as (\n    select distinct\n        assignee_key,\n        created_by_key,\n        requester_key,\n        due_date_key,\n        created_date_key,\n        dim_incident_hash_diff as incident_key,\n        incident_number,\n        1 as incident_count,\n        number_of_comments as comments_count,\n        array_size(sla_violations) as sla_violation_count,\n        array_size(purchase_orders) as purchase_order_count\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_solarwinds_incidents"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "infotech", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "it", "facts", "fact_incidents"], "unique_id": "model.edw.fact_incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/it/facts/fact_incidents.sql", "original_file_path": "models/marts/it/facts/fact_incidents.sql", "name": "fact_incidents", "alias": "fact_incidents", "checksum": {"name": "sha256", "checksum": "41fb827678210305fe084fe2e56880fc68e49d66dabc71ff1c9d215c1bfb07a0"}, "tags": [], "refs": [["stg_hist_solarwinds_incidents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/it/facts/schema.yml", "build_path": "target/compiled/edw/models/marts/it/facts/fact_incidents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "infotech", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select \n    * \n    from psa_dev.scratch_brana.stg_hist_solarwinds_incidents\n    where dbt_valid_to is null \n),\nrenamed as (\n    select distinct\n        assignee_key,\n        created_by_key,\n        requester_key,\n        due_date_key,\n        created_date_key,\n        dim_incident_hash_diff as incident_key,\n        incident_number,\n        1 as incident_count,\n        number_of_comments as comments_count,\n        array_size(sla_violations) as sla_violation_count,\n        array_size(purchase_orders) as purchase_order_count\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_incidents"}, "model.edw.vw_avid_incidents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith dim_date as (\n    select \n        date_key \n    from {{ ref('dim_date') }}\n),\ndim_incident as (\n    select \n        * \n    from {{ ref('dim_incident')}}\n    where rlike(lower(workstream_primary), '.*avid.*')\n    \n),\nfact_incidents as (\n    select \n        incident_number,\n        created_date_key,\n        incident_key,\n        incident_count\n    from {{ ref('fact_incidents') }}\n),\nrenamed as (\n    select\n        i.incident_state as state,\n        i.external_case_id,\n        f.incident_number,\n        d.date_key as created_date,\n        i.title,\n        i.incident_site_name as site_name,\n        i.department_name,\n        i.category_name,\n        i.subcategory_name,\n        f.incident_count\n    from fact_incidents f\n    inner join dim_date d\n        on f.created_date_key = d.date_key\n    inner join dim_incident i\n        on f.incident_key = i.incident_key\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.dim_date", "model.edw.dim_incident", "model.edw.fact_incidents"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "infotech", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "it", "views", "vw_avid_incidents"], "unique_id": "model.edw.vw_avid_incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/it/views/vw_avid_incidents.sql", "original_file_path": "models/marts/it/views/vw_avid_incidents.sql", "name": "vw_avid_incidents", "alias": "vw_avid_incidents", "checksum": {"name": "sha256", "checksum": "0079a562d0db57c846487f34206234ffef391e4296e4527d901fd8e5775a434b"}, "tags": [], "refs": [["dim_date"], ["dim_incident"], ["fact_incidents"]], "sources": [], "description": "View displaying only Avid incidents.  Used for reporting.", "columns": {"state": {"name": "state", "description": "Current status of the incident", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_case_id": {"name": "external_case_id", "description": "Id referencing an external system", "meta": {}, "data_type": null, "quote": null, "tags": []}, "incident_number": {"name": "incident_number", "description": "Solarwinds incident number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Date on which the incident was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Name of the incident. Typically user provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site_name": {"name": "site_name", "description": "Location of the incident's requestor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_name": {"name": "department_name", "description": "Department Name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_name": {"name": "category_name", "description": "Reflects the tickets category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subcategory_name": {"name": "subcategory_name", "description": "Additional categorization of the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "incident_count": {"name": "incident_count", "description": "Value of '1' assigned to each record. Used for aggregating incidents.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/it/views/schema.yml", "build_path": "target/compiled/edw/models/marts/it/views/vw_avid_incidents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "infotech", "enabled": true}, "compiled_sql": "\n\nwith dim_date as (\n    select \n        date_key \n    from analytics_dev.scratch_brana.dim_date\n),\ndim_incident as (\n    select \n        * \n    from analytics_dev.scratch_brana.dim_incident\n    where rlike(lower(workstream_primary), '.*avid.*')\n    \n),\nfact_incidents as (\n    select \n        incident_number,\n        created_date_key,\n        incident_key,\n        incident_count\n    from analytics_dev.scratch_brana.fact_incidents\n),\nrenamed as (\n    select\n        i.incident_state as state,\n        i.external_case_id,\n        f.incident_number,\n        d.date_key as created_date,\n        i.title,\n        i.incident_site_name as site_name,\n        i.department_name,\n        i.category_name,\n        i.subcategory_name,\n        f.incident_count\n    from fact_incidents f\n    inner join dim_date d\n        on f.created_date_key = d.date_key\n    inner join dim_incident i\n        on f.incident_key = i.incident_key\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.vw_avid_incidents"}, "model.edw.dim_course": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith course as (\n\n    select * from {{ ref('base_tlms_courses') }}\n\n)\n, category as (\n\n    select * from {{ ref('base_tlms_categories')}}\n\n)\n, dim_course as (\n\n    select\n        {{ dbt_utils.surrogate_key(['course.course_id']) }} as course_key,\n        course.course_name,\n        ifnull(category.category_name, 'Unknown') as category_name,\n        course.course_status,\n        course.is_shared,\n        course_id\n    from course \n    left join category\n        on course.category_id = category.category_id\n)\n\nselect * from dim_course", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.base_tlms_courses", "model.edw.base_tlms_categories"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfa", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "cfa", "dim_course"], "unique_id": "model.edw.dim_course", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/cfa/dim_course.sql", "original_file_path": "models/marts/cfa/dim_course.sql", "name": "dim_course", "alias": "dim_course", "checksum": {"name": "sha256", "checksum": "b5591b63ab03bce85eb7eb7cb580997df78180713a52ce3e4229d95f8688d4d5"}, "tags": [], "refs": [["base_tlms_courses"], ["base_tlms_categories"]], "sources": [], "description": "LMS courses. Currently limited to TalentLMS, may include other systems in the future", "columns": {"course_key": {"name": "course_key", "description": "md5 hash of course_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "name of course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_name": {"name": "category_name", "description": "grouping of courses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_status": {"name": "course_status", "description": "whether course is active or inactive", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_shared": {"name": "is_shared", "description": "indicates whether a course is shared by multiple ??", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_id": {"name": "course_id", "description": "unique id of course from LMS system", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/cfa/schema.yml", "build_path": "target/compiled/edw/models/marts/cfa/dim_course.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "cfa"}, "compiled_sql": "\n\nwith course as (\n\n    select * from psa_dev.scratch_brana.base_tlms_courses\n\n)\n, category as (\n\n    select * from psa_dev.scratch_brana.base_tlms_categories\n\n)\n, dim_course as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(course.course_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as course_key,\n        course.course_name,\n        ifnull(category.category_name, 'Unknown') as category_name,\n        course.course_status,\n        course.is_shared,\n        course_id\n    from course \n    left join category\n        on course.category_id = category.category_id\n)\n\nselect * from dim_course", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_course"}, "model.edw.fact_learning": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith course_users_hist as (\n\n    select * from {{ ref('base_hist_tlms_course_users') }}\n\n)\n, course_users as (\n\n    select * from {{ ref('base_hist_tlms_course_users') }} where dbt_valid_to is null\n\n)\n, dim_learner as (\n\n    select * from {{ ref('dim_learner') }}\n\n)\n, hist_facts as (\n\n    select distinct\n        course_user_key,\n        user_id,\n        course_id,\n        first_value( to_date(dbt_valid_from) ) \n            over(partition by user_id, course_id order by dbt_valid_from asc) as started_date\n    from course_users_hist\n    where completed_percent <> 0\n\n)\n, fact_learning as (\n\n    select\n        dim_learner.learner_key,\n        {{dbt_utils.surrogate_key(['course_users.course_id'])}} as course_key,\n        to_date(course_users.enrolled_at) as enrolled_date,\n        coalesce(hist_facts.started_date, to_date('1999-12-31')) as started_date,\n        coalesce(to_date(course_users.completed_at), to_date('1999-12-31')) as completed_date,\n        to_date(course_users.expired_at) as expired_date,\n        course_users.completed_percent,\n        datediff('days', enrolled_date, hist_facts.started_date) as course_enrolled_to_start_duration_days,\n        datediff('days', hist_facts.started_date, completed_date) as course_start_to_complete_duration_days,\n        datediff('days', enrolled_date, completed_date) as course_enrolled_to_complete_duration_days,\n        course_users.course_time as learning_total_time_seconds,\n        1 as learner_course_count\n\n    from course_users\n    inner join dim_learner\n        on course_users.user_id = dim_learner.learner_id\n    left join hist_facts\n        on course_users.course_user_key = hist_facts.course_user_key\n)\nselect * from fact_learning", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.base_hist_tlms_course_users", "model.edw.base_hist_tlms_course_users", "model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfa", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "cfa", "fact_learning"], "unique_id": "model.edw.fact_learning", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/cfa/fact_learning.sql", "original_file_path": "models/marts/cfa/fact_learning.sql", "name": "fact_learning", "alias": "fact_learning", "checksum": {"name": "sha256", "checksum": "83b185c110ee1e7b70cea450d4273c133200714b6feccf30228d7eee9c5d9013"}, "tags": [], "refs": [["base_hist_tlms_course_users"], ["base_hist_tlms_course_users"], ["dim_learner"]], "sources": [], "description": "measures desribing the efforts of Learners", "columns": {"learner_key": {"name": "learner_key", "description": "unique identifier of the learner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "unique identifier of a course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrolled_date": {"name": "enrolled_date", "description": "date the learner was enrolled in a course - not_null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "started_date": {"name": "started_date", "description": "date the learner started progress on a course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_date": {"name": "completed_date", "description": "date the learner completed a course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expired_date": {"name": "expired_date", "description": "further definition needed;", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_percent": {"name": "completed_percent", "description": "the percent of a course completed by a learner as of the current date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_enrolled_to_start_duration_days": {"name": "course_enrolled_to_start_duration_days", "description": "duration in days from the time the learner was enrolled in a course to the time the started", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_start_to_complete_duration_days": {"name": "course_start_to_complete_duration_days", "description": "duration in days from the time the learner started a course to the time they completed that course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_enrolled_to_complete_duration_days": {"name": "course_enrolled_to_complete_duration_days", "description": "duration in days from the time the learner was enrolled to the time they completed a course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "learning_total_time_seconds": {"name": "learning_total_time_seconds", "description": "seconds the learner has spent active on a course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "learner_course_count": {"name": "learner_course_count", "description": "this is always 1; used for easy aggregation in BI tools using sum instead of count", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/cfa/schema.yml", "build_path": "target/compiled/edw/models/marts/cfa/fact_learning.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "cfa"}, "compiled_sql": "\n\nwith course_users_hist as (\n\n    select * from psa_dev.scratch_brana.base_hist_tlms_course_users\n\n)\n, course_users as (\n\n    select * from psa_dev.scratch_brana.base_hist_tlms_course_users where dbt_valid_to is null\n\n)\n, dim_learner as (\n\n    select * from analytics_dev.scratch_brana.dim_learner\n\n)\n, hist_facts as (\n\n    select distinct\n        course_user_key,\n        user_id,\n        course_id,\n        first_value( to_date(dbt_valid_from) ) \n            over(partition by user_id, course_id order by dbt_valid_from asc) as started_date\n    from course_users_hist\n    where completed_percent <> 0\n\n)\n, fact_learning as (\n\n    select\n        dim_learner.learner_key,\n        md5(cast(\n    \n    coalesce(cast(course_users.course_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as course_key,\n        to_date(course_users.enrolled_at) as enrolled_date,\n        coalesce(hist_facts.started_date, to_date('1999-12-31')) as started_date,\n        coalesce(to_date(course_users.completed_at), to_date('1999-12-31')) as completed_date,\n        to_date(course_users.expired_at) as expired_date,\n        course_users.completed_percent,\n        datediff('days', enrolled_date, hist_facts.started_date) as course_enrolled_to_start_duration_days,\n        datediff('days', hist_facts.started_date, completed_date) as course_start_to_complete_duration_days,\n        datediff('days', enrolled_date, completed_date) as course_enrolled_to_complete_duration_days,\n        course_users.course_time as learning_total_time_seconds,\n        1 as learner_course_count\n\n    from course_users\n    inner join dim_learner\n        on course_users.user_id = dim_learner.learner_id\n    left join hist_facts\n        on course_users.course_user_key = hist_facts.course_user_key\n)\nselect * from fact_learning", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_learning"}, "model.edw.csp_summary": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('csp', 'reports') }}\n\n)\n, renamed as (\n    \n    select\n        to_date(timestamp) csp_reported_date, \n        team_name, \n        count(distinct  list.value)\n    from raw.csp_fy20q4.reports, \n        lateral split_to_table(reports.EMAIL_ID_OF_TEAM_MEMBERS_INVOLVED_IN_THE_PROJECT_, ',') list\n    group by 1,2\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.csp.reports"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfa", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "cfa", "csp_summary"], "unique_id": "model.edw.csp_summary", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/cfa/csp_summary.sql", "original_file_path": "models/marts/cfa/csp_summary.sql", "name": "csp_summary", "alias": "csp_summary", "checksum": {"name": "sha256", "checksum": "21e3d974a292c106d3131b625744e4d9c5904068690bc1a7598839d5d03b4caa"}, "tags": [], "refs": [], "sources": [["csp", "reports"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/cfa/schema.yml", "build_path": "target/compiled/edw/models/marts/cfa/csp_summary.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "cfa"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.csp_fy20q4.reports\n\n)\n, renamed as (\n    \n    select\n        to_date(timestamp) csp_reported_date, \n        team_name, \n        count(distinct  list.value)\n    from raw.csp_fy20q4.reports, \n        lateral split_to_table(reports.EMAIL_ID_OF_TEAM_MEMBERS_INVOLVED_IN_THE_PROJECT_, ',') list\n    group by 1,2\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.csp_summary"}, "model.edw.dim_learner": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith learners as (\n\n    select * from {{ ref('base_tlms_users') }}\n\n)\n, workers as (\n\n    select * from {{ ref('worker_pool') }}\n\n)\n, prep as (\n\n    select\n        coalesce(workers.person_key, {{ dbt_utils.surrogate_key( ['learners.email'] ) }} ) as learner_key,\n        coalesce(workers.email, learners.email) as email,\n        ifnull(workers.country, 'Unknown') as country,\n        ifnull(workers.worker_status, 'Unknown') as worker_status,\n        learners.user_id as learner_id,\n        learners.breezy_candidate_id,\n        learners.created_at\n    from learners\n    left join workers\n        on learners.breezy_candidate_id = workers.breezy_candidate_id\n        or learners.email = workers.email\n        or learners.email = workers.personal_email\n        or learners.personal_email = workers.personal_email\n)\n, row_numbered as (\n    select\n        *,\n        row_number() over( partition by email order by created_at desc ) as row_number\n    from prep\n)\n, dim_learner as (\n\n    select\n        learner_key,\n        email,\n        country,\n        worker_status,\n        learner_id,\n        breezy_candidate_id\n    from row_numbered\n    where row_number = 1\n)\nselect * from dim_learner", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.base_tlms_users", "model.edw.worker_pool"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfa", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "cfa", "dim_learner"], "unique_id": "model.edw.dim_learner", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/cfa/dim_learner.sql", "original_file_path": "models/marts/cfa/dim_learner.sql", "name": "dim_learner", "alias": "dim_learner", "checksum": {"name": "sha256", "checksum": "07fd178f710c4830eba78a6f4d8999972d19594f2a9c7246f94672ef881c2d14"}, "tags": [], "refs": [["base_tlms_users"], ["worker_pool"]], "sources": [], "description": "LMS Learners. Currently limited to Talent LMS", "columns": {"learner_key": {"name": "learner_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "email address of learner.  If CIS match is found, this should be the CF email address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_status": {"name": "worker_status", "description": "this workers onboarding status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "learner_id": {"name": "learner_id", "description": "LMS system id of the learner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "breezy_candidate_id": {"name": "breezy_candidate_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/cfa/schema.yml", "build_path": "target/compiled/edw/models/marts/cfa/dim_learner.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "cfa"}, "compiled_sql": "\n\nwith learners as (\n\n    select * from psa_dev.scratch_brana.base_tlms_users\n\n)\n, workers as (\n\n    select * from analytics_dev.scratch_brana.worker_pool\n\n)\n, prep as (\n\n    select\n        coalesce(workers.person_key, md5(cast(\n    \n    coalesce(cast(learners.email as \n    varchar\n), '')\n\n as \n    varchar\n)) ) as learner_key,\n        coalesce(workers.email, learners.email) as email,\n        ifnull(workers.country, 'Unknown') as country,\n        ifnull(workers.worker_status, 'Unknown') as worker_status,\n        learners.user_id as learner_id,\n        learners.breezy_candidate_id,\n        learners.created_at\n    from learners\n    left join workers\n        on learners.breezy_candidate_id = workers.breezy_candidate_id\n        or learners.email = workers.email\n        or learners.email = workers.personal_email\n        or learners.personal_email = workers.personal_email\n)\n, row_numbered as (\n    select\n        *,\n        row_number() over( partition by email order by created_at desc ) as row_number\n    from prep\n)\n, dim_learner as (\n\n    select\n        learner_key,\n        email,\n        country,\n        worker_status,\n        learner_id,\n        breezy_candidate_id\n    from row_numbered\n    where row_number = 1\n)\nselect * from dim_learner", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_learner"}, "model.edw.vw_abyss_adherence": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('adherence') }}\n\n)\n, filtered as (\n\n    select\n    *\n    from source\n    where workstream_id in (\n        'XHlawMBsQluNSRdOTlui',\n        'a43RwRD8lBhpnWdse39u',\n        'LdJkt8ujyBuWehjQ388t'\n    )\n\n)\nselect * from filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.adherence"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "schedules", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "schedules", "vw_abyss_adherence"], "unique_id": "model.edw.vw_abyss_adherence", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/schedules/vw_abyss_adherence.sql", "original_file_path": "models/marts/schedules/vw_abyss_adherence.sql", "name": "vw_abyss_adherence", "alias": "vw_abyss_adherence", "checksum": {"name": "sha256", "checksum": "6bc3217af2d8bc2be0401d260f63cfd5fd0d6224304a20cfc85ecaf720bbfef3"}, "tags": [], "refs": [["adherence"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/vw_abyss_adherence.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "view", "schema": "schedules", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from analytics_dev.scratch_brana.adherence\n\n)\n, filtered as (\n\n    select\n    *\n    from source\n    where workstream_id in (\n        'XHlawMBsQluNSRdOTlui',\n        'a43RwRD8lBhpnWdse39u',\n        'LdJkt8ujyBuWehjQ388t'\n    )\n\n)\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.vw_abyss_adherence"}, "model.edw.adherence": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith schedules as (\n\n    select * from {{ ref('base_calendar_schedules') }}\n\n)\n,delivery_hubs as (\n\n    select * from {{ ref('base_users_delivery_hubs') }}\n\n)\n,slots as (\n\n    select * from {{ ref('base_users_slots') }}\n\n)\n,users as (\n\n    select * from {{ ref('base_users_users') }}\n\n)\n,projects as (\n\n    select * from {{ ref('base_projects_projects') }}\n\n)\n,time_entries as (\n\n  select * from {{ ref('base_users_time_entries') }}\n\n)\n,tasks as (\n\n    select * from {{ ref('base_projects_tasks') }}\n\n)\n,entries as (\n\n    select \n        schedule_id as schedule_uid,\n        tasks.task_name as entry_type,\n\n        sum(time_entries.time_entry_duration) as entry_duration\n        \n    from time_entries\n    inner join tasks\n        on time_entries.task_id = tasks.task_uid\n    group by 1, 2\n)\n,entry_agg as (\n\n    select\n        schedule_uid,\n\n        object_agg(\n            entry_type,\n            entry_duration\n        ) as entry_type_time_totals,\n        sum( iff( lower(entry_type) = 'margin_time', entry_duration, NULL) ) as margin_duration,\n        sum( iff( lower(entry_type) = 'idle hours', entry_duration, NULL) ) as idle_duration,\n        sum( iff( lower(entry_type) = 'general task', entry_duration, NULL) ) as general_task_duration,\n        sum( iff( lower(entry_type) = 'training', entry_duration, NULL) ) as training_duration,\n        sum( iff( lower(entry_type) <> 'training', entry_duration, NULL) ) as production_duration,\n        sum( iff( entry_type is null, entry_duration, NULL) ) as unknown_duration\n    from entries\n    group by 1\n)\n,joined as (\n\n    select\n        schedules.schedule_id,\n        users.user_id as worker_id,\n        schedules.schedule_start_at,\n        schedules.schedule_end_at,\n        zeroifnull(datediff(seconds, schedule_start_at, schedule_end_at)) as schedule_duration_seconds,\n        users.email_address as worker_email_address,\n        md5( users.email_address ) as person_key,\n        schedules.project_id as workstream_id,\n        projects.project_name as workstream_name,\n        delivery_hubs.delivery_hub_name,\n        decode(schedules.schedule_type, 0, 'Regular', 1, 'Margin') as schedule_type,\n        slots.slot_code,\n        schedules.is_overage,\n        schedules.break_duration,\n        schedules.is_premium_for_client,\n        schedules.is_premium_for_worker,\n        schedules.is_reported,\n        zeroifnull(schedules.reported_duration) as reported_duration_seconds,\n        (zeroifnull(datediff(seconds, schedules.schedule_start_at, schedules.schedule_end_at))\n            --14400\n            - zeroifnull(schedules.break_duration)\n            - zeroifnull(schedules.reported_duration)) as scheduled_reported_deficit_seconds,\n        entry_agg.entry_type_time_totals,\n        entry_agg.margin_duration,\n        entry_agg.idle_duration,\n        entry_agg.general_task_duration,\n        entry_agg.training_duration,\n        entry_agg.production_duration,\n        entry_agg.unknown_duration\n\n    from schedules\n    left join delivery_hubs\n        on schedules.hub_id = delivery_hubs.delivery_hub_uid\n    left join slots\n        on schedules.slot_id = slots.slot_uid\n    left join users\n        on schedules.user_id = users.user_uid\n    inner join projects\n        on schedules.project_id = projects.project_uid\n    left join entry_agg\n        on schedules.schedule_uid = entry_agg.schedule_uid\n    where contains(users.email_address, '@es.cloud') > 0\n    order by 1, 2\n\n)\n\nselect * from joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_calendar_schedules", "model.edw.base_users_delivery_hubs", "model.edw.base_users_slots", "model.edw.base_users_users", "model.edw.base_projects_projects", "model.edw.base_users_time_entries", "model.edw.base_projects_tasks"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "schedules", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "schedules", "adherence"], "unique_id": "model.edw.adherence", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/schedules/adherence.sql", "original_file_path": "models/marts/schedules/adherence.sql", "name": "adherence", "alias": "adherence", "checksum": {"name": "sha256", "checksum": "3c6469e4df9ef02554ed896993518615058465b9e24e77abdd16445deedb10a2"}, "tags": [], "refs": [["base_calendar_schedules"], ["base_users_delivery_hubs"], ["base_users_slots"], ["base_users_users"], ["base_projects_projects"], ["base_users_time_entries"], ["base_projects_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/adherence.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "schedules", "enabled": true}, "compiled_sql": "\n\nwith schedules as (\n\n    select * from psa_dev.scratch_brana.base_calendar_schedules\n\n)\n,delivery_hubs as (\n\n    select * from psa_dev.scratch_brana.base_users_delivery_hubs\n\n)\n,slots as (\n\n    select * from psa_dev.scratch_brana.base_users_slots\n\n)\n,users as (\n\n    select * from psa_dev.scratch_brana.base_users_users\n\n)\n,projects as (\n\n    select * from psa_dev.scratch_brana.base_projects_projects\n\n)\n,time_entries as (\n\n  select * from psa_dev.scratch_brana.base_users_time_entries\n\n)\n,tasks as (\n\n    select * from psa_dev.scratch_brana.base_projects_tasks\n\n)\n,entries as (\n\n    select \n        schedule_id as schedule_uid,\n        tasks.task_name as entry_type,\n\n        sum(time_entries.time_entry_duration) as entry_duration\n        \n    from time_entries\n    inner join tasks\n        on time_entries.task_id = tasks.task_uid\n    group by 1, 2\n)\n,entry_agg as (\n\n    select\n        schedule_uid,\n\n        object_agg(\n            entry_type,\n            entry_duration\n        ) as entry_type_time_totals,\n        sum( iff( lower(entry_type) = 'margin_time', entry_duration, NULL) ) as margin_duration,\n        sum( iff( lower(entry_type) = 'idle hours', entry_duration, NULL) ) as idle_duration,\n        sum( iff( lower(entry_type) = 'general task', entry_duration, NULL) ) as general_task_duration,\n        sum( iff( lower(entry_type) = 'training', entry_duration, NULL) ) as training_duration,\n        sum( iff( lower(entry_type) <> 'training', entry_duration, NULL) ) as production_duration,\n        sum( iff( entry_type is null, entry_duration, NULL) ) as unknown_duration\n    from entries\n    group by 1\n)\n,joined as (\n\n    select\n        schedules.schedule_id,\n        users.user_id as worker_id,\n        schedules.schedule_start_at,\n        schedules.schedule_end_at,\n        zeroifnull(datediff(seconds, schedule_start_at, schedule_end_at)) as schedule_duration_seconds,\n        users.email_address as worker_email_address,\n        md5( users.email_address ) as person_key,\n        schedules.project_id as workstream_id,\n        projects.project_name as workstream_name,\n        delivery_hubs.delivery_hub_name,\n        decode(schedules.schedule_type, 0, 'Regular', 1, 'Margin') as schedule_type,\n        slots.slot_code,\n        schedules.is_overage,\n        schedules.break_duration,\n        schedules.is_premium_for_client,\n        schedules.is_premium_for_worker,\n        schedules.is_reported,\n        zeroifnull(schedules.reported_duration) as reported_duration_seconds,\n        (zeroifnull(datediff(seconds, schedules.schedule_start_at, schedules.schedule_end_at))\n            --14400\n            - zeroifnull(schedules.break_duration)\n            - zeroifnull(schedules.reported_duration)) as scheduled_reported_deficit_seconds,\n        entry_agg.entry_type_time_totals,\n        entry_agg.margin_duration,\n        entry_agg.idle_duration,\n        entry_agg.general_task_duration,\n        entry_agg.training_duration,\n        entry_agg.production_duration,\n        entry_agg.unknown_duration\n\n    from schedules\n    left join delivery_hubs\n        on schedules.hub_id = delivery_hubs.delivery_hub_uid\n    left join slots\n        on schedules.slot_id = slots.slot_uid\n    left join users\n        on schedules.user_id = users.user_uid\n    inner join projects\n        on schedules.project_id = projects.project_uid\n    left join entry_agg\n        on schedules.schedule_uid = entry_agg.schedule_uid\n    where contains(users.email_address, '@es.cloud') > 0\n    order by 1, 2\n\n)\n\nselect * from joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.adherence"}, "model.edw.time_entries": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n    )\n}}\n\nwith time_entries as (\n\n    select * from {{ ref('base_users_time_entries') }}\n\n),\ntasks as (\n\n    select * from {{ ref('base_projects_tasks') }}\n\n),\nschedules as (\n\n    select * from {{ ref('base_calendar_schedules') }}\n\n),\nprojects as (\n\n    select * from {{ ref('base_projects_projects') }}\n\n),\nusers as (\n\n    select * from {{ ref('base_users_users') }}\n\n),\nclients as (\n\n    select * from {{ ref('dim_client') }}\n\n),\nentries as (\n\n    select\n        time_entries.time_entry_date_key,\n        -- client and project reference\n        clients.client_key,\n        clients.client_name,\n        projects.project_key                    as project_key,\n        projects.project_name                   as project_name,\n        projects.project_name                   as workstream_name, -- alias of project_name\n        -- worker / task / time entries data\n        users.user_id                           as worker_id,\n        users.email_address                     as worker_email_address,\n        tasks.task_uid                          as task_key,\n        tasks.is_billable,\n        schedules.schedule_id,\n        schedules.schedule_start_at,\n        time_entries.time_entry_start_at,\n        case\n            when lower(tasks.task_name) = 'training' then 'training'\n            else 'production'\n        end                                     as time_entry_type,\n        time_entries.time_entries_count,\n        time_entries.time_entry_duration\n\n    from\n        time_entries\n        inner join tasks\n            on time_entries.task_id = tasks.task_uid\n        inner join projects\n            on time_entries.project_id = projects.project_uid\n        inner join clients\n            on projects.client_key = clients.client_key\n        inner join schedules\n            on time_entries.schedule_id = schedules.schedule_uid\n        inner join users\n            on time_entries.user_id = users.user_uid\n\n)\n\nselect * from entries", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_users_time_entries", "model.edw.base_projects_tasks", "model.edw.base_calendar_schedules", "model.edw.base_projects_projects", "model.edw.base_users_users", "model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "schedules", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "schedules", "time_entries"], "unique_id": "model.edw.time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/schedules/time_entries.sql", "original_file_path": "models/marts/schedules/time_entries.sql", "name": "time_entries", "alias": "time_entries", "checksum": {"name": "sha256", "checksum": "b9fb7b9c98b5373b569d4f01282097a97d175f7d5fc51afc4e08f317c066d57c"}, "tags": [], "refs": [["base_users_time_entries"], ["base_projects_tasks"], ["base_calendar_schedules"], ["base_projects_projects"], ["base_users_users"], ["dim_client"]], "sources": [], "description": "", "columns": {"time_entry_date_key": {"name": "time_entry_date_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_key": {"name": "client_key", "description": "the client of this time entry", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_name": {"name": "client_name", "description": "the client of this time entry", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_key": {"name": "project_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workstream_name": {"name": "workstream_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_email_address": {"name": "worker_email_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_key": {"name": "task_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_billable": {"name": "is_billable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_id": {"name": "schedule_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_start_at": {"name": "schedule_start_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_entry_start_at": {"name": "time_entry_start_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_entry_type": {"name": "time_entry_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_entries_count": {"name": "time_entries_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_entry_duration": {"name": "time_entry_duration", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/schedules/schema/time_entries.yml", "build_path": "target/compiled/edw/models/marts/schedules/time_entries.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "schedules", "enabled": true}, "compiled_sql": "\n\nwith time_entries as (\n\n    select * from psa_dev.scratch_brana.base_users_time_entries\n\n),\ntasks as (\n\n    select * from psa_dev.scratch_brana.base_projects_tasks\n\n),\nschedules as (\n\n    select * from psa_dev.scratch_brana.base_calendar_schedules\n\n),\nprojects as (\n\n    select * from psa_dev.scratch_brana.base_projects_projects\n\n),\nusers as (\n\n    select * from psa_dev.scratch_brana.base_users_users\n\n),\nclients as (\n\n    select * from analytics_dev.scratch_brana.dim_client\n\n),\nentries as (\n\n    select\n        time_entries.time_entry_date_key,\n        -- client and project reference\n        clients.client_key,\n        clients.client_name,\n        projects.project_key                    as project_key,\n        projects.project_name                   as project_name,\n        projects.project_name                   as workstream_name, -- alias of project_name\n        -- worker / task / time entries data\n        users.user_id                           as worker_id,\n        users.email_address                     as worker_email_address,\n        tasks.task_uid                          as task_key,\n        tasks.is_billable,\n        schedules.schedule_id,\n        schedules.schedule_start_at,\n        time_entries.time_entry_start_at,\n        case\n            when lower(tasks.task_name) = 'training' then 'training'\n            else 'production'\n        end                                     as time_entry_type,\n        time_entries.time_entries_count,\n        time_entries.time_entry_duration\n\n    from\n        time_entries\n        inner join tasks\n            on time_entries.task_id = tasks.task_uid\n        inner join projects\n            on time_entries.project_id = projects.project_uid\n        inner join clients\n            on projects.client_key = clients.client_key\n        inner join schedules\n            on time_entries.schedule_id = schedules.schedule_uid\n        inner join users\n            on time_entries.user_id = users.user_uid\n\n)\n\nselect * from entries", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.time_entries"}, "model.edw.dim_workstream": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_cis_workstreams_current') }}\n\n)\n, seed as (\n\n    select\n        {{dbt_utils.surrogate_key(['null'])}} as workstream_key,\n        'Unknown' as workstream_name,\n        'Unknown' as commitment,\n        'Unknown' as package_type,\n        'Unknown' as package_version,\n        'Unknown' as workstream_status,\n        'Unknown' as billing_type,\n        'Unknown' as tool_access,\n        'Unknown' as connectivity,\n        'Unknown' as team_lead_email,\n        'Unknown' as tool_name,\n        null      as has_required_training,\n        'Unknown' as workstream_type\n    union\n    select\n        {{dbt_utils.surrogate_key(['\\'No Match\\''])}} as workstream_key,\n        'No Match' as workstream_name,\n        'No Match' as commitment,\n        'No Match' as package_type,\n        'No Match' as package_version,\n        'No Match' as workstream_status,\n        'No Match' as billing_type,\n        'No Match' as tool_access,\n        'No Match' as connectivity,\n        'No Match' as team_lead_email,\n        'No Match' as tool_name,\n        null      as has_required_training,\n        'No Match' as workstream_type\n\n)\n, tools as (\n\n    select\n        project_key,\n        case \n            when project_key in (\n                                -- manually provided\n                                '8vZNQwGe4bwvO4MJZrD4',   -- Adasky\n                                '1XM37LypWRP87qE9dnXy',   -- Dishcraft\n                                'NukEBkpujY2dh5J6JC15',   -- Enertive\n                                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI\n                                'drLs8iasIz7dPEOkxeHk',   -- Green Atlas\n                                'Brm2qeGFYp0HJV2mEkFC',   -- Headroom\n                                'K072jEKdalPN9sb5TV2P',   -- Hummingbird\n                                'YRFXNUH6ly4tNI1JD8Kc',   -- Iterative Scopes\n                                'MglscoM0BtzQfXA47MOC',   -- Lucid Motors\n                                'f3Y10DvsMVh96bzfrZjl',   -- Thread Robotics\n                                'ekApIutASJhmoVdi5w0e',   -- Tricentis\n                                'kHZEHp4PMwRAUrQS6IKI',   -- Magpie\n                                'mE4Vv4xtAKKgIE2QWQCa',   -- Matterport\n                                'RVrFZ2BPZ9AHvay66Qpv',   -- Activ Surgical\n                                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                                'y3M7VPDH6JDwKFRZRoZG',   -- Standard Cognition\n\n                                -- dataloop matches in CIS\n                                'CMEsiwMWJpQqz3OxzifD',   -- Dataloop\n                                'Ok2IdzbN7R3WgAThOZPh',   -- Descartes Labs\n                                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI Internal\n                                '9HVIKGBXbiwTh8b789rL',   -- IFiveO_internal\n                                'VpFyJK686DZGwOyl7e4E',   -- Inokyo\n                                '17P9uCak6gUvYGd7aHwL',   -- Nyris\n                                'tWDQxwv8sgTGRp5ejA4K',   -- StandardCyborg\n                                'XZwpGr1IG2r7eXu8kv1S'    -- VergeSense - Image Annotation\n                                )\n                                then 'DataLoop'\n            else null\n        end manual_tool_name\n    from source\n)\n, dim_workstream as (\n\n    select\n        {{dbt_utils.surrogate_key(['source.project_key']) }}          as workstream_key,\n        project_name                                                  as workstream_name,\n        commitment,\n        coalesce(package_type, 'Unknown')                             as package_type,\n        package_version,\n        status                                                        as workstream_status,\n        billable_unit                                                 as billing_type,\n        coalesce(access_to_tool, 'Unknown')                           as tool_access,\n        connectivity,\n        coalesce(team_lead_email,'Unknown')                           as team_lead_email,\n        coalesce(source.tool_name, tools.manual_tool_name, 'Unkonwn') as tool_name,\n        iff(training_hours is null, false, true)                      as has_required_training,\n        type as workstream_type\n    from source\n    left join tools\n        on source.project_key = tools.project_key\n    union\n    select * from seed\n)\nselect * from dim_workstream", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_cis_workstreams_current"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "common", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "common", "dim_workstream"], "unique_id": "model.edw.dim_workstream", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/common/dim_workstream.sql", "original_file_path": "models/marts/common/dim_workstream.sql", "name": "dim_workstream", "alias": "dim_workstream", "checksum": {"name": "sha256", "checksum": "d013f716c42fc3947192ae6e20d2f7f30bc38f6bbb90ba7f32e3a21f343fc8aa"}, "tags": [], "refs": [["stg_cis_workstreams_current"]], "sources": [], "description": "Dimension describing client workstreams", "columns": {"workstream_key": {"name": "workstream_key", "description": "Surrogate key uniquely identifying a workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workstream_name": {"name": "workstream_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commitment": {"name": "commitment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_type": {"name": "package_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_version": {"name": "package_version", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workstream_status": {"name": "workstream_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_type": {"name": "billing_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tool_access": {"name": "tool_access", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connectivity": {"name": "connectivity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_lead_email": {"name": "team_lead_email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tool_name": {"name": "tool_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_required_training": {"name": "has_required_training", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/common/schema.yml", "build_path": "target/compiled/edw/models/marts/common/dim_workstream.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "common", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_cis_workstreams_current\n\n)\n, seed as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) as workstream_key,\n        'Unknown' as workstream_name,\n        'Unknown' as commitment,\n        'Unknown' as package_type,\n        'Unknown' as package_version,\n        'Unknown' as workstream_status,\n        'Unknown' as billing_type,\n        'Unknown' as tool_access,\n        'Unknown' as connectivity,\n        'Unknown' as team_lead_email,\n        'Unknown' as tool_name,\n        null      as has_required_training,\n        'Unknown' as workstream_type\n    union\n    select\n        md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) as workstream_key,\n        'No Match' as workstream_name,\n        'No Match' as commitment,\n        'No Match' as package_type,\n        'No Match' as package_version,\n        'No Match' as workstream_status,\n        'No Match' as billing_type,\n        'No Match' as tool_access,\n        'No Match' as connectivity,\n        'No Match' as team_lead_email,\n        'No Match' as tool_name,\n        null      as has_required_training,\n        'No Match' as workstream_type\n\n)\n, tools as (\n\n    select\n        project_key,\n        case \n            when project_key in (\n                                -- manually provided\n                                '8vZNQwGe4bwvO4MJZrD4',   -- Adasky\n                                '1XM37LypWRP87qE9dnXy',   -- Dishcraft\n                                'NukEBkpujY2dh5J6JC15',   -- Enertive\n                                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI\n                                'drLs8iasIz7dPEOkxeHk',   -- Green Atlas\n                                'Brm2qeGFYp0HJV2mEkFC',   -- Headroom\n                                'K072jEKdalPN9sb5TV2P',   -- Hummingbird\n                                'YRFXNUH6ly4tNI1JD8Kc',   -- Iterative Scopes\n                                'MglscoM0BtzQfXA47MOC',   -- Lucid Motors\n                                'f3Y10DvsMVh96bzfrZjl',   -- Thread Robotics\n                                'ekApIutASJhmoVdi5w0e',   -- Tricentis\n                                'kHZEHp4PMwRAUrQS6IKI',   -- Magpie\n                                'mE4Vv4xtAKKgIE2QWQCa',   -- Matterport\n                                'RVrFZ2BPZ9AHvay66Qpv',   -- Activ Surgical\n                                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                                'y3M7VPDH6JDwKFRZRoZG',   -- Standard Cognition\n\n                                -- dataloop matches in CIS\n                                'CMEsiwMWJpQqz3OxzifD',   -- Dataloop\n                                'Ok2IdzbN7R3WgAThOZPh',   -- Descartes Labs\n                                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI Internal\n                                '9HVIKGBXbiwTh8b789rL',   -- IFiveO_internal\n                                'VpFyJK686DZGwOyl7e4E',   -- Inokyo\n                                '17P9uCak6gUvYGd7aHwL',   -- Nyris\n                                'tWDQxwv8sgTGRp5ejA4K',   -- StandardCyborg\n                                'XZwpGr1IG2r7eXu8kv1S'    -- VergeSense - Image Annotation\n                                )\n                                then 'DataLoop'\n            else null\n        end manual_tool_name\n    from source\n)\n, dim_workstream as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(source.project_key as \n    varchar\n), '')\n\n as \n    varchar\n))          as workstream_key,\n        project_name                                                  as workstream_name,\n        commitment,\n        coalesce(package_type, 'Unknown')                             as package_type,\n        package_version,\n        status                                                        as workstream_status,\n        billable_unit                                                 as billing_type,\n        coalesce(access_to_tool, 'Unknown')                           as tool_access,\n        connectivity,\n        coalesce(team_lead_email,'Unknown')                           as team_lead_email,\n        coalesce(source.tool_name, tools.manual_tool_name, 'Unkonwn') as tool_name,\n        iff(training_hours is null, false, true)                      as has_required_training,\n        type as workstream_type\n    from source\n    left join tools\n        on source.project_key = tools.project_key\n    union\n    select * from seed\n)\nselect * from dim_workstream", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_workstream"}, "model.edw.dim_worker": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_cis_workers_current') }}\n\n)\n, seed as (\n\n    select\n        {{dbt_utils.surrogate_key(['null'])}} as worker_key,\n        'Unknown' as email,\n        'Unknown' as full_name,\n        'Unknown' as country,\n        'Unknown' as city,\n        'Unknown' as gender,\n        'Unknown' as worker_type,\n        'Unknown' as worker_status\n    union\n    select \n        {{dbt_utils.surrogate_key(['\\'No Match\\''])}} as worker_key,\n        'No Match' as email,\n        'No Match' as full_name,\n        'No Match' as country,\n        'No Match' as city,\n        'No Match' as gender,\n        'No Match' as worker_type,\n        'No Match' as worker_status\n\n)\n, worker as (\n\n    select\n        {{dbt_utils.surrogate_key(['email'])}} as worker_key,\n        email,\n        full_name,\n        coalesce(current_country, permanent_country, 'Unknown') as country,\n        coalesce(current_city, permanent_city, 'Unkonwn') as city,\n        gender,\n        person_type as worker_type,\n        person_status as worker_status\n    from source\n    union\n    select * from seed\n)\nselect * from worker", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_cis_workers_current"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "common", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "common", "dim_worker"], "unique_id": "model.edw.dim_worker", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/common/dim_worker.sql", "original_file_path": "models/marts/common/dim_worker.sql", "name": "dim_worker", "alias": "dim_worker", "checksum": {"name": "sha256", "checksum": "2fb260d205ba0310703c1ec735731cbf804f0b09d4946f9b862b41a5ebfa240b"}, "tags": [], "refs": [["stg_cis_workers_current"]], "sources": [], "description": "Describes Cloud Workers", "columns": {"worker_key": {"name": "worker_key", "description": "surrogate key uniquely identifies a cloud worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "cloud workers cloudfactory email address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "full name of cloud worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_type": {"name": "worker_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_status": {"name": "worker_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/common/schema.yml", "build_path": "target/compiled/edw/models/marts/common/dim_worker.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "common", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_cis_workers_current\n\n)\n, seed as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) as worker_key,\n        'Unknown' as email,\n        'Unknown' as full_name,\n        'Unknown' as country,\n        'Unknown' as city,\n        'Unknown' as gender,\n        'Unknown' as worker_type,\n        'Unknown' as worker_status\n    union\n    select \n        md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) as worker_key,\n        'No Match' as email,\n        'No Match' as full_name,\n        'No Match' as country,\n        'No Match' as city,\n        'No Match' as gender,\n        'No Match' as worker_type,\n        'No Match' as worker_status\n\n)\n, worker as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(email as \n    varchar\n), '')\n\n as \n    varchar\n)) as worker_key,\n        email,\n        full_name,\n        coalesce(current_country, permanent_country, 'Unknown') as country,\n        coalesce(current_city, permanent_city, 'Unkonwn') as city,\n        gender,\n        person_type as worker_type,\n        person_status as worker_status\n    from source\n    union\n    select * from seed\n)\nselect * from worker", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_worker"}, "model.edw.dim_client": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith accounts as (\n\n    select * from {{ ref('stg_hist_salesforce_client') }} where dbt_valid_to is null\n\n)\n, seed as (\n\n    select\n        {{dbt_utils.surrogate_key(['null'])}} as client_key,\n        'Unknown' as client_id,\n        'Unknown' as client_name,\n        'Unknown' as delivery_manager,\n        'Unknown' as delivery_owner,\n        'Unknown' as lead_channel,\n        'Unknown' as lead_source,\n        'Unknown' as last_round_type,\n        'Unknown' as client_industry,\n        'Unknown' as ideal_client_profile_score,\n        'Unknown' as crunchbase_category,\n        'Unknown' as client_country,\n        'Unknown' as client_state,\n        'Unknown' as client_city,\n        'Unknown' as client_status,\n        -1        as annual_revenue,\n        'Unknown' as employee_range,\n        'Unknown' as client_phone,\n        'Unknown' as primary_focus,\n        'Unknown' as client_region,\n        'Unknown' as client_segment\n    union\n    select\n        {{dbt_utils.surrogate_key(['\\'No Match\\''])}} as client_key,\n        'No Match' as client_id,\n        'No Match' as client_name,\n        'No Match' as delivery_manager,\n        'No Match' as delivery_owner,\n        'No Match' as lead_channel,\n        'No Match' as lead_source,\n        'No Match' as last_round_type,\n        'No Match' as client_industry,\n        'No Match' as ideal_client_profile_score,\n        'No Match' as crunchbase_category,\n        'No Match' as client_country,\n        'No Match' as client_state,\n        'No Match' as client_city,\n        'No Match' as client_status,\n        -2         as annual_revenue,\n        'No Match' as employee_range,\n        'No Match' as client_phone,\n        'No Match' as primary_focus,\n        'No Match' as client_region,\n        'No Match' as client_segment\n\n)\n, clients as (\n\n    select\n        md5(ifnull(accounts.client_id::varchar, 'Unknown'))             as client_key,\n        ifnull(accounts.client_id, 'Unknown')                           as client_id,\n        ifnull(accounts.client_name, 'Unknown')                         as client_name,\n        ifnull(accounts.delivery_manager, 'Unknown')                    as delivery_manager,\n        ifnull(accounts.delivery_owner, 'Unknown')                      as delivery_owner,\n        ifnull(accounts.lead_channel, 'Unknown')                        as lead_channel,\n        ifnull(accounts.lead_source, 'Unknown')                         as lead_source,\n        ifnull(accounts.last_round_type, 'Unknown')                     as last_round_type,\n        ifnull(accounts.industry, 'Unknown')                            as client_industry,\n        ifnull(accounts.ideal_client_profile_score, 'Unknown')          as ideal_client_profile_score,\n        ifnull(accounts.crunchbase_category , 'Unknown')                as crunchbase_category,\n        ifnull(accounts.billing_country, 'Unknown')                     as client_country,\n        ifnull(accounts.billing_state, 'Unknown')                       as client_state,\n        ifnull(accounts.billing_city, 'Unknown')                        as client_city,\n        ifnull(accounts.client_status, 'Unknown')                       as client_status,\n        ifnull(accounts.annual_revenue, -1)                             as annual_revenue,\n        ifnull(accounts.employee_range, 'Unknown')                      as employee_range,\n        ifnull(accounts.client_phone, 'Unknown')                        as client_phone,\n        ifnull(accounts.primary_focus, 'Unknown')                       as primary_focus,\n        ifnull(accounts.region, 'Unknown')                              as client_region,\n        ifnull(accounts.segment, 'Unknown')                             as client_segment\n    from accounts\n    union\n    select * from seed\n)\n\nselect * from clients", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_hist_salesforce_client"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "common", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "common", "dim_client"], "unique_id": "model.edw.dim_client", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/common/dim_client.sql", "original_file_path": "models/marts/common/dim_client.sql", "name": "dim_client", "alias": "dim_client", "checksum": {"name": "sha256", "checksum": "8d6dd877b9d74556ed8cf1fd1a633d2e6e3fe036fe2d8712efc19753a72ce6a1"}, "tags": [], "refs": [["stg_hist_salesforce_client"]], "sources": [], "description": "Describes clients (salesforce accounts)", "columns": {"client_key": {"name": "client_key", "description": "surrogate key for client (md5 hash of client_id)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_id": {"name": "client_id", "description": "source system identifier of client", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_name": {"name": "client_name", "description": "Name of client in SOR", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_manager": {"name": "delivery_manager", "description": "Delivery person responsible for managing client work", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_owner": {"name": "delivery_owner", "description": "Devliery person responsible for account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_channel": {"name": "lead_channel", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_source": {"name": "lead_source", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_round_type": {"name": "last_round_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_industry": {"name": "client_industry", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ideal_client_profile_score": {"name": "ideal_client_profile_score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crunchbase_category": {"name": "crunchbase_category", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_country": {"name": "client_country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_state": {"name": "client_state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_city": {"name": "client_city", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_status": {"name": "client_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annual_revenue": {"name": "annual_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee_range": {"name": "employee_range", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_phone": {"name": "client_phone", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_focus": {"name": "primary_focus", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_region": {"name": "client_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_segment": {"name": "client_segment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/common/schema.yml", "build_path": "target/compiled/edw/models/marts/common/dim_client.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "common", "enabled": true}, "compiled_sql": "\n\nwith accounts as (\n\n    select * from psa_dev.scratch_brana.stg_hist_salesforce_client where dbt_valid_to is null\n\n)\n, seed as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) as client_key,\n        'Unknown' as client_id,\n        'Unknown' as client_name,\n        'Unknown' as delivery_manager,\n        'Unknown' as delivery_owner,\n        'Unknown' as lead_channel,\n        'Unknown' as lead_source,\n        'Unknown' as last_round_type,\n        'Unknown' as client_industry,\n        'Unknown' as ideal_client_profile_score,\n        'Unknown' as crunchbase_category,\n        'Unknown' as client_country,\n        'Unknown' as client_state,\n        'Unknown' as client_city,\n        'Unknown' as client_status,\n        -1        as annual_revenue,\n        'Unknown' as employee_range,\n        'Unknown' as client_phone,\n        'Unknown' as primary_focus,\n        'Unknown' as client_region,\n        'Unknown' as client_segment\n    union\n    select\n        md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) as client_key,\n        'No Match' as client_id,\n        'No Match' as client_name,\n        'No Match' as delivery_manager,\n        'No Match' as delivery_owner,\n        'No Match' as lead_channel,\n        'No Match' as lead_source,\n        'No Match' as last_round_type,\n        'No Match' as client_industry,\n        'No Match' as ideal_client_profile_score,\n        'No Match' as crunchbase_category,\n        'No Match' as client_country,\n        'No Match' as client_state,\n        'No Match' as client_city,\n        'No Match' as client_status,\n        -2         as annual_revenue,\n        'No Match' as employee_range,\n        'No Match' as client_phone,\n        'No Match' as primary_focus,\n        'No Match' as client_region,\n        'No Match' as client_segment\n\n)\n, clients as (\n\n    select\n        md5(ifnull(accounts.client_id::varchar, 'Unknown'))             as client_key,\n        ifnull(accounts.client_id, 'Unknown')                           as client_id,\n        ifnull(accounts.client_name, 'Unknown')                         as client_name,\n        ifnull(accounts.delivery_manager, 'Unknown')                    as delivery_manager,\n        ifnull(accounts.delivery_owner, 'Unknown')                      as delivery_owner,\n        ifnull(accounts.lead_channel, 'Unknown')                        as lead_channel,\n        ifnull(accounts.lead_source, 'Unknown')                         as lead_source,\n        ifnull(accounts.last_round_type, 'Unknown')                     as last_round_type,\n        ifnull(accounts.industry, 'Unknown')                            as client_industry,\n        ifnull(accounts.ideal_client_profile_score, 'Unknown')          as ideal_client_profile_score,\n        ifnull(accounts.crunchbase_category , 'Unknown')                as crunchbase_category,\n        ifnull(accounts.billing_country, 'Unknown')                     as client_country,\n        ifnull(accounts.billing_state, 'Unknown')                       as client_state,\n        ifnull(accounts.billing_city, 'Unknown')                        as client_city,\n        ifnull(accounts.client_status, 'Unknown')                       as client_status,\n        ifnull(accounts.annual_revenue, -1)                             as annual_revenue,\n        ifnull(accounts.employee_range, 'Unknown')                      as employee_range,\n        ifnull(accounts.client_phone, 'Unknown')                        as client_phone,\n        ifnull(accounts.primary_focus, 'Unknown')                       as primary_focus,\n        ifnull(accounts.region, 'Unknown')                              as client_region,\n        ifnull(accounts.segment, 'Unknown')                             as client_segment\n    from accounts\n    union\n    select * from seed\n)\n\nselect * from clients", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_client"}, "model.edw.dim_date": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('dates') }}\n)\n, seed as (\n\n    select\n        '1999-12-31' as date_key,\n        -1           as day_of_year,\n        'Unknown'    as day_suffix,\n        -1           as week_key,\n        -1           as day_of_week,\n        -1           as day_of_week_iso,\n        'Unknown'    as week_day_short_desc,\n        'Unknown'    as week_day_desc,\n        '1999-12-31' as first_day_of_week,\n        '1999-12-31' as last_day_of_week,\n        'Unknown'    as full_week_desc,\n        -1           as month_key,\n        -1           as month_of_year,\n        -1           as day_of_month,\n        -1           as week_of_year,\n        -1           as week_of_year_iso,\n        'Unknown'    as month_short_desc,\n        'Unknown'    as month_desc,\n        '1999-12-31' as first_day_of_month,\n        '1999-12-31' as last_day_of_month,\n        -1           as quarter_key,\n        -1           as quarter_of_year,\n        -1           as day_of_quarter,\n        'Unknown'    as quarter_short_desc,\n        'Unknown'    as quarter_desc,\n        '1999-12-31' as first_day_of_quarter,\n        '1999-12-31' as last_day_of_quarter,\n        -1           as year_key,\n        '1999-12-31' as first_day_of_year,\n        '1999-12-31' as last_day_of_year,\n        -1           as ordinal_weekday_of_month,\n        'Unknown'    as holiday_desc,\n        null         as is_holiday\n    union\n    select\n        '1999-12-30' as date_key,\n        -2           as day_of_year,\n        'No Match'   as day_suffix,\n        -2           as week_key,\n        -2           as day_of_week,\n        -2           as day_of_week_iso,\n        'No Match'   as week_day_short_desc,\n        'No Match'   as week_day_desc,\n        '1999-12-30' as first_day_of_week,\n        '1999-12-30' as last_day_of_week,\n        'No Match'   as full_week_desc,\n        -2           as month_key,\n        -2           as month_of_year,\n        -2           as day_of_month,\n        -2           as week_of_year,\n        -2           as week_of_year_iso,\n        'No Match'   as month_short_desc,\n        'No Match'   as month_desc,\n        '1999-12-31' as first_day_of_month,\n        '1999-12-31' as last_day_of_month,\n        -2           as quarter_key,\n        -2           as quarter_of_year,\n        -2           as day_of_quarter,\n        'No Match'   as quarter_short_desc,\n        'No Match'   as quarter_desc,\n        '1999-12-30' as first_day_of_quarter,\n        '1999-12-30' as last_day_of_quarter,\n        -2           as year_key,\n        '1999-12-30' as first_day_of_year,\n        '1999-12-30' as last_day_of_year,\n        -2           as ordinal_weekday_of_month,\n        'No Match'   as holiday_desc,\n        null         as is_holiday\n)\n, dates as (\n\n    select * from source \n    union \n    select * from seed\n\n)\nselect * from dates", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.dates"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "common", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "common", "dim_date"], "unique_id": "model.edw.dim_date", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/common/dim_date.sql", "original_file_path": "models/marts/common/dim_date.sql", "name": "dim_date", "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "d3f6d5d855d592987685c49f413592e5b9d4d84b7eb3114466e0670ee6514858"}, "tags": [], "refs": [["dates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/common/schema.yml", "build_path": "target/compiled/edw/models/marts/common/dim_date.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "common", "enabled": true}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.dates\n)\n, seed as (\n\n    select\n        '1999-12-31' as date_key,\n        -1           as day_of_year,\n        'Unknown'    as day_suffix,\n        -1           as week_key,\n        -1           as day_of_week,\n        -1           as day_of_week_iso,\n        'Unknown'    as week_day_short_desc,\n        'Unknown'    as week_day_desc,\n        '1999-12-31' as first_day_of_week,\n        '1999-12-31' as last_day_of_week,\n        'Unknown'    as full_week_desc,\n        -1           as month_key,\n        -1           as month_of_year,\n        -1           as day_of_month,\n        -1           as week_of_year,\n        -1           as week_of_year_iso,\n        'Unknown'    as month_short_desc,\n        'Unknown'    as month_desc,\n        '1999-12-31' as first_day_of_month,\n        '1999-12-31' as last_day_of_month,\n        -1           as quarter_key,\n        -1           as quarter_of_year,\n        -1           as day_of_quarter,\n        'Unknown'    as quarter_short_desc,\n        'Unknown'    as quarter_desc,\n        '1999-12-31' as first_day_of_quarter,\n        '1999-12-31' as last_day_of_quarter,\n        -1           as year_key,\n        '1999-12-31' as first_day_of_year,\n        '1999-12-31' as last_day_of_year,\n        -1           as ordinal_weekday_of_month,\n        'Unknown'    as holiday_desc,\n        null         as is_holiday\n    union\n    select\n        '1999-12-30' as date_key,\n        -2           as day_of_year,\n        'No Match'   as day_suffix,\n        -2           as week_key,\n        -2           as day_of_week,\n        -2           as day_of_week_iso,\n        'No Match'   as week_day_short_desc,\n        'No Match'   as week_day_desc,\n        '1999-12-30' as first_day_of_week,\n        '1999-12-30' as last_day_of_week,\n        'No Match'   as full_week_desc,\n        -2           as month_key,\n        -2           as month_of_year,\n        -2           as day_of_month,\n        -2           as week_of_year,\n        -2           as week_of_year_iso,\n        'No Match'   as month_short_desc,\n        'No Match'   as month_desc,\n        '1999-12-31' as first_day_of_month,\n        '1999-12-31' as last_day_of_month,\n        -2           as quarter_key,\n        -2           as quarter_of_year,\n        -2           as day_of_quarter,\n        'No Match'   as quarter_short_desc,\n        'No Match'   as quarter_desc,\n        '1999-12-30' as first_day_of_quarter,\n        '1999-12-30' as last_day_of_quarter,\n        -2           as year_key,\n        '1999-12-30' as first_day_of_year,\n        '1999-12-30' as last_day_of_year,\n        -2           as ordinal_weekday_of_month,\n        'No Match'   as holiday_desc,\n        null         as is_holiday\n)\n, dates as (\n\n    select * from source \n    union \n    select * from seed\n\n)\nselect * from dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_date"}, "model.edw.dim_month": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n    )\n}}\n\nselect\n    month_key,\n    month_of_year,\n    month_short_desc,\n    month_desc,\n    first_day_of_month,\n    last_day_of_month,\n    quarter_key,\n    quarter_of_year,\n    quarter_short_desc,\n    quarter_desc,\n    first_day_of_quarter,\n    last_day_of_quarter,\n    year_key,\n    first_day_of_year,\n    last_day_of_year\n\nfrom\n    {{ ref('dim_date') }}\n\ngroup by\n    month_key,\n    month_of_year,\n    month_short_desc,\n    month_desc,\n    first_day_of_month,\n    last_day_of_month,\n    quarter_key,\n    quarter_of_year,\n    quarter_short_desc,\n    quarter_desc,\n    first_day_of_quarter,\n    last_day_of_quarter,\n    year_key,\n    first_day_of_year,\n    last_day_of_year", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.dim_date"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "common", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "common", "dim_month"], "unique_id": "model.edw.dim_month", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/common/dim_month.sql", "original_file_path": "models/marts/common/dim_month.sql", "name": "dim_month", "alias": "dim_month", "checksum": {"name": "sha256", "checksum": "bd821739b315428076c17f2c7af3d3622049db4aee036401fcb5cb25f4296184"}, "tags": [], "refs": [["dim_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/common/schema.yml", "build_path": "target/compiled/edw/models/marts/common/dim_month.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "common", "enabled": true}, "compiled_sql": "\n\nselect\n    month_key,\n    month_of_year,\n    month_short_desc,\n    month_desc,\n    first_day_of_month,\n    last_day_of_month,\n    quarter_key,\n    quarter_of_year,\n    quarter_short_desc,\n    quarter_desc,\n    first_day_of_quarter,\n    last_day_of_quarter,\n    year_key,\n    first_day_of_year,\n    last_day_of_year\n\nfrom\n    analytics_dev.scratch_brana.dim_date\n\ngroup by\n    month_key,\n    month_of_year,\n    month_short_desc,\n    month_desc,\n    first_day_of_month,\n    last_day_of_month,\n    quarter_key,\n    quarter_of_year,\n    quarter_short_desc,\n    quarter_desc,\n    first_day_of_quarter,\n    last_day_of_quarter,\n    year_key,\n    first_day_of_year,\n    last_day_of_year", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_month"}, "model.edw.dim_task": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_pulseviz_task_event_stats') }}\n\n)\n, subtasks as (\n\n    select * from {{ ref('stg_pulseviz_subtasks') }}\n\n)\n, seed as (\n\n    select\n        {{dbt_utils.surrogate_key(['null'])}} as task_key,\n        'Unknown' as task_category,\n        'Unknown' as task_type,\n        'Unknown' as lvl1,\n        'Unknown' as lvl2,\n        'Unknown' as task_full_name\n    union\n    select\n        {{dbt_utils.surrogate_key(['\\'No Match\\''])}} as task_key,\n        'No Match' as task_category,\n        'No Match' as task_type,\n        'No Match' as lvl1,\n        'No Match' as lvl2,\n        'No Match' as task_full_name\n\n)\n, tasks as (\n\n    select distinct \n        {{ dbt_utils.surrogate_key(['event_type','task_type']) }} as task_key,\n        case \n            when event_type = 1 then 'Work Task'\n            when event_type = 2 then 'Review Task'\n        end as task_category,\n\n        case \n            when event_type = 1 then \n                case\n                    when contains(task_type, 'point-') then 'Identify Point'\n                    else initcap(replace(task_type, '_', ' '))\n                end\n\n            when event_type = 2 then\n            \n                case \n                    when regexp_instr(task_type, '[0-9]{4,4}_[0-9]{2,2}_[0-9]{2,2}') > 0\n                        then initcap(\n                            replace(\n                                substring(\n                                    task_type, \n                                    1, \n                                    regexp_instr(task_type, '[0-9]{4,4}_[0-9]{2,2}_[0-9]{2,2}') - 1), \n                                '_', \n                                ' '\n                            )\n                        )\n                    when contains(task_type, 'review_dataset')                      then 'Review Dataset'\n                    when task_type = 'qa_external'                                  then 'QA External'\n                    when task_type = 'qa_internal'                                  then 'QA Internal'\n                    when contains(task_type, 'review_skyboxes')                     then 'Review Skyboxes'\n                    when task_type regexp 'review_[a-z]*\\/[a-z]*'                   then 'Review Fruit'\n                    else initcap(task_type)\n                end\n            else 'Unknown'\n        end as task_type,\n        case \n            when contains(task_type, '.') then split(task_type, '.')[0]::varchar\n            when task_type regexp 'review_[a-z]*\\/[a-z]*' then regexp_substr('review_macadamias/fruit', '_([a-z]*)\\/',1,1, 'e')\n            when contains(task_type, 'point-') then \n                case substring(task_type, 7,2)\n                    when 'L ' then initcap( split(task_type, ' ')[1])\n                    when 'R ' then initcap( split(task_type, ' ')[1])\n                    else initcap( split(task_type, '-')[1])\n                end\n            when contains(task_type, '.') then split(task_type, '.')[1]::varchar\n            else 'Not Applicable'\n        end as lvl1,\n        case \n            when contains(task_type, 'point-') then\n                case substring(task_type, 7,2)\n                    when 'L ' then 'Left'\n                    when 'R ' then 'Right'\n                    else 'Not Applicable'\n                end\n            when contains (task_type, '.') then split(task_type, '.')[1]::varchar\n            else 'Not Applicable'\n        end as lvl2,\n        task_type as task_full_name\n    from source\n    {# left join matterport_old\n        on source.task_id = matterport_old.task_id #}\n    where not exists (select 1 from subtasks where source.task_event_id = subtasks.task_event_id)\n    union\n    select * from seed\n\n)\nselect * from tasks d", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_pulseviz_task_event_stats", "model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "performance", "database": "analytics", "tags": ["performance"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "performance", "dim_task"], "unique_id": "model.edw.dim_task", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/performance/dim_task.sql", "original_file_path": "models/marts/performance/dim_task.sql", "name": "dim_task", "alias": "dim_task", "checksum": {"name": "sha256", "checksum": "4b68379042f033549498b95dcc7c737083c31c95f5eeabcf4f72bbe2a781fd79"}, "tags": ["performance"], "refs": [["stg_pulseviz_task_event_stats"], ["stg_pulseviz_subtasks"]], "sources": [], "description": "Dimension describing tasks", "columns": {"task_key": {"name": "task_key", "description": "Surrogate identifier of a task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_category": {"name": "task_category", "description": "Top-level category of task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "Type of task - can be one or more per workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lvl1": {"name": "lvl1", "description": "Additional task type granularity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lvl2": {"name": "lvl2", "description": "Additional task type granularity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_full_name": {"name": "task_full_name", "description": "Name of task in the source system", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/performance/schema.yml", "build_path": "target/compiled/edw/models/marts/performance/dim_task.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "performance", "enabled": true, "tags": "performance"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n\n)\n, subtasks as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_subtasks\n\n)\n, seed as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) as task_key,\n        'Unknown' as task_category,\n        'Unknown' as task_type,\n        'Unknown' as lvl1,\n        'Unknown' as lvl2,\n        'Unknown' as task_full_name\n    union\n    select\n        md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) as task_key,\n        'No Match' as task_category,\n        'No Match' as task_type,\n        'No Match' as lvl1,\n        'No Match' as lvl2,\n        'No Match' as task_full_name\n\n)\n, tasks as (\n\n    select distinct \n        md5(cast(\n    \n    coalesce(cast(event_type as \n    varchar\n), '') || '-' || coalesce(cast(task_type as \n    varchar\n), '')\n\n as \n    varchar\n)) as task_key,\n        case \n            when event_type = 1 then 'Work Task'\n            when event_type = 2 then 'Review Task'\n        end as task_category,\n\n        case \n            when event_type = 1 then \n                case\n                    when contains(task_type, 'point-') then 'Identify Point'\n                    else initcap(replace(task_type, '_', ' '))\n                end\n\n            when event_type = 2 then\n            \n                case \n                    when regexp_instr(task_type, '[0-9]{4,4}_[0-9]{2,2}_[0-9]{2,2}') > 0\n                        then initcap(\n                            replace(\n                                substring(\n                                    task_type, \n                                    1, \n                                    regexp_instr(task_type, '[0-9]{4,4}_[0-9]{2,2}_[0-9]{2,2}') - 1), \n                                '_', \n                                ' '\n                            )\n                        )\n                    when contains(task_type, 'review_dataset')                      then 'Review Dataset'\n                    when task_type = 'qa_external'                                  then 'QA External'\n                    when task_type = 'qa_internal'                                  then 'QA Internal'\n                    when contains(task_type, 'review_skyboxes')                     then 'Review Skyboxes'\n                    when task_type regexp 'review_[a-z]*\\/[a-z]*'                   then 'Review Fruit'\n                    else initcap(task_type)\n                end\n            else 'Unknown'\n        end as task_type,\n        case \n            when contains(task_type, '.') then split(task_type, '.')[0]::varchar\n            when task_type regexp 'review_[a-z]*\\/[a-z]*' then regexp_substr('review_macadamias/fruit', '_([a-z]*)\\/',1,1, 'e')\n            when contains(task_type, 'point-') then \n                case substring(task_type, 7,2)\n                    when 'L ' then initcap( split(task_type, ' ')[1])\n                    when 'R ' then initcap( split(task_type, ' ')[1])\n                    else initcap( split(task_type, '-')[1])\n                end\n            when contains(task_type, '.') then split(task_type, '.')[1]::varchar\n            else 'Not Applicable'\n        end as lvl1,\n        case \n            when contains(task_type, 'point-') then\n                case substring(task_type, 7,2)\n                    when 'L ' then 'Left'\n                    when 'R ' then 'Right'\n                    else 'Not Applicable'\n                end\n            when contains (task_type, '.') then split(task_type, '.')[1]::varchar\n            else 'Not Applicable'\n        end as lvl2,\n        task_type as task_full_name\n    from source\n    \n    where not exists (select 1 from subtasks where source.task_event_id = subtasks.task_event_id)\n    union\n    select * from seed\n\n)\nselect * from tasks d", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_task"}, "model.edw.fact_tasks": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\n\nwith source as (\n\n    select * from {{ ref('stg_pulseviz_task_event_stats') }}\n\n)\n, cis_workstreams as (\n\n    select * from {{ ref('stg_cis_workstreams_current') }}\n\n)\n\n, tasks_client as (\n\n    select\n        source.*,\n        client_key\n    from source \n    left join cis_workstreams\n        on source.project_id = cis_workstreams.project_key\n    \n)\n, clients as (\n\n    select * from {{ ref('dim_client') }}\n)\n, workstreams as (\n\n    select * from {{ ref('dim_workstream') }}\n\n)\n, workers as (\n\n    select * from {{ ref('dim_worker') }}\n\n)\n, task_assets as (\n\n    select * from {{ ref('dim_task_asset') }}\n\n)\n, tasks_dim as (\n\n    select * from {{ ref('dim_task') }}\n\n)\n, dates as (\n\n    select * from {{ ref('dim_date') }}\n\n)\n, subtasks as (\n\n    select * from {{ ref('stg_pulseviz_subtasks') }}\n    \n)\n, matterport_annotation_count as (\n\n    select \n        item_id, \n        count(1) as annotation_count\n    from subtasks\n    group by 1\n\n)\n, tasks as (\n\n    select\n\n        -- get client dimension key\n        case \n            when tasks_client.client_key in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }} \n            when clients.client_key is null             then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }}\n            else clients.client_key\n        end as client_key,\n        -- get workstream dimension key\n        case \n            when tasks_client.project_id in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }}\n            when workstreams.workstream_key is null     then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }}\n            else workstreams.workstream_key\n        end as workstream_key,\n        -- get worker dimension key for task worker\n        case \n            when tasks_client.reviewer_id is null       then {{ dbt_utils.surrogate_key(['null']) }} \n            when workers.worker_key is null             then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }}\n            else workers.worker_key\n        end as worker_key,\n        -- get task dimension key\n        case \n            when tasks_client.event_type is null \n                or tasks_client.task_type in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }}\n            when tasks_dim.task_key is null     then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }} \n            else tasks_dim.task_key\n        end as task_key,\n        -- get task asset dimension key\n        case \n            when tasks_client.dataset_id in (null, '') \n                or tasks_client.asset_name in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }}\n            when task_assets.task_asset_key is null     then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }} \n            else task_assets.task_asset_key\n        end as task_asset_key,\n        -- date dimensions\n        case \n            when task_started_date is null then '1999-12-31'\n            when started_dates.date_key is null then '1999-12-30'\n            else started_dates.date_key\n        end as task_started_date_key,\n        case \n            when task_started_date is null then '1999-12-31'\n            when completed_dates.date_key is null then '1999-12-30'\n            else completed_dates.date_key\n        end as task_completed_date_key,\n        -- task id natural key (not included in dimension)\n        task_id as task_degenerate_key,\n\n        --measures\n        1 as task_count,\n        tasks_client.task_duration,\n        coalesce(tasks_client.annotation_count, matterport_annotation_count.annotation_count) as subtask_count\n    from tasks_client\n    left join matterport_annotation_count\n        on tasks_client.task_id = matterport_annotation_count.item_id\n    left join workstreams\n        on  {{ dbt_utils.surrogate_key(['project_id']) }}  = workstreams.workstream_key\n    left join workers\n        on {{ dbt_utils.surrogate_key(['tasks_client.worker_email']) }} = workers.worker_key\n    left join clients\n        on tasks_client.client_key = clients.client_key\n    left join task_assets\n        on {{ dbt_utils.surrogate_key(['tasks_client.task_type','tasks_client.asset_name', 'tasks_client.project_name']) }} = task_assets.task_asset_key\n    left join tasks_dim\n        on {{ dbt_utils.surrogate_key(['tasks_client.event_type','tasks_client.task_type']) }} = tasks_dim.task_key\n    left join dates started_dates\n        on tasks_client.task_started_date = started_dates.date_key\n    left join dates completed_dates\n        on tasks_client.task_completed_date = completed_dates.date_key\n    where \n        event_type = 1 \n        and not exists (select 1 from subtasks where tasks_client.task_event_id = subtasks.task_event_id)\n        and not (task_started_date is null or task_completed_date is null)\n\n)\nselect * from tasks", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_pulseviz_task_event_stats", "model.edw.stg_cis_workstreams_current", "model.edw.dim_client", "model.edw.dim_workstream", "model.edw.dim_worker", "model.edw.dim_task_asset", "model.edw.dim_task", "model.edw.dim_date", "model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "performance", "database": "analytics", "tags": ["performance"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "performance", "fact_tasks"], "unique_id": "model.edw.fact_tasks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/performance/fact_tasks.sql", "original_file_path": "models/marts/performance/fact_tasks.sql", "name": "fact_tasks", "alias": "fact_tasks", "checksum": {"name": "sha256", "checksum": "71a9208191c70ab0590ca5aa6b254ca5e92c459a596c7f00ecb6555a09afeb21"}, "tags": ["performance"], "refs": [["stg_pulseviz_task_event_stats"], ["stg_cis_workstreams_current"], ["dim_client"], ["dim_workstream"], ["dim_worker"], ["dim_task_asset"], ["dim_task"], ["dim_date"], ["stg_pulseviz_subtasks"]], "sources": [], "description": "Fact table containing measures related to tasks.  Includes review tasks", "columns": {"client_key": {"name": "client_key", "description": "Foreign key to client dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workstream_key": {"name": "workstream_key", "description": "Foreign key to workstream dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_key": {"name": "worker_key", "description": "Foreign key to worker dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_key": {"name": "task_key", "description": "Foreign key to task dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_degenerate_key": {"name": "task_degenerate_key", "description": "Source system identifier of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date_key": {"name": "task_started_date_key", "description": "Date the task was started.  Foreign key to date dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed_date_key": {"name": "task_completed_date_key", "description": "Date the task was completed.  Foreign key to date dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_asset_key": {"name": "task_asset_key", "description": "Surrogate identifier for a task asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_count": {"name": "task_count", "description": "This field allows easy summing of counts in BI tools.  Always 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_duration": {"name": "task_duration", "description": "Total duration of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtask_count": {"name": "subtask_count", "description": "Total count of subtasks - such as annotations - performed during the task", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/performance/schema.yml", "build_path": "target/compiled/edw/models/marts/performance/fact_tasks.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "performance", "enabled": true, "tags": "performance"}, "compiled_sql": "\n\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n\n)\n, cis_workstreams as (\n\n    select * from psa_dev.scratch_brana.stg_cis_workstreams_current\n\n)\n\n, tasks_client as (\n\n    select\n        source.*,\n        client_key\n    from source \n    left join cis_workstreams\n        on source.project_id = cis_workstreams.project_key\n    \n)\n, clients as (\n\n    select * from analytics_dev.scratch_brana.dim_client\n)\n, workstreams as (\n\n    select * from analytics_dev.scratch_brana.dim_workstream\n\n)\n, workers as (\n\n    select * from analytics_dev.scratch_brana.dim_worker\n\n)\n, task_assets as (\n\n    select * from analytics_dev.scratch_brana.dim_task_asset\n\n)\n, tasks_dim as (\n\n    select * from analytics_dev.scratch_brana.dim_task\n\n)\n, dates as (\n\n    select * from analytics_dev.scratch_brana.dim_date\n\n)\n, subtasks as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_subtasks\n    \n)\n, matterport_annotation_count as (\n\n    select \n        item_id, \n        count(1) as annotation_count\n    from subtasks\n    group by 1\n\n)\n, tasks as (\n\n    select\n\n        -- get client dimension key\n        case \n            when tasks_client.client_key in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            when clients.client_key is null             then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n))\n            else clients.client_key\n        end as client_key,\n        -- get workstream dimension key\n        case \n            when tasks_client.project_id in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n))\n            when workstreams.workstream_key is null     then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n))\n            else workstreams.workstream_key\n        end as workstream_key,\n        -- get worker dimension key for task worker\n        case \n            when tasks_client.reviewer_id is null       then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            when workers.worker_key is null             then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n))\n            else workers.worker_key\n        end as worker_key,\n        -- get task dimension key\n        case \n            when tasks_client.event_type is null \n                or tasks_client.task_type in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n))\n            when tasks_dim.task_key is null     then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            else tasks_dim.task_key\n        end as task_key,\n        -- get task asset dimension key\n        case \n            when tasks_client.dataset_id in (null, '') \n                or tasks_client.asset_name in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n))\n            when task_assets.task_asset_key is null     then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            else task_assets.task_asset_key\n        end as task_asset_key,\n        -- date dimensions\n        case \n            when task_started_date is null then '1999-12-31'\n            when started_dates.date_key is null then '1999-12-30'\n            else started_dates.date_key\n        end as task_started_date_key,\n        case \n            when task_started_date is null then '1999-12-31'\n            when completed_dates.date_key is null then '1999-12-30'\n            else completed_dates.date_key\n        end as task_completed_date_key,\n        -- task id natural key (not included in dimension)\n        task_id as task_degenerate_key,\n\n        --measures\n        1 as task_count,\n        tasks_client.task_duration,\n        coalesce(tasks_client.annotation_count, matterport_annotation_count.annotation_count) as subtask_count\n    from tasks_client\n    left join matterport_annotation_count\n        on tasks_client.task_id = matterport_annotation_count.item_id\n    left join workstreams\n        on  md5(cast(\n    \n    coalesce(cast(project_id as \n    varchar\n), '')\n\n as \n    varchar\n))  = workstreams.workstream_key\n    left join workers\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.worker_email as \n    varchar\n), '')\n\n as \n    varchar\n)) = workers.worker_key\n    left join clients\n        on tasks_client.client_key = clients.client_key\n    left join task_assets\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.task_type as \n    varchar\n), '') || '-' || coalesce(cast(tasks_client.asset_name as \n    varchar\n), '') || '-' || coalesce(cast(tasks_client.project_name as \n    varchar\n), '')\n\n as \n    varchar\n)) = task_assets.task_asset_key\n    left join tasks_dim\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.event_type as \n    varchar\n), '') || '-' || coalesce(cast(tasks_client.task_type as \n    varchar\n), '')\n\n as \n    varchar\n)) = tasks_dim.task_key\n    left join dates started_dates\n        on tasks_client.task_started_date = started_dates.date_key\n    left join dates completed_dates\n        on tasks_client.task_completed_date = completed_dates.date_key\n    where \n        event_type = 1 \n        and not exists (select 1 from subtasks where tasks_client.task_event_id = subtasks.task_event_id)\n        and not (task_started_date is null or task_completed_date is null)\n\n)\nselect * from tasks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_tasks"}, "model.edw.fact_reviews": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_pulseviz_task_event_stats') }}\n\n)\n, cis_workstreams as (\n\n    select * from {{ ref('stg_cis_workstreams_current') }}\n\n)\n, tasks_client as (\n\n    select\n        source.*,\n        client_key\n    from source \n    left join cis_workstreams\n        on source.project_id = cis_workstreams.project_key\n    \n)\n, task_assets as (\n\n    select * from {{ ref('dim_task_asset') }}\n\n)\n, tasks_dim as (\n\n    select * from {{ ref('dim_task') }}\n\n)\n, workstreams as (\n\n    select * from {{ ref('dim_workstream') }}\n\n)\n, clients as (\n\n    select * from {{ ref('dim_client') }}\n)\n, workers as (\n\n    select * from {{ ref('dim_worker') }}\n\n)\n, reviews as (\n\n    select \n        -- get client dimension key\n        case \n            when tasks_client.client_key in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }} \n            else tasks_client.client_key\n        end as client_key,\n        -- get workstream dimension key\n        case \n            when tasks_client.project_id in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }}\n            when workstreams.workstream_key is null     then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }}\n            else workstreams.workstream_key\n        end as workstream_key,\n        -- get worker dimension key for task worker\n        case \n            when tasks_client.worker_email is null      then {{ dbt_utils.surrogate_key(['null']) }} \n            when workers.worker_key is null             then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }}\n            else workers.worker_key\n        end as worker_key,\n        -- get worker dimension key for task reviewer\n        case \n            when tasks_client.reviewer_id in (null, '') then {{ dbt_utils.surrogate_key(['null']) }} \n            when reviewers.worker_key is null           then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }}\n            else reviewers.worker_key\n        end as reviewer_key,\n        -- get task dimension key\n        case \n            when tasks_client.event_type is null \n                or tasks_client.task_type in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }}\n            when tasks_dim.task_key is null     then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }} \n            else tasks_dim.task_key\n        end as task_key,\n        -- get task asset dimension key\n        case \n            when tasks_client.dataset_id in (null, '') \n                or tasks_client.asset_name in (null, '')  then {{ dbt_utils.surrogate_key(['null']) }}\n            when task_assets.task_asset_key is null     then {{ dbt_utils.surrogate_key(['\\'No Match\\'']) }} \n            else task_assets.task_asset_key\n        end as task_asset_key,\n\n        -- date dimensions\n        task_started_date as review_start_date_key,\n        task_completed_date as review_complete_date_key,\n\n        --measures\n        1 as review_count,\n        annotation_count as subtasks_reviewed_count,\n        task_duration as review_duration,\n        review_score\n    from tasks_client\n    left join workstreams\n        on {{ dbt_utils.surrogate_key(['tasks_client.project_id']) }} = workstreams.workstream_key\n    left join workers\n        on {{ dbt_utils.surrogate_key(['tasks_client.worker_email']) }} = workers.worker_key\n    left join workers reviewers\n        on {{ dbt_utils.surrogate_key(['tasks_client.reviewer_id']) }} = reviewers.worker_key\n    left join clients\n        on tasks_client.client_key = clients.client_key\n    left join task_assets\n        on {{ dbt_utils.surrogate_key(['tasks_client.task_type','tasks_client.asset_name', 'tasks_client.project_name']) }} = task_assets.task_asset_key\n    left join tasks_dim\n        on {{ dbt_utils.surrogate_key(['tasks_client.event_type','tasks_client.task_type']) }} = tasks_dim.task_key\n    where \n        tasks_client.event_type = 2   -- is a review\n        and not (task_started_date is null or task_completed_date is null)\n\n)\n\nselect * from reviews", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_pulseviz_task_event_stats", "model.edw.stg_cis_workstreams_current", "model.edw.dim_task_asset", "model.edw.dim_task", "model.edw.dim_workstream", "model.edw.dim_client", "model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "performance", "database": "analytics", "tags": ["performance"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "performance", "fact_reviews"], "unique_id": "model.edw.fact_reviews", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/performance/fact_reviews.sql", "original_file_path": "models/marts/performance/fact_reviews.sql", "name": "fact_reviews", "alias": "fact_reviews", "checksum": {"name": "sha256", "checksum": "76e972d47a72f5b30e82dce45e21914322979f4c85e29dca3177a5cca155535b"}, "tags": ["performance"], "refs": [["stg_pulseviz_task_event_stats"], ["stg_cis_workstreams_current"], ["dim_task_asset"], ["dim_task"], ["dim_workstream"], ["dim_client"], ["dim_worker"]], "sources": [], "description": "Fact table containing measures specific to review tasks", "columns": {"workstream_key": {"name": "workstream_key", "description": "Foreign key to workstream dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_key": {"name": "worker_key", "description": "Details about the worker that performed the task. Foreign key to worker dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_key": {"name": "task_key", "description": "Foreign key to task dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reviewer_key": {"name": "reviewer_key", "description": "Details about the reviewer.  Foreign key to worker dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_start_date_key": {"name": "review_start_date_key", "description": "Foreign key to date dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_complete_date_key": {"name": "review_complete_date_key", "description": "Foreign key to date dimension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_count": {"name": "review_count", "description": "Always 1.  Allows easy summing in BI tool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtasks_reviewed_count": {"name": "subtasks_reviewed_count", "description": "Number of subtasks that were reviewed.  Does not apply to all workstreams", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_duration": {"name": "review_duration", "description": "Total duration of the review", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_score": {"name": "review_score", "description": "Resulting score of the review.  Not an ideal measure because it is not aggregatable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/performance/schema.yml", "build_path": "target/compiled/edw/models/marts/performance/fact_reviews.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "performance", "enabled": true, "tags": "performance"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n\n)\n, cis_workstreams as (\n\n    select * from psa_dev.scratch_brana.stg_cis_workstreams_current\n\n)\n, tasks_client as (\n\n    select\n        source.*,\n        client_key\n    from source \n    left join cis_workstreams\n        on source.project_id = cis_workstreams.project_key\n    \n)\n, task_assets as (\n\n    select * from analytics_dev.scratch_brana.dim_task_asset\n\n)\n, tasks_dim as (\n\n    select * from analytics_dev.scratch_brana.dim_task\n\n)\n, workstreams as (\n\n    select * from analytics_dev.scratch_brana.dim_workstream\n\n)\n, clients as (\n\n    select * from analytics_dev.scratch_brana.dim_client\n)\n, workers as (\n\n    select * from analytics_dev.scratch_brana.dim_worker\n\n)\n, reviews as (\n\n    select \n        -- get client dimension key\n        case \n            when tasks_client.client_key in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            else tasks_client.client_key\n        end as client_key,\n        -- get workstream dimension key\n        case \n            when tasks_client.project_id in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n))\n            when workstreams.workstream_key is null     then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n))\n            else workstreams.workstream_key\n        end as workstream_key,\n        -- get worker dimension key for task worker\n        case \n            when tasks_client.worker_email is null      then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            when workers.worker_key is null             then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n))\n            else workers.worker_key\n        end as worker_key,\n        -- get worker dimension key for task reviewer\n        case \n            when tasks_client.reviewer_id in (null, '') then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            when reviewers.worker_key is null           then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n))\n            else reviewers.worker_key\n        end as reviewer_key,\n        -- get task dimension key\n        case \n            when tasks_client.event_type is null \n                or tasks_client.task_type in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n))\n            when tasks_dim.task_key is null     then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            else tasks_dim.task_key\n        end as task_key,\n        -- get task asset dimension key\n        case \n            when tasks_client.dataset_id in (null, '') \n                or tasks_client.asset_name in (null, '')  then md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n))\n            when task_assets.task_asset_key is null     then md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) \n            else task_assets.task_asset_key\n        end as task_asset_key,\n\n        -- date dimensions\n        task_started_date as review_start_date_key,\n        task_completed_date as review_complete_date_key,\n\n        --measures\n        1 as review_count,\n        annotation_count as subtasks_reviewed_count,\n        task_duration as review_duration,\n        review_score\n    from tasks_client\n    left join workstreams\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.project_id as \n    varchar\n), '')\n\n as \n    varchar\n)) = workstreams.workstream_key\n    left join workers\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.worker_email as \n    varchar\n), '')\n\n as \n    varchar\n)) = workers.worker_key\n    left join workers reviewers\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.reviewer_id as \n    varchar\n), '')\n\n as \n    varchar\n)) = reviewers.worker_key\n    left join clients\n        on tasks_client.client_key = clients.client_key\n    left join task_assets\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.task_type as \n    varchar\n), '') || '-' || coalesce(cast(tasks_client.asset_name as \n    varchar\n), '') || '-' || coalesce(cast(tasks_client.project_name as \n    varchar\n), '')\n\n as \n    varchar\n)) = task_assets.task_asset_key\n    left join tasks_dim\n        on md5(cast(\n    \n    coalesce(cast(tasks_client.event_type as \n    varchar\n), '') || '-' || coalesce(cast(tasks_client.task_type as \n    varchar\n), '')\n\n as \n    varchar\n)) = tasks_dim.task_key\n    where \n        tasks_client.event_type = 2   -- is a review\n        and not (task_started_date is null or task_completed_date is null)\n\n)\n\nselect * from reviews", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.fact_reviews"}, "model.edw.dim_task_asset": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_pulseviz_task_event_stats') }}\n\n)\n, seed as (\n\n    select\n        {{dbt_utils.surrogate_key(['null'])}} as task_asset_key,\n        'Unknown' as dataset_name,\n        'Unknown' as asset_name,\n        'Unknown' as tool_project_name\n        {# 'Unknown' as sample_source #}\n    union\n    select\n        {{dbt_utils.surrogate_key(['\\'No Match\\''])}} as task_asset_key,\n        'No Match' as dataset_name,\n        'No Match' as asset_name,\n        'No Match' as tool_project_name\n        {# 'No Match' as sample_source #}\n\n)\n, assets as (\n\n    select distinct\n        {{ dbt_utils.surrogate_key(['task_type','asset_name', 'project_name']) }} as task_asset_key,\n        ifnull(task_type, 'Unknown') as dataset_name,\n        ifnull(asset_name, 'Unknown') as asset_name,\n        ifnull(project_name, 'Unknown') as tool_project_name\n        {# ifnull(latest_sample_source, 'Unknown') as sample_source #}\n    from source\n    where dataset_id is not null \n        and asset_name is not null\n    union\n    select * from seed\n)\nselect * from assets", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "performance", "database": "analytics", "tags": ["performance"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "performance", "dim_task_asset"], "unique_id": "model.edw.dim_task_asset", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/performance/dim_task_asset.sql", "original_file_path": "models/marts/performance/dim_task_asset.sql", "name": "dim_task_asset", "alias": "dim_task_asset", "checksum": {"name": "sha256", "checksum": "9e7ec083f69f35e27e683f53982b09458a1eb93bcd3716bc8d8ce5faeafdc2ab"}, "tags": ["performance"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "Identifies tool, project, data and asset names related to a task", "columns": {"task_asset_key": {"name": "task_asset_key", "description": "Surrogate identifier of a task asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name": {"name": "dataset_name", "description": "Name of dataset cloudworkers are performing tasks on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_name": {"name": "asset_name", "description": "Name of image, video or other asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tool_project_name": {"name": "tool_project_name", "description": "Name of project within a 3rd party tool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sample_source": {"name": "sample_source", "description": "Source of dataset data", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/performance/schema.yml", "build_path": "target/compiled/edw/models/marts/performance/dim_task_asset.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "performance", "enabled": true, "tags": "performance"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n\n)\n, seed as (\n\n    select\n        md5(cast(\n    \n    coalesce(cast(null as \n    varchar\n), '')\n\n as \n    varchar\n)) as task_asset_key,\n        'Unknown' as dataset_name,\n        'Unknown' as asset_name,\n        'Unknown' as tool_project_name\n        \n    union\n    select\n        md5(cast(\n    \n    coalesce(cast('No Match' as \n    varchar\n), '')\n\n as \n    varchar\n)) as task_asset_key,\n        'No Match' as dataset_name,\n        'No Match' as asset_name,\n        'No Match' as tool_project_name\n        \n\n)\n, assets as (\n\n    select distinct\n        md5(cast(\n    \n    coalesce(cast(task_type as \n    varchar\n), '') || '-' || coalesce(cast(asset_name as \n    varchar\n), '') || '-' || coalesce(cast(project_name as \n    varchar\n), '')\n\n as \n    varchar\n)) as task_asset_key,\n        ifnull(task_type, 'Unknown') as dataset_name,\n        ifnull(asset_name, 'Unknown') as asset_name,\n        ifnull(project_name, 'Unknown') as tool_project_name\n        \n    from source\n    where dataset_id is not null \n        and asset_name is not null\n    union\n    select * from seed\n)\nselect * from assets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.dim_task_asset"}, "model.edw.daily_projects_hours__grouped": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n    )\n}}\n\nwith daily_projects_hours as (\n\n    select\n        daily_project_time.*,\n        (duration / 3600)                     as hours,\n        (billable_duration / 3600)            as billable_hours,\n        (non_billable_duration / 3600)        as non_billable_hours\n\n    from\n        {{ ref('daily_projects_time__grouped') }} as daily_project_time\n\n)\n\nselect * from daily_projects_hours", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.daily_projects_time__grouped"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "billing", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "billing", "intermediate", "daily_projects_hours__grouped"], "unique_id": "model.edw.daily_projects_hours__grouped", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/billing/intermediate/daily_projects_hours__grouped.sql", "original_file_path": "models/marts/billing/intermediate/daily_projects_hours__grouped.sql", "name": "daily_projects_hours__grouped", "alias": "daily_projects_hours__grouped", "checksum": {"name": "sha256", "checksum": "ce0f98d6747ad754870dc4183f55551695ff91c5f2bc80d40932f6c0aa939d31"}, "tags": [], "refs": [["daily_projects_time__grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/billing/intermediate/daily_projects_hours__grouped.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "billing", "enabled": true}, "compiled_sql": "\n\nwith daily_projects_hours as (\n\n    select\n        daily_project_time.*,\n        (duration / 3600)                     as hours,\n        (billable_duration / 3600)            as billable_hours,\n        (non_billable_duration / 3600)        as non_billable_hours\n\n    from\n        analytics_dev.scratch_brana.daily_projects_time__grouped as daily_project_time\n\n)\n\nselect * from daily_projects_hours", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.daily_projects_hours__grouped"}, "model.edw.daily_projects_time__grouped": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n    )\n}}\n\nwith time_entries as (\n\n    select * from {{ ref('time_entries') }}\n\n)\n\nselect\n    client_key,\n    client_name,\n    project_key,\n    project_name,\n    time_entry_date_key                 as date_key,\n    count(distinct task_key)            as tasks_count,\n    count(distinct worker_id)           as workers_count,\n    sum(time_entry_duration)            as duration,\n    sum(case\n            when is_billable = True then time_entry_duration\n            else 0\n        end\n    )                                   as billable_duration,\n    sum(case\n            when is_billable = True then 0\n            else time_entry_duration\n        end\n    )                                   as non_billable_duration\n\nfrom\n    time_entries\n\ngroup by\n    1, 2, 3, 4, 5", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "billing", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "billing", "intermediate", "daily_projects_time__grouped"], "unique_id": "model.edw.daily_projects_time__grouped", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/billing/intermediate/daily_projects_time__grouped.sql", "original_file_path": "models/marts/billing/intermediate/daily_projects_time__grouped.sql", "name": "daily_projects_time__grouped", "alias": "daily_projects_time__grouped", "checksum": {"name": "sha256", "checksum": "2752fe0a5120502ad3192a6a9b7828194d721cd43124b5bb2f0cc08e605d3dcc"}, "tags": [], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/billing/intermediate/daily_projects_time__grouped.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "billing", "enabled": true}, "compiled_sql": "\n\nwith time_entries as (\n\n    select * from analytics_dev.scratch_brana.time_entries\n\n)\n\nselect\n    client_key,\n    client_name,\n    project_key,\n    project_name,\n    time_entry_date_key                 as date_key,\n    count(distinct task_key)            as tasks_count,\n    count(distinct worker_id)           as workers_count,\n    sum(time_entry_duration)            as duration,\n    sum(case\n            when is_billable = True then time_entry_duration\n            else 0\n        end\n    )                                   as billable_duration,\n    sum(case\n            when is_billable = True then 0\n            else time_entry_duration\n        end\n    )                                   as non_billable_duration\n\nfrom\n    time_entries\n\ngroup by\n    1, 2, 3, 4, 5", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.daily_projects_time__grouped"}, "model.edw.monthly_projects__grouped": {"raw_sql": "with source as (\n\n    select\n        daily_projects_hours.client_key,\n        daily_projects_hours.client_name,\n        daily_projects_hours.project_key,\n        daily_projects_hours.project_name,\n        daily_projects_hours.date_key,\n        date.month_key\n\n    from\n        {{ ref('daily_projects_hours__grouped') }}  as daily_projects_hours\n        inner join {{ ref('dim_date') }}            as date\n            on date.date_key = daily_projects_hours.date_key\n\n),\nmonthly_projects as (\n\n    select\n        client_key,\n        client_name,\n        project_key,\n        project_name,\n        month_key\n\n    from\n        source\n\n    group by\n        client_key,\n        client_name,\n        project_key,\n        project_name,\n        month_key\n\n    order by\n        client_name,\n        project_name,\n        month_key\n\n)\n\nselect * from monthly_projects", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.daily_projects_hours__grouped", "model.edw.dim_date"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "billing", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "billing", "intermediate", "monthly_projects__grouped"], "unique_id": "model.edw.monthly_projects__grouped", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/billing/intermediate/monthly_projects__grouped.sql", "original_file_path": "models/marts/billing/intermediate/monthly_projects__grouped.sql", "name": "monthly_projects__grouped", "alias": "monthly_projects__grouped", "checksum": {"name": "sha256", "checksum": "b5c21aa2e5a7a79dac224bac31f51fdb99ef3579116c394d79ba572850ad02a7"}, "tags": [], "refs": [["daily_projects_hours__grouped"], ["dim_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/billing/intermediate/monthly_projects__grouped.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "billing", "enabled": true}, "compiled_sql": "with source as (\n\n    select\n        daily_projects_hours.client_key,\n        daily_projects_hours.client_name,\n        daily_projects_hours.project_key,\n        daily_projects_hours.project_name,\n        daily_projects_hours.date_key,\n        date.month_key\n\n    from\n        analytics_dev.scratch_brana.daily_projects_hours__grouped  as daily_projects_hours\n        inner join analytics_dev.scratch_brana.dim_date            as date\n            on date.date_key = daily_projects_hours.date_key\n\n),\nmonthly_projects as (\n\n    select\n        client_key,\n        client_name,\n        project_key,\n        project_name,\n        month_key\n\n    from\n        source\n\n    group by\n        client_key,\n        client_name,\n        project_key,\n        project_name,\n        month_key\n\n    order by\n        client_name,\n        project_name,\n        month_key\n\n)\n\nselect * from monthly_projects", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.monthly_projects__grouped"}, "model.edw.worker_payout_line_items": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_worker_payout_line_items') }}\n)\nselect * from source", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_worker_payout_line_items"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "onboarding", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "onboarding", "worker_payout_line_items"], "unique_id": "model.edw.worker_payout_line_items", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/onboarding/worker_payout_line_items.sql", "original_file_path": "models/marts/onboarding/worker_payout_line_items.sql", "name": "worker_payout_line_items", "alias": "worker_payout_line_items", "checksum": {"name": "sha256", "checksum": "6d5eb253837a513c016a8a0915973ad8cfd3978b7ab69219660df04e514ab48c"}, "tags": [], "refs": [["stg_worker_payout_line_items"]], "sources": [], "description": "monthly payout and adjustments paid to workers", "columns": {"person_key": {"name": "person_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/onboarding/schema.yml", "build_path": "target/compiled/edw/models/marts/onboarding/worker_payout_line_items.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "onboarding", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_worker_payout_line_items\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.worker_payout_line_items"}, "model.edw.worker_workstreams": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('stg_worker_workstreams') }}\n\n)\n, worker_pool as (\n    \n    select * from {{ ref('worker_pool') }}\n\n)\n, person_match as (\n\n    select\n        source.*,\n        coalesce(\n            corp.person_key,\n            personal.person_key\n        ) as person_key\n    from source\n    left join worker_pool corp\n        on source.email = corp.email\n    left join worker_pool personal \n        on source.email = personal.personal_email\n)\nselect * from person_match", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_worker_workstreams", "model.edw.worker_pool"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "onboarding", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "onboarding", "worker_workstreams"], "unique_id": "model.edw.worker_workstreams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/onboarding/worker_workstreams.sql", "original_file_path": "models/marts/onboarding/worker_workstreams.sql", "name": "worker_workstreams", "alias": "worker_workstreams", "checksum": {"name": "sha256", "checksum": "da7674daf789219831a58e8bb541bc28df9a24517c48c111d430ebe3ab7fa573"}, "tags": [], "refs": [["stg_worker_workstreams"], ["worker_pool"]], "sources": [], "description": "workstream associations of workers", "columns": {"person_key": {"name": "person_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/onboarding/schema.yml", "build_path": "target/compiled/edw/models/marts/onboarding/worker_workstreams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "onboarding", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_worker_workstreams\n\n)\n, worker_pool as (\n    \n    select * from analytics_dev.scratch_brana.worker_pool\n\n)\n, person_match as (\n\n    select\n        source.*,\n        coalesce(\n            corp.person_key,\n            personal.person_key\n        ) as person_key\n    from source\n    left join worker_pool corp\n        on source.email = corp.email\n    left join worker_pool personal \n        on source.email = personal.personal_email\n)\nselect * from person_match", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.worker_workstreams"}, "model.edw.worker_hardware": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref( 'stg_system_checker_hardware') }}\n\n)\n, people_source as (\n\n    select * from {{ ref('base_sheetload_people') }}\n\n)\n, cpu_buckets as (\n\n    select * from {{ ref('base_sheets_cpu_buckets') }}\n\n)\n, cpu_rankings as (\n\n    select * from {{ ref('stg_cpu_model_summary') }}\n\n)\n, max_record as (\n\n    select\n        email_address,\n        \n        max(created_at) as created_at\n    from source\n    group by 1\n\n)\n, cis_machines as (\n    select\n        email,\n        personal_email,\n        cpu_type,\n        replace(people_source.cpu_type, ' ') as cpu_type_no_space,\n        cpu_buckets.bucket as cpu_bucket,\n        cpu_architecture,\n        number_of_processors::int as cpu_core_count,\n        split(internal_storage, ' ')[0]::number as internal_storage,\n        split(memory, ' ')[0]::number as memory,\n        primary_display as primary_display_resolution,\n        iff(other_display is NULL, false, true) as has_second_display,\n        iff(other_display is NULL, other_display, 'Not Applicable') as secondary_display_resolution,\n        operating_system,\n        cf_browser as browser,\n        NULL as internet_speed\n    from people_source\n    left join cpu_buckets\n        on people_source.cpu_type = cpu_buckets.cpu\n\n)\n, sys_checker_machines as (\n\n    select\n        source.email_address as email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_buckets.bucket as cpu_bucket,\n        NULL as cpu_architecture,\n        processor_cores::int as cpu_core_count,\n        NULL as internal_storage,\n        memory,\n        primary_resolution as primary_display_resolution,\n        NULL as has_second_display,\n        'Unknown' as secondary_display_resolution,\n        operating_system,\n        {# browser, #}\n        internet_speed\n    from source \n    inner join max_record\n        on source.email_address = max_record.email_address\n        and source.created_at = max_record.created_at\n    left join cpu_buckets\n        on source.cpu_type = cpu_buckets.cpu\n\n)\n, join_lists as (\n    select\n        coalesce(cis_machines.email, corp.email, personal.email) as email,\n        coalesce(cis_machines.personal_email, corp.email) as personal_email,\n        coalesce(cis_machines.cpu_type_no_space, corp.cpu_type_no_space, personal.cpu_type_no_space) as cpu_type_no_space,\n        coalesce(cis_machines.cpu_type, corp.cpu_type, personal.cpu_type) as cpu_type,\n        coalesce(cis_machines.cpu_bucket, corp.cpu_bucket, personal.cpu_bucket) as cpu_bucket,\n        coalesce(cis_machines.cpu_architecture, corp.cpu_architecture, personal.cpu_architecture) as cpu_architecture,\n        coalesce(cis_machines.cpu_core_count, corp.cpu_core_count, personal.cpu_core_count) as cpu_core_count,\n        coalesce(cis_machines.internal_storage, corp.internal_storage, personal.internal_storage) as internal_storage,\n        coalesce(cis_machines.memory, corp.memory, personal.memory) as memory,\n        coalesce(cis_machines.primary_display_resolution, corp.primary_display_resolution, personal.primary_display_resolution) as primary_display_resolution,\n        coalesce(cis_machines.has_second_display, corp.has_second_display, personal.has_second_display) as has_second_display,\n        coalesce(cis_machines.secondary_display_resolution, corp.secondary_display_resolution, personal.secondary_display_resolution) as secondary_display_resolution,\n        coalesce(cis_machines.operating_system, corp.operating_system, personal.operating_system) as operating_system,\n        {# coalesce(cis_machines.browser, corp.browser, personal.browser) as browser, #}\n        coalesce(cis_machines.internet_speed, corp.internet_speed, personal.internet_speed) as internet_speed\n    from cis_machines\n    left join sys_checker_machines corp\n        on cis_machines.email = corp.email\n    left join sys_checker_machines personal\n        on cis_machines.personal_email = personal.email\n)\n, final_with_union as (\n    select\n        email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_bucket,\n        cpu_architecture,\n        cpu_core_count,\n        internal_storage,\n        memory,\n        primary_display_resolution,\n        has_second_display,\n        secondary_display_resolution,\n        operating_system,\n        {# browser, #}\n        internet_speed\n    from join_lists\n    union\n    select \n        email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_bucket,\n        cpu_architecture,\n        cpu_core_count,\n        internal_storage,\n        memory,\n        primary_display_resolution,\n        has_second_display,\n        secondary_display_resolution,\n        operating_system,\n        {# browser, #}\n        internet_speed\n    from sys_checker_machines sys\n    where not exists (\n        select 1 from cis_machines cis where sys.email <> cis.email or sys.email <> cis.personal_email\n    )\n)\n, ram_memory_buckets as (\n    \n    select\n        md5( email ) as person_key,\n        email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_bucket,\n        cpu_architecture,\n        cpu_core_count,\n        internal_storage,\n        memory,\n        case \n            when memory >= 16   then '16+ GB'\n            when memory >= 8    then '8-16 GB'\n            when memory >= 4    then '4-8 GB'\n            when memory > 0     then '<4 GB'\n            else 'Unknown'\n        end as memory_bucket,\n        primary_display_resolution,\n        has_second_display,\n        secondary_display_resolution,\n        case \n            when operating_system = 'win 10.0'                  then 'Windows 10'\n            when operating_system = 'win 6.3'                   then 'Windows 8.1'\n            when operating_system = 'win 6.2'                   then 'Windows 8'\n            when operating_system = 'win 6.1'                   then 'Windows 7'\n            when contains(lower(operating_system), 'linux') > 0 then 'Linux'\n            when contains(lower(operating_system), 'mac') > 0   then 'Mac'\n            when operating_system is null                       then 'Unknown'\n            else operating_system\n        end as operating_system,\n        {# browser, #}\n        internet_speed,\n        case \n            when internet_speed >= 10   then '10+ Mbps'\n            when internet_speed >= 5    then '5-10 Mbps'\n            when internet_speed > 0     then '<5 Mbps'\n            else 'Unknown'\n        end as internet_speed_bucket,\n        1 as hardware_count\n    from final_with_union\n\n)\n, matched as (\n    select distinct\n        ram_memory_buckets.*,\n\n        first_value(cpu.cpu_name) over (partition by cpu.alt_name order by cpu_name asc) as cpu_name,\n        cpu.size as sales_cpu_size\n    from ram_memory_buckets\n    left join cpu_rankings cpu\n        on ram_memory_buckets.cpu_type = cpu.alt_name\n        or ram_memory_buckets.cpu_type_no_space = cpu.alt_name_no_space\n        {# or ram_memory_buckets.cpu_type_no_space = cpu.single_alt_name_no_space #}\n    where person_key is not null\n)\nselect * from matched", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_system_checker_hardware", "model.edw.base_sheetload_people", "model.edw.base_sheets_cpu_buckets", "model.edw.stg_cpu_model_summary"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "onboarding", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "onboarding", "worker_hardware"], "unique_id": "model.edw.worker_hardware", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/onboarding/worker_hardware.sql", "original_file_path": "models/marts/onboarding/worker_hardware.sql", "name": "worker_hardware", "alias": "worker_hardware", "checksum": {"name": "sha256", "checksum": "3ee170f1c89d7b7998ec4c04bca64ae3c80aa59958e72bc918962c74f94ef691"}, "tags": [], "refs": [["stg_system_checker_hardware"], ["base_sheetload_people"], ["base_sheets_cpu_buckets"], ["stg_cpu_model_summary"]], "sources": [], "description": "all known hardware assets associated with workers.  may be company or personal assets", "columns": {"person_key": {"name": "person_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/onboarding/schema.yml", "build_path": "target/compiled/edw/models/marts/onboarding/worker_hardware.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "onboarding", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.stg_system_checker_hardware\n\n)\n, people_source as (\n\n    select * from psa_dev.scratch_brana.base_sheetload_people\n\n)\n, cpu_buckets as (\n\n    select * from psa_dev.scratch_brana.base_sheets_cpu_buckets\n\n)\n, cpu_rankings as (\n\n    select * from psa_dev.scratch_brana.stg_cpu_model_summary\n\n)\n, max_record as (\n\n    select\n        email_address,\n        \n        max(created_at) as created_at\n    from source\n    group by 1\n\n)\n, cis_machines as (\n    select\n        email,\n        personal_email,\n        cpu_type,\n        replace(people_source.cpu_type, ' ') as cpu_type_no_space,\n        cpu_buckets.bucket as cpu_bucket,\n        cpu_architecture,\n        number_of_processors::int as cpu_core_count,\n        split(internal_storage, ' ')[0]::number as internal_storage,\n        split(memory, ' ')[0]::number as memory,\n        primary_display as primary_display_resolution,\n        iff(other_display is NULL, false, true) as has_second_display,\n        iff(other_display is NULL, other_display, 'Not Applicable') as secondary_display_resolution,\n        operating_system,\n        cf_browser as browser,\n        NULL as internet_speed\n    from people_source\n    left join cpu_buckets\n        on people_source.cpu_type = cpu_buckets.cpu\n\n)\n, sys_checker_machines as (\n\n    select\n        source.email_address as email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_buckets.bucket as cpu_bucket,\n        NULL as cpu_architecture,\n        processor_cores::int as cpu_core_count,\n        NULL as internal_storage,\n        memory,\n        primary_resolution as primary_display_resolution,\n        NULL as has_second_display,\n        'Unknown' as secondary_display_resolution,\n        operating_system,\n        \n        internet_speed\n    from source \n    inner join max_record\n        on source.email_address = max_record.email_address\n        and source.created_at = max_record.created_at\n    left join cpu_buckets\n        on source.cpu_type = cpu_buckets.cpu\n\n)\n, join_lists as (\n    select\n        coalesce(cis_machines.email, corp.email, personal.email) as email,\n        coalesce(cis_machines.personal_email, corp.email) as personal_email,\n        coalesce(cis_machines.cpu_type_no_space, corp.cpu_type_no_space, personal.cpu_type_no_space) as cpu_type_no_space,\n        coalesce(cis_machines.cpu_type, corp.cpu_type, personal.cpu_type) as cpu_type,\n        coalesce(cis_machines.cpu_bucket, corp.cpu_bucket, personal.cpu_bucket) as cpu_bucket,\n        coalesce(cis_machines.cpu_architecture, corp.cpu_architecture, personal.cpu_architecture) as cpu_architecture,\n        coalesce(cis_machines.cpu_core_count, corp.cpu_core_count, personal.cpu_core_count) as cpu_core_count,\n        coalesce(cis_machines.internal_storage, corp.internal_storage, personal.internal_storage) as internal_storage,\n        coalesce(cis_machines.memory, corp.memory, personal.memory) as memory,\n        coalesce(cis_machines.primary_display_resolution, corp.primary_display_resolution, personal.primary_display_resolution) as primary_display_resolution,\n        coalesce(cis_machines.has_second_display, corp.has_second_display, personal.has_second_display) as has_second_display,\n        coalesce(cis_machines.secondary_display_resolution, corp.secondary_display_resolution, personal.secondary_display_resolution) as secondary_display_resolution,\n        coalesce(cis_machines.operating_system, corp.operating_system, personal.operating_system) as operating_system,\n        \n        coalesce(cis_machines.internet_speed, corp.internet_speed, personal.internet_speed) as internet_speed\n    from cis_machines\n    left join sys_checker_machines corp\n        on cis_machines.email = corp.email\n    left join sys_checker_machines personal\n        on cis_machines.personal_email = personal.email\n)\n, final_with_union as (\n    select\n        email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_bucket,\n        cpu_architecture,\n        cpu_core_count,\n        internal_storage,\n        memory,\n        primary_display_resolution,\n        has_second_display,\n        secondary_display_resolution,\n        operating_system,\n        \n        internet_speed\n    from join_lists\n    union\n    select \n        email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_bucket,\n        cpu_architecture,\n        cpu_core_count,\n        internal_storage,\n        memory,\n        primary_display_resolution,\n        has_second_display,\n        secondary_display_resolution,\n        operating_system,\n        \n        internet_speed\n    from sys_checker_machines sys\n    where not exists (\n        select 1 from cis_machines cis where sys.email <> cis.email or sys.email <> cis.personal_email\n    )\n)\n, ram_memory_buckets as (\n    \n    select\n        md5( email ) as person_key,\n        email,\n        cpu_type,\n        cpu_type_no_space,\n        cpu_bucket,\n        cpu_architecture,\n        cpu_core_count,\n        internal_storage,\n        memory,\n        case \n            when memory >= 16   then '16+ GB'\n            when memory >= 8    then '8-16 GB'\n            when memory >= 4    then '4-8 GB'\n            when memory > 0     then '<4 GB'\n            else 'Unknown'\n        end as memory_bucket,\n        primary_display_resolution,\n        has_second_display,\n        secondary_display_resolution,\n        case \n            when operating_system = 'win 10.0'                  then 'Windows 10'\n            when operating_system = 'win 6.3'                   then 'Windows 8.1'\n            when operating_system = 'win 6.2'                   then 'Windows 8'\n            when operating_system = 'win 6.1'                   then 'Windows 7'\n            when contains(lower(operating_system), 'linux') > 0 then 'Linux'\n            when contains(lower(operating_system), 'mac') > 0   then 'Mac'\n            when operating_system is null                       then 'Unknown'\n            else operating_system\n        end as operating_system,\n        \n        internet_speed,\n        case \n            when internet_speed >= 10   then '10+ Mbps'\n            when internet_speed >= 5    then '5-10 Mbps'\n            when internet_speed > 0     then '<5 Mbps'\n            else 'Unknown'\n        end as internet_speed_bucket,\n        1 as hardware_count\n    from final_with_union\n\n)\n, matched as (\n    select distinct\n        ram_memory_buckets.*,\n\n        first_value(cpu.cpu_name) over (partition by cpu.alt_name order by cpu_name asc) as cpu_name,\n        cpu.size as sales_cpu_size\n    from ram_memory_buckets\n    left join cpu_rankings cpu\n        on ram_memory_buckets.cpu_type = cpu.alt_name\n        or ram_memory_buckets.cpu_type_no_space = cpu.alt_name_no_space\n        \n    where person_key is not null\n)\nselect * from matched", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.worker_hardware"}, "model.edw.worker_pool": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith breezy_source as (\n\n    select * from {{ ref('stg_breezy_worker_pool') }}\n\n)\n, cis_source as (\n\n    select * from {{ ref('stg_cis_worker_pool') }} --where role_name = 'cloudworker'\n\n)\n, worker_workstreams as (\n\n    select * from {{ ref('stg_worker_workstreams') }}\n)\n, payout_workers as (\n\n    select * from {{ ref('stg_payout_workers') }}\n\n)\n, distinct_emails as (\n\n    select\n        email, \n        personal_email,\n        'cis' as record_source\n    from cis_source\n    union\n    select \n        email,\n        email as personal_email,\n        'breezy' as record_source\n    from breezy_source b\n    where not exists (\n        select 1 from cis_source c where b.email = c.email or b.email = c.personal_email\n    )\n    union\n    select distinct\n        email,\n        email as personal_email,\n        'skill spreadsheets' as record_source\n    from worker_workstreams w\n    where \n        not exists (\n            select 1 from cis_source cs where w.email = cs.email or w.email = cs.personal_email\n        )\n        and not exists (\n            select 1 from breezy_source bs where w.email = bs.email\n        )\n    union\n    select distinct\n        email,\n        alternate_email as personal_email,\n        'worker payout' as record_source\n    from payout_workers p\n    where \n        not exists (\n            select 1 from cis_source cs \n            where p.email = cs.email \n                or p.email = cs.personal_email\n                or p.alternate_email = cs.email\n                or p.alternate_email = cs.personal_email\n        )\n        and not exists (\n            select 1 from breezy_source bs where p.email = bs.email or p.alternate_email = bs.email\n        )\n        and not exists (\n            select 1 from worker_workstreams ww where p.email = ww.email or p.alternate_email = ww.email\n        )\n)\n, cis_people as (\n    select distinct\n        md5( distinct_emails.email )                                          as person_key,\n        coalesce(\n            corp.candidate_id,\n            personal.candidate_id,\n            NULL\n        )                                                                     as breezy_candidate_id,\n        distinct_emails.email,\n        distinct_emails.personal_email,\n        distinct_emails.record_source,\n        {# ifnull(cis_source.role_name, 'cloudworker')                           as role_name, #}\n        ifnull(cis_source.person_type, 'worker')                              as role_name,\n        coalesce( \n            cis_source.current_country, \n            corp.country, \n            personal.country, \n            payout_workers.country\n            )                                                                 as country,\n        iff(cis_source.workstream_ids is NULL, false, true)                   as has_active_workstream,\n        case \n            when record_source='cis'  and datediff(days, last_worked_on_date, current_date()) <= 30 then\n                    'Active'\n            when record_source='cis' and datediff(days, last_worked_on_date, current_date()) > 30 then\n                initcap(coalesce(corp.category_name, personal.category_name, 'Inactive'))\n            when record_source ='breezy' then\n                initcap(coalesce(corp.category_name, personal.category_name, 'Unknown'))\n            else 'Unknown'\n        end                                                                   as worker_status,\n        case\n            when cis_source.person_status is not null then\n                iff(lower(cis_source.person_status) = 'deactivated', true, false)\n            else NULL\n        end                                                                   as is_deactivated,\n        coalesce(\n            cis_source.has_passed_data_transcription,\n            corp.has_passed_data_transcription,\n            personal.has_passed_data_transcription\n        )                                                                     as has_passed_data_transcription,\n        coalesce(\n            cis_source.has_passed_image_annotation,\n            corp.has_passed_image_annotation,\n            personal.has_passed_image_annotation\n        )                                                                     as has_passed_image_annotation,\n        coalesce(\n            cis_source.has_passed_web_research,\n            corp.has_passed_web_research,\n            personal.has_passed_web_research\n        )                                                                     as has_passed_web_research,\n        coalesce(\n            cis_source.has_passed_english_language,\n            corp.has_passed_english_language,\n            personal.has_passed_english_language\n        )                                                                     as has_passed_english_language,\n        coalesce(\n            corp.data_transcription_score, \n            personal.data_transcription_score, \n            NULL\n        )                                                                     as data_transcription_score,\n        coalesce(\n            corp.english_language_score, \n            personal.english_language_score, \n            NULL\n        )                                                                     as english_language_score,\n        coalesce(\n            corp.image_annotation_score, \n            personal.image_annotation_score, \n            NULL\n        )                                                                     as image_annotation_score,\n        coalesce(\n            corp.web_research_score, \n            personal.web_research_score, \n            NULL\n        )                                                                     as web_research_score,\n        coalesce(\n            corp.total_score, \n            personal.total_score, \n            NULL\n        )                                                                     as total_score,\n            coalesce(\n            corp.hours_available, \n            personal.hours_available, \n            NULL\n        )                                                                     as hours_available,\n        iff(worker_status = 'Applying', 1, 0)                                 as applying_count,\n        iff(worker_status = 'Disqualified', 1, 0)                             as disqualified_count,\n        iff(worker_status = 'Active', 1, 0)                                   as active_count,\n        iff(worker_status = 'Inactive', 1, 0)                                 as inactive_count,\n        iff(worker_status = 'Screened', 1, 0)                                 as screened_count,\n        iff(worker_status = 'Onboarded', 1, 0)                                as onboarded_count,\n        iff(worker_status = 'Unknown', 1, 0)                                  as unknown_count,\n        1                                                                     as person_count,\n        active_count + inactive_count                                         as worker_count\n    from distinct_emails\n    left join cis_source\n        on distinct_emails.email = cis_source.email\n    left join breezy_source corp\n        on distinct_emails.email = corp.email\n    left join breezy_source personal \n        on cis_source.personal_email = personal.email\n    left join payout_workers\n        on distinct_emails.email = payout_workers.email\n    where person_key is not null\n         \n)\nselect * from cis_people", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_breezy_worker_pool", "model.edw.stg_cis_worker_pool", "model.edw.stg_worker_workstreams", "model.edw.stg_payout_workers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "onboarding", "database": "analytics", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role reporter", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "onboarding", "worker_pool"], "unique_id": "model.edw.worker_pool", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/onboarding/worker_pool.sql", "original_file_path": "models/marts/onboarding/worker_pool.sql", "name": "worker_pool", "alias": "worker_pool", "checksum": {"name": "sha256", "checksum": "caf1a001c757d09f0699f34b5e242bda8666476929bfea4fd16bc011914c6591"}, "tags": [], "refs": [["stg_breezy_worker_pool"], ["stg_cis_worker_pool"], ["stg_worker_workstreams"], ["stg_payout_workers"]], "sources": [], "description": "pool of workers known in cis, breezy, and expensify", "columns": {"person_key": {"name": "person_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/onboarding/schema.yml", "build_path": "target/compiled/edw/models/marts/onboarding/worker_pool.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role reporter"], "database": "analytics", "materialized": "table", "schema": "onboarding", "enabled": true}, "compiled_sql": "\n\nwith breezy_source as (\n\n    select * from psa_dev.scratch_brana.stg_breezy_worker_pool\n\n)\n, cis_source as (\n\n    select * from psa_dev.scratch_brana.stg_cis_worker_pool --where role_name = 'cloudworker'\n\n)\n, worker_workstreams as (\n\n    select * from psa_dev.scratch_brana.stg_worker_workstreams\n)\n, payout_workers as (\n\n    select * from psa_dev.scratch_brana.stg_payout_workers\n\n)\n, distinct_emails as (\n\n    select\n        email, \n        personal_email,\n        'cis' as record_source\n    from cis_source\n    union\n    select \n        email,\n        email as personal_email,\n        'breezy' as record_source\n    from breezy_source b\n    where not exists (\n        select 1 from cis_source c where b.email = c.email or b.email = c.personal_email\n    )\n    union\n    select distinct\n        email,\n        email as personal_email,\n        'skill spreadsheets' as record_source\n    from worker_workstreams w\n    where \n        not exists (\n            select 1 from cis_source cs where w.email = cs.email or w.email = cs.personal_email\n        )\n        and not exists (\n            select 1 from breezy_source bs where w.email = bs.email\n        )\n    union\n    select distinct\n        email,\n        alternate_email as personal_email,\n        'worker payout' as record_source\n    from payout_workers p\n    where \n        not exists (\n            select 1 from cis_source cs \n            where p.email = cs.email \n                or p.email = cs.personal_email\n                or p.alternate_email = cs.email\n                or p.alternate_email = cs.personal_email\n        )\n        and not exists (\n            select 1 from breezy_source bs where p.email = bs.email or p.alternate_email = bs.email\n        )\n        and not exists (\n            select 1 from worker_workstreams ww where p.email = ww.email or p.alternate_email = ww.email\n        )\n)\n, cis_people as (\n    select distinct\n        md5( distinct_emails.email )                                          as person_key,\n        coalesce(\n            corp.candidate_id,\n            personal.candidate_id,\n            NULL\n        )                                                                     as breezy_candidate_id,\n        distinct_emails.email,\n        distinct_emails.personal_email,\n        distinct_emails.record_source,\n        \n        ifnull(cis_source.person_type, 'worker')                              as role_name,\n        coalesce( \n            cis_source.current_country, \n            corp.country, \n            personal.country, \n            payout_workers.country\n            )                                                                 as country,\n        iff(cis_source.workstream_ids is NULL, false, true)                   as has_active_workstream,\n        case \n            when record_source='cis'  and datediff(days, last_worked_on_date, current_date()) <= 30 then\n                    'Active'\n            when record_source='cis' and datediff(days, last_worked_on_date, current_date()) > 30 then\n                initcap(coalesce(corp.category_name, personal.category_name, 'Inactive'))\n            when record_source ='breezy' then\n                initcap(coalesce(corp.category_name, personal.category_name, 'Unknown'))\n            else 'Unknown'\n        end                                                                   as worker_status,\n        case\n            when cis_source.person_status is not null then\n                iff(lower(cis_source.person_status) = 'deactivated', true, false)\n            else NULL\n        end                                                                   as is_deactivated,\n        coalesce(\n            cis_source.has_passed_data_transcription,\n            corp.has_passed_data_transcription,\n            personal.has_passed_data_transcription\n        )                                                                     as has_passed_data_transcription,\n        coalesce(\n            cis_source.has_passed_image_annotation,\n            corp.has_passed_image_annotation,\n            personal.has_passed_image_annotation\n        )                                                                     as has_passed_image_annotation,\n        coalesce(\n            cis_source.has_passed_web_research,\n            corp.has_passed_web_research,\n            personal.has_passed_web_research\n        )                                                                     as has_passed_web_research,\n        coalesce(\n            cis_source.has_passed_english_language,\n            corp.has_passed_english_language,\n            personal.has_passed_english_language\n        )                                                                     as has_passed_english_language,\n        coalesce(\n            corp.data_transcription_score, \n            personal.data_transcription_score, \n            NULL\n        )                                                                     as data_transcription_score,\n        coalesce(\n            corp.english_language_score, \n            personal.english_language_score, \n            NULL\n        )                                                                     as english_language_score,\n        coalesce(\n            corp.image_annotation_score, \n            personal.image_annotation_score, \n            NULL\n        )                                                                     as image_annotation_score,\n        coalesce(\n            corp.web_research_score, \n            personal.web_research_score, \n            NULL\n        )                                                                     as web_research_score,\n        coalesce(\n            corp.total_score, \n            personal.total_score, \n            NULL\n        )                                                                     as total_score,\n            coalesce(\n            corp.hours_available, \n            personal.hours_available, \n            NULL\n        )                                                                     as hours_available,\n        iff(worker_status = 'Applying', 1, 0)                                 as applying_count,\n        iff(worker_status = 'Disqualified', 1, 0)                             as disqualified_count,\n        iff(worker_status = 'Active', 1, 0)                                   as active_count,\n        iff(worker_status = 'Inactive', 1, 0)                                 as inactive_count,\n        iff(worker_status = 'Screened', 1, 0)                                 as screened_count,\n        iff(worker_status = 'Onboarded', 1, 0)                                as onboarded_count,\n        iff(worker_status = 'Unknown', 1, 0)                                  as unknown_count,\n        1                                                                     as person_count,\n        active_count + inactive_count                                         as worker_count\n    from distinct_emails\n    left join cis_source\n        on distinct_emails.email = cis_source.email\n    left join breezy_source corp\n        on distinct_emails.email = corp.email\n    left join breezy_source personal \n        on cis_source.personal_email = personal.email\n    left join payout_workers\n        on distinct_emails.email = payout_workers.email\n    where person_key is not null\n         \n)\nselect * from cis_people", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.worker_pool"}, "model.edw.struction_site_time_entries": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    post_hook=[\n        \"grant select on view client_shares.struction_site.struction_site_time_entries to share struction_site\"\n    ]\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('time_entries') }}\n\n)\n, struction as (\n\n    select \n        time_entry_start_at,\n        workstream_name,\n        schedule_id,\n        schedule_start_at,\n        worker_id,\n        worker_email_address,\n        time_entry_type,\n        time_entry_duration\n    from source \n    where workstream_name in (\n        'StructionSite', \n        'StructionSite-Fast Lane'\n    )\n)\nselect * from struction", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "client_shares", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on view client_shares.struction_site.struction_site_time_entries to share struction_site", "transaction": true, "index": null}], "pre-hook": []}, "database": "client_shares_dev", "schema": "scratch_brana", "fqn": ["edw", "client_shares", "struction_site", "struction_site_time_entries"], "unique_id": "model.edw.struction_site_time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "client_shares/struction_site/struction_site_time_entries.sql", "original_file_path": "models/client_shares/struction_site/struction_site_time_entries.sql", "name": "struction_site_time_entries", "alias": "struction_site_time_entries", "checksum": {"name": "sha256", "checksum": "f40fe30a82ea285aec5db2ed8ab7254c2ae8f5abc9f1193bc2880a82c09fa069"}, "tags": [], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {"time_entry_start_at": {"name": "time_entry_start_at", "description": "timestamp with timezone.  Beginning of a time entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workstream_name": {"name": "workstream_name", "description": "identifies whether this schedule was for 'Struction Site' or 'Struction Site - Fast Lane'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_id": {"name": "schedule_id", "description": "Unique identifier for the a worker's schedule.  Can be used to group time entries for a single worker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule_start_at": {"name": "schedule_start_at", "description": "timestamp with timezone. Beginning of the schedule to which a time entry belongs.  Can be used to group time entries for all workers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "unique identifier for a worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_entry_type": {"name": "time_entry_type", "description": "type of time entry (training or production)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_entry_duration": {"name": "time_entry_duration", "description": "length in seconds of the the time entry", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/client_shares/schema.yml", "build_path": "target/compiled/edw/models/client_shares/struction_site/struction_site_time_entries.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on view client_shares.struction_site.struction_site_time_entries to share struction_site"], "database": "client_shares", "materialized": "table", "schema": "struction_site", "enabled": true}, "compiled_sql": "\n\nwith source as (\n\n    select * from analytics_dev.scratch_brana.time_entries\n\n)\n, struction as (\n\n    select \n        time_entry_start_at,\n        workstream_name,\n        schedule_id,\n        schedule_start_at,\n        worker_id,\n        worker_email_address,\n        time_entry_type,\n        time_entry_duration\n    from source \n    where workstream_name in (\n        'StructionSite', \n        'StructionSite-Fast Lane'\n    )\n)\nselect * from struction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "client_shares_dev.scratch_brana.struction_site_time_entries"}, "model.edw.stg_hist_solarwinds_incidents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select \n        * \n    from {{ ref('base_hist_solarwinds_incidents') }} where dbt_valid_to is null\n),\nusers as (\n    select * from {{ ref('stg_hist_solarwinds_users') }} where dbt_valid_to is null\n),\nrenamed as (\n    select \n        'solarwinds'                     as record_source,\n        source.assets,\n        source.assignee:id                      as assignee_id,\n        source.assignee,\n        source.category:id as category_id,\n        source.category:name::varchar as category_name,\n        source.category,\n        source.cc,\n        source.incident_changes,\n        source.configuration_items,\n        source.created_at,\n        source.created_by:id                    as created_by_id,\n        source.created_by,\n        source.custom,\n        source.custom_fields_values,\n        source.department:name::varchar as department_name,\n        source.department,\n        source.incident_description,\n        source.description_no_html,\n        source.discovery_hardwares,\n        source.due_at,\n        source.href,\n        source.incident_id,\n        source.incidents,\n        source.is_service_request,\n        source.is_user_saw_all_comments,\n        source.mobiles,\n        source.incident_title,\n        source.incident_number,\n        source.number_of_comments,\n        source.origin,\n        source.other_assets,\n        source.priority,\n        source.purchase_orders,\n        source.requester:id                      as requester_id,\n        source.requester,\n        source.resolution_code,\n        source.resolution_description,\n        source.incident_site:name::varchar as site_name,\n        source.incident_site,\n        source.sla_violations,\n        source.solutions,\n        source.incident_state,\n        source.subcategory:name::varchar as subcategory_name,\n        source.subcategory,\n        source.tasks,\n        source.time_tracks,\n        source.updated_at,\n        source.sdc_batched_at as loaded_at,\n        source.to_be_fixed, \n        source.request_to, \n        source.lets_fix_your, \n        source.due_date, \n        source.external_case_id, \n        source.office, \n        source.request, \n        source.happy_to_help_with, \n        source.workstream_primary, \n        source.workstream_secondary, \n        source.support_for, \n        source.challenge, \n        source.request_type,\n        source.dbt_valid_from,\n        source.dbt_valid_to,\n        source.dbt_updated_at,\n        md5(\n            ifnull(upper(trim(source.category:name::varchar)), '')        || ';' ||\n            ifnull(upper(trim(source.department:name::varchar)), '')      || ';' ||\n            ifnull(upper(trim(source.external_case_id::varchar)), '')     || ';' ||\n            ifnull(upper(trim(source.incident_number::varchar)), '')      || ';' ||\n            ifnull(upper(trim(source.incident_state::varchar)), '')       || ';' ||\n            ifnull(upper(trim(source.is_service_request::varchar)), '')   || ';' ||\n            ifnull(upper(trim(source.origin::varchar)), '')               || ';' ||\n            ifnull(upper(trim(source.priority::varchar)), '')             || ';' ||\n            ifnull(upper(trim(source.resolution_code::varchar)), '')      || ';' ||\n            ifnull(upper(trim(source.incident_site:name::varchar)), '')            || ';' ||\n            ifnull(upper(trim(source.subcategory:name::varchar)), '')     || ';' ||\n            ifnull(upper(trim(source.incident_title::varchar)), '')                || ';' ||\n            ifnull(upper(trim(source.workstream_primary::varchar)), '')   || ';' ||\n            ifnull(upper(trim(source.workstream_secondary::varchar)), '') || ';'\n        ) dim_incident_hash_diff,\n        -- md5(ifnull(source.incident_id::varchar, 'Unknown'))        as incident_key,\n        ifnull(ur.dim_user_hash_diff, 'Unknown')      as requester_key,\n        ifnull(uc.dim_user_hash_diff, 'Unknown')      as created_by_key,\n        ifnull(ua.dim_user_hash_diff, 'Unknown')     as assignee_key,\n        to_date(source.due_at) as due_date_key,\n        to_date(source.created_at) as created_date_key\n    from source \n    -- the following joins needed to get a matching hash_key for the user.\n    -- the created_by and requester objects use a different id than the base user object\n    left join users uc\n        on created_by:email = uc.email\n    left join users ur\n        on requester:email = ur.email\n    left join users ua\n        on source.assignee:id = ua.user_id\n)\nselect \n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_solarwinds_incidents", "model.edw.stg_hist_solarwinds_users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "stg_hist_solarwinds_incidents"], "unique_id": "model.edw.stg_hist_solarwinds_incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/stg_hist_solarwinds_incidents.sql", "original_file_path": "models/psa/solarwinds/stg_hist_solarwinds_incidents.sql", "name": "stg_hist_solarwinds_incidents", "alias": "stg_hist_solarwinds_incidents", "checksum": {"name": "sha256", "checksum": "1017b12bc3b986a8d6b67faa41fce38a70a53d73a6f3674579cecc498bff8444"}, "tags": [], "refs": [["base_hist_solarwinds_incidents"], ["stg_hist_solarwinds_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/stg_hist_solarwinds_incidents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n    select \n        * \n    from psa_dev.scratch_brana.base_hist_solarwinds_incidents where dbt_valid_to is null\n),\nusers as (\n    select * from psa_dev.scratch_brana.stg_hist_solarwinds_users where dbt_valid_to is null\n),\nrenamed as (\n    select \n        'solarwinds'                     as record_source,\n        source.assets,\n        source.assignee:id                      as assignee_id,\n        source.assignee,\n        source.category:id as category_id,\n        source.category:name::varchar as category_name,\n        source.category,\n        source.cc,\n        source.incident_changes,\n        source.configuration_items,\n        source.created_at,\n        source.created_by:id                    as created_by_id,\n        source.created_by,\n        source.custom,\n        source.custom_fields_values,\n        source.department:name::varchar as department_name,\n        source.department,\n        source.incident_description,\n        source.description_no_html,\n        source.discovery_hardwares,\n        source.due_at,\n        source.href,\n        source.incident_id,\n        source.incidents,\n        source.is_service_request,\n        source.is_user_saw_all_comments,\n        source.mobiles,\n        source.incident_title,\n        source.incident_number,\n        source.number_of_comments,\n        source.origin,\n        source.other_assets,\n        source.priority,\n        source.purchase_orders,\n        source.requester:id                      as requester_id,\n        source.requester,\n        source.resolution_code,\n        source.resolution_description,\n        source.incident_site:name::varchar as site_name,\n        source.incident_site,\n        source.sla_violations,\n        source.solutions,\n        source.incident_state,\n        source.subcategory:name::varchar as subcategory_name,\n        source.subcategory,\n        source.tasks,\n        source.time_tracks,\n        source.updated_at,\n        source.sdc_batched_at as loaded_at,\n        source.to_be_fixed, \n        source.request_to, \n        source.lets_fix_your, \n        source.due_date, \n        source.external_case_id, \n        source.office, \n        source.request, \n        source.happy_to_help_with, \n        source.workstream_primary, \n        source.workstream_secondary, \n        source.support_for, \n        source.challenge, \n        source.request_type,\n        source.dbt_valid_from,\n        source.dbt_valid_to,\n        source.dbt_updated_at,\n        md5(\n            ifnull(upper(trim(source.category:name::varchar)), '')        || ';' ||\n            ifnull(upper(trim(source.department:name::varchar)), '')      || ';' ||\n            ifnull(upper(trim(source.external_case_id::varchar)), '')     || ';' ||\n            ifnull(upper(trim(source.incident_number::varchar)), '')      || ';' ||\n            ifnull(upper(trim(source.incident_state::varchar)), '')       || ';' ||\n            ifnull(upper(trim(source.is_service_request::varchar)), '')   || ';' ||\n            ifnull(upper(trim(source.origin::varchar)), '')               || ';' ||\n            ifnull(upper(trim(source.priority::varchar)), '')             || ';' ||\n            ifnull(upper(trim(source.resolution_code::varchar)), '')      || ';' ||\n            ifnull(upper(trim(source.incident_site:name::varchar)), '')            || ';' ||\n            ifnull(upper(trim(source.subcategory:name::varchar)), '')     || ';' ||\n            ifnull(upper(trim(source.incident_title::varchar)), '')                || ';' ||\n            ifnull(upper(trim(source.workstream_primary::varchar)), '')   || ';' ||\n            ifnull(upper(trim(source.workstream_secondary::varchar)), '') || ';'\n        ) dim_incident_hash_diff,\n        -- md5(ifnull(source.incident_id::varchar, 'Unknown'))        as incident_key,\n        ifnull(ur.dim_user_hash_diff, 'Unknown')      as requester_key,\n        ifnull(uc.dim_user_hash_diff, 'Unknown')      as created_by_key,\n        ifnull(ua.dim_user_hash_diff, 'Unknown')     as assignee_key,\n        to_date(source.due_at) as due_date_key,\n        to_date(source.created_at) as created_date_key\n    from source \n    -- the following joins needed to get a matching hash_key for the user.\n    -- the created_by and requester objects use a different id than the base user object\n    left join users uc\n        on created_by:email = uc.email\n    left join users ur\n        on requester:email = ur.email\n    left join users ua\n        on source.assignee:id = ua.user_id\n)\nselect \n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_solarwinds_incidents"}, "model.edw.stg_hist_solarwinds_users": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_solarwinds_users')}}\n),\nrenamed as (\n    select\n        avatar,\n        created_at,\n        default_landing_page,\n        department:id         as department_id,\n        department:name::varchar as department_name,\n        department,\n        email,\n        is_disabled,\n        is_mfa_enabled,\n        group_ids,\n        last_login_at,\n        mobile_phone,\n        user_name,\n        phone,\n        reports_to:id as reports_to_id,\n        reports_to:name::varchar as manager_name,\n        reports_to,\n        user_role:id as role_id,\n        user_role:name::varchar as role_name,\n        user_role,\n        salt,\n        user_site:id as site_id,\n        user_site:name::varchar as site_name,\n        user_site,\n        user_title,\n        updated_at,\n        user_id,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(user_name)), '')       || ';' ||\n            ifnull(upper(trim(department_name)), '') || ';' ||\n            ifnull(upper(trim(manager_name)), '')    || ';' ||\n            ifnull(upper(trim(role_name)), '')       || ';' ||\n            ifnull(upper(trim(site_name)), '')  || ';' ||\n            ifnull(upper(trim(user_title)), '')           || ';'\n        ) dim_user_hash_diff\n        -- ,md5(ifnull(user_id::varchar,'Unknown')) as user_key\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_solarwinds_users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "stg_hist_solarwinds_users"], "unique_id": "model.edw.stg_hist_solarwinds_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/stg_hist_solarwinds_users.sql", "original_file_path": "models/psa/solarwinds/stg_hist_solarwinds_users.sql", "name": "stg_hist_solarwinds_users", "alias": "stg_hist_solarwinds_users", "checksum": {"name": "sha256", "checksum": "baf3ec61ae3f54e7494636d23ef88d95e124eb0ea2efac2212e5b5f880e16d01"}, "tags": [], "refs": [["base_hist_solarwinds_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/stg_hist_solarwinds_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_solarwinds_users\n),\nrenamed as (\n    select\n        avatar,\n        created_at,\n        default_landing_page,\n        department:id         as department_id,\n        department:name::varchar as department_name,\n        department,\n        email,\n        is_disabled,\n        is_mfa_enabled,\n        group_ids,\n        last_login_at,\n        mobile_phone,\n        user_name,\n        phone,\n        reports_to:id as reports_to_id,\n        reports_to:name::varchar as manager_name,\n        reports_to,\n        user_role:id as role_id,\n        user_role:name::varchar as role_name,\n        user_role,\n        salt,\n        user_site:id as site_id,\n        user_site:name::varchar as site_name,\n        user_site,\n        user_title,\n        updated_at,\n        user_id,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(user_name)), '')       || ';' ||\n            ifnull(upper(trim(department_name)), '') || ';' ||\n            ifnull(upper(trim(manager_name)), '')    || ';' ||\n            ifnull(upper(trim(role_name)), '')       || ';' ||\n            ifnull(upper(trim(site_name)), '')  || ';' ||\n            ifnull(upper(trim(user_title)), '')           || ';'\n        ) dim_user_hash_diff\n        -- ,md5(ifnull(user_id::varchar,'Unknown')) as user_key\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_solarwinds_users"}, "model.edw.base_solarwinds_categories": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('solarwinds','categories') }}\n),\nrenamed as (\n    select \n        ID                  as category_id,\n        CHILDREN            as children,\n        DEFAULT_ASSIGNEE_ID as default_assignee_id,\n        DEFAULT_TAGS        as default_tags,\n        NAME                as name,\n        PARENT_ID           as parent_id,\n        _SDC_BATCHED_AT     as sdc_batched_at,\n        _SDC_RECEIVED_AT    as sdc_received_at,\n        _SDC_SEQUENCE       as sdc_sequence,\n        _SDC_TABLE_VERSION  as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.categories"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_solarwinds_categories"], "unique_id": "model.edw.base_solarwinds_categories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_solarwinds_categories.sql", "original_file_path": "models/psa/solarwinds/base/base_solarwinds_categories.sql", "name": "base_solarwinds_categories", "alias": "base_solarwinds_categories", "checksum": {"name": "sha256", "checksum": "cdacff75890b5e3ef662aa2c75d78d2485e51e2066b1d00eec134510901bcd02"}, "tags": [], "refs": [], "sources": [["solarwinds", "categories"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_solarwinds_categories.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.solarwinds_stitch.categories\n),\nrenamed as (\n    select \n        ID                  as category_id,\n        CHILDREN            as children,\n        DEFAULT_ASSIGNEE_ID as default_assignee_id,\n        DEFAULT_TAGS        as default_tags,\n        NAME                as name,\n        PARENT_ID           as parent_id,\n        _SDC_BATCHED_AT     as sdc_batched_at,\n        _SDC_RECEIVED_AT    as sdc_received_at,\n        _SDC_SEQUENCE       as sdc_sequence,\n        _SDC_TABLE_VERSION  as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_solarwinds_categories"}, "model.edw.base_solarwinds_users": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('solarwinds','users') }}\n),\nrenamed as (\n    select \n        AVATAR               as avatar,\n        CREATED_AT           as created_at,\n        DEFAULT_LANDING_PAGE as default_landing_page,\n        DEPARTMENT           as department,\n        DISABLED             as is_disabled,\n        EMAIL                as email,\n        GROUP_IDS            as group_ids,\n        LAST_LOGIN           as last_login_at,\n        MFA_ENABLED          as is_mfa_enabled,\n        MOBILE_PHONE         as mobile_phone,\n        NAME                 as name,\n        PHONE                as phone,\n        REPORTS_TO           as reports_to,\n        ROLE                 as role,\n        SALT                 as salt,\n        SITE                 as site,\n        TITLE                as title,\n        UPDATED_AT           as updated_at,\n        ID                   as user_id,\n        _SDC_BATCHED_AT      as sdc_batched_at,\n        _SDC_RECEIVED_AT     as sdc_received_at,\n        _SDC_SEQUENCE        as sdc_sequence,\n        _SDC_TABLE_VERSION   as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_solarwinds_users"], "unique_id": "model.edw.base_solarwinds_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_solarwinds_users.sql", "original_file_path": "models/psa/solarwinds/base/base_solarwinds_users.sql", "name": "base_solarwinds_users", "alias": "base_solarwinds_users", "checksum": {"name": "sha256", "checksum": "e629a2607c7fc0ed496f143a10b808d70e1d227f2278500d713c51b6f415bac3"}, "tags": [], "refs": [], "sources": [["solarwinds", "users"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_solarwinds_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.solarwinds_stitch.users\n),\nrenamed as (\n    select \n        AVATAR               as avatar,\n        CREATED_AT           as created_at,\n        DEFAULT_LANDING_PAGE as default_landing_page,\n        DEPARTMENT           as department,\n        DISABLED             as is_disabled,\n        EMAIL                as email,\n        GROUP_IDS            as group_ids,\n        LAST_LOGIN           as last_login_at,\n        MFA_ENABLED          as is_mfa_enabled,\n        MOBILE_PHONE         as mobile_phone,\n        NAME                 as name,\n        PHONE                as phone,\n        REPORTS_TO           as reports_to,\n        ROLE                 as role,\n        SALT                 as salt,\n        SITE                 as site,\n        TITLE                as title,\n        UPDATED_AT           as updated_at,\n        ID                   as user_id,\n        _SDC_BATCHED_AT      as sdc_batched_at,\n        _SDC_RECEIVED_AT     as sdc_received_at,\n        _SDC_SEQUENCE        as sdc_sequence,\n        _SDC_TABLE_VERSION   as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_solarwinds_users"}, "model.edw.base_hist_solarwinds_incidents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('incidents') }}\n),\ncf_arr as (\n    select distinct\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields_values) cs\n    where col_value != '[]'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n    pivot(\n        min(col_value) \n        for col_name in ('To be Fixed',\n                        'Request to',\n                        'Lets Fix your',\n                        'Due Date',\n                        'External Case ID',\n                        'Office',\n                        'Request',\n                        'Happy to Help with',\n                        'Primary Workstream',\n                        'Secondary Workstream',\n                        'Support For',\n                        'Challenge',\n                        'Request Type'))\n    as p (  id, \n            to_be_fixed, \n            request_to, \n            lets_fix_your, \n            due_date, \n            external_case_id, \n            office, \n            request, \n            happy_to_help_with, \n            workstream_primary, \n            workstream_secondary, \n            support_for, \n            challenge, \n            request_type)\n),\nrenamed as (\n    select \n        ASSETS                 as assets,\n        ASSIGNEE               as assignee,\n        CATEGORY               as category,\n        CC                     as cc,\n        CHANGES                as incident_changes,\n        CONFIGURATION_ITEMS    as configuration_items,\n        CREATED_AT             as created_at,\n        CREATED_BY             as created_by,\n        CUSTOM                 as custom,\n        CUSTOM_FIELDS_VALUES   as custom_fields_values,\n        DEPARTMENT             as department,\n        DESCRIPTION            as incident_description,\n        DESCRIPTION_NO_HTML    as description_no_html,\n        DISCOVERY_HARDWARES    as discovery_hardwares,\n        DUE_AT                 as due_at,\n        HREF                   as href,\n        s.ID                     as incident_id,\n        INCIDENTS              as incidents,\n        IS_SERVICE_REQUEST     as is_service_request,\n        USER_SAW_ALL_COMMENTS  as is_user_saw_all_comments,\n        MOBILES                as mobiles,\n        p.to_be_fixed, \n        p.request_to, \n        p.lets_fix_your, \n        p.due_date, \n        p.external_case_id, \n        p.office, \n        p.request, \n        p.happy_to_help_with, \n        p.workstream_primary, \n        p.workstream_secondary, \n        p.support_for, \n        p.challenge, \n        p.request_type,\n        NAME                   as incident_title,\n        NUMBER                 as incident_number,\n        NUMBER_OF_COMMENTS     as number_of_comments,\n        ORIGIN                 as origin,\n        OTHER_ASSETS           as other_assets,\n        PRIORITY               as priority,\n        PURCHASE_ORDERS        as purchase_orders,\n        REQUESTER              as requester,\n        RESOLUTION_CODE        as resolution_code,\n        RESOLUTION_DESCRIPTION as resolution_description,\n        SITE                   as incident_site,\n        SLA_VIOLATIONS         as sla_violations,\n        SOLUTIONS              as solutions,\n        STATE                  as incident_state,\n        SUBCATEGORY            as subcategory,\n        TASKS                  as tasks,\n        TIME_TRACKS            as time_tracks,\n        UPDATED_AT             as updated_at,\n        _SDC_BATCHED_AT        as sdc_batched_at,\n        _SDC_RECEIVED_AT       as sdc_received_at,\n        _SDC_SEQUENCE          as sdc_sequence,\n        _SDC_TABLE_VERSION     as sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.incidents"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_hist_solarwinds_incidents"], "unique_id": "model.edw.base_hist_solarwinds_incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_hist_solarwinds_incidents.sql", "original_file_path": "models/psa/solarwinds/base/base_hist_solarwinds_incidents.sql", "name": "base_hist_solarwinds_incidents", "alias": "base_hist_solarwinds_incidents", "checksum": {"name": "sha256", "checksum": "dfcb8a6492140872872fad7f616fa85a138bd2afaffdf511277b8f5081ae556a"}, "tags": [], "refs": [["incidents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_hist_solarwinds_incidents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n    select * from psa.solarwinds.incidents\n),\ncf_arr as (\n    select distinct\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields_values) cs\n    where col_value != '[]'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n    pivot(\n        min(col_value) \n        for col_name in ('To be Fixed',\n                        'Request to',\n                        'Lets Fix your',\n                        'Due Date',\n                        'External Case ID',\n                        'Office',\n                        'Request',\n                        'Happy to Help with',\n                        'Primary Workstream',\n                        'Secondary Workstream',\n                        'Support For',\n                        'Challenge',\n                        'Request Type'))\n    as p (  id, \n            to_be_fixed, \n            request_to, \n            lets_fix_your, \n            due_date, \n            external_case_id, \n            office, \n            request, \n            happy_to_help_with, \n            workstream_primary, \n            workstream_secondary, \n            support_for, \n            challenge, \n            request_type)\n),\nrenamed as (\n    select \n        ASSETS                 as assets,\n        ASSIGNEE               as assignee,\n        CATEGORY               as category,\n        CC                     as cc,\n        CHANGES                as incident_changes,\n        CONFIGURATION_ITEMS    as configuration_items,\n        CREATED_AT             as created_at,\n        CREATED_BY             as created_by,\n        CUSTOM                 as custom,\n        CUSTOM_FIELDS_VALUES   as custom_fields_values,\n        DEPARTMENT             as department,\n        DESCRIPTION            as incident_description,\n        DESCRIPTION_NO_HTML    as description_no_html,\n        DISCOVERY_HARDWARES    as discovery_hardwares,\n        DUE_AT                 as due_at,\n        HREF                   as href,\n        s.ID                     as incident_id,\n        INCIDENTS              as incidents,\n        IS_SERVICE_REQUEST     as is_service_request,\n        USER_SAW_ALL_COMMENTS  as is_user_saw_all_comments,\n        MOBILES                as mobiles,\n        p.to_be_fixed, \n        p.request_to, \n        p.lets_fix_your, \n        p.due_date, \n        p.external_case_id, \n        p.office, \n        p.request, \n        p.happy_to_help_with, \n        p.workstream_primary, \n        p.workstream_secondary, \n        p.support_for, \n        p.challenge, \n        p.request_type,\n        NAME                   as incident_title,\n        NUMBER                 as incident_number,\n        NUMBER_OF_COMMENTS     as number_of_comments,\n        ORIGIN                 as origin,\n        OTHER_ASSETS           as other_assets,\n        PRIORITY               as priority,\n        PURCHASE_ORDERS        as purchase_orders,\n        REQUESTER              as requester,\n        RESOLUTION_CODE        as resolution_code,\n        RESOLUTION_DESCRIPTION as resolution_description,\n        SITE                   as incident_site,\n        SLA_VIOLATIONS         as sla_violations,\n        SOLUTIONS              as solutions,\n        STATE                  as incident_state,\n        SUBCATEGORY            as subcategory,\n        TASKS                  as tasks,\n        TIME_TRACKS            as time_tracks,\n        UPDATED_AT             as updated_at,\n        _SDC_BATCHED_AT        as sdc_batched_at,\n        _SDC_RECEIVED_AT       as sdc_received_at,\n        _SDC_SEQUENCE          as sdc_sequence,\n        _SDC_TABLE_VERSION     as sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_solarwinds_incidents"}, "model.edw.base_solarwinds_roles": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('solarwinds','roles') }}\n),\nrenamed as (\n    select \n        DESCRIPTION        as description,\n        PORTAL             as is_portal,\n        SHOW_MY_TASKS      as is_show_my_tasks,\n        NAME               as name,\n        ID                 as role_id,\n        _SDC_BATCHED_AT    as sdc_batched_at,\n        _SDC_RECEIVED_AT   as sdc_received_at,\n        _SDC_SEQUENCE      as sdc_sequence,\n        _SDC_TABLE_VERSION as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.roles"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_solarwinds_roles"], "unique_id": "model.edw.base_solarwinds_roles", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_solarwinds_roles.sql", "original_file_path": "models/psa/solarwinds/base/base_solarwinds_roles.sql", "name": "base_solarwinds_roles", "alias": "base_solarwinds_roles", "checksum": {"name": "sha256", "checksum": "50a887b7f6f55e38071cad1da622b0b2c7560f53ae711742d9c7545755458360"}, "tags": [], "refs": [], "sources": [["solarwinds", "roles"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_solarwinds_roles.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.solarwinds_stitch.roles\n),\nrenamed as (\n    select \n        DESCRIPTION        as description,\n        PORTAL             as is_portal,\n        SHOW_MY_TASKS      as is_show_my_tasks,\n        NAME               as name,\n        ID                 as role_id,\n        _SDC_BATCHED_AT    as sdc_batched_at,\n        _SDC_RECEIVED_AT   as sdc_received_at,\n        _SDC_SEQUENCE      as sdc_sequence,\n        _SDC_TABLE_VERSION as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_solarwinds_roles"}, "model.edw.base_solarwinds_incidents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('solarwinds','incidents') }}\n),\ncf_arr as (\n    select distinct\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields_values) cs\n    where col_value != '[]'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n    pivot(\n        min(col_value) \n        for col_name in ('To be Fixed',\n                        'Request to',\n                        'Lets Fix your',\n                        'Due Date',\n                        'External Case ID',\n                        'Office',\n                        'Request',\n                        'Happy to Help with',\n                        'Primary Workstream',\n                        'Secondary Workstream',\n                        'Support For',\n                        'Challenge',\n                        'Request Type'))\n    as p (  id, \n            to_be_fixed, \n            request_to, \n            lets_fix_your, \n            due_date, \n            external_case_id, \n            office, \n            request, \n            happy_to_help_with, \n            workstream_primary, \n            workstream_secondary, \n            support_for, \n            challenge, \n            request_type)\n),\nrenamed as (\n    select \n        ASSETS                 as assets,\n        ASSIGNEE               as assignee,\n        CATEGORY               as category,\n        CC                     as cc,\n        CHANGES                as changes,\n        CONFIGURATION_ITEMS    as configuration_items,\n        CREATED_AT             as created_at,\n        CREATED_BY             as created_by,\n        CUSTOM                 as custom,\n        CUSTOM_FIELDS_VALUES   as custom_fields_values,\n        DEPARTMENT             as department,\n        DESCRIPTION            as description,\n        DESCRIPTION_NO_HTML    as description_no_html,\n        DISCOVERY_HARDWARES    as discovery_hardwares,\n        DUE_AT                 as due_at,\n        HREF                   as href,\n        s.ID                     as incident_id,\n        INCIDENTS              as incidents,\n        IS_SERVICE_REQUEST     as is_service_request,\n        USER_SAW_ALL_COMMENTS  as is_user_saw_all_comments,\n        MOBILES                as mobiles,\n        p.to_be_fixed, \n        p.request_to, \n        p.lets_fix_your, \n        p.due_date, \n        p.external_case_id, \n        p.office, \n        p.request, \n        p.happy_to_help_with, \n        p.workstream_primary, \n        p.workstream_secondary, \n        p.support_for, \n        p.challenge, \n        p.request_type,\n        NAME                   as name,\n        NUMBER                 as number,\n        NUMBER_OF_COMMENTS     as number_of_comments,\n        ORIGIN                 as origin,\n        OTHER_ASSETS           as other_assets,\n        PRIORITY               as priority,\n        PURCHASE_ORDERS        as purchase_orders,\n        REQUESTER              as requester,\n        RESOLUTION_CODE        as resolution_code,\n        RESOLUTION_DESCRIPTION as resolution_description,\n        SITE                   as site,\n        SLA_VIOLATIONS         as sla_violations,\n        SOLUTIONS              as solutions,\n        STATE                  as state,\n        SUBCATEGORY            as subcategory,\n        TASKS                  as tasks,\n        TIME_TRACKS            as time_tracks,\n        UPDATED_AT             as updated_at,\n        _SDC_BATCHED_AT        as sdc_batched_at,\n        _SDC_RECEIVED_AT       as sdc_received_at,\n        _SDC_SEQUENCE          as sdc_sequence,\n        _SDC_TABLE_VERSION     as sdc_table_version\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.incidents"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_solarwinds_incidents"], "unique_id": "model.edw.base_solarwinds_incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_solarwinds_incidents.sql", "original_file_path": "models/psa/solarwinds/base/base_solarwinds_incidents.sql", "name": "base_solarwinds_incidents", "alias": "base_solarwinds_incidents", "checksum": {"name": "sha256", "checksum": "3ccdb981e688f4445a693d2d68da43a2dd5a2581a1608078c1a4c7284099b913"}, "tags": [], "refs": [], "sources": [["solarwinds", "incidents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_solarwinds_incidents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.solarwinds_stitch.incidents\n),\ncf_arr as (\n    select distinct\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields_values) cs\n    where col_value != '[]'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n    pivot(\n        min(col_value) \n        for col_name in ('To be Fixed',\n                        'Request to',\n                        'Lets Fix your',\n                        'Due Date',\n                        'External Case ID',\n                        'Office',\n                        'Request',\n                        'Happy to Help with',\n                        'Primary Workstream',\n                        'Secondary Workstream',\n                        'Support For',\n                        'Challenge',\n                        'Request Type'))\n    as p (  id, \n            to_be_fixed, \n            request_to, \n            lets_fix_your, \n            due_date, \n            external_case_id, \n            office, \n            request, \n            happy_to_help_with, \n            workstream_primary, \n            workstream_secondary, \n            support_for, \n            challenge, \n            request_type)\n),\nrenamed as (\n    select \n        ASSETS                 as assets,\n        ASSIGNEE               as assignee,\n        CATEGORY               as category,\n        CC                     as cc,\n        CHANGES                as changes,\n        CONFIGURATION_ITEMS    as configuration_items,\n        CREATED_AT             as created_at,\n        CREATED_BY             as created_by,\n        CUSTOM                 as custom,\n        CUSTOM_FIELDS_VALUES   as custom_fields_values,\n        DEPARTMENT             as department,\n        DESCRIPTION            as description,\n        DESCRIPTION_NO_HTML    as description_no_html,\n        DISCOVERY_HARDWARES    as discovery_hardwares,\n        DUE_AT                 as due_at,\n        HREF                   as href,\n        s.ID                     as incident_id,\n        INCIDENTS              as incidents,\n        IS_SERVICE_REQUEST     as is_service_request,\n        USER_SAW_ALL_COMMENTS  as is_user_saw_all_comments,\n        MOBILES                as mobiles,\n        p.to_be_fixed, \n        p.request_to, \n        p.lets_fix_your, \n        p.due_date, \n        p.external_case_id, \n        p.office, \n        p.request, \n        p.happy_to_help_with, \n        p.workstream_primary, \n        p.workstream_secondary, \n        p.support_for, \n        p.challenge, \n        p.request_type,\n        NAME                   as name,\n        NUMBER                 as number,\n        NUMBER_OF_COMMENTS     as number_of_comments,\n        ORIGIN                 as origin,\n        OTHER_ASSETS           as other_assets,\n        PRIORITY               as priority,\n        PURCHASE_ORDERS        as purchase_orders,\n        REQUESTER              as requester,\n        RESOLUTION_CODE        as resolution_code,\n        RESOLUTION_DESCRIPTION as resolution_description,\n        SITE                   as site,\n        SLA_VIOLATIONS         as sla_violations,\n        SOLUTIONS              as solutions,\n        STATE                  as state,\n        SUBCATEGORY            as subcategory,\n        TASKS                  as tasks,\n        TIME_TRACKS            as time_tracks,\n        UPDATED_AT             as updated_at,\n        _SDC_BATCHED_AT        as sdc_batched_at,\n        _SDC_RECEIVED_AT       as sdc_received_at,\n        _SDC_SEQUENCE          as sdc_sequence,\n        _SDC_TABLE_VERSION     as sdc_table_version\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_solarwinds_incidents"}, "model.edw.base_solarwinds_sites": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('solarwinds','sites') }}\n),\nrenamed as (\n    select \n        BUSINESS_RECORD    as business_record,\n        DESCRIPTION        as description,\n        LANGUAGE           as language,\n        LOCATION           as location,\n        NAME               as name,\n        ID                 as site_id,\n        TIME_ZONE          as time_zone,\n        _SDC_BATCHED_AT    as sdc_batched_at,\n        _SDC_RECEIVED_AT   as sdc_received_at,\n        _SDC_SEQUENCE      as sdc_sequence,\n        _SDC_TABLE_VERSION as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.sites"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_solarwinds_sites"], "unique_id": "model.edw.base_solarwinds_sites", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_solarwinds_sites.sql", "original_file_path": "models/psa/solarwinds/base/base_solarwinds_sites.sql", "name": "base_solarwinds_sites", "alias": "base_solarwinds_sites", "checksum": {"name": "sha256", "checksum": "88255242b3c663516e629286a4a5f3690b4da4a42a0a599756e8641c361f882c"}, "tags": [], "refs": [], "sources": [["solarwinds", "sites"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_solarwinds_sites.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.solarwinds_stitch.sites\n),\nrenamed as (\n    select \n        BUSINESS_RECORD    as business_record,\n        DESCRIPTION        as description,\n        LANGUAGE           as language,\n        LOCATION           as location,\n        NAME               as name,\n        ID                 as site_id,\n        TIME_ZONE          as time_zone,\n        _SDC_BATCHED_AT    as sdc_batched_at,\n        _SDC_RECEIVED_AT   as sdc_received_at,\n        _SDC_SEQUENCE      as sdc_sequence,\n        _SDC_TABLE_VERSION as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_solarwinds_sites"}, "model.edw.base_hist_solarwinds_users": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('solarwinds_users') }}\n),\nrenamed as (\n    select \n        AVATAR               as avatar,\n        CREATED_AT           as created_at,\n        DEFAULT_LANDING_PAGE as default_landing_page,\n        DEPARTMENT           as department,\n        DISABLED             as is_disabled,\n        EMAIL                as email,\n        GROUP_IDS            as group_ids,\n        LAST_LOGIN           as last_login_at,\n        MFA_ENABLED          as is_mfa_enabled,\n        MOBILE_PHONE         as mobile_phone,\n        NAME                 as user_name,\n        PHONE                as phone,\n        REPORTS_TO           as reports_to,\n        ROLE                 as user_role,\n        SALT                 as salt,\n        SITE                 as user_site,\n        TITLE                as user_title,\n        UPDATED_AT           as updated_at,\n        ID                   as user_id,\n        _SDC_BATCHED_AT      as sdc_batched_at,\n        _SDC_RECEIVED_AT     as sdc_received_at,\n        _SDC_SEQUENCE        as sdc_sequence,\n        _SDC_TABLE_VERSION   as sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.solarwinds_users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_hist_solarwinds_users"], "unique_id": "model.edw.base_hist_solarwinds_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_hist_solarwinds_users.sql", "original_file_path": "models/psa/solarwinds/base/base_hist_solarwinds_users.sql", "name": "base_hist_solarwinds_users", "alias": "base_hist_solarwinds_users", "checksum": {"name": "sha256", "checksum": "5dfd9baebc0f344298db6415c7fab339f40ea07900aa90efd4120cd0b44db012"}, "tags": [], "refs": [["solarwinds_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_hist_solarwinds_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.solarwinds.solarwinds_users\n),\nrenamed as (\n    select \n        AVATAR               as avatar,\n        CREATED_AT           as created_at,\n        DEFAULT_LANDING_PAGE as default_landing_page,\n        DEPARTMENT           as department,\n        DISABLED             as is_disabled,\n        EMAIL                as email,\n        GROUP_IDS            as group_ids,\n        LAST_LOGIN           as last_login_at,\n        MFA_ENABLED          as is_mfa_enabled,\n        MOBILE_PHONE         as mobile_phone,\n        NAME                 as user_name,\n        PHONE                as phone,\n        REPORTS_TO           as reports_to,\n        ROLE                 as user_role,\n        SALT                 as salt,\n        SITE                 as user_site,\n        TITLE                as user_title,\n        UPDATED_AT           as updated_at,\n        ID                   as user_id,\n        _SDC_BATCHED_AT      as sdc_batched_at,\n        _SDC_RECEIVED_AT     as sdc_received_at,\n        _SDC_SEQUENCE        as sdc_sequence,\n        _SDC_TABLE_VERSION   as sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_solarwinds_users"}, "model.edw.base_solarwinds_departments": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('solarwinds','departments') }}\n),\nrenamed as (\n    select \n        DEFAULT_ASSIGNEE_ID as default_assignee_id,\n        DESCRIPTION         as description,\n        ID                  as department_id,\n        NAME                as name,\n        _SDC_BATCHED_AT     as sdc_batched_at,\n        _SDC_RECEIVED_AT    as sdc_received_at,\n        _SDC_SEQUENCE       as sdc_sequence,\n        _SDC_TABLE_VERSION  as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.departments"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "solarwinds", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "solarwinds", "base", "base_solarwinds_departments"], "unique_id": "model.edw.base_solarwinds_departments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/solarwinds/base/base_solarwinds_departments.sql", "original_file_path": "models/psa/solarwinds/base/base_solarwinds_departments.sql", "name": "base_solarwinds_departments", "alias": "base_solarwinds_departments", "checksum": {"name": "sha256", "checksum": "da65f5509728e2072f53e2ded0c0a78764f7198e6e3c69a674e79603f261c988"}, "tags": [], "refs": [], "sources": [["solarwinds", "departments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/solarwinds/schema.yml", "build_path": "target/compiled/edw/models/psa/solarwinds/base/base_solarwinds_departments.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "solarwinds"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.solarwinds_stitch.departments\n),\nrenamed as (\n    select \n        DEFAULT_ASSIGNEE_ID as default_assignee_id,\n        DESCRIPTION         as description,\n        ID                  as department_id,\n        NAME                as name,\n        _SDC_BATCHED_AT     as sdc_batched_at,\n        _SDC_RECEIVED_AT    as sdc_received_at,\n        _SDC_SEQUENCE       as sdc_sequence,\n        _SDC_TABLE_VERSION  as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_solarwinds_departments"}, "model.edw.stg_hist_freshdesk_ticket_ratings": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_freshdesk_satisfaction_ratings') }}\n),\nrenamed as (\n    select\n        agent_id,\n        created_at,\n        feedback,\n        group_id,\n        ratings,\n        rating_id,\n        survey_id,\n        ticket_id,\n        updated_at,\n        user_id as requester_id,\n        md5(\n            ifnull(as_char(array_compact(ratings)), '') || ';'\n        ) as dim_rating_hash_diff,\n        --md5(ifnull(ticket_id::varchar,'Unknown')) as ticket_key,\n        md5(ifnull(agent_id::varchar, 'Unknown')) as agent_key,\n        md5(ifnull(rating_id::varchar,'Unknown')) as rating_key,\n        md5(ifnull(user_id::varchar,'Unknown')) as requester_key,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_freshdesk_satisfaction_ratings"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "stg_hist_freshdesk_ticket_ratings"], "unique_id": "model.edw.stg_hist_freshdesk_ticket_ratings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/stg_hist_freshdesk_ticket_ratings.sql", "original_file_path": "models/psa/freshdesk/stg_hist_freshdesk_ticket_ratings.sql", "name": "stg_hist_freshdesk_ticket_ratings", "alias": "stg_hist_freshdesk_ticket_ratings", "checksum": {"name": "sha256", "checksum": "fbfcc95fcd640d5179526e9a0cb6ed6512508ebc7778956a0dc5882f647a9e2b"}, "tags": [], "refs": [["base_hist_freshdesk_satisfaction_ratings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/stg_hist_freshdesk_ticket_ratings.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_freshdesk_satisfaction_ratings\n),\nrenamed as (\n    select\n        agent_id,\n        created_at,\n        feedback,\n        group_id,\n        ratings,\n        rating_id,\n        survey_id,\n        ticket_id,\n        updated_at,\n        user_id as requester_id,\n        md5(\n            ifnull(as_char(array_compact(ratings)), '') || ';'\n        ) as dim_rating_hash_diff,\n        --md5(ifnull(ticket_id::varchar,'Unknown')) as ticket_key,\n        md5(ifnull(agent_id::varchar, 'Unknown')) as agent_key,\n        md5(ifnull(rating_id::varchar,'Unknown')) as rating_key,\n        md5(ifnull(user_id::varchar,'Unknown')) as requester_key,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_freshdesk_ticket_ratings"}, "model.edw.stg_freshdesk_requesters": {"raw_sql": "{{\n\n\tconfig(\n\t\tmaterialized='view'\n\n\t)\n}}\n\n\nwith source as (\n    select * from {{ ref('base_freshdesk_tickets') }}\n),\nmax_ticket as (\n    select \n        requester_id, \n        max(ticket_id) max_ticket_id\n    from source\n    group by requester_id\n),\nunique_reqs as (\n    select \n        s.requester_id,\n        s.requester_name,\n        s.requester_email,\n        s.requester_mobile,\n        s.requester_phone\n    from source s\n    inner join max_ticket m\n        on s.ticket_id = m.max_ticket_id\n),\nrenamed as (\n    select \n        md5(ifnull(requester_id::varchar, 'Unknown')) as requester_key,\n        'freshdesk'        as record_source,\n        requester_id,\n        requester_name,\n        requester_email,\n        requester_mobile,\n        requester_phone,\n        md5(\n            ifnull(upper(trim(requester_name)),'') || ';' ||\n            ifnull(upper(trim(requester_email)),'') || ';' ||\n            ifnull(upper(trim(requester_mobile)),'') || ';' ||\n            ifnull(upper(trim(requester_phone)), '') || ';'\n        ) as hash_diff\n    from unique_reqs \n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "stg_freshdesk_requesters"], "unique_id": "model.edw.stg_freshdesk_requesters", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/stg_freshdesk_requesters.sql", "original_file_path": "models/psa/freshdesk/stg_freshdesk_requesters.sql", "name": "stg_freshdesk_requesters", "alias": "stg_freshdesk_requesters", "checksum": {"name": "sha256", "checksum": "1882196af489ffc6853e422fdaa8e4494e046c73252c976104c09d6fa96e8841"}, "tags": [], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/stg_freshdesk_requesters.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_freshdesk_tickets\n),\nmax_ticket as (\n    select \n        requester_id, \n        max(ticket_id) max_ticket_id\n    from source\n    group by requester_id\n),\nunique_reqs as (\n    select \n        s.requester_id,\n        s.requester_name,\n        s.requester_email,\n        s.requester_mobile,\n        s.requester_phone\n    from source s\n    inner join max_ticket m\n        on s.ticket_id = m.max_ticket_id\n),\nrenamed as (\n    select \n        md5(ifnull(requester_id::varchar, 'Unknown')) as requester_key,\n        'freshdesk'        as record_source,\n        requester_id,\n        requester_name,\n        requester_email,\n        requester_mobile,\n        requester_phone,\n        md5(\n            ifnull(upper(trim(requester_name)),'') || ';' ||\n            ifnull(upper(trim(requester_email)),'') || ';' ||\n            ifnull(upper(trim(requester_mobile)),'') || ';' ||\n            ifnull(upper(trim(requester_phone)), '') || ';'\n        ) as hash_diff\n    from unique_reqs \n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_freshdesk_requesters"}, "model.edw.stg_hist_freshdesk_tickets": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_freshdesk_tickets') }}\n),\nassociation_type_lu as (\n    select * from {{ ref('association_type_lu') }}\n),\npriority_lu as (\n    select * from {{ ref('priority_lu') }}\n),\nsource_lu as (\n    select * from {{ ref('source_lu') }}\n),\nstatus_lu as (\n    select * from {{ ref('status_lu') }}\n),\nrenamed as (\n    select\n        source.ticket_id,\n        source.agent_id,\n        source.location_id,\n        source.requester_id,\n        source.reason,\n        source.related_with,\n        source.issue,\n        status_lu.value                  as ticket_status,\n        source.subject,\n        source.ticket_type,\n        priority_lu.value                as priority,\n        source.is_escalated,\n        source.is_fr_escalated,\n        source_lu.value                  as ticket_source,\n        source.tags,\n        source.associated_tickets_count,\n        association_type_lu.value        as association_type,\n        source.product_id,\n        source.created_at,\n        source.due_by_at,\n        source.fr_due_by_at,\n        source.agent_responded_at,\n        source.closed_at,\n        source.first_responded_at,\n        source.pending_since_at,\n        source.reopened_at,\n        source.requester_responded_at,\n        source.requester_email,\n        source.requester_mobile,\n        source.requester_name,\n        source.requester_phone,\n        source.resolved_at,\n        source.updated_at,\n        source.status_updated_at,\n        source.is_spam,\n        source.is_deleted,\n        source.cc_emails,\n        source.reply_cc_emails,\n        source.ticket_cc_emails,\n        source.fwd_emails,\n        source.to_emails,\n        source.computer_name,\n        source.is_cloudfactory_issued_laptop,\n        source.custom_date,\n        source.shift,\n        source.workstream_name,\n        source.duration_of_time_lost,\n        source.project_name_workstream,\n        source.work_location,\n        source.pod_name,\n        source.dbt_valid_from,\n        source.dbt_valid_to,\n        source.dbt_updated_at,\n        md5(\n            ifnull(upper(trim(association_type::varchar)),'') || ';' ||\n            ifnull(upper(trim(is_deleted::varchar)),'')       || ';' ||\n            ifnull(upper(trim(is_escalated::varchar)),'')     || ';' ||\n            ifnull(upper(trim(is_fr_escalated::varchar)),'')  || ';' ||\n            ifnull(upper(trim(is_spam::varchar)),'')          || ';' ||\n            ifnull(upper(trim(priority)),'')                  || ';' ||\n            ifnull(upper(trim(ticket_source)),'')             || ';' ||\n            ifnull(array_to_string(array_compact(tags), ','),'')           || ';' ||\n            ifnull(upper(trim(issue)),'')                     || ';' ||\n            ifnull(upper(trim(reason)),'')                    || ';' ||\n            ifnull(upper(trim(related_with)),'')              || ';' ||\n            ifnull(upper(trim(ticket_status)),'')             || ';' ||\n            ifnull(upper(trim(ticket_type)),'')               || ';' ||\n            ifnull(array_to_string(array_compact(fwd_emails), ','),'')     || ';'\n        ) as dim_ticket_hash_diff,\n        --md5(ifnull(ticket_id::varchar,'Unknown')) as ticket_key,\n        md5(ifnull(location_id::varchar,'Unknown')) as location_key,\n        md5(ifnull(agent_id::varchar, 'Unknown')) as agent_key,\n        md5(ifnull(requester_id::varchar, 'Unknown')) as requester_key,\n        to_date(created_at) as date_created_key,\n        to_date(resolved_at) as date_resolved_key\n    from source\n    left join association_type_lu\n        on source.association_type = association_type_lu.key\n    left join priority_lu\n        on source.priority = priority_lu.key\n    left join source_lu\n        on source.source = source_lu.key\n    left join status_lu\n        on source.status = status_lu.key\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_freshdesk_tickets", "seed.edw.association_type_lu", "seed.edw.priority_lu", "seed.edw.source_lu", "seed.edw.status_lu"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "stg_hist_freshdesk_tickets"], "unique_id": "model.edw.stg_hist_freshdesk_tickets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/stg_hist_freshdesk_tickets.sql", "original_file_path": "models/psa/freshdesk/stg_hist_freshdesk_tickets.sql", "name": "stg_hist_freshdesk_tickets", "alias": "stg_hist_freshdesk_tickets", "checksum": {"name": "sha256", "checksum": "4bd8409fcd9c45c48a841c7fd93a68b47ae64f9a293d306d00f96a472c1bdc3a"}, "tags": [], "refs": [["base_hist_freshdesk_tickets"], ["association_type_lu"], ["priority_lu"], ["source_lu"], ["status_lu"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/stg_hist_freshdesk_tickets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_freshdesk_tickets\n),\nassociation_type_lu as (\n    select * from psa_dev.scratch_brana.association_type_lu\n),\npriority_lu as (\n    select * from psa_dev.scratch_brana.priority_lu\n),\nsource_lu as (\n    select * from psa_dev.scratch_brana.source_lu\n),\nstatus_lu as (\n    select * from psa_dev.scratch_brana.status_lu\n),\nrenamed as (\n    select\n        source.ticket_id,\n        source.agent_id,\n        source.location_id,\n        source.requester_id,\n        source.reason,\n        source.related_with,\n        source.issue,\n        status_lu.value                  as ticket_status,\n        source.subject,\n        source.ticket_type,\n        priority_lu.value                as priority,\n        source.is_escalated,\n        source.is_fr_escalated,\n        source_lu.value                  as ticket_source,\n        source.tags,\n        source.associated_tickets_count,\n        association_type_lu.value        as association_type,\n        source.product_id,\n        source.created_at,\n        source.due_by_at,\n        source.fr_due_by_at,\n        source.agent_responded_at,\n        source.closed_at,\n        source.first_responded_at,\n        source.pending_since_at,\n        source.reopened_at,\n        source.requester_responded_at,\n        source.requester_email,\n        source.requester_mobile,\n        source.requester_name,\n        source.requester_phone,\n        source.resolved_at,\n        source.updated_at,\n        source.status_updated_at,\n        source.is_spam,\n        source.is_deleted,\n        source.cc_emails,\n        source.reply_cc_emails,\n        source.ticket_cc_emails,\n        source.fwd_emails,\n        source.to_emails,\n        source.computer_name,\n        source.is_cloudfactory_issued_laptop,\n        source.custom_date,\n        source.shift,\n        source.workstream_name,\n        source.duration_of_time_lost,\n        source.project_name_workstream,\n        source.work_location,\n        source.pod_name,\n        source.dbt_valid_from,\n        source.dbt_valid_to,\n        source.dbt_updated_at,\n        md5(\n            ifnull(upper(trim(association_type::varchar)),'') || ';' ||\n            ifnull(upper(trim(is_deleted::varchar)),'')       || ';' ||\n            ifnull(upper(trim(is_escalated::varchar)),'')     || ';' ||\n            ifnull(upper(trim(is_fr_escalated::varchar)),'')  || ';' ||\n            ifnull(upper(trim(is_spam::varchar)),'')          || ';' ||\n            ifnull(upper(trim(priority)),'')                  || ';' ||\n            ifnull(upper(trim(ticket_source)),'')             || ';' ||\n            ifnull(array_to_string(array_compact(tags), ','),'')           || ';' ||\n            ifnull(upper(trim(issue)),'')                     || ';' ||\n            ifnull(upper(trim(reason)),'')                    || ';' ||\n            ifnull(upper(trim(related_with)),'')              || ';' ||\n            ifnull(upper(trim(ticket_status)),'')             || ';' ||\n            ifnull(upper(trim(ticket_type)),'')               || ';' ||\n            ifnull(array_to_string(array_compact(fwd_emails), ','),'')     || ';'\n        ) as dim_ticket_hash_diff,\n        --md5(ifnull(ticket_id::varchar,'Unknown')) as ticket_key,\n        md5(ifnull(location_id::varchar,'Unknown')) as location_key,\n        md5(ifnull(agent_id::varchar, 'Unknown')) as agent_key,\n        md5(ifnull(requester_id::varchar, 'Unknown')) as requester_key,\n        to_date(created_at) as date_created_key,\n        to_date(resolved_at) as date_resolved_key\n    from source\n    left join association_type_lu\n        on source.association_type = association_type_lu.key\n    left join priority_lu\n        on source.priority = priority_lu.key\n    left join source_lu\n        on source.source = source_lu.key\n    left join status_lu\n        on source.status = status_lu.key\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_freshdesk_tickets"}, "model.edw.stg_hist_freshdesk_requesters": {"raw_sql": "{{\n\n\tconfig(\n\t\tmaterialized='view'\n\n\t)\n}}\n\n\nwith source as (\n    select * from {{ ref('stg_hist_freshdesk_tickets') }}\n),\nrenamed as (\n    select \n        requester_id,\n\t\trequester_name,\n\t\trequester_email,\n\t\trequester_mobile,\n\t\trequester_phone,\n        dbt_valid_from,\n        dbt_valid_to,\n        md5(\n            ifnull(upper(trim(requester_name)),'') || ';' ||\n            ifnull(upper(trim(requester_email)),'') || ';' ||\n            ifnull(upper(trim(requester_mobile)),'') || ';' ||\n            ifnull(upper(trim(requester_phone)), '') || ';'\n        ) as hash_diff\n    from source\n),\npk_groups as (\n    select \n        *,\n        row_number() over (partition by requester_id order by dbt_valid_from) as pk_row,\n        row_number() over (partition by requester_id, hash_diff order by dbt_valid_from) as group_cnt,\n        group_cnt - pk_row as group_num\n        -- ifnull(lag(hash_diff) over (partition by requester_id order by dbt_valid_from),hash_diff) as prev_hash_diff\n    from renamed\n),\nnew_records as (\n    select distinct \n        requester_id,\n        requester_name,\n        requester_email,\n        requester_mobile,\n        requester_phone,\n        hash_diff,\n        first_value(dbt_valid_from) over (partition by requester_id, hash_diff, group_num order by dbt_valid_from) as valid_from,\n        last_value(dbt_valid_to) over (partition by requester_id, hash_diff, group_num order by dbt_valid_from) valid_to,\n        md5(ifnull(requester_id::varchar, 'Unknown')) as requester_key\n    from pk_groups\n)\nselect * from new_records", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "stg_hist_freshdesk_requesters"], "unique_id": "model.edw.stg_hist_freshdesk_requesters", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/stg_hist_freshdesk_requesters.sql", "original_file_path": "models/psa/freshdesk/stg_hist_freshdesk_requesters.sql", "name": "stg_hist_freshdesk_requesters", "alias": "stg_hist_freshdesk_requesters", "checksum": {"name": "sha256", "checksum": "0b74bbf92694eb4d9a94e4d1051d2185c93c9e9f022f3b8076df07a1e032aacc"}, "tags": [], "refs": [["stg_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/stg_hist_freshdesk_requesters.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_hist_freshdesk_tickets\n),\nrenamed as (\n    select \n        requester_id,\n\t\trequester_name,\n\t\trequester_email,\n\t\trequester_mobile,\n\t\trequester_phone,\n        dbt_valid_from,\n        dbt_valid_to,\n        md5(\n            ifnull(upper(trim(requester_name)),'') || ';' ||\n            ifnull(upper(trim(requester_email)),'') || ';' ||\n            ifnull(upper(trim(requester_mobile)),'') || ';' ||\n            ifnull(upper(trim(requester_phone)), '') || ';'\n        ) as hash_diff\n    from source\n),\npk_groups as (\n    select \n        *,\n        row_number() over (partition by requester_id order by dbt_valid_from) as pk_row,\n        row_number() over (partition by requester_id, hash_diff order by dbt_valid_from) as group_cnt,\n        group_cnt - pk_row as group_num\n        -- ifnull(lag(hash_diff) over (partition by requester_id order by dbt_valid_from),hash_diff) as prev_hash_diff\n    from renamed\n),\nnew_records as (\n    select distinct \n        requester_id,\n        requester_name,\n        requester_email,\n        requester_mobile,\n        requester_phone,\n        hash_diff,\n        first_value(dbt_valid_from) over (partition by requester_id, hash_diff, group_num order by dbt_valid_from) as valid_from,\n        last_value(dbt_valid_to) over (partition by requester_id, hash_diff, group_num order by dbt_valid_from) valid_to,\n        md5(ifnull(requester_id::varchar, 'Unknown')) as requester_key\n    from pk_groups\n)\nselect * from new_records", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_freshdesk_requesters"}, "model.edw.stg_hist_freshdesk_locations": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_freshdesk_companies') }}\n),\nlogic as (\n    select \n        company_id          as location_id,\n        case split(company_name, ' ')[1]\n            when 'Kenya' then 'Kenya'\n            when 'Mombasa' then 'Kenya'\n            when 'Nepal' then 'Nepal'\n            else 'Unknown'\n        end                 as country,\n        case split(company_name, ' ')[1]\n            when 'Kenya' then 'Nairobi'\n            when 'Mombasa' then 'Mombasa'\n            when 'Nepal' then 'Kathmandu'\n            else 'Unknown'\n        end                 as city,\n        case split(company_name, ' ')[0]\n            when 'Flow' then 'Distributed'\n            when 'Elite' then 'In-House'\n            else 'Unknown'\n        end                 as location_type,\n        'Unknown'           as building,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n),\nrenamed as (\n    select \n        location_id,\n        country,\n        city,\n        location_type,\n        building,\n        md5(\n            ifnull(upper(trim(country::varchar)), '')       || ';' ||\n            ifnull(upper(trim(city::varchar)), '')          || ';' ||\n            ifnull(upper(trim(location_type::varchar)), '') || ';' ||\n            ifnull(upper(trim(building::varchar)), '')      || ';'\n        ) as dim_location_hash_diff,\n        md5(ifnull(upper(trim(location_id::varchar)), 'Unknown')) as location_key,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from logic\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_freshdesk_companies"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "stg_hist_freshdesk_locations"], "unique_id": "model.edw.stg_hist_freshdesk_locations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/stg_hist_freshdesk_locations.sql", "original_file_path": "models/psa/freshdesk/stg_hist_freshdesk_locations.sql", "name": "stg_hist_freshdesk_locations", "alias": "stg_hist_freshdesk_locations", "checksum": {"name": "sha256", "checksum": "60e80c64c21294b02f16c2ed958db447626adcbf8c36c575725f01873ef6a264"}, "tags": [], "refs": [["base_hist_freshdesk_companies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/stg_hist_freshdesk_locations.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_freshdesk_companies\n),\nlogic as (\n    select \n        company_id          as location_id,\n        case split(company_name, ' ')[1]\n            when 'Kenya' then 'Kenya'\n            when 'Mombasa' then 'Kenya'\n            when 'Nepal' then 'Nepal'\n            else 'Unknown'\n        end                 as country,\n        case split(company_name, ' ')[1]\n            when 'Kenya' then 'Nairobi'\n            when 'Mombasa' then 'Mombasa'\n            when 'Nepal' then 'Kathmandu'\n            else 'Unknown'\n        end                 as city,\n        case split(company_name, ' ')[0]\n            when 'Flow' then 'Distributed'\n            when 'Elite' then 'In-House'\n            else 'Unknown'\n        end                 as location_type,\n        'Unknown'           as building,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n),\nrenamed as (\n    select \n        location_id,\n        country,\n        city,\n        location_type,\n        building,\n        md5(\n            ifnull(upper(trim(country::varchar)), '')       || ';' ||\n            ifnull(upper(trim(city::varchar)), '')          || ';' ||\n            ifnull(upper(trim(location_type::varchar)), '') || ';' ||\n            ifnull(upper(trim(building::varchar)), '')      || ';'\n        ) as dim_location_hash_diff,\n        md5(ifnull(upper(trim(location_id::varchar)), 'Unknown')) as location_key,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from logic\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_freshdesk_locations"}, "model.edw.stg_hist_freshdesk_agents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_freshdesk_agents') }}\n),\nrenamed as (\n    select\n        agent_id,\n        agent_name,\n        agent_type,\n        agent_email,\n        job_title,\n        mobile_phone,\n        phone,\n        agent_language,\n        agent_signature,\n        ticket_scope,\n        is_occasional,\n        time_zone,\n        is_active,\n        is_available,\n        available_since_at,\n        last_login_at,\n        contact_created_at,\n        contact_updated_at,\n        created_at,\n        updated_at,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(agent_type::varchar)), '')         || ';' ||\n            ifnull(upper(trim(agent_email::varchar)), '')        || ';' ||\n            ifnull(upper(trim(job_title::varchar)), '')    || ';' ||\n            ifnull(upper(trim(mobile_phone::varchar)), '') || ';' ||\n            ifnull(upper(trim(phone::varchar)), '')        || ';' ||\n            ifnull(upper(trim(agent_language::varchar)), '')     || ';' ||\n            ifnull(upper(trim(agent_signature::varchar)), '')    || ';' ||\n            ifnull(upper(trim(ticket_scope::varchar)), '')       || ';' ||\n            ifnull(upper(trim(is_occasional::varchar)), '')      || ';' ||\n            ifnull(upper(trim(time_zone::varchar)), '')          || ';' ||\n            ifnull(upper(trim(is_active::varchar)), '')          || ';' ||\n            ifnull(upper(trim(is_available::varchar)), '')       || ';'\n        ) as dim_agent_hash_diff,\n        md5( ifnull(upper(trim(agent_id::varchar)), 'Unknown')) as agent_key\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "stg_hist_freshdesk_agents"], "unique_id": "model.edw.stg_hist_freshdesk_agents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/stg_hist_freshdesk_agents.sql", "original_file_path": "models/psa/freshdesk/stg_hist_freshdesk_agents.sql", "name": "stg_hist_freshdesk_agents", "alias": "stg_hist_freshdesk_agents", "checksum": {"name": "sha256", "checksum": "d351aac6b136ffffefa9bbcf1e66fb091dab0f30c40d67fdc757c2660bee0249"}, "tags": [], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/stg_hist_freshdesk_agents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_freshdesk_agents\n),\nrenamed as (\n    select\n        agent_id,\n        agent_name,\n        agent_type,\n        agent_email,\n        job_title,\n        mobile_phone,\n        phone,\n        agent_language,\n        agent_signature,\n        ticket_scope,\n        is_occasional,\n        time_zone,\n        is_active,\n        is_available,\n        available_since_at,\n        last_login_at,\n        contact_created_at,\n        contact_updated_at,\n        created_at,\n        updated_at,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(agent_type::varchar)), '')         || ';' ||\n            ifnull(upper(trim(agent_email::varchar)), '')        || ';' ||\n            ifnull(upper(trim(job_title::varchar)), '')    || ';' ||\n            ifnull(upper(trim(mobile_phone::varchar)), '') || ';' ||\n            ifnull(upper(trim(phone::varchar)), '')        || ';' ||\n            ifnull(upper(trim(agent_language::varchar)), '')     || ';' ||\n            ifnull(upper(trim(agent_signature::varchar)), '')    || ';' ||\n            ifnull(upper(trim(ticket_scope::varchar)), '')       || ';' ||\n            ifnull(upper(trim(is_occasional::varchar)), '')      || ';' ||\n            ifnull(upper(trim(time_zone::varchar)), '')          || ';' ||\n            ifnull(upper(trim(is_active::varchar)), '')          || ';' ||\n            ifnull(upper(trim(is_available::varchar)), '')       || ';'\n        ) as dim_agent_hash_diff,\n        md5( ifnull(upper(trim(agent_id::varchar)), 'Unknown')) as agent_key\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_freshdesk_agents"}, "model.edw.base_hist_freshdesk_tickets": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('tickets') }}\n),\ncf_arr as (\n    select\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields) cs\n    where col_value != 'none'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n        pivot(\n            min(col_value) for col_name in (\n                'cf_question',\n                'cf_request',\n                'cf_related_with',\n                'cf_computer_name',\n                'cf_cloudfactory_issued_laptop',\n                'cf_date',\n                'cf_shift',\n                'cf_workstream_name',\n                'cf_duration_of_time_lost',\n                'cf_specific_issue752213',\n                'cf_specific_issue335675',\n                'cf_specific_issue590975',\n                'cf_project_name_workstream',\n                'cf_specific_issue',\n                'cf_related_to681804',\n                'cf_specific_issue240814',\n                'cf_specific_issue_timer',\n                'cf_work_location',\n                'cf_specific_issue935627',\n                'cf_related_with252158',\n                'cf_pod_name',\n                'cf_specific_issue479129',\n                'cf_related_to',\n                'cf_specific_issue888663',\n                'cf_specific_issue862091',\n                'cf_specific_issue81231'))\n        as p (\n            id, \n            cf_question,\n            cf_request,\n            cf_related_with,\n            cf_computer_name,\n            cf_cloudfactory_issued_laptop,\n            cf_date,\n            cf_shift,\n            cf_workstream_name,\n            cf_duration_of_time_lost,\n            cf_specific_issue752213,\n            cf_specific_issue335675,\n            cf_specific_issue590975,\n            cf_project_name_workstream,\n            cf_specific_issue,\n            cf_related_to681804,\n            cf_specific_issue240814,\n            cf_specific_issue_timer,\n            cf_work_location,\n            cf_specific_issue935627,\n            cf_related_with252158,\n            cf_pod_name,\n            cf_specific_issue479129,\n            cf_related_to,\n            cf_specific_issue888663,\n            cf_specific_issue862091,\n            cf_specific_issue81231)\n),\nrenamed as (\n    select\n        s.associated_tickets_count,\n        s.association_type,\n        s.cc_emails,\n        s.company:name                 as company_name,\n        s.company_id                   as location_id,\n        to_timestamp(s.created_at)     as created_at,\n        case \n            when s.id < 9428\n                then initcap(p.cf_question)\n            else s.type\n        end as reason,\n        initcap(\n            coalesce( \n                p.cf_request,\n                p.cf_specific_issue,\n                p.cf_specific_issue752213,\n                p.cf_specific_issue335675,\n                p.cf_specific_issue590975,\n                p.cf_specific_issue888663,\n                p.cf_specific_issue862091,\n                p.cf_specific_issue81231,\n                p.cf_specific_issue240814,\n                p.cf_specific_issue_timer,\n                p.cf_specific_issue935627,\n                p.cf_specific_issue479129,\n                'not applicable'))     as issue,\n        initcap(\n            coalesce( \n                p.cf_related_with,\n                p.cf_related_to,\n                p.cf_related_to681804,\n                p.cf_related_with252158,\n                'not applicable'\n                ))                     as related_with,\n        s.deleted                      as is_deleted,\n        s.due_by                       as due_by_at,\n        s.email_config_id,\n        s.fr_due_by                    as fr_due_by_at,\n        s.fr_escalated                 as is_fr_escalated,\n        s.fwd_emails,\n        s.group_id,\n        s.id                           as ticket_id,\n        s.is_escalated,\n        s.priority,\n        s.product_id,\n        s.reply_cc_emails,\n        s.requester:email::string      as requester_email,\n        s.requester:mobile::string     as requester_mobile,\n        s.requester:name::string       as requester_name,\n        s.requester:phone::string      as requester_phone,\n        s.requester_id                 as requester_id,\n        s.responder_id                 as agent_id,\n        s.source                       as source,\n        s.spam                         as is_spam,\n        to_timestamp(s.stats:agent_responded_at)     as agent_responded_at,\n        to_timestamp(s.stats:closed_at)              as closed_at,\n        to_timestamp(s.stats:first_responded_at)     as first_responded_at,\n        to_timestamp(s.stats:pending_since)          as pending_since_at,\n        to_timestamp(s.stats:reopened_at)            as reopened_at,\n        to_timestamp(s.stats:requester_responded_at) as requester_responded_at,\n        to_timestamp(s.stats:resolved_at)            as resolved_at,\n        to_timestamp(s.stats:status_updated_at)      as status_updated_at,\n        s.status,\n        s.subject,\n        s.tags,\n        s.ticket_cc_emails,\n        s.to_emails,\n        s.type                          as ticket_type,\n        to_timestamp(s.updated_at)      as updated_at,\n        p.cf_computer_name              as computer_name,\n        p.cf_cloudfactory_issued_laptop as is_cloudfactory_issued_laptop,\n        p.cf_date                       as custom_date,\n        p.cf_shift                      as shift,\n        p.cf_workstream_name            as workstream_name,\n        p.cf_duration_of_time_lost      as duration_of_time_lost,\n        p.cf_project_name_workstream    as project_name_workstream,\n        p.cf_work_location              as work_location,\n        p.cf_pod_name                   as pod_name,\n        s._sdc_batched_at,\n        s._sdc_extracted_at,\n        s._sdc_received_at,\n        s._sdc_sequence,\n        s._sdc_table_version,\n        s.dbt_valid_from,\n        s.dbt_valid_to,\n        s.dbt_updated_at\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.tickets"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_hist_freshdesk_tickets"], "unique_id": "model.edw.base_hist_freshdesk_tickets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_hist_freshdesk_tickets.sql", "original_file_path": "models/psa/freshdesk/base/base_hist_freshdesk_tickets.sql", "name": "base_hist_freshdesk_tickets", "alias": "base_hist_freshdesk_tickets", "checksum": {"name": "sha256", "checksum": "d700d5cb306adb6156db873af458ac9633494d22f4f3cc209b4e7bc03658e567"}, "tags": [], "refs": [["tickets"]], "sources": [], "description": "", "columns": {"associated_tickets_count": {"name": "associated_tickets_count", "description": "count of tickets associated with this ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "association_type": {"name": "association_type", "description": "identifies the type of the current ticket. parent = 1, child = 2, tracker = 3, related = 4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "email address added in the 'cc' field of the incoming ticket email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "json object containing id and name attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "ticket creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_fields": {"name": "custom_fields", "description": "json array that holds custom field objects.  Each object represents a field of information used for the ticket.  typically: \n\n- cf_request - Categorical field holding the reason for the ticket.\n- cf_related_with - categorical field holding the issue of the ticket\n- cf_question - categorical field holding the type of question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "set to true if the ticket has been deleted/trashed. deleted tickets will not be displayed in any views except the \"deleted\" filter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_by": {"name": "due_by", "description": "timestamp that denotes when the ticket is due to be resolved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_config_id": {"name": "email_config_id", "description": "id of email config which is used for this ticket. (i.e., support@yourcompany.com/sales@yourcompany.com)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fr_due_by": {"name": "fr_due_by", "description": "timestamp that denotes when the first response is due", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fr_escalated": {"name": "fr_escalated", "description": "set to true if the ticket has been escalated as the result of first response time being breached", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fwd_emails": {"name": "fwd_emails", "description": "email address(e)s added while forwarding a ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "id of the group to which the ticket has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_escalated": {"name": "is_escalated", "description": "set to true if the ticket has been escalated for any reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue": {"name": "issue", "description": "Sub-categorization of ticket_type [ticket_type > issue > related_with]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "company id. same as company.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nr_escalated": {"name": "nr_escalated", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Enumerator describing the priority of the ticket.\n\n||Priority|Value||\n|Low|1|\n|Medium|2|\n|High|3|\n|Urgent|4|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "id of the product to which the ticket is associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "related_with": {"name": "related_with", "description": "2nd level sub-categorization of ticket_type. [ticket_type > issue > related_with]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_cc_emails": {"name": "reply_cc_emails", "description": "email address added while replying to a ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requester": {"name": "requester", "description": "json object containing requester details.  Typically:\n- email - email address of the requester\n- id - freshdesk unique id for the requester\n- mobile - unknown\n- name - Full name of the requester\n- phone - phone number of the requester", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "user id of the requester. for existing contacts, the requester_id can be passed instead of the requester's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "responder_id": {"name": "responder_id", "description": "id of the agent to whom the ticket has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Enumerator describing the channel through which the ticket was created.\n\n||Source|Value||\n|Email|1|\n|Portal|2|\n|Phone|3|\n|Chat|7|\n|Mobihelp|8|\n|Feedback Widget|9|\n|Outbound Email|10|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spam": {"name": "spam", "description": "set to true if the ticket has been marked as spam", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stats": {"name": "stats", "description": "json object containing timestamps relevant to calculating ticket lifecycle durations.  Typically:\n- agent_responded_at - \n- closed_at - \n- first_responded_at - \n- pending_since_at - \n- reopened_at - \n- requester_responded_at - \n- resolved_at - \n- status_updated_at -", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Enumerator describing the status of the ticket.\n\n||Status|Value||\n|Open|2|\n|Pending|3|\n|Resolvede|4|\n|Closed|5|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "subject of the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "tags that have been associated with the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "unique id of the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_cc_emails": {"name": "ticket_cc_emails", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_emails": {"name": "to_emails", "description": "email addresses to which the ticket was originally sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_type": {"name": "ticket_type", "description": "helps categorize the ticket according to the different kinds of issues your support team deals with. [ticket_type > issue > related_with]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "ticket updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "timestamp indicating when stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "timestamp indicating when stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "timestamp indicating when stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "a unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "indicates the version of the table. this column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "Indicates the datetime from which the record is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "Indicates the datetime to which the record is valid. Value is null for current record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_hist_freshdesk_tickets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa.freshdesk.tickets\n),\ncf_arr as (\n    select\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields) cs\n    where col_value != 'none'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n        pivot(\n            min(col_value) for col_name in (\n                'cf_question',\n                'cf_request',\n                'cf_related_with',\n                'cf_computer_name',\n                'cf_cloudfactory_issued_laptop',\n                'cf_date',\n                'cf_shift',\n                'cf_workstream_name',\n                'cf_duration_of_time_lost',\n                'cf_specific_issue752213',\n                'cf_specific_issue335675',\n                'cf_specific_issue590975',\n                'cf_project_name_workstream',\n                'cf_specific_issue',\n                'cf_related_to681804',\n                'cf_specific_issue240814',\n                'cf_specific_issue_timer',\n                'cf_work_location',\n                'cf_specific_issue935627',\n                'cf_related_with252158',\n                'cf_pod_name',\n                'cf_specific_issue479129',\n                'cf_related_to',\n                'cf_specific_issue888663',\n                'cf_specific_issue862091',\n                'cf_specific_issue81231'))\n        as p (\n            id, \n            cf_question,\n            cf_request,\n            cf_related_with,\n            cf_computer_name,\n            cf_cloudfactory_issued_laptop,\n            cf_date,\n            cf_shift,\n            cf_workstream_name,\n            cf_duration_of_time_lost,\n            cf_specific_issue752213,\n            cf_specific_issue335675,\n            cf_specific_issue590975,\n            cf_project_name_workstream,\n            cf_specific_issue,\n            cf_related_to681804,\n            cf_specific_issue240814,\n            cf_specific_issue_timer,\n            cf_work_location,\n            cf_specific_issue935627,\n            cf_related_with252158,\n            cf_pod_name,\n            cf_specific_issue479129,\n            cf_related_to,\n            cf_specific_issue888663,\n            cf_specific_issue862091,\n            cf_specific_issue81231)\n),\nrenamed as (\n    select\n        s.associated_tickets_count,\n        s.association_type,\n        s.cc_emails,\n        s.company:name                 as company_name,\n        s.company_id                   as location_id,\n        to_timestamp(s.created_at)     as created_at,\n        case \n            when s.id < 9428\n                then initcap(p.cf_question)\n            else s.type\n        end as reason,\n        initcap(\n            coalesce( \n                p.cf_request,\n                p.cf_specific_issue,\n                p.cf_specific_issue752213,\n                p.cf_specific_issue335675,\n                p.cf_specific_issue590975,\n                p.cf_specific_issue888663,\n                p.cf_specific_issue862091,\n                p.cf_specific_issue81231,\n                p.cf_specific_issue240814,\n                p.cf_specific_issue_timer,\n                p.cf_specific_issue935627,\n                p.cf_specific_issue479129,\n                'not applicable'))     as issue,\n        initcap(\n            coalesce( \n                p.cf_related_with,\n                p.cf_related_to,\n                p.cf_related_to681804,\n                p.cf_related_with252158,\n                'not applicable'\n                ))                     as related_with,\n        s.deleted                      as is_deleted,\n        s.due_by                       as due_by_at,\n        s.email_config_id,\n        s.fr_due_by                    as fr_due_by_at,\n        s.fr_escalated                 as is_fr_escalated,\n        s.fwd_emails,\n        s.group_id,\n        s.id                           as ticket_id,\n        s.is_escalated,\n        s.priority,\n        s.product_id,\n        s.reply_cc_emails,\n        s.requester:email::string      as requester_email,\n        s.requester:mobile::string     as requester_mobile,\n        s.requester:name::string       as requester_name,\n        s.requester:phone::string      as requester_phone,\n        s.requester_id                 as requester_id,\n        s.responder_id                 as agent_id,\n        s.source                       as source,\n        s.spam                         as is_spam,\n        to_timestamp(s.stats:agent_responded_at)     as agent_responded_at,\n        to_timestamp(s.stats:closed_at)              as closed_at,\n        to_timestamp(s.stats:first_responded_at)     as first_responded_at,\n        to_timestamp(s.stats:pending_since)          as pending_since_at,\n        to_timestamp(s.stats:reopened_at)            as reopened_at,\n        to_timestamp(s.stats:requester_responded_at) as requester_responded_at,\n        to_timestamp(s.stats:resolved_at)            as resolved_at,\n        to_timestamp(s.stats:status_updated_at)      as status_updated_at,\n        s.status,\n        s.subject,\n        s.tags,\n        s.ticket_cc_emails,\n        s.to_emails,\n        s.type                          as ticket_type,\n        to_timestamp(s.updated_at)      as updated_at,\n        p.cf_computer_name              as computer_name,\n        p.cf_cloudfactory_issued_laptop as is_cloudfactory_issued_laptop,\n        p.cf_date                       as custom_date,\n        p.cf_shift                      as shift,\n        p.cf_workstream_name            as workstream_name,\n        p.cf_duration_of_time_lost      as duration_of_time_lost,\n        p.cf_project_name_workstream    as project_name_workstream,\n        p.cf_work_location              as work_location,\n        p.cf_pod_name                   as pod_name,\n        s._sdc_batched_at,\n        s._sdc_extracted_at,\n        s._sdc_received_at,\n        s._sdc_sequence,\n        s._sdc_table_version,\n        s.dbt_valid_from,\n        s.dbt_valid_to,\n        s.dbt_updated_at\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_freshdesk_tickets"}, "model.edw.base_freshdesk_satisfaction_ratings": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('freshdesk','satisfaction_ratings') }}\n),\nrenamed as (\n    select\n        AGENT_ID as agent_id,\n        CREATED_AT as created_at,\n        FEEDBACK as feedback,\n        GROUP_ID as group_id,\n        ID as satisfaction_rating_id,\n        RATINGS as ratings,\n        SURVEY_ID as survey_id,\n        TICKET_ID as ticket_id,\n        UPDATED_AT as updated_at,\n        USER_ID as user_id,\n        _SDC_BATCHED_AT as sdc_batched_at,\n        _SDC_EXTRACTED_AT as sdc_extracted_at,\n        _SDC_RECEIVED_AT as sdc_received_at,\n        _SDC_SEQUENCE as sdc_sequence,\n        _SDC_TABLE_VERSION as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.satisfaction_ratings"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_freshdesk_satisfaction_ratings"], "unique_id": "model.edw.base_freshdesk_satisfaction_ratings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_freshdesk_satisfaction_ratings.sql", "original_file_path": "models/psa/freshdesk/base/base_freshdesk_satisfaction_ratings.sql", "name": "base_freshdesk_satisfaction_ratings", "alias": "base_freshdesk_satisfaction_ratings", "checksum": {"name": "sha256", "checksum": "f40269554648b3bdc283f442d984973bf5e7468e992d76f1aebc282f109f6d8e"}, "tags": [], "refs": [], "sources": [["freshdesk", "satisfaction_ratings"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_freshdesk_satisfaction_ratings.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.freshdesk_stitch.satisfaction_ratings\n),\nrenamed as (\n    select\n        AGENT_ID as agent_id,\n        CREATED_AT as created_at,\n        FEEDBACK as feedback,\n        GROUP_ID as group_id,\n        ID as satisfaction_rating_id,\n        RATINGS as ratings,\n        SURVEY_ID as survey_id,\n        TICKET_ID as ticket_id,\n        UPDATED_AT as updated_at,\n        USER_ID as user_id,\n        _SDC_BATCHED_AT as sdc_batched_at,\n        _SDC_EXTRACTED_AT as sdc_extracted_at,\n        _SDC_RECEIVED_AT as sdc_received_at,\n        _SDC_SEQUENCE as sdc_sequence,\n        _SDC_TABLE_VERSION as sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_freshdesk_satisfaction_ratings"}, "model.edw.base_hist_freshdesk_satisfaction_ratings": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('satisfaction_ratings') }}\n),\nrenamed as (\n    select\n        agent_id,\n        created_at,\n        feedback,\n        group_id,\n        id as rating_id,\n        ratings,\n        survey_id,\n        ticket_id,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.satisfaction_ratings"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_hist_freshdesk_satisfaction_ratings"], "unique_id": "model.edw.base_hist_freshdesk_satisfaction_ratings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_hist_freshdesk_satisfaction_ratings.sql", "original_file_path": "models/psa/freshdesk/base/base_hist_freshdesk_satisfaction_ratings.sql", "name": "base_hist_freshdesk_satisfaction_ratings", "alias": "base_hist_freshdesk_satisfaction_ratings", "checksum": {"name": "sha256", "checksum": "ed512cedc5da6f6de9e8f611fa765c225513daa81d80de843417d70f746170ba"}, "tags": [], "refs": [["satisfaction_ratings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_hist_freshdesk_satisfaction_ratings.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa.freshdesk.satisfaction_ratings\n),\nrenamed as (\n    select\n        agent_id,\n        created_at,\n        feedback,\n        group_id,\n        id as rating_id,\n        ratings,\n        survey_id,\n        ticket_id,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_freshdesk_satisfaction_ratings"}, "model.edw.base_freshdesk_agents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('freshdesk','agents') }}\n),\nrenamed as (\n    select\n        available                       as is_available,\n        available_since                 as available_since_at,\n        contact:active                  as is_active,\n        contact:email::string           as agent_email,\n        contact:job_title::string       as job_title,\n        contact:language::string        as agent_language,\n        contact:last_login_at           as last_login_at,\n        contact:mobile::string          as agent_mobile_phone,\n        contact:name::string            as agent_name,\n        contact:phone::string           as agent_phone,\n        contact:time_zone::string       as time_zone,\n        contact:created_at              as contact_created_at,\n        contact:updated_at              as contact_updated_at,\n        created_at,\n        id                              as agent_id,\n        occasional                      as is_occasional,\n        signature                       as agent_signature,\n        initcap(\n            case ticket_scope\n                when 1 then 'global access'\n                when 2 then 'group access'\n                when 3 then 'restricted access'\n            end\n        )                               as ticket_scope,\n        type                            as agent_type,\n        updated_at                      as updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.agents"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_freshdesk_agents"], "unique_id": "model.edw.base_freshdesk_agents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_freshdesk_agents.sql", "original_file_path": "models/psa/freshdesk/base/base_freshdesk_agents.sql", "name": "base_freshdesk_agents", "alias": "base_freshdesk_agents", "checksum": {"name": "sha256", "checksum": "64b727684e208105b60be75cd7e5d0df24bb6e72e77933fe81251484d0df68c5"}, "tags": [], "refs": [], "sources": [["freshdesk", "agents"]], "description": "", "columns": {"is_available": {"name": "is_available", "description": "If the agent is in a group that has enabled \"Automatic Ticket Assignment\", this attribute will be set to true if the agent is accepting new tickets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_since_at": {"name": "available_since_at", "description": "Timestamp that denotes when the agent became available/unavailable (depending on the value of the 'available' attribute)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Set to true if the agent is verified", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "Email address of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Job title of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_language": {"name": "agent_language", "description": "Language of the agent. Default language is \"en\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_login_at": {"name": "last_login_at", "description": "Timestamp of the agent's last successful login", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_mobile_phone": {"name": "agent_mobile_phone", "description": "Mobile number of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_name": {"name": "agent_name", "description": "Name of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_phone": {"name": "agent_phone", "description": "Telephone number of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "Time zone of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_created_at": {"name": "contact_created_at", "description": "Contact details creation timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_updated_at": {"name": "contact_updated_at", "description": "Timestamp of the last update", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Agent creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_id": {"name": "agent_id", "description": "User ID of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_occasional": {"name": "is_occasional", "description": "Set to true if this is an occasional agent (true => occasional, false => full-time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_signature": {"name": "agent_signature", "description": "Signature of the agent in HTML format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_scope": {"name": "ticket_scope", "description": "Ticket permission of the agent.  (1 -> Global Access, 2 -> Group Access, 3 -> Restricted Access)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_type": {"name": "agent_type", "description": "Describes agent type, e.g. 'support_agent'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Agent updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_freshdesk_agents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.freshdesk_stitch.agents\n),\nrenamed as (\n    select\n        available                       as is_available,\n        available_since                 as available_since_at,\n        contact:active                  as is_active,\n        contact:email::string           as agent_email,\n        contact:job_title::string       as job_title,\n        contact:language::string        as agent_language,\n        contact:last_login_at           as last_login_at,\n        contact:mobile::string          as agent_mobile_phone,\n        contact:name::string            as agent_name,\n        contact:phone::string           as agent_phone,\n        contact:time_zone::string       as time_zone,\n        contact:created_at              as contact_created_at,\n        contact:updated_at              as contact_updated_at,\n        created_at,\n        id                              as agent_id,\n        occasional                      as is_occasional,\n        signature                       as agent_signature,\n        initcap(\n            case ticket_scope\n                when 1 then 'global access'\n                when 2 then 'group access'\n                when 3 then 'restricted access'\n            end\n        )                               as ticket_scope,\n        type                            as agent_type,\n        updated_at                      as updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_freshdesk_agents"}, "model.edw.base_freshdesk_companies": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('freshdesk','companies') }}\n),\nrenamed as (\n    select\n        created_at    as created_at,\n        custom_fields as custom_fields,\n        description   as company_description,\n        domains       as domains,\n        id            as company_id,\n        name          as company_name,\n        updated_at    as updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.companies"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_freshdesk_companies"], "unique_id": "model.edw.base_freshdesk_companies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_freshdesk_companies.sql", "original_file_path": "models/psa/freshdesk/base/base_freshdesk_companies.sql", "name": "base_freshdesk_companies", "alias": "base_freshdesk_companies", "checksum": {"name": "sha256", "checksum": "a7976489cdde70e7ce87cc5ffa4348ff3b159123d8f55b5c7b40846a03fbb58d"}, "tags": [], "refs": [], "sources": [["freshdesk", "companies"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_freshdesk_companies.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.freshdesk_stitch.companies\n),\nrenamed as (\n    select\n        created_at    as created_at,\n        custom_fields as custom_fields,\n        description   as company_description,\n        domains       as domains,\n        id            as company_id,\n        name          as company_name,\n        updated_at    as updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_freshdesk_companies"}, "model.edw.base_hist_freshdesk_agents": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('agents') }}\n),\nrenamed as (\n    select\n        available                       as is_available,\n        available_since                 as available_since_at,\n        contact:active                  as is_active,\n        contact:email::string           as agent_email,\n        contact:job_title::string       as job_title,\n        contact:language::string        as agent_language,\n        contact:last_login_at           as last_login_at,\n        contact:mobile::string          as mobile_phone,\n        contact:name::string            as agent_name,\n        contact:phone::string           as phone,\n        contact:time_zone::string       as time_zone,\n        contact:created_at              as contact_created_at,\n        contact:updated_at              as contact_updated_at,\n        created_at,\n        id                              as agent_id,\n        occasional                      as is_occasional,\n        signature                       as agent_signature,\n        initcap(\n            case ticket_scope\n                when 1 then 'global access'\n                when 2 then 'group access'\n                when 3 then 'restricted access'\n            end\n        )                               as ticket_scope,\n        type                            as agent_type,\n        updated_at                      as updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.agents"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_hist_freshdesk_agents"], "unique_id": "model.edw.base_hist_freshdesk_agents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_hist_freshdesk_agents.sql", "original_file_path": "models/psa/freshdesk/base/base_hist_freshdesk_agents.sql", "name": "base_hist_freshdesk_agents", "alias": "base_hist_freshdesk_agents", "checksum": {"name": "sha256", "checksum": "f743cf052e9ca5defdde0924ba97895a96f82d39d7bc338b8983e36da91cff58"}, "tags": [], "refs": [["agents"]], "sources": [], "description": "", "columns": {"is_available": {"name": "is_available", "description": "If the agent is in a group that has enabled \"Automatic Ticket Assignment\", this attribute will be set to true if the agent is accepting new tickets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_since_at": {"name": "available_since_at", "description": "Timestamp that denotes when the agent became available/unavailable (depending on the value of the 'available' attribute)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Set to true if the agent is verified", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "Email address of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Job title of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_language": {"name": "agent_language", "description": "Language of the agent. Default language is \"en\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_login_at": {"name": "last_login_at", "description": "Timestamp of the agent's last successful login", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_mobile_phone": {"name": "agent_mobile_phone", "description": "Mobile number of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_name": {"name": "agent_name", "description": "Name of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_phone": {"name": "agent_phone", "description": "Telephone number of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "Time zone of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_created_at": {"name": "contact_created_at", "description": "Contact details creation timestamp.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_updated_at": {"name": "contact_updated_at", "description": "Timestamp of the last update", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Agent creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_id": {"name": "agent_id", "description": "User ID of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_occasional": {"name": "is_occasional", "description": "Set to true if this is an occasional agent (true => occasional, false => full-time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_signature": {"name": "agent_signature", "description": "Signature of the agent in HTML format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_scope": {"name": "ticket_scope", "description": "Ticket permission of the agent.  (1 -> Global Access, 2 -> Group Access, 3 -> Restricted Access)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_type": {"name": "agent_type", "description": "Describes agent type, e.g. 'support_agent'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Agent updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "Indicates the datetime from which the record is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "Indicates the datetime to which the record is valid. Value is null for current record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_hist_freshdesk_agents.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa.freshdesk.agents\n),\nrenamed as (\n    select\n        available                       as is_available,\n        available_since                 as available_since_at,\n        contact:active                  as is_active,\n        contact:email::string           as agent_email,\n        contact:job_title::string       as job_title,\n        contact:language::string        as agent_language,\n        contact:last_login_at           as last_login_at,\n        contact:mobile::string          as mobile_phone,\n        contact:name::string            as agent_name,\n        contact:phone::string           as phone,\n        contact:time_zone::string       as time_zone,\n        contact:created_at              as contact_created_at,\n        contact:updated_at              as contact_updated_at,\n        created_at,\n        id                              as agent_id,\n        occasional                      as is_occasional,\n        signature                       as agent_signature,\n        initcap(\n            case ticket_scope\n                when 1 then 'global access'\n                when 2 then 'group access'\n                when 3 then 'restricted access'\n            end\n        )                               as ticket_scope,\n        type                            as agent_type,\n        updated_at                      as updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_freshdesk_agents"}, "model.edw.base_freshdesk_tickets": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('freshdesk','tickets') }}\n),\ncf_arr as (\n    select\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields) cs\n    where col_value != 'none'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n        pivot(\n            min(col_value) for col_name in (\n                'cf_question',\n                'cf_request',\n                'cf_related_with',\n                'cf_computer_name',\n                'cf_cloudfactory_issued_laptop',\n                'cf_date',\n                'cf_shift',\n                'cf_workstream_name',\n                'cf_duration_of_time_lost',\n                'cf_specific_issue752213',\n                'cf_specific_issue335675',\n                'cf_specific_issue590975',\n                'cf_project_name_workstream',\n                'cf_specific_issue',\n                'cf_related_to681804',\n                'cf_specific_issue240814',\n                'cf_specific_issue_timer',\n                'cf_work_location',\n                'cf_specific_issue935627',\n                'cf_related_with252158',\n                'cf_pod_name',\n                'cf_specific_issue479129',\n                'cf_related_to',\n                'cf_specific_issue888663',\n                'cf_specific_issue862091',\n                'cf_specific_issue81231'))\n        as p (\n            id, \n            cf_question,\n            cf_request,\n            cf_related_with,\n            cf_computer_name,\n            cf_cloudfactory_issued_laptop,\n            cf_date,\n            cf_shift,\n            cf_workstream_name,\n            cf_duration_of_time_lost,\n            cf_specific_issue752213,\n            cf_specific_issue335675,\n            cf_specific_issue590975,\n            cf_project_name_workstream,\n            cf_specific_issue,\n            cf_related_to681804,\n            cf_specific_issue240814,\n            cf_specific_issue_timer,\n            cf_work_location,\n            cf_specific_issue935627,\n            cf_related_with252158,\n            cf_pod_name,\n            cf_specific_issue479129,\n            cf_related_to,\n            cf_specific_issue888663,\n            cf_specific_issue862091,\n            cf_specific_issue81231)\n),\nrenamed as (\n    select\n        s.associated_tickets_count,\n        s.association_type,\n        s.cc_emails,\n        s.company:name                 as company_name,\n        s.company_id,\n        to_timestamp(s.created_at)     as created_at,\n        case \n            when s.id < 9428\n                then initcap(p.cf_question)\n            else s.type\n        end as reason,\n        initcap(\n            coalesce( \n                p.cf_request,\n                p.cf_specific_issue,\n                p.cf_specific_issue752213,\n                p.cf_specific_issue335675,\n                p.cf_specific_issue590975,\n                p.cf_specific_issue888663,\n                p.cf_specific_issue862091,\n                p.cf_specific_issue81231,\n                p.cf_specific_issue240814,\n                p.cf_specific_issue_timer,\n                p.cf_specific_issue935627,\n                p.cf_specific_issue479129,\n                'not applicable'))     as issue,\n        initcap(\n            coalesce( \n                p.cf_related_with,\n                p.cf_related_to,\n                p.cf_related_to681804,\n                p.cf_related_with252158,\n                'not applicable'\n                ))                     as related_with,\n        s.deleted                      as is_deleted,\n        s.due_by                       as due_by_at,\n        s.email_config_id,\n        s.fr_due_by                    as fr_due_by_at,\n        s.fr_escalated                 as is_fr_escalated,\n        s.fwd_emails,\n        s.group_id,\n        s.id                           as ticket_id,\n        s.is_escalated,\n        s.priority,\n        s.product_id,\n        s.reply_cc_emails,\n        s.requester:email::string      as requester_email,\n        s.requester:mobile::string     as requester_mobile,\n        s.requester:name::string       as requester_name,\n        s.requester:phone::string      as requester_phone,\n        s.requester_id,\n        s.responder_id,\n        s.source,\n        s.spam                         as is_spam,\n        to_timestamp(s.stats:agent_responded_at)     as agent_responded_at,\n        to_timestamp(s.stats:closed_at)              as closed_at,\n        to_timestamp(s.stats:first_responded_at)     as first_responded_at,\n        to_timestamp(s.stats:pending_since)          as pending_since_at,\n        to_timestamp(s.stats:reopened_at)            as reopened_at,\n        to_timestamp(s.stats:requester_responded_at) as requester_responded_at,\n        to_timestamp(s.stats:resolved_at)            as resolved_at,\n        to_timestamp(s.stats:status_updated_at)      as status_updated_at,\n        s.status,\n        s.subject,\n        s.tags,\n        s.ticket_cc_emails,\n        s.to_emails,\n        s.type                          as ticket_type,\n        to_timestamp(s.updated_at)      as updated_at,\n        p.cf_computer_name              as computer_name,\n        p.cf_cloudfactory_issued_laptop as is_cloudfactory_issued_laptop,\n        p.cf_date                       as custom_date,\n        p.cf_shift                      as shift,\n        p.cf_workstream_name            as workstream_name,\n        p.cf_duration_of_time_lost      as duration_of_time_lost,\n        p.cf_project_name_workstream    as project_name_workstream,\n        p.cf_work_location              as work_location,\n        p.cf_pod_name                   as pod_name,\n        s._sdc_batched_at,\n        s._sdc_extracted_at,\n        s._sdc_received_at,\n        s._sdc_sequence,\n        s._sdc_table_version\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.tickets"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_freshdesk_tickets"], "unique_id": "model.edw.base_freshdesk_tickets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_freshdesk_tickets.sql", "original_file_path": "models/psa/freshdesk/base/base_freshdesk_tickets.sql", "name": "base_freshdesk_tickets", "alias": "base_freshdesk_tickets", "checksum": {"name": "sha256", "checksum": "4ad366b3fcb4e6b98fca00e1d4ab4909db8b8dcd1c4952c2e2ee3db0cc4f408a"}, "tags": [], "refs": [], "sources": [["freshdesk", "tickets"]], "description": "", "columns": {"associated_tickets_count": {"name": "associated_tickets_count", "description": "count of tickets associated with this ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "association_type": {"name": "association_type", "description": "identifies the type of the current ticket. parent = 1, child = 2, tracker = 3, related = 4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "email address added in the 'cc' field of the incoming ticket email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "json object containing id and name attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "company id. same as company.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "ticket creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_fields": {"name": "custom_fields", "description": "json array that holds custom field objects.  Each object represents a field of information used for the ticket.  typically: \n\n- cf_request - Categorical field holding the reason for the ticket.\n- cf_related_with - categorical field holding the issue of the ticket\n- cf_question - categorical field holding the type of question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "set to true if the ticket has been deleted/trashed. deleted tickets will not be displayed in any views except the \"deleted\" filter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_by": {"name": "due_by", "description": "timestamp that denotes when the ticket is due to be resolved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_config_id": {"name": "email_config_id", "description": "id of email config which is used for this ticket. (i.e., support@yourcompany.com/sales@yourcompany.com)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fr_due_by": {"name": "fr_due_by", "description": "timestamp that denotes when the first response is due", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fr_escalated": {"name": "fr_escalated", "description": "set to true if the ticket has been escalated as the result of first response time being breached", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fwd_emails": {"name": "fwd_emails", "description": "email address(e)s added while forwarding a ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "id of the group to which the ticket has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_escalated": {"name": "is_escalated", "description": "set to true if the ticket has been escalated for any reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue": {"name": "issue", "description": "Sub-categorization of ticket_type [ticket_type > issue > related_with]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nr_escalated": {"name": "nr_escalated", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Enumerator describing the priority of the ticket.\n\n||Priority|Value||\n|Low|1|\n|Medium|2|\n|High|3|\n|Urgent|4|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "id of the product to which the ticket is associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "related_with": {"name": "related_with", "description": "2nd level sub-categorization of ticket_type. [ticket_type > issue > related_with]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_cc_emails": {"name": "reply_cc_emails", "description": "email address added while replying to a ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requester": {"name": "requester", "description": "json object containing requester details.  Typically:\n- email - email address of the requester\n- id - freshdesk unique id for the requester\n- mobile - unknown\n- name - Full name of the requester\n- phone - phone number of the requester", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "user id of the requester. for existing contacts, the requester_id can be passed instead of the requester's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "responder_id": {"name": "responder_id", "description": "id of the agent to whom the ticket has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Enumerator describing the channel through which the ticket was created.\n\n||Source|Value||\n|Email|1|\n|Portal|2|\n|Phone|3|\n|Chat|7|\n|Mobihelp|8|\n|Feedback Widget|9|\n|Outbound Email|10|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spam": {"name": "spam", "description": "set to true if the ticket has been marked as spam", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stats": {"name": "stats", "description": "json object containing timestamps relevant to calculating ticket lifecycle durations.  Typically:\n- agent_responded_at - \n- closed_at - \n- first_responded_at - \n- pending_since_at - \n- reopened_at - \n- requester_responded_at - \n- resolved_at - \n- status_updated_at -", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Enumerator describing the status of the ticket.\n\n||Status|Value||\n|Open|2|\n|Pending|3|\n|Resolvede|4|\n|Closed|5|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "subject of the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "tags that have been associated with the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_cc_emails": {"name": "ticket_cc_emails", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "unique id of the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_emails": {"name": "to_emails", "description": "email addresses to which the ticket was originally sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_type": {"name": "ticket_type", "description": "helps categorize the ticket according to the different kinds of issues your support team deals with. [ticket_type > issue > related_with]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "ticket updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "timestamp indicating when stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "timestamp indicating when stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "timestamp indicating when stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "a unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "indicates the version of the table. this column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_freshdesk_tickets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.freshdesk_stitch.tickets\n),\ncf_arr as (\n    select\n        id, \n        cs.value:name::string col_name, \n        cs.value:value::string col_value\n    from source s,\n        lateral flatten(input => s.custom_fields) cs\n    where col_value != 'none'\n),\npivoted as (\n    select \n        *\n    from cf_arr \n        pivot(\n            min(col_value) for col_name in (\n                'cf_question',\n                'cf_request',\n                'cf_related_with',\n                'cf_computer_name',\n                'cf_cloudfactory_issued_laptop',\n                'cf_date',\n                'cf_shift',\n                'cf_workstream_name',\n                'cf_duration_of_time_lost',\n                'cf_specific_issue752213',\n                'cf_specific_issue335675',\n                'cf_specific_issue590975',\n                'cf_project_name_workstream',\n                'cf_specific_issue',\n                'cf_related_to681804',\n                'cf_specific_issue240814',\n                'cf_specific_issue_timer',\n                'cf_work_location',\n                'cf_specific_issue935627',\n                'cf_related_with252158',\n                'cf_pod_name',\n                'cf_specific_issue479129',\n                'cf_related_to',\n                'cf_specific_issue888663',\n                'cf_specific_issue862091',\n                'cf_specific_issue81231'))\n        as p (\n            id, \n            cf_question,\n            cf_request,\n            cf_related_with,\n            cf_computer_name,\n            cf_cloudfactory_issued_laptop,\n            cf_date,\n            cf_shift,\n            cf_workstream_name,\n            cf_duration_of_time_lost,\n            cf_specific_issue752213,\n            cf_specific_issue335675,\n            cf_specific_issue590975,\n            cf_project_name_workstream,\n            cf_specific_issue,\n            cf_related_to681804,\n            cf_specific_issue240814,\n            cf_specific_issue_timer,\n            cf_work_location,\n            cf_specific_issue935627,\n            cf_related_with252158,\n            cf_pod_name,\n            cf_specific_issue479129,\n            cf_related_to,\n            cf_specific_issue888663,\n            cf_specific_issue862091,\n            cf_specific_issue81231)\n),\nrenamed as (\n    select\n        s.associated_tickets_count,\n        s.association_type,\n        s.cc_emails,\n        s.company:name                 as company_name,\n        s.company_id,\n        to_timestamp(s.created_at)     as created_at,\n        case \n            when s.id < 9428\n                then initcap(p.cf_question)\n            else s.type\n        end as reason,\n        initcap(\n            coalesce( \n                p.cf_request,\n                p.cf_specific_issue,\n                p.cf_specific_issue752213,\n                p.cf_specific_issue335675,\n                p.cf_specific_issue590975,\n                p.cf_specific_issue888663,\n                p.cf_specific_issue862091,\n                p.cf_specific_issue81231,\n                p.cf_specific_issue240814,\n                p.cf_specific_issue_timer,\n                p.cf_specific_issue935627,\n                p.cf_specific_issue479129,\n                'not applicable'))     as issue,\n        initcap(\n            coalesce( \n                p.cf_related_with,\n                p.cf_related_to,\n                p.cf_related_to681804,\n                p.cf_related_with252158,\n                'not applicable'\n                ))                     as related_with,\n        s.deleted                      as is_deleted,\n        s.due_by                       as due_by_at,\n        s.email_config_id,\n        s.fr_due_by                    as fr_due_by_at,\n        s.fr_escalated                 as is_fr_escalated,\n        s.fwd_emails,\n        s.group_id,\n        s.id                           as ticket_id,\n        s.is_escalated,\n        s.priority,\n        s.product_id,\n        s.reply_cc_emails,\n        s.requester:email::string      as requester_email,\n        s.requester:mobile::string     as requester_mobile,\n        s.requester:name::string       as requester_name,\n        s.requester:phone::string      as requester_phone,\n        s.requester_id,\n        s.responder_id,\n        s.source,\n        s.spam                         as is_spam,\n        to_timestamp(s.stats:agent_responded_at)     as agent_responded_at,\n        to_timestamp(s.stats:closed_at)              as closed_at,\n        to_timestamp(s.stats:first_responded_at)     as first_responded_at,\n        to_timestamp(s.stats:pending_since)          as pending_since_at,\n        to_timestamp(s.stats:reopened_at)            as reopened_at,\n        to_timestamp(s.stats:requester_responded_at) as requester_responded_at,\n        to_timestamp(s.stats:resolved_at)            as resolved_at,\n        to_timestamp(s.stats:status_updated_at)      as status_updated_at,\n        s.status,\n        s.subject,\n        s.tags,\n        s.ticket_cc_emails,\n        s.to_emails,\n        s.type                          as ticket_type,\n        to_timestamp(s.updated_at)      as updated_at,\n        p.cf_computer_name              as computer_name,\n        p.cf_cloudfactory_issued_laptop as is_cloudfactory_issued_laptop,\n        p.cf_date                       as custom_date,\n        p.cf_shift                      as shift,\n        p.cf_workstream_name            as workstream_name,\n        p.cf_duration_of_time_lost      as duration_of_time_lost,\n        p.cf_project_name_workstream    as project_name_workstream,\n        p.cf_work_location              as work_location,\n        p.cf_pod_name                   as pod_name,\n        s._sdc_batched_at,\n        s._sdc_extracted_at,\n        s._sdc_received_at,\n        s._sdc_sequence,\n        s._sdc_table_version\n    from source s\n    inner join pivoted p\n        on s.id = p.id\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_freshdesk_tickets"}, "model.edw.base_hist_freshdesk_companies": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('companies') }}\n),\nrenamed as (\n    select\n        created_at,\n        custom_fields,\n        description   as company_description,\n        domains,\n        id            as company_id,\n        name          as company_name,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.companies"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "freshdesk", "base", "base_hist_freshdesk_companies"], "unique_id": "model.edw.base_hist_freshdesk_companies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/freshdesk/base/base_hist_freshdesk_companies.sql", "original_file_path": "models/psa/freshdesk/base/base_hist_freshdesk_companies.sql", "name": "base_hist_freshdesk_companies", "alias": "base_hist_freshdesk_companies", "checksum": {"name": "sha256", "checksum": "5694a93feb30ddeac6dd285d605301184f3b945ac43c5d4b2a427b69887d688e"}, "tags": [], "refs": [["companies"]], "sources": [], "description": "", "columns": {"created_at": {"name": "created_at", "description": "timestamp of company creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_fields": {"name": "custom_fields", "description": "custom field entries", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "description of company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domains": {"name": "domains", "description": "list of applicable web addresses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "unique id of the company record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name identifying the company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "timestamp of most recent record update", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/freshdesk/schema.yml", "build_path": "target/compiled/edw/models/psa/freshdesk/base/base_hist_freshdesk_companies.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "freshdesk"}, "compiled_sql": "\n\nwith source as (\n    select * from psa.freshdesk.companies\n),\nrenamed as (\n    select\n        created_at,\n        custom_fields,\n        description   as company_description,\n        domains,\n        id            as company_id,\n        name          as company_name,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_freshdesk_companies"}, "model.edw.base_v7_agt": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('v7', 'agt') }}\n\n)\n, renamed as (\n\n    select\n        dataset_id,\n        dataset_name_text                as dataset_name,\n        cw_email,\n        task_started_at,\n        task_submitted_at,\n        asset_id,\n        from_stage_num                   as from_stage_number,\n        from_name                        as from_stage_name,\n        to_stage_num                     as to_stage_number,\n        to_name                          as to_stage_name,\n        task_type,\n        tot_stage_time_in_sec            as stage_duration,\n        asset_num_annotations            as asset_annotation_running_total,\n        workflow_id,\n        dataset_inserted_at,\n        dataset_updated_at,\n        dataset_progress,\n        dataset_tot_assets               as dataset_asset_count,\n        dataset_name_slug,\n        dataset_tot_annotations          as dataset_annotation_count,\n        dataset_tot_annotators           as dataset_annotators_count,\n        dataset_tot_classes              as dataset_classes_count,\n        dataset_tot_videos               as dataset_videos_count,\n        dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n        xplenty_loaded_at\n        from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.v7.agt"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "agt", "database": "psa", "tags": ["agt"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "agt", "base", "base_v7_agt"], "unique_id": "model.edw.base_v7_agt", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/agt/base/base_v7_agt.sql", "original_file_path": "models/psa/clients/agt/base/base_v7_agt.sql", "name": "base_v7_agt", "alias": "base_v7_agt", "checksum": {"name": "sha256", "checksum": "595f7950d569ff7f2fce96f25e7c18c23bf0e16da51ac64b5b49a7db9adf51d1"}, "tags": ["agt"], "refs": [], "sources": [["v7", "agt"]], "description": "asset stage change events and dataset info for AGT", "columns": {"dataset_id": {"name": "dataset_id", "description": "id of the v7 dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cw_email": {"name": "cw_email", "description": "email of the party responsible for the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date": {"name": "task_started_date", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_submitted_at": {"name": "task_submitted_at", "description": "timestamp of the asset stage change event; with asset_id it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_id": {"name": "asset_id", "description": "id of the asset; with task_submitted_at it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_number": {"name": "from_stage_number", "description": "stage number of the asset prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_name": {"name": "from_stage_name", "description": "stage name of the asset prior to the event; appears to be always null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_number": {"name": "to_stage_number", "description": "stage number of the asset after the event; can be null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_name": {"name": "to_stage_name", "description": "stage name of the asset after the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_duration": {"name": "stage_duration", "description": "duration of time the asset was in the from_stage prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_annotation_running_total": {"name": "asset_annotation_running_total", "description": "total number of annotations completed on this asset up to the point of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name": {"name": "dataset_name", "description": "name of the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name_slug": {"name": "dataset_name_slug", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_owner_id": {"name": "dataset_owner_id", "description": "id of the dataset owner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_id": {"name": "cloudfactory_workstream_id", "description": "id of the cloudfactory workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_api_key": {"name": "cloudfactory_workstream_api_key", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_inserted_at": {"name": "dataset_inserted_at", "description": "timestamp the dataset was loaded to v7", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_updated_at": {"name": "dataset_updated_at", "description": "timestamp of most recent change to the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_progress": {"name": "dataset_progress", "description": "unknown; possibly the percent of total images that have completed annotation and review", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_asset_count": {"name": "dataset_asset_count", "description": "number of image assets in the dataset (please verify)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotation_count": {"name": "dataset_annotation_count", "description": "number of annotations on the dataset across all assets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotators_count": {"name": "dataset_annotators_count", "description": "total number of annotators who have worked on the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_classes_count": {"name": "dataset_classes_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_videos_count": {"name": "dataset_videos_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/agt/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/agt/base/base_v7_agt.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "agt", "tags": "agt"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.v7_xplenty.agt\n\n)\n, renamed as (\n\n    select\n        dataset_id,\n        dataset_name_text                as dataset_name,\n        cw_email,\n        task_started_at,\n        task_submitted_at,\n        asset_id,\n        from_stage_num                   as from_stage_number,\n        from_name                        as from_stage_name,\n        to_stage_num                     as to_stage_number,\n        to_name                          as to_stage_name,\n        task_type,\n        tot_stage_time_in_sec            as stage_duration,\n        asset_num_annotations            as asset_annotation_running_total,\n        workflow_id,\n        dataset_inserted_at,\n        dataset_updated_at,\n        dataset_progress,\n        dataset_tot_assets               as dataset_asset_count,\n        dataset_name_slug,\n        dataset_tot_annotations          as dataset_annotation_count,\n        dataset_tot_annotators           as dataset_annotators_count,\n        dataset_tot_classes              as dataset_classes_count,\n        dataset_tot_videos               as dataset_videos_count,\n        dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n        xplenty_loaded_at\n        from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_v7_agt"}, "model.edw.base_hudl_daily_player_tracking": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('hudl', 'daily_player_tracking')}}\n),\nrenamed as (\n    select\n        analyst_id,\n        initcap(analyst_name) as analyst_name,\n        emailaddress as email_address,\n        child_job_id,\n        master_job_id,\n        job_name,\n        eventname as event_name,\n        current_status,\n        to_timestamp_tz(date_completed) as completed_at,\n        tagtime_minutes as tag_time_minutes,\n        percent_complete\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.hudl.daily_player_tracking"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": ["hudl"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "hudl", "base", "base_hudl_daily_player_tracking"], "unique_id": "model.edw.base_hudl_daily_player_tracking", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/hudl/base/base_hudl_daily_player_tracking.sql", "original_file_path": "models/psa/clients/hudl/base/base_hudl_daily_player_tracking.sql", "name": "base_hudl_daily_player_tracking", "alias": "base_hudl_daily_player_tracking", "checksum": {"name": "sha256", "checksum": "9ae29f0d41e46abe7c6d61466f82141bc0754bec3b489af2fa64536ecb534375"}, "tags": ["hudl"], "refs": [], "sources": [["hudl", "daily_player_tracking"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/hudl/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/hudl/base/base_hudl_daily_player_tracking.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "hudl", "tags": "hudl"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.hudl_xplenty.daily_player_tracking\n),\nrenamed as (\n    select\n        analyst_id,\n        initcap(analyst_name) as analyst_name,\n        emailaddress as email_address,\n        child_job_id,\n        master_job_id,\n        job_name,\n        eventname as event_name,\n        current_status,\n        to_timestamp_tz(date_completed) as completed_at,\n        tagtime_minutes as tag_time_minutes,\n        percent_complete\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hudl_daily_player_tracking"}, "model.edw.base_hudl_daily_fb_vb_training": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('hudl', 'daily_fb_vb_training')}}\n),\nrenamed as (\n    select\n        analyst_id,\n        analyst_name,\n        emailaddress as email_address,\n        queue_item_id,\n        sport as tagging_view_type,\n        eventname as event_name,\n        to_timestamp_tz(date_completed) as completed_at,\n        qcscore as qc_score,\n        tagtime_minutes as tag_time_minutes\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.hudl.daily_fb_vb_training"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": ["hudl"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "hudl", "base", "base_hudl_daily_fb_vb_training"], "unique_id": "model.edw.base_hudl_daily_fb_vb_training", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/hudl/base/base_hudl_daily_fb_vb_training.sql", "original_file_path": "models/psa/clients/hudl/base/base_hudl_daily_fb_vb_training.sql", "name": "base_hudl_daily_fb_vb_training", "alias": "base_hudl_daily_fb_vb_training", "checksum": {"name": "sha256", "checksum": "19d08d8b8e61ebaeddb913b18bdc4ef73339cafa0c621813a0b3c75cc973df7e"}, "tags": ["hudl"], "refs": [], "sources": [["hudl", "daily_fb_vb_training"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/hudl/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/hudl/base/base_hudl_daily_fb_vb_training.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "hudl", "tags": "hudl"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.hudl_xplenty.daily_fb_vb_training\n),\nrenamed as (\n    select\n        analyst_id,\n        analyst_name,\n        emailaddress as email_address,\n        queue_item_id,\n        sport as tagging_view_type,\n        eventname as event_name,\n        to_timestamp_tz(date_completed) as completed_at,\n        qcscore as qc_score,\n        tagtime_minutes as tag_time_minutes\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hudl_daily_fb_vb_training"}, "model.edw.base_hudl_quality_scores": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('hudl_qa_scores', 'sheet1')}}\n),\nrenamed as (\n    select\n        analyst_id,\n        analyst_name,\n        emailaddress as email_address,\n        child_job_id,\n        master_job_id,\n        job_name,\n        to_timestamp_tz(date_completed) as completed_at,\n        tagtime_minutes as tag_time_minutes,\n        percent_complete,\n        grade\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.hudl_qa_scores.sheet1"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": ["hudl"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "hudl", "base", "base_hudl_quality_scores"], "unique_id": "model.edw.base_hudl_quality_scores", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/hudl/base/base_hudl_quality_scores.sql", "original_file_path": "models/psa/clients/hudl/base/base_hudl_quality_scores.sql", "name": "base_hudl_quality_scores", "alias": "base_hudl_quality_scores", "checksum": {"name": "sha256", "checksum": "d0ab5a0969f8f6a85180d045c7739880d25e77b7c2a9f8a9c896b8e476259496"}, "tags": ["hudl"], "refs": [], "sources": [["hudl_qa_scores", "sheet1"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/hudl/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/hudl/base/base_hudl_quality_scores.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "hudl", "tags": "hudl"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.hudl_review_stitch.sheet1\n),\nrenamed as (\n    select\n        analyst_id,\n        analyst_name,\n        emailaddress as email_address,\n        child_job_id,\n        master_job_id,\n        job_name,\n        to_timestamp_tz(date_completed) as completed_at,\n        tagtime_minutes as tag_time_minutes,\n        percent_complete,\n        grade\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hudl_quality_scores"}, "model.edw.base_hudl_daily_fb_vb_production": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('hudl', 'daily_fb_vb_production')}}\n),\nrenamed as (\n    select\n        analyst_id,\n        queue_item_id,\n        tagging_view as tagging_view_type,\n        eventname as event_name,\n        analyst_name,\n        emailaddress as email_address,\n        to_timestamp_tz(date_completed) as completed_at,\n        task_completed as task_completed_at,\n        current_status,\n        percent_complete,\n        qc_score,\n        tagtime_minutes as tag_time_minutes,\n        matching_level,\n        sets as game_sets,\n        user_rating,\n        xplenty_loaded_at\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.hudl.daily_fb_vb_production"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": ["hudl"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "hudl", "base", "base_hudl_daily_fb_vb_production"], "unique_id": "model.edw.base_hudl_daily_fb_vb_production", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/hudl/base/base_hudl_daily_fb_vb_production.sql", "original_file_path": "models/psa/clients/hudl/base/base_hudl_daily_fb_vb_production.sql", "name": "base_hudl_daily_fb_vb_production", "alias": "base_hudl_daily_fb_vb_production", "checksum": {"name": "sha256", "checksum": "a1a6e209aeec71d8a9c4f20028f4b2116fb3896f105e2233470ebeb268a0f983"}, "tags": ["hudl"], "refs": [], "sources": [["hudl", "daily_fb_vb_production"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/hudl/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/hudl/base/base_hudl_daily_fb_vb_production.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "hudl", "tags": "hudl"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.hudl_xplenty.daily_fb_vb_production\n),\nrenamed as (\n    select\n        analyst_id,\n        queue_item_id,\n        tagging_view as tagging_view_type,\n        eventname as event_name,\n        analyst_name,\n        emailaddress as email_address,\n        to_timestamp_tz(date_completed) as completed_at,\n        task_completed as task_completed_at,\n        current_status,\n        percent_complete,\n        qc_score,\n        tagtime_minutes as tag_time_minutes,\n        matching_level,\n        sets as game_sets,\n        user_rating,\n        xplenty_loaded_at\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hudl_daily_fb_vb_production"}, "model.edw.base_abyss_solutions_v7": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('abyss', 'abyss_solutions_v7') }}\n\n)\n, renamed as (\n\n    select\n        dataset_id,\n        dataset_name_text                as dataset_name,\n        cw_email,\n        task_started_at,\n        task_submitted_at,\n        asset_id,\n        from_stage_num                   as from_stage_number,\n        from_name                        as from_stage_name,\n        to_stage_num                     as to_stage_number,\n        to_name                          as to_stage_name,\n        task_type,\n        tot_stage_time_in_sec            as stage_duration,\n        asset_num_annotations            as asset_annotation_running_total,\n        workflow_id,\n        dataset_inserted_at,\n        dataset_updated_at,\n        dataset_progress,\n        dataset_tot_assets               as dataset_asset_count,\n        dataset_name_slug,\n        dataset_tot_annotations          as dataset_annotation_count,\n        dataset_tot_annotators           as dataset_annotators_count,\n        dataset_tot_classes              as dataset_classes_count,\n        dataset_tot_videos               as dataset_videos_count,\n        dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n        xplenty_loaded_at\n        from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.abyss.abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "abyss", "database": "psa", "tags": ["abyss"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "abyss", "base", "base_abyss_solutions_v7"], "unique_id": "model.edw.base_abyss_solutions_v7", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/abyss/base/base_abyss_solutions_v7.sql", "original_file_path": "models/psa/clients/abyss/base/base_abyss_solutions_v7.sql", "name": "base_abyss_solutions_v7", "alias": "base_abyss_solutions_v7", "checksum": {"name": "sha256", "checksum": "8dfb5bd9971a51218757adfb802b17f1d8dd9d579efe7f6eb500cb25a14c0a14"}, "tags": ["abyss"], "refs": [], "sources": [["abyss", "abyss_solutions_v7"]], "description": "asset stage change events and dataset info for Abyss", "columns": {"dataset_id": {"name": "dataset_id", "description": "id of the v7 dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cw_email": {"name": "cw_email", "description": "email of the party responsible for the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date": {"name": "task_started_date", "description": "unknown; bad data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_submitted_at": {"name": "task_submitted_at", "description": "timestamp of the asset stage change event; with asset_id it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_id": {"name": "asset_id", "description": "id of the asset; with task_submitted_at it forms the primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_number": {"name": "from_stage_number", "description": "stage number of the asset prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_stage_name": {"name": "from_stage_name", "description": "stage name of the asset prior to the event; appears to be always null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_number": {"name": "to_stage_number", "description": "stage number of the asset after the event; can be null; comparing to `raw.v7_xplenty.actions` shows this is a problem in the ETL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_stage_name": {"name": "to_stage_name", "description": "stage name of the asset after the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_duration": {"name": "stage_duration", "description": "duration of time the asset was in the from_stage prior to the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_annotation_running_total": {"name": "asset_annotation_running_total", "description": "total number of annotations completed on this asset up to the point of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name": {"name": "dataset_name", "description": "name of the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_name_slug": {"name": "dataset_name_slug", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_owner_id": {"name": "dataset_owner_id", "description": "id of the dataset owner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_id": {"name": "cloudfactory_workstream_id", "description": "id of the cloudfactory workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloudfactory_workstream_api_key": {"name": "cloudfactory_workstream_api_key", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_inserted_at": {"name": "dataset_inserted_at", "description": "timestamp the dataset was loaded to v7", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_updated_at": {"name": "dataset_updated_at", "description": "timestamp of most recent change to the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_progress": {"name": "dataset_progress", "description": "unknown; possibly the percent of total images that have completed annotation and review", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_asset_count": {"name": "dataset_asset_count", "description": "number of image assets in the dataset (please verify)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotation_count": {"name": "dataset_annotation_count", "description": "number of annotations on the dataset across all assets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_annotators_count": {"name": "dataset_annotators_count", "description": "total number of annotators who have worked on the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_classes_count": {"name": "dataset_classes_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_videos_count": {"name": "dataset_videos_count", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/abyss/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/abyss/base/base_abyss_solutions_v7.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "abyss", "tags": "abyss"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.abyss_xplenty.abyss_solutions_v7\n\n)\n, renamed as (\n\n    select\n        dataset_id,\n        dataset_name_text                as dataset_name,\n        cw_email,\n        task_started_at,\n        task_submitted_at,\n        asset_id,\n        from_stage_num                   as from_stage_number,\n        from_name                        as from_stage_name,\n        to_stage_num                     as to_stage_number,\n        to_name                          as to_stage_name,\n        task_type,\n        tot_stage_time_in_sec            as stage_duration,\n        asset_num_annotations            as asset_annotation_running_total,\n        workflow_id,\n        dataset_inserted_at,\n        dataset_updated_at,\n        dataset_progress,\n        dataset_tot_assets               as dataset_asset_count,\n        dataset_name_slug,\n        dataset_tot_annotations          as dataset_annotation_count,\n        dataset_tot_annotators           as dataset_annotators_count,\n        dataset_tot_classes              as dataset_classes_count,\n        dataset_tot_videos               as dataset_videos_count,\n        dataset_owner_id,\n        cloudfactory_workstream_id,\n        cloudfactory_workstream_api_key,\n        xplenty_loaded_at\n        from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_abyss_solutions_v7"}, "model.edw.stg_video_walk_events": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source_status_changes as (\n    select * from {{ ref('base_struction_site_status_changes' ) }}\n)\n, walk_events as (\n    select\n      \n        case\n            when from_state = 'pending'              and to_state = 'ready_to_stitch'      then 'uploaded'\n            when from_state = 'pending'              and to_state = 'ready_to_process'     then 'uploaded'\n            when from_state = 'needs_editing'        and to_state = 'editing'              then 'edit_started'\n            when from_state = 'editing'              and to_state = 'needs_editing'        then 'edit_released'\n            when from_state = 'editing'              and to_state = 'needs_qa_review'      then 'edit_completed'\n            when from_state = 'editing'              and to_state = 'qa_reviewing'         then 'qa_review_started'\n            when from_state = 'needs_qa_review'      and to_state = 'qa_reviewing'         then 'qa_review_started'\n            when from_state = 'problematic'          and to_state = 'qa_reviewing'         then 'qa_review_started'\n            when from_state = 'qa_reviewing'         and to_state = 'completed'            then 'completed'\n            when from_state = 'editing'              and to_state = 'completed'            then 'completed'\n            when from_state = 'problematic'          and to_state = 'completed'            then 'completed'\n            when from_state = 'qa_reviewing'         and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'editing'              and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'needs_editing'        and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'processing_recon'     and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'editing'              and to_state = 'rejected'             then 'rejected'\n            when from_state = 'qa_reviewing'         and to_state = 'rejected'             then 'rejected'\n            when from_state = 'problematic'          and to_state = 'rejected'             then 'rejected'\n            when from_state = 'processing_recon'     and to_state = 'needs_classification' then 'recon_completed'\n            when from_state = 'needs_classification' and to_state = 'needs_editing'        then 'classification_completed'\n            when from_state = 'pending'              and to_state = 'pending'              then 'restarted'\n            when from_state != 'pending'             and to_state = 'ready_to_stitch'      then 'restarted'\n            when from_state != 'pending'             and to_state = 'ready_to_process'     then 'restarted'\n            when from_state = 'ready_to_stitch'      and to_state = 'ready_to_stitch'      then 'recon_restarted'\n            when from_state = 'processing_stitch'    and to_state = 'processing_stitch'    then 'recon_restarted'\n            when from_state = 'ready_to_stitch'      and to_state = 'processing_stitch'    then 'stitch_started'\n            when from_state = 'processing_stitch'    and to_state = 'ready_to_process'     then 'stitch_completed'\n            when from_state = 'ready_to_process'     and to_state = 'processing_recon'     then 'recon_started'\n        end as event_name,\n        status_change_id,\n        video_walk_id,\n        created_at as event_at,\n        handler_id,\n        from_state,\n        to_state,\n        row_number() over (partition by video_walk_id order by created_at asc) as event_order,\n        lag(event_name,1) over (partition by video_walk_id order by created_at asc) as previous_event,\n        datediff(\n            seconds, \n            lag(created_at,1) over (partition by video_walk_id order by created_at asc),\n            created_at\n        ) as since_last_event_duration,\n        lead(event_name,1) over (partition by video_walk_id order by created_at asc) as next_event,\n        datediff(\n            seconds,\n            created_at,\n            lead(created_at,1) over (partition by video_walk_id order by created_at asc)\n        ) as to_next_event_duration\n    from source_status_changes\n)\nselect * from walk_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_struction_site_status_changes"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "psa", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "struction_site", "stg_video_walk_events"], "unique_id": "model.edw.stg_video_walk_events", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/struction_site/stg_video_walk_events.sql", "original_file_path": "models/psa/clients/struction_site/stg_video_walk_events.sql", "name": "stg_video_walk_events", "alias": "stg_video_walk_events", "checksum": {"name": "sha256", "checksum": "9e855eb90d35d96d3deffe19dd86c0b7b123afb174acd91bb1fc06e9e670ad18"}, "tags": ["struction_site"], "refs": [["base_struction_site_status_changes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/struction_site/stg_video_walk_events.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "struction_site", "tags": "struction_site"}, "compiled_sql": "\n\nwith source_status_changes as (\n    select * from psa_dev.scratch_brana.base_struction_site_status_changes\n)\n, walk_events as (\n    select\n      \n        case\n            when from_state = 'pending'              and to_state = 'ready_to_stitch'      then 'uploaded'\n            when from_state = 'pending'              and to_state = 'ready_to_process'     then 'uploaded'\n            when from_state = 'needs_editing'        and to_state = 'editing'              then 'edit_started'\n            when from_state = 'editing'              and to_state = 'needs_editing'        then 'edit_released'\n            when from_state = 'editing'              and to_state = 'needs_qa_review'      then 'edit_completed'\n            when from_state = 'editing'              and to_state = 'qa_reviewing'         then 'qa_review_started'\n            when from_state = 'needs_qa_review'      and to_state = 'qa_reviewing'         then 'qa_review_started'\n            when from_state = 'problematic'          and to_state = 'qa_reviewing'         then 'qa_review_started'\n            when from_state = 'qa_reviewing'         and to_state = 'completed'            then 'completed'\n            when from_state = 'editing'              and to_state = 'completed'            then 'completed'\n            when from_state = 'problematic'          and to_state = 'completed'            then 'completed'\n            when from_state = 'qa_reviewing'         and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'editing'              and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'needs_editing'        and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'processing_recon'     and to_state = 'problematic'          then 'problem_found'\n            when from_state = 'editing'              and to_state = 'rejected'             then 'rejected'\n            when from_state = 'qa_reviewing'         and to_state = 'rejected'             then 'rejected'\n            when from_state = 'problematic'          and to_state = 'rejected'             then 'rejected'\n            when from_state = 'processing_recon'     and to_state = 'needs_classification' then 'recon_completed'\n            when from_state = 'needs_classification' and to_state = 'needs_editing'        then 'classification_completed'\n            when from_state = 'pending'              and to_state = 'pending'              then 'restarted'\n            when from_state != 'pending'             and to_state = 'ready_to_stitch'      then 'restarted'\n            when from_state != 'pending'             and to_state = 'ready_to_process'     then 'restarted'\n            when from_state = 'ready_to_stitch'      and to_state = 'ready_to_stitch'      then 'recon_restarted'\n            when from_state = 'processing_stitch'    and to_state = 'processing_stitch'    then 'recon_restarted'\n            when from_state = 'ready_to_stitch'      and to_state = 'processing_stitch'    then 'stitch_started'\n            when from_state = 'processing_stitch'    and to_state = 'ready_to_process'     then 'stitch_completed'\n            when from_state = 'ready_to_process'     and to_state = 'processing_recon'     then 'recon_started'\n        end as event_name,\n        status_change_id,\n        video_walk_id,\n        created_at as event_at,\n        handler_id,\n        from_state,\n        to_state,\n        row_number() over (partition by video_walk_id order by created_at asc) as event_order,\n        lag(event_name,1) over (partition by video_walk_id order by created_at asc) as previous_event,\n        datediff(\n            seconds, \n            lag(created_at,1) over (partition by video_walk_id order by created_at asc),\n            created_at\n        ) as since_last_event_duration,\n        lead(event_name,1) over (partition by video_walk_id order by created_at asc) as next_event,\n        datediff(\n            seconds,\n            created_at,\n            lead(created_at,1) over (partition by video_walk_id order by created_at asc)\n        ) as to_next_event_duration\n    from source_status_changes\n)\nselect * from walk_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_video_walk_events"}, "model.edw.base_struction_site_video_walks": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('struction_site', 'shr_video_walks')}}\n),\nrenamed as (\n    select\n        video_walk_id,\n        video_walk_uuid,\n        area_id,\n        created_at,\n        admin_confirmed_at,\n        hil_difficulty,\n        status as video_walk_status,\n        node_count,\n        deleted_at,\n        iff(deleted_at is null, false, true) as is_deleted\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.struction_site.shr_video_walks"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "psa", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "struction_site", "base", "base_struction_site_video_walks"], "unique_id": "model.edw.base_struction_site_video_walks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/struction_site/base/base_struction_site_video_walks.sql", "original_file_path": "models/psa/clients/struction_site/base/base_struction_site_video_walks.sql", "name": "base_struction_site_video_walks", "alias": "base_struction_site_video_walks", "checksum": {"name": "sha256", "checksum": "1f060ebfccd1e01d348201a842157c97a53e129a3e3a856b174f405976143bbb"}, "tags": ["struction_site"], "refs": [], "sources": [["struction_site", "shr_video_walks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/struction_site/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/struction_site/base/base_struction_site_video_walks.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "struction_site", "tags": "struction_site"}, "compiled_sql": "\n\nwith source as (\n    select * from shares_db.cloud_factory.shr_video_walks\n),\nrenamed as (\n    select\n        video_walk_id,\n        video_walk_uuid,\n        area_id,\n        created_at,\n        admin_confirmed_at,\n        hil_difficulty,\n        status as video_walk_status,\n        node_count,\n        deleted_at,\n        iff(deleted_at is null, false, true) as is_deleted\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_struction_site_video_walks"}, "model.edw.base_struction_site_status_changes": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('struction_site', 'shr_cf_status_changes')}}\n),\nrenamed as (\n    select\n        status_change_id,\n        from_state,\n        to_state,\n        video_walk_id,\n        created_at,\n        handler_id\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.struction_site.shr_cf_status_changes"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "psa", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "struction_site", "base", "base_struction_site_status_changes"], "unique_id": "model.edw.base_struction_site_status_changes", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/struction_site/base/base_struction_site_status_changes.sql", "original_file_path": "models/psa/clients/struction_site/base/base_struction_site_status_changes.sql", "name": "base_struction_site_status_changes", "alias": "base_struction_site_status_changes", "checksum": {"name": "sha256", "checksum": "648caba55f35335fbb36f6255441bf6b75bb51dc42340b965eddefdd2cf82d14"}, "tags": ["struction_site"], "refs": [], "sources": [["struction_site", "shr_cf_status_changes"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/struction_site/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/struction_site/base/base_struction_site_status_changes.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "struction_site", "tags": "struction_site"}, "compiled_sql": "\n\nwith source as (\n    select * from shares_db.cloud_factory.shr_cf_status_changes\n),\nrenamed as (\n    select\n        status_change_id,\n        from_state,\n        to_state,\n        video_walk_id,\n        created_at,\n        handler_id\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_struction_site_status_changes"}, "model.edw.base_struction_site_st_projects": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('struction_site', 'shr_st_projects')}}\n),\nrenamed as (\n    select\n        st_project_id,\n        project_uuid as st_project_uuid,\n        plan_key\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.struction_site.shr_st_projects"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "psa", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "struction_site", "base", "base_struction_site_st_projects"], "unique_id": "model.edw.base_struction_site_st_projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/struction_site/base/base_struction_site_st_projects.sql", "original_file_path": "models/psa/clients/struction_site/base/base_struction_site_st_projects.sql", "name": "base_struction_site_st_projects", "alias": "base_struction_site_st_projects", "checksum": {"name": "sha256", "checksum": "b260d2689336586471cda89821f4eddfe3842cbc9b3a82fbf8fa29facc9c2dcf"}, "tags": ["struction_site"], "refs": [], "sources": [["struction_site", "shr_st_projects"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/struction_site/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/struction_site/base/base_struction_site_st_projects.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "struction_site", "tags": "struction_site"}, "compiled_sql": "\n\nwith source as (\n    select * from shares_db.cloud_factory.shr_st_projects\n),\nrenamed as (\n    select\n        st_project_id,\n        project_uuid as st_project_uuid,\n        plan_key\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_struction_site_st_projects"}, "model.edw.base_struction_site_areas": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('struction_site', 'shr_cf_areas') }}\n),\nrenamed as (\n    select\n        area_id,\n        name as area_name,\n        project_id,\n        area_uuid\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.struction_site.shr_cf_areas"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "psa", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "struction_site", "base", "base_struction_site_areas"], "unique_id": "model.edw.base_struction_site_areas", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/struction_site/base/base_struction_site_areas.sql", "original_file_path": "models/psa/clients/struction_site/base/base_struction_site_areas.sql", "name": "base_struction_site_areas", "alias": "base_struction_site_areas", "checksum": {"name": "sha256", "checksum": "a1ce274e5eedc0abf9555e701a73904ae26083d75caf7d5bf5893954d4e11b7b"}, "tags": ["struction_site"], "refs": [], "sources": [["struction_site", "shr_cf_areas"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/struction_site/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/struction_site/base/base_struction_site_areas.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "struction_site", "tags": "struction_site"}, "compiled_sql": "\n\nwith source as (\n    select * from shares_db.cloud_factory.shr_cf_areas\n),\nrenamed as (\n    select\n        area_id,\n        name as area_name,\n        project_id,\n        area_uuid\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_struction_site_areas"}, "model.edw.base_struction_site_projects": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('struction_site', 'shr_cf_projects')}}\n),\nrenamed as (\n    select\n        project_id,\n        name as project_name,\n        project_uuid,\n        smart_track_access as has_smart_track_access\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.struction_site.shr_cf_projects"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "struction_site", "database": "psa", "tags": ["struction_site"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "clients", "struction_site", "base", "base_struction_site_projects"], "unique_id": "model.edw.base_struction_site_projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/clients/struction_site/base/base_struction_site_projects.sql", "original_file_path": "models/psa/clients/struction_site/base/base_struction_site_projects.sql", "name": "base_struction_site_projects", "alias": "base_struction_site_projects", "checksum": {"name": "sha256", "checksum": "d8ccf959acaca1c6eef68e887bf3b5ca8cbef5c460eb28573f5b4e5ef5c5e606"}, "tags": ["struction_site"], "refs": [], "sources": [["struction_site", "shr_cf_projects"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/clients/struction_site/schema.yml", "build_path": "target/compiled/edw/models/psa/clients/struction_site/base/base_struction_site_projects.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "struction_site", "tags": "struction_site"}, "compiled_sql": "\n\nwith source as (\n    select * from shares_db.cloud_factory.shr_cf_projects\n),\nrenamed as (\n    select\n        project_id,\n        name as project_name,\n        project_uuid,\n        smart_track_access as has_smart_track_access\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_struction_site_projects"}, "model.edw.base_hist_calendar_schedules": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('schedules') }}\n),\nrenamed as (\n    select\n        automatic,\n        break as break_duration,\n        created_at,\n        custom_attributes,\n        duration,\n        end_datetime as end_at,\n        event_id,\n        hub_id,\n        id as schedule_id,\n        open_shift_id,\n        overage as is_overage,\n        premium_for_client as is_premium_for_client,\n        premium_for_worker as is_premium_for_worker,\n        project_id,\n        reported as is_reported,\n        reported_duration,\n        slot_id,\n        start_datetime as start_at,\n        status,\n        time_entries,\n        type,\n        uid as schedule_uid,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_deleted_at,\n        dbt_scd_id,\n        dbt_updated_at,\n        dbt_valid_from,\n        dbt_valid_to\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.schedules"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "calendar", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "calendar", "base", "base_hist_calendar_schedules"], "unique_id": "model.edw.base_hist_calendar_schedules", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/calendar/base/base_hist_calendar_schedules.sql", "original_file_path": "models/psa/calendar/base/base_hist_calendar_schedules.sql", "name": "base_hist_calendar_schedules", "alias": "base_hist_calendar_schedules", "checksum": {"name": "sha256", "checksum": "0e5303ff2d4971cf4ba30a274006d3a279d1e97594b82a782c36f5c12b62d646"}, "tags": [], "refs": [["schedules"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/calendar/schema.yml", "build_path": "target/compiled/edw/models/psa/calendar/base/base_hist_calendar_schedules.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "calendar"}, "compiled_sql": "\n\nwith source as (\n    select * from psa.calendar.schedules\n),\nrenamed as (\n    select\n        automatic,\n        break as break_duration,\n        created_at,\n        custom_attributes,\n        duration,\n        end_datetime as end_at,\n        event_id,\n        hub_id,\n        id as schedule_id,\n        open_shift_id,\n        overage as is_overage,\n        premium_for_client as is_premium_for_client,\n        premium_for_worker as is_premium_for_worker,\n        project_id,\n        reported as is_reported,\n        reported_duration,\n        slot_id,\n        start_datetime as start_at,\n        status,\n        time_entries,\n        type,\n        uid as schedule_uid,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_deleted_at,\n        dbt_scd_id,\n        dbt_updated_at,\n        dbt_valid_from,\n        dbt_valid_to\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_calendar_schedules"}, "model.edw.base_calendar_schedules": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('calendar','schedules') }}\n),\nrenamed as (\n    select\n        automatic,\n        break as break_duration,\n        created_at,\n        custom_attributes,\n        duration,\n        end_datetime as schedule_end_at,\n        event_id,\n        hub_id,\n        id as schedule_id,\n        open_shift_id,\n        overage as is_overage,\n        premium_for_client as is_premium_for_client,\n        premium_for_worker as is_premium_for_worker,\n        project_id,\n        reported as is_reported,\n        reported_duration,\n        slot_id,\n        start_datetime as schedule_start_at,\n        status,\n        time_entries,\n        type as schedule_type,\n        uid as schedule_uid,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_deleted_at\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.calendar.schedules"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "calendar", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "calendar", "base", "base_calendar_schedules"], "unique_id": "model.edw.base_calendar_schedules", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/calendar/base/base_calendar_schedules.sql", "original_file_path": "models/psa/calendar/base/base_calendar_schedules.sql", "name": "base_calendar_schedules", "alias": "base_calendar_schedules", "checksum": {"name": "sha256", "checksum": "01e6adf5413558c07e6c622de4cbffd9f1621f14082b3ae89cc59c84334741f5"}, "tags": [], "refs": [], "sources": [["calendar", "schedules"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/calendar/schema.yml", "build_path": "target/compiled/edw/models/psa/calendar/base/base_calendar_schedules.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "calendar"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.calendar_ppw.schedules\n),\nrenamed as (\n    select\n        automatic,\n        break as break_duration,\n        created_at,\n        custom_attributes,\n        duration,\n        end_datetime as schedule_end_at,\n        event_id,\n        hub_id,\n        id as schedule_id,\n        open_shift_id,\n        overage as is_overage,\n        premium_for_client as is_premium_for_client,\n        premium_for_worker as is_premium_for_worker,\n        project_id,\n        reported as is_reported,\n        reported_duration,\n        slot_id,\n        start_datetime as schedule_start_at,\n        status,\n        time_entries,\n        type as schedule_type,\n        uid as schedule_uid,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_deleted_at\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_calendar_schedules"}, "model.edw.base_projects_projects": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('projects', 'projects') }}\n\n),\nrenamed as (\n\n    select\n        md5(ifnull(salesforce_id::varchar, 'Unknown'))      as client_key,\n        uid                                                 as project_uid, -- alias of project_key\n        uid                                                 as project_key,\n        id                                                  as project_id,\n        name                                                as project_name,\n        status                                              as project_status,\n        start_date                                          as project_start_date,\n        description                                         as project_description,\n        billable_unit                                       as billable_unit_code,\n        case\n            when billable_unit = 0\n                then 'Hourly'\n            when billable_unit = 1\n                then 'Unit'\n            else 'Error'\n        end                                                 as billable_unit,\n        channel,\n        package_type,\n        subscription_type,\n        workforce_model,\n        premium_settings,\n        estimated_time_per_unit,\n        intended_start_date,\n        milestone_id,\n        payment_option,\n        tools,\n        ws_flow_enabled,\n        ws_shield_enabled,\n        custom_attributes,\n        salesforce_id,\n        created_at,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n\n    from\n        source\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.projects.projects"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "projects", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "projects", "base", "base_projects_projects"], "unique_id": "model.edw.base_projects_projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/projects/base/base_projects_projects.sql", "original_file_path": "models/psa/projects/base/base_projects_projects.sql", "name": "base_projects_projects", "alias": "base_projects_projects", "checksum": {"name": "sha256", "checksum": "360396ae7464499a3c7926d5a4f5436556f723825624dcbb368affae47f3a8a9"}, "tags": [], "refs": [], "sources": [["projects", "projects"]], "description": "", "columns": {"project_key": {"name": "project_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_uid": {"name": "project_uid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_key": {"name": "client_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Rails framework model's ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_start_date": {"name": "project_start_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_status": {"name": "project_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_description": {"name": "project_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_type": {"name": "subscription_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_type": {"name": "package_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billable_unit_code": {"name": "billable_unit_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billable_unit": {"name": "billable_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premium_settings": {"name": "premium_settings", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_id": {"name": "salesforce_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workforce_model": {"name": "workforce_model", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ws_flow_enabled": {"name": "ws_flow_enabled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ws_shield_enabled": {"name": "ws_shield_enabled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel": {"name": "channel", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_attributes": {"name": "custom_attributes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "estimated_time_per_unit": {"name": "estimated_time_per_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intended_start_date": {"name": "intended_start_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "milestone_id": {"name": "milestone_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_option": {"name": "payment_option", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tools": {"name": "tools", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Rails framework model's timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Rails framework model's timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/projects/schema/base_projects_projects.yml", "build_path": "target/compiled/edw/models/psa/projects/base/base_projects_projects.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "projects"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.projects_ppw.projects\n\n),\nrenamed as (\n\n    select\n        md5(ifnull(salesforce_id::varchar, 'Unknown'))      as client_key,\n        uid                                                 as project_uid, -- alias of project_key\n        uid                                                 as project_key,\n        id                                                  as project_id,\n        name                                                as project_name,\n        status                                              as project_status,\n        start_date                                          as project_start_date,\n        description                                         as project_description,\n        billable_unit                                       as billable_unit_code,\n        case\n            when billable_unit = 0\n                then 'Hourly'\n            when billable_unit = 1\n                then 'Unit'\n            else 'Error'\n        end                                                 as billable_unit,\n        channel,\n        package_type,\n        subscription_type,\n        workforce_model,\n        premium_settings,\n        estimated_time_per_unit,\n        intended_start_date,\n        milestone_id,\n        payment_option,\n        tools,\n        ws_flow_enabled,\n        ws_shield_enabled,\n        custom_attributes,\n        salesforce_id,\n        created_at,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n\n    from\n        source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_projects_projects"}, "model.edw.base_projects_tasks": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('projects', 'tasks') }}\n\n)\n,renamed as (\n\n    select\n        billable as is_billable,\n        created_at,\n        global as is_global,\n        id as task_id,\n        name as task_name,\n        uid as task_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.projects.tasks"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "projects", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "projects", "base", "base_projects_tasks"], "unique_id": "model.edw.base_projects_tasks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/projects/base/base_projects_tasks.sql", "original_file_path": "models/psa/projects/base/base_projects_tasks.sql", "name": "base_projects_tasks", "alias": "base_projects_tasks", "checksum": {"name": "sha256", "checksum": "a972b54d62ff6f91dac49acaed88bc6476c5ed006e9bc1944c198f3e16ecfcd6"}, "tags": [], "refs": [], "sources": [["projects", "tasks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/base/base_projects_tasks.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "projects"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.projects_ppw.tasks\n\n)\n,renamed as (\n\n    select\n        billable as is_billable,\n        created_at,\n        global as is_global,\n        id as task_id,\n        name as task_name,\n        uid as task_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_projects_tasks"}, "model.edw.stg_payout_scheduled": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\n{% set source_tables = dbt_utils.get_relations_by_pattern('cw_payout%', '%scheduled', database='raw') %}\n\nwith source as (\n\n{% for table in source_tables %}\n    select\n        workstream,\n        split( '{{ table.table }}', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( '{{ table.schema }}', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from {{table}}\n    {% if not loop.last %}\n    union\n    {% endif %}\n{% endfor %}\n)\nselect * from source", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "worker_payout", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "worker_payout", "stg_payout_scheduled"], "unique_id": "model.edw.stg_payout_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/worker_payout/stg_payout_scheduled.sql", "original_file_path": "models/psa/worker_payout/stg_payout_scheduled.sql", "name": "stg_payout_scheduled", "alias": "stg_payout_scheduled", "checksum": {"name": "sha256", "checksum": "cfe96416bee59da48475183926201b0bd74ee5c81b85a0575677c3daa64c3736"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/worker_payout/stg_payout_scheduled.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "worker_payout"}, "compiled_sql": "\n\n\n\nwith source as (\n\n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202007', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202007.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202008', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202008.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202008', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202008.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202009', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202009.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202009', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202009.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202010', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202010.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202010', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202010.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202012', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202012.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202012', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202012.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202101', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202101.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202102', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202102.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202103', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202103.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202103', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202103.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202101', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202101.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202102', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202102.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'KENYA_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202011', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202011.KENYA_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_202007', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_202007.NEPAL_SCHEDULED\n    \n    union\n    \n\n    select\n        workstream,\n        split( 'NEPAL_SCHEDULED', '_')[0]::varchar as country ,\n        email,\n        flow_email,\n        name as worker_name,\n        to_date(right( 'CW_PAYOUT_219912', 6),'yyyymm') as payroll_date,\n        'scheduled'              as work_platform,\n        'payment'                as payroll_line_item_type,\n        workstream_total as payroll_line_item_amount\n    from raw.CW_PAYOUT_219912.NEPAL_SCHEDULED\n    \n\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_payout_scheduled"}, "model.edw.stg_payout_adjustments": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\n{% set source_tables = dbt_utils.get_relations_by_pattern('cw_payout%', 'adjustments', database='raw') %}\n\nwith source as (\n\n{% for table in source_tables %}\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( '{{ table.schema }}', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from {{table}}\n    {% if not loop.last %}\n    union\n    {% endif %}\n{% endfor %}\n)\nselect * from source", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "worker_payout", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "worker_payout", "stg_payout_adjustments"], "unique_id": "model.edw.stg_payout_adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/worker_payout/stg_payout_adjustments.sql", "original_file_path": "models/psa/worker_payout/stg_payout_adjustments.sql", "name": "stg_payout_adjustments", "alias": "stg_payout_adjustments", "checksum": {"name": "sha256", "checksum": "605e81e12f3d85ca8399d60656c98adf29c88f4771acdd94b03535e8286b34d3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/worker_payout/stg_payout_adjustments.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "worker_payout"}, "compiled_sql": "\n\n\n\nwith source as (\n\n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202007', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202007.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202008', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202008.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202009', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202009.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202010', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202010.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202011', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202011.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202012', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202012.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202101', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202101.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202102', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202102.ADJUSTMENTS\n    \n    union\n    \n\n    select\n        adjustment_amount_usd_                            as payroll_line_item_amount,\n        adjustment_reason,\n        country,\n        email,\n        name                                              as worker_name,\n        workstream,\n        to_date(right( 'CW_PAYOUT_202103', 6),'yyyymm') as payroll_date,\n        'scheduled'                                       as work_platform,\n        'adjustment'                                      as payroll_line_item_type\n    from raw.CW_PAYOUT_202103.ADJUSTMENTS\n    \n\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_payout_adjustments"}, "model.edw.stg_payout_workers": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith adjustments_source as (\n\n    select * from {{ ref('stg_payout_adjustments') }}\n\n)\n, flow_source as (\n\n    select * from {{ ref('stg_payout_flow') }}\n\n)\n, scheduled_source as (\n\n    select * from {{ ref('stg_payout_scheduled') }}\n\n)\n, distinct_unioned as (\n\n    select distinct\n        email, \n        flow_email as alternate_email,\n        country,\n        worker_name,\n        country || ' scheduled payout' as source \n    from scheduled_source n\n    union\n    select distinct\n        email, \n        email as alternate_email,\n        country,\n        worker_name,\n        country || ' adjustments' as source \n    from adjustments_source a\n    where \n        not exists (\n            select 1 from scheduled_source n where n.email = a.email or n.flow_email = a.email\n        )\n    union\n    select distinct\n        flow_email as email, \n        flow_email as alternate_email,\n        country,\n        worker_name,\n        country || ' flow' as source \n    from flow_source f\n    where \n        not exists (\n            select 1 from scheduled_source n where n.email = f.flow_email or n.flow_email = f.flow_email\n        )\n)\nselect * from distinct_unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_payout_adjustments", "model.edw.stg_payout_flow", "model.edw.stg_payout_scheduled"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "worker_payout", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "worker_payout", "stg_payout_workers"], "unique_id": "model.edw.stg_payout_workers", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/worker_payout/stg_payout_workers.sql", "original_file_path": "models/psa/worker_payout/stg_payout_workers.sql", "name": "stg_payout_workers", "alias": "stg_payout_workers", "checksum": {"name": "sha256", "checksum": "317935084c3c60a615c6c8b0bcdfd6ff88f25883887fc57284950bfaa2de1b78"}, "tags": [], "refs": [["stg_payout_adjustments"], ["stg_payout_flow"], ["stg_payout_scheduled"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/worker_payout/stg_payout_workers.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "worker_payout"}, "compiled_sql": "\n\nwith adjustments_source as (\n\n    select * from psa_dev.scratch_brana.stg_payout_adjustments\n\n)\n, flow_source as (\n\n    select * from psa_dev.scratch_brana.stg_payout_flow\n\n)\n, scheduled_source as (\n\n    select * from psa_dev.scratch_brana.stg_payout_scheduled\n\n)\n, distinct_unioned as (\n\n    select distinct\n        email, \n        flow_email as alternate_email,\n        country,\n        worker_name,\n        country || ' scheduled payout' as source \n    from scheduled_source n\n    union\n    select distinct\n        email, \n        email as alternate_email,\n        country,\n        worker_name,\n        country || ' adjustments' as source \n    from adjustments_source a\n    where \n        not exists (\n            select 1 from scheduled_source n where n.email = a.email or n.flow_email = a.email\n        )\n    union\n    select distinct\n        flow_email as email, \n        flow_email as alternate_email,\n        country,\n        worker_name,\n        country || ' flow' as source \n    from flow_source f\n    where \n        not exists (\n            select 1 from scheduled_source n where n.email = f.flow_email or n.flow_email = f.flow_email\n        )\n)\nselect * from distinct_unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_payout_workers"}, "model.edw.stg_worker_payout_line_items": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith adjustments_source as (\n\n    select * from {{ ref('stg_payout_adjustments') }}\n\n)\n, flow_source as (\n\n    select * from {{ ref('stg_payout_flow') }}\n\n)\n, scheduled_source as (\n\n    select * from {{ ref('stg_payout_scheduled') }}\n\n)\n, worker_pool as (\n    \n    select * from {{ ref('worker_pool') }}\n\n)\n, adjustments_scheduled as (\n\n    select\n        adjustments_source.email,\n        scheduled_source.flow_email flow_email,\n        adjustments_source.payroll_date,\n        adjustments_source.work_platform,\n        adjustments_source.payroll_line_item_type,\n        adjustments_source.payroll_line_item_amount\n    from adjustments_source\n    left join scheduled_source\n        on adjustments_source.email = scheduled_source.email\n    \n\n)\n, adjustments as (\n\n     select\n        worker_pool.person_key,\n        {# adjustments_scheduled.email,\n        flow_email, #}\n        worker_pool.email,\n        worker_pool.personal_email,\n        payroll_date,\n        work_platform,\n        payroll_line_item_type,\n        payroll_line_item_amount\n    from adjustments_scheduled\n    left join worker_pool\n        on adjustments_scheduled.email = worker_pool.email\n        or adjustments_scheduled.email = worker_pool.personal_email\n        or adjustments_scheduled.flow_email = worker_pool.email\n        or adjustments_scheduled.flow_email = worker_pool.personal_email\n)\n, flow as (\n\n    select\n        worker_pool.person_key,\n        {# flow_source.email,\n        flow_email, #}\n        worker_pool.email,\n        worker_pool.personal_email,\n        payroll_date,\n        work_platform,\n        payroll_line_item_type,\n        payroll_line_item_amount\n    from flow_source\n    left join worker_pool\n        on flow_source.flow_email = worker_pool.email\n        or flow_source.flow_email = worker_pool.personal_email\n\n)\n, scheduled as (\n\n    select\n        worker_pool.person_key,\n        {# scheduled_source.email,\n        flow_email, #}\n        worker_pool.email,\n        worker_pool.personal_email,\n        payroll_date,\n        work_platform,\n        payroll_line_item_type,\n        payroll_line_item_amount\n    from scheduled_source\n    left join worker_pool\n        on scheduled_source.email = worker_pool.email\n        or scheduled_source.email = worker_pool.personal_email\n        or scheduled_source.flow_email = worker_pool.email\n        or scheduled_source.flow_email = worker_pool.personal_email\n\n)\n, unioned as (\n\n    select * from scheduled\n    union\n    select * from flow\n    union\n    select * from adjustments\n    \n    \n)\nselect * from unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_payout_adjustments", "model.edw.stg_payout_flow", "model.edw.stg_payout_scheduled", "model.edw.worker_pool"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "worker_payout", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "worker_payout", "stg_worker_payout_line_items"], "unique_id": "model.edw.stg_worker_payout_line_items", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/worker_payout/stg_worker_payout_line_items.sql", "original_file_path": "models/psa/worker_payout/stg_worker_payout_line_items.sql", "name": "stg_worker_payout_line_items", "alias": "stg_worker_payout_line_items", "checksum": {"name": "sha256", "checksum": "e4025a7f40e53a5b9436936fe1bede11c285a9c37db612966772f8be2ff26ff1"}, "tags": [], "refs": [["stg_payout_adjustments"], ["stg_payout_flow"], ["stg_payout_scheduled"], ["worker_pool"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/worker_payout/stg_worker_payout_line_items.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "worker_payout"}, "compiled_sql": "\n\nwith adjustments_source as (\n\n    select * from psa_dev.scratch_brana.stg_payout_adjustments\n\n)\n, flow_source as (\n\n    select * from psa_dev.scratch_brana.stg_payout_flow\n\n)\n, scheduled_source as (\n\n    select * from psa_dev.scratch_brana.stg_payout_scheduled\n\n)\n, worker_pool as (\n    \n    select * from analytics_dev.scratch_brana.worker_pool\n\n)\n, adjustments_scheduled as (\n\n    select\n        adjustments_source.email,\n        scheduled_source.flow_email flow_email,\n        adjustments_source.payroll_date,\n        adjustments_source.work_platform,\n        adjustments_source.payroll_line_item_type,\n        adjustments_source.payroll_line_item_amount\n    from adjustments_source\n    left join scheduled_source\n        on adjustments_source.email = scheduled_source.email\n    \n\n)\n, adjustments as (\n\n     select\n        worker_pool.person_key,\n        \n        worker_pool.email,\n        worker_pool.personal_email,\n        payroll_date,\n        work_platform,\n        payroll_line_item_type,\n        payroll_line_item_amount\n    from adjustments_scheduled\n    left join worker_pool\n        on adjustments_scheduled.email = worker_pool.email\n        or adjustments_scheduled.email = worker_pool.personal_email\n        or adjustments_scheduled.flow_email = worker_pool.email\n        or adjustments_scheduled.flow_email = worker_pool.personal_email\n)\n, flow as (\n\n    select\n        worker_pool.person_key,\n        \n        worker_pool.email,\n        worker_pool.personal_email,\n        payroll_date,\n        work_platform,\n        payroll_line_item_type,\n        payroll_line_item_amount\n    from flow_source\n    left join worker_pool\n        on flow_source.flow_email = worker_pool.email\n        or flow_source.flow_email = worker_pool.personal_email\n\n)\n, scheduled as (\n\n    select\n        worker_pool.person_key,\n        \n        worker_pool.email,\n        worker_pool.personal_email,\n        payroll_date,\n        work_platform,\n        payroll_line_item_type,\n        payroll_line_item_amount\n    from scheduled_source\n    left join worker_pool\n        on scheduled_source.email = worker_pool.email\n        or scheduled_source.email = worker_pool.personal_email\n        or scheduled_source.flow_email = worker_pool.email\n        or scheduled_source.flow_email = worker_pool.personal_email\n\n)\n, unioned as (\n\n    select * from scheduled\n    union\n    select * from flow\n    union\n    select * from adjustments\n    \n    \n)\nselect * from unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_worker_payout_line_items"}, "model.edw.stg_payout_flow": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\n{% set source_tables = dbt_utils.get_relations_by_pattern('cw_payout%', 'flow', database='raw') %}\n\nwith source as (\n\n{% for table in source_tables %}\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( '{{ table.schema }}', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from {{table}}\n    {% if not loop.last %}\n    union\n    {% endif %}\n{% endfor %}\n)\nselect * from source", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "worker_payout", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "worker_payout", "stg_payout_flow"], "unique_id": "model.edw.stg_payout_flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/worker_payout/stg_payout_flow.sql", "original_file_path": "models/psa/worker_payout/stg_payout_flow.sql", "name": "stg_payout_flow", "alias": "stg_payout_flow", "checksum": {"name": "sha256", "checksum": "a44c5ac2802ed7ec123844e56af02e0714e775bb40543dc0b9ccb16781b6bc28"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/worker_payout/stg_payout_flow.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "worker_payout"}, "compiled_sql": "\n\n\n\nwith source as (\n\n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202007', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202007.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202008', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202008.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202009', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202009.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202011', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202011.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202101', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202101.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202102', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202102.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202103', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202103.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202012', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202012.FLOW\n    \n    union\n    \n\n    select\n        reward_earned                                     as payroll_line_item_amount,\n        country,\n        email                                              as email,\n        email                                             as flow_email,\n        name                                              as worker_name,\n        account                                           as workstream,\n        to_date(right( 'CW_PAYOUT_202010', 6),'yyyymm') as payroll_date,\n        'flow'                                            as work_platform,\n        'payment'                                         as payroll_line_item_type\n    from raw.CW_PAYOUT_202010.FLOW\n    \n\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_payout_flow"}, "model.edw.stg_cis_worker_pool": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n    \n    select * from {{ ref('stg_cis_workers_current') }}\n\n)\n, assessments_source as (\n\n    select * from {{ ref('stg_candidate_assessments') }}\n\n)\n, add_assessments as (\n\n    select\n        source.*,\n        \n        nvl(corp.passing_score_threshold, personal.passing_score_threshold) as passing_score_threshold,\n        nvl(corp.data_transcription_score, personal.data_transcription_score) as data_transcription_score,\n        nvl(corp.english_language_score, personal.english_language_score) as english_language_score,\n        nvl(corp.image_annotation_score, personal.image_annotation_score) as image_annotation_score,\n        nvl(corp.web_research_score, personal.web_research_score) as web_research_score,\n        nvl(corp.total_score, personal.total_score) as total_score\n\n    from source\n    left join assessments_source corp\n        on source.email = corp.email\n    left join assessments_source personal\n        on source.personal_email = personal.email\n\n)\n, add_booleans as (\n\n    select\n        add_assessments.*,\n\n        iff(data_transcription_score < passing_score_threshold, false, true) as has_passed_data_transcription,\n        iff(english_language_score < passing_score_threshold, false, true) as has_passed_english_language,\n        iff(image_annotation_score < passing_score_threshold, false, true) as has_passed_image_annotation,\n        iff(web_research_score < passing_score_threshold, false, true) as has_passed_web_research\n    from add_assessments\n)\nselect * from add_booleans", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_cis_workers_current", "model.edw.stg_candidate_assessments"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "stg_cis_worker_pool"], "unique_id": "model.edw.stg_cis_worker_pool", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/stg_cis_worker_pool.sql", "original_file_path": "models/psa/sheetload/stg_cis_worker_pool.sql", "name": "stg_cis_worker_pool", "alias": "stg_cis_worker_pool", "checksum": {"name": "sha256", "checksum": "833b8a0752474d6c80e27739f4f4af65e3c3cdd13f0015e61eb78c929c4e4642"}, "tags": [], "refs": [["stg_cis_workers_current"], ["stg_candidate_assessments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/stg_cis_worker_pool.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n    \n    select * from psa_dev.scratch_brana.stg_cis_workers_current\n\n)\n, assessments_source as (\n\n    select * from psa_dev.scratch_brana.stg_candidate_assessments\n\n)\n, add_assessments as (\n\n    select\n        source.*,\n        \n        nvl(corp.passing_score_threshold, personal.passing_score_threshold) as passing_score_threshold,\n        nvl(corp.data_transcription_score, personal.data_transcription_score) as data_transcription_score,\n        nvl(corp.english_language_score, personal.english_language_score) as english_language_score,\n        nvl(corp.image_annotation_score, personal.image_annotation_score) as image_annotation_score,\n        nvl(corp.web_research_score, personal.web_research_score) as web_research_score,\n        nvl(corp.total_score, personal.total_score) as total_score\n\n    from source\n    left join assessments_source corp\n        on source.email = corp.email\n    left join assessments_source personal\n        on source.personal_email = personal.email\n\n)\n, add_booleans as (\n\n    select\n        add_assessments.*,\n\n        iff(data_transcription_score < passing_score_threshold, false, true) as has_passed_data_transcription,\n        iff(english_language_score < passing_score_threshold, false, true) as has_passed_english_language,\n        iff(image_annotation_score < passing_score_threshold, false, true) as has_passed_image_annotation,\n        iff(web_research_score < passing_score_threshold, false, true) as has_passed_web_research\n    from add_assessments\n)\nselect * from add_booleans", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_cis_worker_pool"}, "model.edw.stg_worker_workstreams": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith expensify_source as (\n\n    select * from {{ ref('base_sheetload_expensify_workers') }}\n\n)\n, cis_source as (\n\n    select * from {{ ref('base_sheetload_people') }}\n    \n)\n, skills_source as (\n\n    select * from {{ ref('base_sheetload_skill_distribution') }}\n    \n)\n, email_workstreams as (\n\n    select\n        cf_email as email,\n        lower(workstream) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from expensify_source\n    union\n    select\n        previous_platform_email as email,\n        lower(workstream) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from expensify_source\n    union\n    select \n        email,\n        lower(skills.value) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from skills_source,\n    lateral flatten( input => split(primary_skills, '|')) as skills\n    union\n    select \n        email,\n        lower(streams.value) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from cis_source,\n    lateral flatten( input => split(workstreams, ',')) as streams\n    \n)\nselect * from email_workstreams where email is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_sheetload_expensify_workers", "model.edw.base_sheetload_people", "model.edw.base_sheetload_skill_distribution"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "stg_worker_workstreams"], "unique_id": "model.edw.stg_worker_workstreams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/stg_worker_workstreams.sql", "original_file_path": "models/psa/sheetload/stg_worker_workstreams.sql", "name": "stg_worker_workstreams", "alias": "stg_worker_workstreams", "checksum": {"name": "sha256", "checksum": "ea0103bc1d5367c2a84a318d7cdb19133ebc218ded72cf246b4d1d6610eb4cda"}, "tags": [], "refs": [["base_sheetload_expensify_workers"], ["base_sheetload_people"], ["base_sheetload_skill_distribution"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/stg_worker_workstreams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith expensify_source as (\n\n    select * from psa_dev.scratch_brana.base_sheetload_expensify_workers\n\n)\n, cis_source as (\n\n    select * from psa_dev.scratch_brana.base_sheetload_people\n    \n)\n, skills_source as (\n\n    select * from psa_dev.scratch_brana.base_sheetload_skill_distribution\n    \n)\n, email_workstreams as (\n\n    select\n        cf_email as email,\n        lower(workstream) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from expensify_source\n    union\n    select\n        previous_platform_email as email,\n        lower(workstream) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from expensify_source\n    union\n    select \n        email,\n        lower(skills.value) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from skills_source,\n    lateral flatten( input => split(primary_skills, '|')) as skills\n    union\n    select \n        email,\n        lower(streams.value) as workstream,\n        md5(email || ';' || workstream) as email_workstream_hash\n    from cis_source,\n    lateral flatten( input => split(workstreams, ',')) as streams\n    \n)\nselect * from email_workstreams where email is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_worker_workstreams"}, "model.edw.base_sheetload_breezy_internal": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('sheetload', 'breezy_internal_pools') }}\n\n)\n, renamed as (\n\n    select\n        iff(email = 'nan', NULL, email)                           as email,\n        iff(position = 'nan', NULL, position)                     as position_name,\n        iff(position_id = 'nan', NULL, position_id)               as position_id,\n        iff(stage = 'nan', NULL, stage)                           as stage_name,\n        iff(stage_id = 'nan', NULL, stage_id)                     as stage_id,\n        iff(_id = 'nan', NULL, _id)                               as applicant_id,\n        iff(name = 'nan', NULL, name)                             as applicant_name,\n        iff(phone = 'nan', \n            NULL,\n            iff(\n                right(phone,2) = '.0', \n                left(phone, len(phone)-2),\n                phone\n            )\n        )                                                         as phone,\n        iff(category = 'nan', NULL, category)                     as category,\n        iff(created = 'nan', \n            NULL, \n            to_timestamp(created, 'MM/DD/YYYY HH:MI')\n            )                                                     as created_at,\n        iff(updated = 'nan', \n            NULL, \n            to_timestamp(updated, 'MM/DD/YYYY HH:MI')\n            )                                                     as updated_at,\n        iff(link = 'nan', NULL, link)                             as applicant_url,\n        iff(tags = 'nan', NULL, tags)                             as tags,\n        iff(onboarded = 'nan', NULL, onboarded)                   as onboarded,\n        iff(cattype = 'nan', NULL, cattype)                       as category_type,\n        iff(catnumber = 'nan', NULL, catnumber)                   as category_number,\n        iff(stagenumber = 'nan', NULL, stagenumber)               as stage_number,\n        iff(created_year_month = 'nan', \n            NULL, \n            date_from_parts(\n                split(created_year_month, '-')[0],\n                split(created_year_month, '-')[1],\n                1\n            )\n        )                                                         as created_month_date,\n        iff(academy = 'nan', NULL, academy)                       as academy_score,\n        iff(contains(tags,'data-transcription') > 0, true, false) as has_passed_data_transcription,\n        iff(contains(tags,'image-annotation') > 0, true, false)   as has_passed_image_annotation,\n        iff(contains(tags,'web-research') > 0, true, false)       as has_passed_web_research,\n        iff(contains(tags,'english-language') > 0, true, false)   as has_passed_english_language,\n        regexp_substr(tags, 'hrs[+]?: ([^\"\"]+)',1,1,'e')          as available_hours_tag\n        {# ,\n        to_timestamp(_updated_at)                                 as record_updated_at #}\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.sheetload.breezy_internal_pools"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "base", "base_sheetload_breezy_internal"], "unique_id": "model.edw.base_sheetload_breezy_internal", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/base/base_sheetload_breezy_internal.sql", "original_file_path": "models/psa/sheetload/base/base_sheetload_breezy_internal.sql", "name": "base_sheetload_breezy_internal", "alias": "base_sheetload_breezy_internal", "checksum": {"name": "sha256", "checksum": "c6d8f27d2d1121a9a094da7003bd963686082b37745f16d898c21adf79768115"}, "tags": [], "refs": [], "sources": [["sheetload", "breezy_internal_pools"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/base/base_sheetload_breezy_internal.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.sheetload.breezy_internal_pools\n\n)\n, renamed as (\n\n    select\n        iff(email = 'nan', NULL, email)                           as email,\n        iff(position = 'nan', NULL, position)                     as position_name,\n        iff(position_id = 'nan', NULL, position_id)               as position_id,\n        iff(stage = 'nan', NULL, stage)                           as stage_name,\n        iff(stage_id = 'nan', NULL, stage_id)                     as stage_id,\n        iff(_id = 'nan', NULL, _id)                               as applicant_id,\n        iff(name = 'nan', NULL, name)                             as applicant_name,\n        iff(phone = 'nan', \n            NULL,\n            iff(\n                right(phone,2) = '.0', \n                left(phone, len(phone)-2),\n                phone\n            )\n        )                                                         as phone,\n        iff(category = 'nan', NULL, category)                     as category,\n        iff(created = 'nan', \n            NULL, \n            to_timestamp(created, 'MM/DD/YYYY HH:MI')\n            )                                                     as created_at,\n        iff(updated = 'nan', \n            NULL, \n            to_timestamp(updated, 'MM/DD/YYYY HH:MI')\n            )                                                     as updated_at,\n        iff(link = 'nan', NULL, link)                             as applicant_url,\n        iff(tags = 'nan', NULL, tags)                             as tags,\n        iff(onboarded = 'nan', NULL, onboarded)                   as onboarded,\n        iff(cattype = 'nan', NULL, cattype)                       as category_type,\n        iff(catnumber = 'nan', NULL, catnumber)                   as category_number,\n        iff(stagenumber = 'nan', NULL, stagenumber)               as stage_number,\n        iff(created_year_month = 'nan', \n            NULL, \n            date_from_parts(\n                split(created_year_month, '-')[0],\n                split(created_year_month, '-')[1],\n                1\n            )\n        )                                                         as created_month_date,\n        iff(academy = 'nan', NULL, academy)                       as academy_score,\n        iff(contains(tags,'data-transcription') > 0, true, false) as has_passed_data_transcription,\n        iff(contains(tags,'image-annotation') > 0, true, false)   as has_passed_image_annotation,\n        iff(contains(tags,'web-research') > 0, true, false)       as has_passed_web_research,\n        iff(contains(tags,'english-language') > 0, true, false)   as has_passed_english_language,\n        regexp_substr(tags, 'hrs[+]?: ([^\"\"]+)',1,1,'e')          as available_hours_tag\n        \n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheetload_breezy_internal"}, "model.edw.base_sheetload_people": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('sheetload', 'people') }}\n\n)\n, renamed as (\n\n    select\n        initcap(full_name)                                                        as full_name,\n        lower(email)                                                              as email,\n        lower(role_id)                                                            as role_name,\n        iff(last_logged_in = 'nan', NULL, last_logged_in)                         as last_logged_in_at,\n        iff(last_worked_on = 'nan', NULL, last_worked_on)                         as last_worked_on_date,\n        iff(current_country = 'nan', NULL, current_country)                       as current_country,\n        iff(status = 'nan', NULL, status)                                         as status_name,\n        iff(workstreams = 'nan', NULL, workstreams)                               as workstreams,\n        iff(personal_email = 'nan', NULL, lower(personal_email))                  as personal_email,\n        iff(date_of_birth = 'nan', NULL, date_of_birth)                           as date_of_birth,\n        iff(phone_number = 'nan', NULL, phone_number)                             as phone_number,\n        iff(gender = 'nan', NULL, gender)                                         as gender,\n        iff(joined_date = 'nan', NULL, joined_date)                               as joined_date,\n        iff(current_address = 'nan', NULL, current_address)                       as current_address,\n        iff(permanent_address = 'nan', NULL, permanent_address)                   as permanent_address,\n        iff(current_city = 'nan', NULL, current_city)                             as current_city,\n        iff(permanent_city = 'nan', NULL, permanent_city)                         as permanent_city,\n        iff(permanent_country = 'nan', NULL, permanent_country)                   as permanent_country,\n        iff(document_type = 'nan', NULL, document_type)                           as document_type,\n        iff(document_number = 'nan', NULL, document_number)                       as document_number,\n        iff(pan_number = 'nan', NULL, pan_number)                                 as pan_number,\n        iff(bank_account_name = 'nan', NULL, bank_account_name)                   as bank_account_name,\n        iff(bank_account_number = 'nan', NULL, bank_account_number)               as bank_account_number,\n        iff(bank = 'nan', NULL, bank)                                             as bank_name,\n        iff(nominee_name = 'nan', NULL, nominee_name)                             as nominee_name,\n        iff(branch = 'nan', NULL, branch)                                         as branch_name,\n        iff(nominee_relationship = 'nan', NULL, nominee_relationship)             as nominee_relationship,\n        iff(nominee_document_type = 'nan', NULL, nominee_document_type)           as nominee_document_type,\n        iff(blood_group = 'nan', NULL, blood_group)                               as blood_group,\n        iff(emergency_contact_relation = 'nan', NULL, emergency_contact_relation) as emergency_contact_relation,\n        iff(emergency_contact_name = 'nan', NULL, emergency_contact_name)         as emergency_contact_name,\n        iff(cpu = 'nan', NULL, cpu)                                               as cpu_type,\n        iff(emergency_contact_number = 'nan', NULL, emergency_contact_number)     as emergency_contact_number,\n        iff(number_of_processors = 'nan', NULL, number_of_processors)             as number_of_processors,\n        iff(cpu_architecture = 'nan', NULL, cpu_architecture)                     as cpu_architecture,\n        iff(internal_storage = 'nan', NULL, internal_storage)                     as internal_storage,\n        iff(memory = 'nan', NULL, memory)                                         as memory,\n        iff(primary_display = 'nan', NULL, primary_display)                       as primary_display,\n        iff(other_display = 'nan', NULL, other_display)                           as other_display,\n        iff(operating_system = 'nan', NULL, operating_system)                     as operating_system,\n        iff(cf_browser = 'nan', NULL, cf_browser)                                 as cf_browser,\n        iff(omaha_client_uid = 'nan', NULL, omaha_client_uid)                     as omaha_client_uid,\n        iff(latitude = 'nan', NULL, latitude)                                     as latitude,\n        iff(longitude = 'nan', NULL, longitude)                                   as longitude,\n        iff(webcam = 'nan', NULL, webcam)                                         as webcam,\n        _updated_at                                                               as updated_at\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.sheetload.people"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "base", "base_sheetload_people"], "unique_id": "model.edw.base_sheetload_people", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/base/base_sheetload_people.sql", "original_file_path": "models/psa/sheetload/base/base_sheetload_people.sql", "name": "base_sheetload_people", "alias": "base_sheetload_people", "checksum": {"name": "sha256", "checksum": "4246f4269714d39b22354440896862d93660e42acc9c5a8ab2b620d47640484b"}, "tags": [], "refs": [], "sources": [["sheetload", "people"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/base/base_sheetload_people.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.sheetload.people\n\n)\n, renamed as (\n\n    select\n        initcap(full_name)                                                        as full_name,\n        lower(email)                                                              as email,\n        lower(role_id)                                                            as role_name,\n        iff(last_logged_in = 'nan', NULL, last_logged_in)                         as last_logged_in_at,\n        iff(last_worked_on = 'nan', NULL, last_worked_on)                         as last_worked_on_date,\n        iff(current_country = 'nan', NULL, current_country)                       as current_country,\n        iff(status = 'nan', NULL, status)                                         as status_name,\n        iff(workstreams = 'nan', NULL, workstreams)                               as workstreams,\n        iff(personal_email = 'nan', NULL, lower(personal_email))                  as personal_email,\n        iff(date_of_birth = 'nan', NULL, date_of_birth)                           as date_of_birth,\n        iff(phone_number = 'nan', NULL, phone_number)                             as phone_number,\n        iff(gender = 'nan', NULL, gender)                                         as gender,\n        iff(joined_date = 'nan', NULL, joined_date)                               as joined_date,\n        iff(current_address = 'nan', NULL, current_address)                       as current_address,\n        iff(permanent_address = 'nan', NULL, permanent_address)                   as permanent_address,\n        iff(current_city = 'nan', NULL, current_city)                             as current_city,\n        iff(permanent_city = 'nan', NULL, permanent_city)                         as permanent_city,\n        iff(permanent_country = 'nan', NULL, permanent_country)                   as permanent_country,\n        iff(document_type = 'nan', NULL, document_type)                           as document_type,\n        iff(document_number = 'nan', NULL, document_number)                       as document_number,\n        iff(pan_number = 'nan', NULL, pan_number)                                 as pan_number,\n        iff(bank_account_name = 'nan', NULL, bank_account_name)                   as bank_account_name,\n        iff(bank_account_number = 'nan', NULL, bank_account_number)               as bank_account_number,\n        iff(bank = 'nan', NULL, bank)                                             as bank_name,\n        iff(nominee_name = 'nan', NULL, nominee_name)                             as nominee_name,\n        iff(branch = 'nan', NULL, branch)                                         as branch_name,\n        iff(nominee_relationship = 'nan', NULL, nominee_relationship)             as nominee_relationship,\n        iff(nominee_document_type = 'nan', NULL, nominee_document_type)           as nominee_document_type,\n        iff(blood_group = 'nan', NULL, blood_group)                               as blood_group,\n        iff(emergency_contact_relation = 'nan', NULL, emergency_contact_relation) as emergency_contact_relation,\n        iff(emergency_contact_name = 'nan', NULL, emergency_contact_name)         as emergency_contact_name,\n        iff(cpu = 'nan', NULL, cpu)                                               as cpu_type,\n        iff(emergency_contact_number = 'nan', NULL, emergency_contact_number)     as emergency_contact_number,\n        iff(number_of_processors = 'nan', NULL, number_of_processors)             as number_of_processors,\n        iff(cpu_architecture = 'nan', NULL, cpu_architecture)                     as cpu_architecture,\n        iff(internal_storage = 'nan', NULL, internal_storage)                     as internal_storage,\n        iff(memory = 'nan', NULL, memory)                                         as memory,\n        iff(primary_display = 'nan', NULL, primary_display)                       as primary_display,\n        iff(other_display = 'nan', NULL, other_display)                           as other_display,\n        iff(operating_system = 'nan', NULL, operating_system)                     as operating_system,\n        iff(cf_browser = 'nan', NULL, cf_browser)                                 as cf_browser,\n        iff(omaha_client_uid = 'nan', NULL, omaha_client_uid)                     as omaha_client_uid,\n        iff(latitude = 'nan', NULL, latitude)                                     as latitude,\n        iff(longitude = 'nan', NULL, longitude)                                   as longitude,\n        iff(webcam = 'nan', NULL, webcam)                                         as webcam,\n        _updated_at                                                               as updated_at\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheetload_people"}, "model.edw.base_sheetload_breezy_external": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('sheetload', 'breezy_external_pools') }}\n\n)\n, renamed as (\n\n    select\n        iff(email = 'nan', NULL, email)                           as email,\n        iff(position = 'nan', NULL, position)                     as position_name,\n        iff(position_id = 'nan', NULL, position_id)               as position_id,\n        iff(stage = 'nan', NULL, stage)                           as stage_name,\n        iff(stage_id = 'nan', NULL, stage_id)                     as stage_id,\n        iff(_id = 'nan', NULL, _id)                               as applicant_id,\n        iff(name = 'nan', NULL, name)                             as applicant_name,\n        iff(phone = 'nan', \n            NULL,\n            iff(\n                right(phone,2) = '.0', \n                left(phone, len(phone)-2),\n                phone\n            )\n        )                                                         as phone,\n        iff(category = 'nan', NULL, category)                     as category,\n        iff(created = 'nan', \n            NULL, \n            to_timestamp(created, 'MM/DD/YYYY HH:MI')\n            )         as created_at,\n        iff(updated = 'nan', \n            NULL, \n            to_timestamp(updated, 'MM/DD/YYYY HH:MI')\n            )         as updated_at,\n        iff(link = 'nan', NULL, link)                             as applicant_url,\n        iff(tags = 'nan', NULL, tags)                             as tags,\n        iff(onboarded = 'nan', NULL, onboarded)                   as onboarded,\n        iff(\"CAT+NUMBER\" = 'nan', NULL, \"CAT+NUMBER\")             as category_number,\n        iff(\"STATUS\" = 'nan', NULL, \"STATUS\")                     as status_name,\n        iff(val = 'nan', NULL, val)                               as value_name,\n        iff(created_month = 'nan', \n            NULL, \n            date_from_parts(\n                split(created_month, '-')[0],\n                split(created_month, '-')[1],\n                1\n            )\n        )                                                         as created_month_date,\n        iff(academy = 'nan', NULL, academy)                       as academy_score,\n        iff(contains(tags,'data-transcription') > 0, true, false) as has_passed_data_transcription,\n        iff(contains(tags,'image-annotation') > 0, true, false)   as has_passed_image_annotation,\n        iff(contains(tags,'web-research') > 0, true, false)       as has_passed_web_research,\n        iff(contains(tags,'english-language') > 0, true, false)   as has_passed_english_language,\n        regexp_substr(tags, 'hrs[+]?: ([^\"\"]+)',1,1,'e')          as available_hours_tag\n        {# ,\n        try_to_timestamp(_updated_at)                                 as record_updated_at #}\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.sheetload.breezy_external_pools"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "base", "base_sheetload_breezy_external"], "unique_id": "model.edw.base_sheetload_breezy_external", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/base/base_sheetload_breezy_external.sql", "original_file_path": "models/psa/sheetload/base/base_sheetload_breezy_external.sql", "name": "base_sheetload_breezy_external", "alias": "base_sheetload_breezy_external", "checksum": {"name": "sha256", "checksum": "21fd15cccebe5b2cff4cc8c6c139aa59f7d85c0a3c55e9da23b66f3aa5389100"}, "tags": [], "refs": [], "sources": [["sheetload", "breezy_external_pools"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/base/base_sheetload_breezy_external.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.sheetload.breezy_external_pools\n\n)\n, renamed as (\n\n    select\n        iff(email = 'nan', NULL, email)                           as email,\n        iff(position = 'nan', NULL, position)                     as position_name,\n        iff(position_id = 'nan', NULL, position_id)               as position_id,\n        iff(stage = 'nan', NULL, stage)                           as stage_name,\n        iff(stage_id = 'nan', NULL, stage_id)                     as stage_id,\n        iff(_id = 'nan', NULL, _id)                               as applicant_id,\n        iff(name = 'nan', NULL, name)                             as applicant_name,\n        iff(phone = 'nan', \n            NULL,\n            iff(\n                right(phone,2) = '.0', \n                left(phone, len(phone)-2),\n                phone\n            )\n        )                                                         as phone,\n        iff(category = 'nan', NULL, category)                     as category,\n        iff(created = 'nan', \n            NULL, \n            to_timestamp(created, 'MM/DD/YYYY HH:MI')\n            )         as created_at,\n        iff(updated = 'nan', \n            NULL, \n            to_timestamp(updated, 'MM/DD/YYYY HH:MI')\n            )         as updated_at,\n        iff(link = 'nan', NULL, link)                             as applicant_url,\n        iff(tags = 'nan', NULL, tags)                             as tags,\n        iff(onboarded = 'nan', NULL, onboarded)                   as onboarded,\n        iff(\"CAT+NUMBER\" = 'nan', NULL, \"CAT+NUMBER\")             as category_number,\n        iff(\"STATUS\" = 'nan', NULL, \"STATUS\")                     as status_name,\n        iff(val = 'nan', NULL, val)                               as value_name,\n        iff(created_month = 'nan', \n            NULL, \n            date_from_parts(\n                split(created_month, '-')[0],\n                split(created_month, '-')[1],\n                1\n            )\n        )                                                         as created_month_date,\n        iff(academy = 'nan', NULL, academy)                       as academy_score,\n        iff(contains(tags,'data-transcription') > 0, true, false) as has_passed_data_transcription,\n        iff(contains(tags,'image-annotation') > 0, true, false)   as has_passed_image_annotation,\n        iff(contains(tags,'web-research') > 0, true, false)       as has_passed_web_research,\n        iff(contains(tags,'english-language') > 0, true, false)   as has_passed_english_language,\n        regexp_substr(tags, 'hrs[+]?: ([^\"\"]+)',1,1,'e')          as available_hours_tag\n        \n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheetload_breezy_external"}, "model.edw.base_sheetload_cpu_model_summary": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('sheetload', 'cpu_model_summary') }}\n\n)\n, renamed as (\n\n    select\n        iff(cpu_name = 'nan', NULL, cpu_name)                                               as cpu_name,\n        iff(_rating = 'nan', NULL, _rating::number)                                         as rating,\n        iff(_rank = 'nan', NULL, _rank::number)                                             as rank,\n        iff(_num_thread_execution_units = 'nan', NULL, _num_thread_execution_units::number) as num_thread_execution_units,\n        iff(_avg_speed = 'nan', NULL, _avg_speed::number)                                   as avg_speed,\n        iff(_stock_speed = 'nan', NULL, _stock_speed::number)                               as stock_speed,\n        iff(_samples = 'nan', NULL, _samples::number)                                       as samples,\n        iff(_single_thread = 'nan', NULL, _single_thread::number)                           as single_thread,\n        iff(_maxtdp = 'nan', NULL, _maxtdp::number)                                         as maxtdp,\n        iff(_turbospeed = 'nan', NULL, _turbospeed::number)                                 as turbospeed,\n        iff(_cores_per_cpu = 'nan', NULL, _cores_per_cpu::number)                           as cores_per_cpu,\n        iff(_logicals_per_core = 'nan', NULL, _logicals_per_core::number)                   as logicals_per_core,\n        iff(_cpu_first_seen_in_charts = 'nan', NULL, _cpu_first_seen_in_charts)             as cpu_first_seen_in_charts,\n        iff(_other_names = 'nan', NULL, _other_names)                                       as other_names,\n        iff(_updated_at = 'nan', NULL, _updated_at)                                         as updated_at\n        from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.sheetload.cpu_model_summary"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "base", "base_sheetload_cpu_model_summary"], "unique_id": "model.edw.base_sheetload_cpu_model_summary", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/base/base_sheetload_cpu_model_summary.sql", "original_file_path": "models/psa/sheetload/base/base_sheetload_cpu_model_summary.sql", "name": "base_sheetload_cpu_model_summary", "alias": "base_sheetload_cpu_model_summary", "checksum": {"name": "sha256", "checksum": "a43c18c79f3b037f6658824d66678dcba2aaf15f1837600dd55ba3c5a9520996"}, "tags": [], "refs": [], "sources": [["sheetload", "cpu_model_summary"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/base/base_sheetload_cpu_model_summary.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.sheetload.cpu_model_summary\n\n)\n, renamed as (\n\n    select\n        iff(cpu_name = 'nan', NULL, cpu_name)                                               as cpu_name,\n        iff(_rating = 'nan', NULL, _rating::number)                                         as rating,\n        iff(_rank = 'nan', NULL, _rank::number)                                             as rank,\n        iff(_num_thread_execution_units = 'nan', NULL, _num_thread_execution_units::number) as num_thread_execution_units,\n        iff(_avg_speed = 'nan', NULL, _avg_speed::number)                                   as avg_speed,\n        iff(_stock_speed = 'nan', NULL, _stock_speed::number)                               as stock_speed,\n        iff(_samples = 'nan', NULL, _samples::number)                                       as samples,\n        iff(_single_thread = 'nan', NULL, _single_thread::number)                           as single_thread,\n        iff(_maxtdp = 'nan', NULL, _maxtdp::number)                                         as maxtdp,\n        iff(_turbospeed = 'nan', NULL, _turbospeed::number)                                 as turbospeed,\n        iff(_cores_per_cpu = 'nan', NULL, _cores_per_cpu::number)                           as cores_per_cpu,\n        iff(_logicals_per_core = 'nan', NULL, _logicals_per_core::number)                   as logicals_per_core,\n        iff(_cpu_first_seen_in_charts = 'nan', NULL, _cpu_first_seen_in_charts)             as cpu_first_seen_in_charts,\n        iff(_other_names = 'nan', NULL, _other_names)                                       as other_names,\n        iff(_updated_at = 'nan', NULL, _updated_at)                                         as updated_at\n        from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheetload_cpu_model_summary"}, "model.edw.base_sheetload_skill_distribution": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('sheetload', 'skill_distribution') }}\n\n)\n, renamed as (\n\n    select\n        iff(worker_id = 'nan', NULL, worker_id) as worker_id,\n        iff(name = 'nan', NULL, name) as worker_name,\n        iff(phone = 'nan', NULL, phone) as phone,\n        iff(email = 'nan', NULL, email) as email,\n        iff(team = 'nan', NULL, team) as team_name,\n        iff(po = 'nan', NULL, po) as people_officer,\n        iff(\"on-boarded\" = 'nan', NULL, to_date(\"on-boarded\")) as on_boarded_date,\n        iff(skill_count = 'nan', NULL, skill_count) as skill_count,\n        iff(worked_hours = 'nan', NULL, worked_hours) as worked_hours,\n        iff(primary_skills = 'nan', NULL, primary_skills) as primary_skills,\n        iff(secondary_skills = 'nan', NULL, secondary_skills) as secondary_skills\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.sheetload.skill_distribution"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "base", "base_sheetload_skill_distribution"], "unique_id": "model.edw.base_sheetload_skill_distribution", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/base/base_sheetload_skill_distribution.sql", "original_file_path": "models/psa/sheetload/base/base_sheetload_skill_distribution.sql", "name": "base_sheetload_skill_distribution", "alias": "base_sheetload_skill_distribution", "checksum": {"name": "sha256", "checksum": "31031ae61fa6dce7bf2b20b2557b575bcd3dd5d60c9ae4f8942b66a126396a08"}, "tags": [], "refs": [], "sources": [["sheetload", "skill_distribution"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/base/base_sheetload_skill_distribution.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.sheetload.skill_distribution\n\n)\n, renamed as (\n\n    select\n        iff(worker_id = 'nan', NULL, worker_id) as worker_id,\n        iff(name = 'nan', NULL, name) as worker_name,\n        iff(phone = 'nan', NULL, phone) as phone,\n        iff(email = 'nan', NULL, email) as email,\n        iff(team = 'nan', NULL, team) as team_name,\n        iff(po = 'nan', NULL, po) as people_officer,\n        iff(\"on-boarded\" = 'nan', NULL, to_date(\"on-boarded\")) as on_boarded_date,\n        iff(skill_count = 'nan', NULL, skill_count) as skill_count,\n        iff(worked_hours = 'nan', NULL, worked_hours) as worked_hours,\n        iff(primary_skills = 'nan', NULL, primary_skills) as primary_skills,\n        iff(secondary_skills = 'nan', NULL, secondary_skills) as secondary_skills\n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheetload_skill_distribution"}, "model.edw.base_sheetload_expensify_workers": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('sheetload', 'expensify_workers') }}\n\n)\n, renamed as (\n    \n    select  \n        iff(\n            active__es_email_on_ssdos_and_platform ='nan', \n            NULL, \n            active__es_email_on_ssdos_and_platform\n        ) as cf_email,\n        iff(name = 'nan', NULL, name) as worker_name,\n        iff(previous_platform_email_ = 'nan', NULL, previous_platform_email_) as previous_platform_email,\n        iff(country = 'nan', NULL, country) as country,\n        iff(ssdos_status_ = 'nan', NULL, ssdos_status_) as ssdos_status,\n        iff(workstream = 'nan', NULL, workstream) as workstream\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.sheetload.expensify_workers"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "sheetload", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "sheetload", "base", "base_sheetload_expensify_workers"], "unique_id": "model.edw.base_sheetload_expensify_workers", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/sheetload/base/base_sheetload_expensify_workers.sql", "original_file_path": "models/psa/sheetload/base/base_sheetload_expensify_workers.sql", "name": "base_sheetload_expensify_workers", "alias": "base_sheetload_expensify_workers", "checksum": {"name": "sha256", "checksum": "110b175edbfdaf55ce45bee2bcc3d5c22dfb4f1f10e104f678d5870804444f9a"}, "tags": [], "refs": [], "sources": [["sheetload", "expensify_workers"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/sheetload/base/base_sheetload_expensify_workers.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "sheetload"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.sheetload.expensify_workers\n\n)\n, renamed as (\n    \n    select  \n        iff(\n            active__es_email_on_ssdos_and_platform ='nan', \n            NULL, \n            active__es_email_on_ssdos_and_platform\n        ) as cf_email,\n        iff(name = 'nan', NULL, name) as worker_name,\n        iff(previous_platform_email_ = 'nan', NULL, previous_platform_email_) as previous_platform_email,\n        iff(country = 'nan', NULL, country) as country,\n        iff(ssdos_status_ = 'nan', NULL, ssdos_status_) as ssdos_status,\n        iff(workstream = 'nan', NULL, workstream) as workstream\n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheetload_expensify_workers"}, "model.edw.stg_breezyhr_candidate_note_streams": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith candidate_streams as (\n    select * from {{ ref('base_breezyhr_candidate_streams') }}\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:attachments::array as note_attachments,\n        stream_object:body::string as note_body\n    from candidate_streams\n    where stream_type LIKE 'companyNote%'\n)\nselect * from filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezyhr_candidate_note_streams"], "unique_id": "model.edw.stg_breezyhr_candidate_note_streams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezyhr_candidate_note_streams.sql", "original_file_path": "models/psa/breezyhr/stg_breezyhr_candidate_note_streams.sql", "name": "stg_breezyhr_candidate_note_streams", "alias": "stg_breezyhr_candidate_note_streams", "checksum": {"name": "sha256", "checksum": "9bb0654b31af90268eaef1fa52efa3b1394fb2e18530efee24747a707de91481"}, "tags": [], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezyhr_candidate_note_streams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith candidate_streams as (\n    select * from psa_dev.scratch_brana.base_breezyhr_candidate_streams\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:attachments::array as note_attachments,\n        stream_object:body::string as note_body\n    from candidate_streams\n    where stream_type LIKE 'companyNote%'\n)\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezyhr_candidate_note_streams"}, "model.edw.stg_breezy_worker_pool": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith candidate_status_streams as (\n    select * from {{ ref('stg_breezyhr_candidate_status_streams') }}\n)\n, candidates as (\n    select * from {{ ref('stg_breezyhr_candidates') }}\n)\n, assessments_source as (\n    select * from {{ ref('stg_candidate_assessments') }}\n)\n, positions as (\n    select position_id, name from {{ ref('stg_breezyhr_positions') }}\n)\n, category_names as (\n    select * from {{ ref('base_breezy_categories') }}\n)\n, whitelist as (\n    select position_id, category from {{ source('breezy_categories', 'positions') }} where whitelist_blacklist = 'Whitelist'\n)\n, available_hours as (\n    select * from {{ ref('available_hours_tags') }}\n)\n, whitelisted_candidates as (\n  select\n    candidates.*\n  from candidates\n    inner join whitelist\n    on candidates.position_id = whitelist.position_id\n)\n{# CTEs candidates_max_record and candidates_latest_record are used to get the latest record of the candidate. There can be duplicate records of candidate with unique id. #}\n, candidates_max_record as (\n    select\n        *,\n        row_number() over(partition by email order by updated_at desc) as record_row_number\n    from whitelisted_candidates\n)\n, candidates_latest_record as (\n    select\n      candidate_id,\n      position_id,\n      created_at,\n      updated_at,\n      email,\n      name as candidate_name,\n      phone,\n      tags,\n      available_hours_tag\n    from candidates_max_record\n    where record_row_number = 1\n)\n{# CTEs latest_stream_row_numbering and latest_stream are for getting the latest stream(stage) of the candidate. #}\n, latest_stream_row_numbering as (\n  select\n      candidate_id,\n      stage_name,\n      row_number() over(partition by candidate_id order by entered_stage_at desc) as row_number\n  from candidate_status_streams\n  where stage_type_name != 'Disqualified'\n)\n, latest_stream as (\n  select\n    candidates_latest_record.*,\n    latest_stream_row_numbering.stage_name\n  from candidates_latest_record\n  inner join latest_stream_row_numbering\n    on candidates_latest_record.candidate_id = latest_stream_row_numbering.candidate_id\n  where row_number = 1\n)\n, renamed as (\n    select \n      email                                                as email,\n      name                                                 as position_name,\n      latest_stream.position_id                            as position_id,\n      stage_name,\n      case\n        when\n          contains(positions.name, 'Kathmandu') > 0\n          or  contains(positions.name, 'KTM') > 0 then 'Nepal'\n        else 'Kenya'\n      end                                                  as country,\n      candidate_id                                         as candidate_id,\n      candidate_name                                       as candidate_name,\n      iff(\n        right(phone,2) = '.0',\n        left(phone, len(phone)-2),\n        phone\n      )                                                    as phone,\n      created_at                                           as created_at,\n      updated_at                                           as updated_at,\n      tags                                                 as tags,\n      available_hours_tag\n      from latest_stream\n      inner join positions\n        on latest_stream.position_id = positions.position_id\n)\n, assessments as (\n    select\n      renamed.*,\n      data_transcription_score,\n      english_language_score,\n      image_annotation_score,\n      web_research_score,\n      total_score,\n      iff(data_transcription_score < passing_score_threshold, false, true) as has_passed_data_transcription,\n      iff(english_language_score < passing_score_threshold, false, true) as has_passed_english_language,\n      iff(image_annotation_score < passing_score_threshold, false, true) as has_passed_image_annotation,\n      iff(web_research_score < passing_score_threshold, false, true) as has_passed_web_research\n    from renamed\n    left join assessments_source\n      on renamed.email = assessments_source.email\n)\n, stages as (\n    select\n        assessments.*,\n        \n        category_names.category_name\n    from assessments\n    left join category_names\n        on lower(assessments.stage_name) = lower(category_names.stage_name)\n)\n, availability as (\n    select\n        stages.*,\n\n        available_hours.hours_available\n    from stages\n    left join available_hours\n        on stages.available_hours_tag = available_hours.tag\n)\nselect * from availability", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.breezy_categories.positions", "model.edw.stg_breezyhr_candidate_status_streams", "model.edw.stg_breezyhr_candidates", "model.edw.stg_candidate_assessments", "model.edw.stg_breezyhr_positions", "model.edw.base_breezy_categories", "seed.edw.available_hours_tags"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezy_worker_pool"], "unique_id": "model.edw.stg_breezy_worker_pool", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezy_worker_pool.sql", "original_file_path": "models/psa/breezyhr/stg_breezy_worker_pool.sql", "name": "stg_breezy_worker_pool", "alias": "stg_breezy_worker_pool", "checksum": {"name": "sha256", "checksum": "d4b1d1acff2ccaa81e62ec6f41b2049147a8abcdb2a9fa7bd3aabec0483bfaee"}, "tags": [], "refs": [["stg_breezyhr_candidate_status_streams"], ["stg_breezyhr_candidates"], ["stg_candidate_assessments"], ["stg_breezyhr_positions"], ["base_breezy_categories"], ["available_hours_tags"]], "sources": [["breezy_categories", "positions"]], "description": "", "columns": {"candidate_id": {"name": "candidate_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezy_worker_pool.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith candidate_status_streams as (\n    select * from psa_dev.scratch_brana.stg_breezyhr_candidate_status_streams\n)\n, candidates as (\n    select * from psa_dev.scratch_brana.stg_breezyhr_candidates\n)\n, assessments_source as (\n    select * from psa_dev.scratch_brana.stg_candidate_assessments\n)\n, positions as (\n    select position_id, name from psa_dev.scratch_brana.stg_breezyhr_positions\n)\n, category_names as (\n    select * from psa_dev.scratch_brana.base_breezy_categories\n)\n, whitelist as (\n    select position_id, category from raw.breezy_categories_stitch.positions where whitelist_blacklist = 'Whitelist'\n)\n, available_hours as (\n    select * from psa_dev.scratch_brana.available_hours_tags\n)\n, whitelisted_candidates as (\n  select\n    candidates.*\n  from candidates\n    inner join whitelist\n    on candidates.position_id = whitelist.position_id\n)\n\n, candidates_max_record as (\n    select\n        *,\n        row_number() over(partition by email order by updated_at desc) as record_row_number\n    from whitelisted_candidates\n)\n, candidates_latest_record as (\n    select\n      candidate_id,\n      position_id,\n      created_at,\n      updated_at,\n      email,\n      name as candidate_name,\n      phone,\n      tags,\n      available_hours_tag\n    from candidates_max_record\n    where record_row_number = 1\n)\n\n, latest_stream_row_numbering as (\n  select\n      candidate_id,\n      stage_name,\n      row_number() over(partition by candidate_id order by entered_stage_at desc) as row_number\n  from candidate_status_streams\n  where stage_type_name != 'Disqualified'\n)\n, latest_stream as (\n  select\n    candidates_latest_record.*,\n    latest_stream_row_numbering.stage_name\n  from candidates_latest_record\n  inner join latest_stream_row_numbering\n    on candidates_latest_record.candidate_id = latest_stream_row_numbering.candidate_id\n  where row_number = 1\n)\n, renamed as (\n    select \n      email                                                as email,\n      name                                                 as position_name,\n      latest_stream.position_id                            as position_id,\n      stage_name,\n      case\n        when\n          contains(positions.name, 'Kathmandu') > 0\n          or  contains(positions.name, 'KTM') > 0 then 'Nepal'\n        else 'Kenya'\n      end                                                  as country,\n      candidate_id                                         as candidate_id,\n      candidate_name                                       as candidate_name,\n      iff(\n        right(phone,2) = '.0',\n        left(phone, len(phone)-2),\n        phone\n      )                                                    as phone,\n      created_at                                           as created_at,\n      updated_at                                           as updated_at,\n      tags                                                 as tags,\n      available_hours_tag\n      from latest_stream\n      inner join positions\n        on latest_stream.position_id = positions.position_id\n)\n, assessments as (\n    select\n      renamed.*,\n      data_transcription_score,\n      english_language_score,\n      image_annotation_score,\n      web_research_score,\n      total_score,\n      iff(data_transcription_score < passing_score_threshold, false, true) as has_passed_data_transcription,\n      iff(english_language_score < passing_score_threshold, false, true) as has_passed_english_language,\n      iff(image_annotation_score < passing_score_threshold, false, true) as has_passed_image_annotation,\n      iff(web_research_score < passing_score_threshold, false, true) as has_passed_web_research\n    from renamed\n    left join assessments_source\n      on renamed.email = assessments_source.email\n)\n, stages as (\n    select\n        assessments.*,\n        \n        category_names.category_name\n    from assessments\n    left join category_names\n        on lower(assessments.stage_name) = lower(category_names.stage_name)\n)\n, availability as (\n    select\n        stages.*,\n\n        available_hours.hours_available\n    from stages\n    left join available_hours\n        on stages.available_hours_tag = available_hours.tag\n)\nselect * from availability", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezy_worker_pool"}, "model.edw.stg_breezyhr_candidate_document_streams": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith candidate_streams as (\n    select * from {{ ref('base_breezyhr_candidate_streams') }}\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:_id::string as document_event_id,\n        stream_object:creation_date::timestamp as document_creation_timestamp,\n        stream_object:file_name::string as document_file_name\n    from candidate_streams\n    where stream_type LIKE 'candidateDocument%'\n)\nselect * from filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezyhr_candidate_document_streams"], "unique_id": "model.edw.stg_breezyhr_candidate_document_streams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezyhr_candidate_document_streams.sql", "original_file_path": "models/psa/breezyhr/stg_breezyhr_candidate_document_streams.sql", "name": "stg_breezyhr_candidate_document_streams", "alias": "stg_breezyhr_candidate_document_streams", "checksum": {"name": "sha256", "checksum": "4037c35fd042fd85e5a87232f166b0e27b499fccfba5f494e80847f55c7d64c8"}, "tags": [], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {"document_event_id": {"name": "document_event_id", "description": "Seems like an ID generated when a document is linked with someone.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezyhr_candidate_document_streams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith candidate_streams as (\n    select * from psa_dev.scratch_brana.base_breezyhr_candidate_streams\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:_id::string as document_event_id,\n        stream_object:creation_date::timestamp as document_creation_timestamp,\n        stream_object:file_name::string as document_file_name\n    from candidate_streams\n    where stream_type LIKE 'candidateDocument%'\n)\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezyhr_candidate_document_streams"}, "model.edw.stg_breezyhr_candidates": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_breezyhr_candidates') }}\n),\nfinal as (\n    select\n        candidate_id,\n        created_at,\n        updated_at,\n        email,\n        name,\n        position_id,\n        phone,\n        resume_filename,\n        resume_url,\n        tags,\n        has_passed_data_transcription,\n        has_passed_image_annotation,\n        has_passed_web_research,\n        has_passed_english_language,\n        available_hours_tag\n    from source\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_candidates"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezyhr_candidates"], "unique_id": "model.edw.stg_breezyhr_candidates", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezyhr_candidates.sql", "original_file_path": "models/psa/breezyhr/stg_breezyhr_candidates.sql", "name": "stg_breezyhr_candidates", "alias": "stg_breezyhr_candidates", "checksum": {"name": "sha256", "checksum": "7a8ab92e4545ee948836d730ee46ea5e183fdf82218a84fd947d3dd36c845330"}, "tags": [], "refs": [["base_breezyhr_candidates"]], "sources": [], "description": "BreezyHR candidates information", "columns": {"candidate_id": {"name": "candidate_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezyhr_candidates.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_breezyhr_candidates\n),\nfinal as (\n    select\n        candidate_id,\n        created_at,\n        updated_at,\n        email,\n        name,\n        position_id,\n        phone,\n        resume_filename,\n        resume_url,\n        tags,\n        has_passed_data_transcription,\n        has_passed_image_annotation,\n        has_passed_web_research,\n        has_passed_english_language,\n        available_hours_tag\n    from source\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezyhr_candidates"}, "model.edw.stg_breezyhr_positions": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_breezyhr_positions') }}\n),\nfinal as (\n    select\n        position_id,\n        category_name,\n        created_at,\n        creator_id,\n        friendly_id,\n        city,\n        country,\n        name,\n        org_type,\n        state,\n        tags,\n        type_name,\n        updated_at\n    from source\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_positions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezyhr_positions"], "unique_id": "model.edw.stg_breezyhr_positions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezyhr_positions.sql", "original_file_path": "models/psa/breezyhr/stg_breezyhr_positions.sql", "name": "stg_breezyhr_positions", "alias": "stg_breezyhr_positions", "checksum": {"name": "sha256", "checksum": "820e627752f87976342da814c7517e31bbfb736745d37b1a5a198dd23162af6f"}, "tags": [], "refs": [["base_breezyhr_positions"]], "sources": [], "description": "", "columns": {"position_id": {"name": "position_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezyhr_positions.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_breezyhr_positions\n),\nfinal as (\n    select\n        position_id,\n        category_name,\n        created_at,\n        creator_id,\n        friendly_id,\n        city,\n        country,\n        name,\n        org_type,\n        state,\n        tags,\n        type_name,\n        updated_at\n    from source\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezyhr_positions"}, "model.edw.stg_worker_conversion": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('stg_worker_lifecycle') }}\n)\n, pre_set_group as (\n    select\n        *,\n        case\n            when pool_name <> lag(pool_name) over(partition by candidate_id order by entered_stage_at desc)\n            then 1\n            else 0\n        end\tas change_set\n    from source\n)\n, set_grouping as (\n    select\n\t    *,\n\t    sum(change_set) over(partition by candidate_id order by entered_stage_at desc) AS set_group\n    from pre_set_group\n)\n, set_group_numbering as (\n    select\n\t    *,\n\t    row_number() over(partition by candidate_id, set_group order by entered_stage_at asc) AS row_number\n    from set_grouping\n)\n, latest_set_group as (\n  select\n      candidate_id,\n      pool_name,\n      min(set_group) as min_set_group\n  from set_grouping\n  group by candidate_id, pool_name\n)\n,filtered as (\n    select\n      set_group_numbering.*\n  from set_group_numbering\n  inner join latest_set_group\n      on set_group_numbering.candidate_id = latest_set_group.candidate_id\n      and set_group_numbering.pool_name = latest_set_group.pool_name\n      and set_group_numbering.set_group = latest_set_group.min_set_group\n  where row_number = 1\n      and set_group_numbering.pool_name in ('Applying', 'Active', 'Waiting', 'Offboarded')\n)\n, pre_pivoted as (\n\tselect candidate_id,\n\t    pool_name,\n\t    entered_stage_at\n\tfrom filtered\n)\n, pivoted as (\n  select * from pre_pivoted\n  pivot(\n      min(entered_stage_at) for pool_name in (\n          'Applying',\n          'Waiting',\n          'Active',\n          'Offboarded'\n      )\n  ) as p (\n      candidate_id,\n      applied_at,\n      waiting_from,\n      hired_at,\n      resigned_at\n  )\n),\nduration_calculated as (\n    select\n        *,\n        iff( \n            hired_at is null, \n            datediff('days', applied_at, current_timestamp()), \n            datediff('days', applied_at, waiting_from)\n        ) as applied_duration_days,\n        iff( \n            hired_at is null, \n            datediff('days', waiting_from, current_timestamp()), \n            datediff('days', waiting_from, hired_at)\n        ) as waiting_pool_duration_days,\n        iff( \n            resigned_at is null, \n            datediff('days', hired_at, current_timestamp()), \n            datediff('days', hired_at, resigned_at)\n        ) as working_duration_days\n    from pivoted\n)\nselect * from duration_calculated", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.stg_worker_lifecycle"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_worker_conversion"], "unique_id": "model.edw.stg_worker_conversion", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_worker_conversion.sql", "original_file_path": "models/psa/breezyhr/stg_worker_conversion.sql", "name": "stg_worker_conversion", "alias": "stg_worker_conversion", "checksum": {"name": "sha256", "checksum": "865367c3ba43bc535dcc85818c112701c0525cb3614792874705c3e60fecdc89"}, "tags": [], "refs": [["stg_worker_lifecycle"]], "sources": [], "description": "", "columns": {"candidate_id": {"name": "candidate_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_at": {"name": "applied_at", "description": "Date when the candidate got added/moved into applying stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "waiting_from": {"name": "waiting_from", "description": "Date when the candidate got moved into waiting pool stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hired_at": {"name": "hired_at", "description": "Date when the candidate got moved into hired stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resigned_at": {"name": "resigned_at", "description": "Date when the candidate got moved into resigned stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_duration_days": {"name": "applied_duration_days", "description": "No of days the candidate stayed into applying stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "waiting_pool_duration_days": {"name": "waiting_pool_duration_days", "description": "No of days the candidate stayed into waiting pool stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "working_duration_days": {"name": "working_duration_days", "description": "No of days the candidate stayed into hired stages.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_worker_conversion.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.stg_worker_lifecycle\n)\n, pre_set_group as (\n    select\n        *,\n        case\n            when pool_name <> lag(pool_name) over(partition by candidate_id order by entered_stage_at desc)\n            then 1\n            else 0\n        end\tas change_set\n    from source\n)\n, set_grouping as (\n    select\n\t    *,\n\t    sum(change_set) over(partition by candidate_id order by entered_stage_at desc) AS set_group\n    from pre_set_group\n)\n, set_group_numbering as (\n    select\n\t    *,\n\t    row_number() over(partition by candidate_id, set_group order by entered_stage_at asc) AS row_number\n    from set_grouping\n)\n, latest_set_group as (\n  select\n      candidate_id,\n      pool_name,\n      min(set_group) as min_set_group\n  from set_grouping\n  group by candidate_id, pool_name\n)\n,filtered as (\n    select\n      set_group_numbering.*\n  from set_group_numbering\n  inner join latest_set_group\n      on set_group_numbering.candidate_id = latest_set_group.candidate_id\n      and set_group_numbering.pool_name = latest_set_group.pool_name\n      and set_group_numbering.set_group = latest_set_group.min_set_group\n  where row_number = 1\n      and set_group_numbering.pool_name in ('Applying', 'Active', 'Waiting', 'Offboarded')\n)\n, pre_pivoted as (\n\tselect candidate_id,\n\t    pool_name,\n\t    entered_stage_at\n\tfrom filtered\n)\n, pivoted as (\n  select * from pre_pivoted\n  pivot(\n      min(entered_stage_at) for pool_name in (\n          'Applying',\n          'Waiting',\n          'Active',\n          'Offboarded'\n      )\n  ) as p (\n      candidate_id,\n      applied_at,\n      waiting_from,\n      hired_at,\n      resigned_at\n  )\n),\nduration_calculated as (\n    select\n        *,\n        iff( \n            hired_at is null, \n            datediff('days', applied_at, current_timestamp()), \n            datediff('days', applied_at, waiting_from)\n        ) as applied_duration_days,\n        iff( \n            hired_at is null, \n            datediff('days', waiting_from, current_timestamp()), \n            datediff('days', waiting_from, hired_at)\n        ) as waiting_pool_duration_days,\n        iff( \n            resigned_at is null, \n            datediff('days', hired_at, current_timestamp()), \n            datediff('days', hired_at, resigned_at)\n        ) as working_duration_days\n    from pivoted\n)\nselect * from duration_calculated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_worker_conversion"}, "model.edw.stg_breezyhr_candidate_status_streams": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith candidate_streams as (\n    select * from {{ ref('base_breezyhr_candidate_streams') }}\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:entered_previous_stage::timestamp                                          as entered_previous_stage_at,\n        iff(stream_type = 'candidateAdded', streamed_at, stream_object:entered_stage::timestamp) as entered_stage_at,\n        stream_object:stage:type:name::string                                                    as stage_type_name,\n        iff(stream_type = 'candidateAdded', 'Applied', stream_object:stage:name::string)         as stage_name,\n        stream_object:stage_was:name::string                                                     as previous_stage_name,\n        iff(stream_object:is_automated::boolean, true, false)                                    as is_automated,\n        stream_object:status::string                                                             as stage_id,\n        stream_object:status_was::string                                                         as previous_stage_id\n    from candidate_streams\n    where stream_type LIKE 'candidateStatus%'\n    or stream_type = 'candidateAdded'\n    {# or stream_type = 'candidateAssignedPosted' #}\n),\n{#\n    CTEs dedup_count, dedup\n    There are some records that are duplicates but have unique stream id.\n    We want only dedup the duplicate records.\n#}\n\n{#\n    Counting the duplicates by candidate_id and entered_previous_stage_at\n#}\ndedup_count as (\n    select\n        candidate_id,\n        stream_each_id,\n        row_number() over(partition by candidate_id, entered_previous_stage_at order by entered_stage_at desc) as dupcount\n    from filtered\n),\n{#\n    Selecting the latest stream from the duplicates.\n    The entered_previous_stage_at is ordered in descending, therefore the non duplicates and the latest record has the value of 1.\n    Joining the group with the original record and filtering the non duplicates and the latest record.\n #}\ndedup as (\n    select\n        filtered.*\n    from filtered\n    inner join dedup_count\n        on filtered.candidate_id = dedup_count.candidate_id\n        and filtered.stream_each_id = dedup_count.stream_each_id\n    where dedup_count.dupcount = 1\n)\n\nselect * from dedup", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezyhr_candidate_status_streams"], "unique_id": "model.edw.stg_breezyhr_candidate_status_streams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezyhr_candidate_status_streams.sql", "original_file_path": "models/psa/breezyhr/stg_breezyhr_candidate_status_streams.sql", "name": "stg_breezyhr_candidate_status_streams", "alias": "stg_breezyhr_candidate_status_streams", "checksum": {"name": "sha256", "checksum": "bc2216252bc0297e1cd125397e47490780fb0ed12e5b57eae5b0c9b1a9065a8e"}, "tags": [], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezyhr_candidate_status_streams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith candidate_streams as (\n    select * from psa_dev.scratch_brana.base_breezyhr_candidate_streams\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:entered_previous_stage::timestamp                                          as entered_previous_stage_at,\n        iff(stream_type = 'candidateAdded', streamed_at, stream_object:entered_stage::timestamp) as entered_stage_at,\n        stream_object:stage:type:name::string                                                    as stage_type_name,\n        iff(stream_type = 'candidateAdded', 'Applied', stream_object:stage:name::string)         as stage_name,\n        stream_object:stage_was:name::string                                                     as previous_stage_name,\n        iff(stream_object:is_automated::boolean, true, false)                                    as is_automated,\n        stream_object:status::string                                                             as stage_id,\n        stream_object:status_was::string                                                         as previous_stage_id\n    from candidate_streams\n    where stream_type LIKE 'candidateStatus%'\n    or stream_type = 'candidateAdded'\n    \n),\n\n\n\ndedup_count as (\n    select\n        candidate_id,\n        stream_each_id,\n        row_number() over(partition by candidate_id, entered_previous_stage_at order by entered_stage_at desc) as dupcount\n    from filtered\n),\n\ndedup as (\n    select\n        filtered.*\n    from filtered\n    inner join dedup_count\n        on filtered.candidate_id = dedup_count.candidate_id\n        and filtered.stream_each_id = dedup_count.stream_each_id\n    where dedup_count.dupcount = 1\n)\n\nselect * from dedup", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezyhr_candidate_status_streams"}, "model.edw.stg_worker_lifecycle": {"raw_sql": "{{\n  config(\n    materialized = 'table',\n    )\n}}\n\nwith candidate_status_streams as (\n    select * from {{ ref('stg_breezyhr_candidate_status_streams') }}\n),\nexternal_stages as (\n    select * from {{ source('breezy_categories', 'external') }}\n),\ninternal_stages as (\n    select * from {{ source('breezy_categories', 'internal') }}\n),\nwhitelist as (\n    select position_id, category, pool from {{ source('breezy_categories', 'positions') }} where whitelist_blacklist = 'Whitelist'\n),\npositions as (\n    select * from {{ ref('stg_breezyhr_positions') }}\n),\nstages as (\n    select * from external_stages\n    union\n    select * from internal_stages\n),\n{# Get streams of only whitelisted positions. #}\nwhitelisted_position_streams as (\n    select\n        candidate_status_streams.*,\n        whitelist.category,\n        whitelist.pool\n    from candidate_status_streams\n    inner join whitelist\n        on candidate_status_streams.position_id = whitelist.position_id\n),\nstage_mapped as (\n    select\n        *,\n        iff(\n            whitelisted_position_streams.category in ('External', 'Internal'),\n            stages.categories,\n            whitelisted_position_streams.category\n        ) as category_name,\n        iff(\n            whitelisted_position_streams.pool in ('External', 'Internal'),\n            stages.pool,\n            whitelisted_position_streams.pool\n        ) as pool_name\n    from whitelisted_position_streams\n    left join stages\n        on whitelisted_position_streams.stage_name = stages.stages\n),\nfinal as (\n    select\n        stage_mapped.candidate_id,\n        positions.position_id,\n        positions.name as position_name,\n        stage_mapped.stage_name,\n        stage_mapped.entered_stage_at,\n        stage_mapped.category_name,\n        stage_mapped.pool_name\n    from stage_mapped\n    inner join positions\n        on stage_mapped.position_id = positions.position_id\n    order by candidate_id, entered_stage_at desc\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.breezy_categories.external", "source.edw.breezy_categories.internal", "source.edw.breezy_categories.positions", "model.edw.stg_breezyhr_candidate_status_streams", "model.edw.stg_breezyhr_positions"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_worker_lifecycle"], "unique_id": "model.edw.stg_worker_lifecycle", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_worker_lifecycle.sql", "original_file_path": "models/psa/breezyhr/stg_worker_lifecycle.sql", "name": "stg_worker_lifecycle", "alias": "stg_worker_lifecycle", "checksum": {"name": "sha256", "checksum": "56308e0746a5a9b29a0b05659a4d3b2fe41139302d6c41c72f782664830aba24"}, "tags": [], "refs": [["stg_breezyhr_candidate_status_streams"], ["stg_breezyhr_positions"]], "sources": [["breezy_categories", "external"], ["breezy_categories", "internal"], ["breezy_categories", "positions"]], "description": "", "columns": {"candidate_id": {"name": "candidate_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_worker_lifecycle.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "table", "schema": "breezyhr"}, "compiled_sql": "\n\nwith candidate_status_streams as (\n    select * from psa_dev.scratch_brana.stg_breezyhr_candidate_status_streams\n),\nexternal_stages as (\n    select * from raw.breezy_categories_stitch.external\n),\ninternal_stages as (\n    select * from raw.breezy_categories_stitch.internal\n),\nwhitelist as (\n    select position_id, category, pool from raw.breezy_categories_stitch.positions where whitelist_blacklist = 'Whitelist'\n),\npositions as (\n    select * from psa_dev.scratch_brana.stg_breezyhr_positions\n),\nstages as (\n    select * from external_stages\n    union\n    select * from internal_stages\n),\n\nwhitelisted_position_streams as (\n    select\n        candidate_status_streams.*,\n        whitelist.category,\n        whitelist.pool\n    from candidate_status_streams\n    inner join whitelist\n        on candidate_status_streams.position_id = whitelist.position_id\n),\nstage_mapped as (\n    select\n        *,\n        iff(\n            whitelisted_position_streams.category in ('External', 'Internal'),\n            stages.categories,\n            whitelisted_position_streams.category\n        ) as category_name,\n        iff(\n            whitelisted_position_streams.pool in ('External', 'Internal'),\n            stages.pool,\n            whitelisted_position_streams.pool\n        ) as pool_name\n    from whitelisted_position_streams\n    left join stages\n        on whitelisted_position_streams.stage_name = stages.stages\n),\nfinal as (\n    select\n        stage_mapped.candidate_id,\n        positions.position_id,\n        positions.name as position_name,\n        stage_mapped.stage_name,\n        stage_mapped.entered_stage_at,\n        stage_mapped.category_name,\n        stage_mapped.pool_name\n    from stage_mapped\n    inner join positions\n        on stage_mapped.position_id = positions.position_id\n    order by candidate_id, entered_stage_at desc\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_worker_lifecycle"}, "model.edw.stg_breezyhr_candidate_questionnaire_streams": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith candidate_streams as (\n    select * from {{ ref('base_breezyhr_candidate_streams') }}\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:_id::string as questionnaire_event_id,\n        stream_object:questionnaire_id::string as questionnaire_id,\n        stream_object:name::string as questionnaire_name,\n        stream_object:status::string as questionnaire_status,\n        stream_object:creation_date::timestamp as questionnaire_created_timestamp,\n        stream_object:updated_date::timestamp as questionnaire_updated_timestamp\n    from candidate_streams\n    where stream_type LIKE 'questionnaire%'\n)\nselect *\nfrom filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "stg_breezyhr_candidate_questionnaire_streams"], "unique_id": "model.edw.stg_breezyhr_candidate_questionnaire_streams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/stg_breezyhr_candidate_questionnaire_streams.sql", "original_file_path": "models/psa/breezyhr/stg_breezyhr_candidate_questionnaire_streams.sql", "name": "stg_breezyhr_candidate_questionnaire_streams", "alias": "stg_breezyhr_candidate_questionnaire_streams", "checksum": {"name": "sha256", "checksum": "68f05cc728ce09632d5df3884a9ebf2a220ab7842dc7fb90d75f72200d322732"}, "tags": [], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {"questionnaire_event_id": {"name": "questionnaire_event_id", "description": "Seems like an ID generated when a questionnaire is linked with someone.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/stg_breezyhr_candidate_questionnaire_streams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith candidate_streams as (\n    select * from psa_dev.scratch_brana.base_breezyhr_candidate_streams\n),\nfiltered as (\n    select\n        candidate_streams.*,\n        stream_object:_id::string as questionnaire_event_id,\n        stream_object:questionnaire_id::string as questionnaire_id,\n        stream_object:name::string as questionnaire_name,\n        stream_object:status::string as questionnaire_status,\n        stream_object:creation_date::timestamp as questionnaire_created_timestamp,\n        stream_object:updated_date::timestamp as questionnaire_updated_timestamp\n    from candidate_streams\n    where stream_type LIKE 'questionnaire%'\n)\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_breezyhr_candidate_questionnaire_streams"}, "model.edw.base_breezyhr_candidate_meta": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('breezyhr','candidate_meta') }}\n),\nrenamed as (\n    select\n        _ID                  as candidate_id,\n        ASSESSMENTS          as assessments,\n        BACKGROUND_CHECKS    as background_checks,\n        CONVERSATION         as conversation,\n        CUSTOM_FIELDS        as custom_fields,\n        DOCUMENTS            as documents,\n        MATCH_SCORE          as match_score,\n        NOTEPAD              as notepad,\n        OTHER_ASSESSMENTS    as other_assessments,\n        OTHER_DOCUMENTS      as other_documents,\n        OTHER_QUESTIONNAIRES as other_questionnaires,\n        OTHER_REFERENCES     as other_references,\n        OTHERS               as others,\n        QUESTIONNAIRES       as questionnaires,\n        REFERENCES           as references,\n        SCHEDULE             as schedule,\n        SCORECARDS           as scorecards,\n        STREAM               as stream,\n        TASKS                as tasks,\n        TEAM_NOTEPAD         as team_notepad,\n        UPDATED_DATE         as meta_updated_at\n        from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.breezyhr.candidate_meta"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "base", "base_breezyhr_candidate_meta"], "unique_id": "model.edw.base_breezyhr_candidate_meta", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/base/base_breezyhr_candidate_meta.sql", "original_file_path": "models/psa/breezyhr/base/base_breezyhr_candidate_meta.sql", "name": "base_breezyhr_candidate_meta", "alias": "base_breezyhr_candidate_meta", "checksum": {"name": "sha256", "checksum": "471d9f9fb8b2368a4fe9075632ceb3ef63af7bdf82a541178da7424932156800"}, "tags": [], "refs": [], "sources": [["breezyhr", "candidate_meta"]], "description": "", "columns": {"candidate_id": {"name": "candidate_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/base/base_breezyhr_candidate_meta.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.breezyhr_singer.candidate_meta\n),\nrenamed as (\n    select\n        _ID                  as candidate_id,\n        ASSESSMENTS          as assessments,\n        BACKGROUND_CHECKS    as background_checks,\n        CONVERSATION         as conversation,\n        CUSTOM_FIELDS        as custom_fields,\n        DOCUMENTS            as documents,\n        MATCH_SCORE          as match_score,\n        NOTEPAD              as notepad,\n        OTHER_ASSESSMENTS    as other_assessments,\n        OTHER_DOCUMENTS      as other_documents,\n        OTHER_QUESTIONNAIRES as other_questionnaires,\n        OTHER_REFERENCES     as other_references,\n        OTHERS               as others,\n        QUESTIONNAIRES       as questionnaires,\n        REFERENCES           as references,\n        SCHEDULE             as schedule,\n        SCORECARDS           as scorecards,\n        STREAM               as stream,\n        TASKS                as tasks,\n        TEAM_NOTEPAD         as team_notepad,\n        UPDATED_DATE         as meta_updated_at\n        from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_breezyhr_candidate_meta"}, "model.edw.base_breezyhr_candidates": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith source as (\n    select * from {{ source('breezyhr','candidates') }}\n),\nflattened as (\n    select\n        *,\n        RESUME:file_name::string as resume_filename,\n        RESUME:url::string as resume_url,\n        SOURCE:name::string as source_name,\n        STAGE:id::string as stage_id,\n        STAGE:name::string as stage_name\n    from source\n),\nrenamed as (\n    select\n        _ID                as candidate_id,\n        ADDRESS            as address,\n        COVER_LETTER       as cover_letter,\n        CREATION_DATE      as created_at,\n        CUSTOM_ATTRIBUTES  as custom_attributes,\n        DISPOSITION_DATE   as dispositioned_at,\n        DISPOSITION_REASON as dispositioned_reason,\n        EDUCATION          as education,\n        EMAIL_ADDRESS      as email,\n        FOLLOWED_BY        as followed_by,\n        HEADLINE           as headline,\n        INITIAL            as initial,\n        META_ID            as candidate_meta_id,\n        NAME               as name,\n        ORIGIN             as origin,\n        POSITION_ID        as position_id,\n        PHONE_NUMBER       as phone,\n        PROFILE_PHOTO_URL  as profile_photo_url,\n        RECRUITED_BY       as recruited_by,\n        REFERRED_BY        as referred_by,\n        RESUME             as resume,\n        resume_filename,\n        resume_url,\n        SOCIAL_PROFILES    as social_profiles,\n        SOURCE             as source,\n        SOURCED_BY         as sourced_by,\n        STAGE              as stage,\n        SUMMARY            as summary,\n        TAGS               as tags,\n        UPDATED_DATE       as updated_at,\n        WORK_HISTORY       as work_history,\n        OVERALL_SCORE      as overall_score\n        from flattened\n)\n, final as (\n    select\n        *,\n        iff(contains(tags,'data-transcription') > 0, true, false) as has_passed_data_transcription,\n            iff(contains(tags,'image-annotation') > 0, true, false)   as has_passed_image_annotation,\n            iff(contains(tags,'web-research') > 0, true, false)       as has_passed_web_research,\n            iff(contains(tags,'english-language') > 0, true, false)   as has_passed_english_language,\n            regexp_substr(tags, 'hrs[+]?: ([^\"\"]+)',1,1,'e')          as available_hours_tag\n    from renamed\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.breezyhr.candidates"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "base", "base_breezyhr_candidates"], "unique_id": "model.edw.base_breezyhr_candidates", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/base/base_breezyhr_candidates.sql", "original_file_path": "models/psa/breezyhr/base/base_breezyhr_candidates.sql", "name": "base_breezyhr_candidates", "alias": "base_breezyhr_candidates", "checksum": {"name": "sha256", "checksum": "71ce59b8b59e7c9751d13f49953077065edc997b6a8b7cfdf801b274ae69530e"}, "tags": [], "refs": [], "sources": [["breezyhr", "candidates"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/base/base_breezyhr_candidates.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "table", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.breezyhr_singer.candidates\n),\nflattened as (\n    select\n        *,\n        RESUME:file_name::string as resume_filename,\n        RESUME:url::string as resume_url,\n        SOURCE:name::string as source_name,\n        STAGE:id::string as stage_id,\n        STAGE:name::string as stage_name\n    from source\n),\nrenamed as (\n    select\n        _ID                as candidate_id,\n        ADDRESS            as address,\n        COVER_LETTER       as cover_letter,\n        CREATION_DATE      as created_at,\n        CUSTOM_ATTRIBUTES  as custom_attributes,\n        DISPOSITION_DATE   as dispositioned_at,\n        DISPOSITION_REASON as dispositioned_reason,\n        EDUCATION          as education,\n        EMAIL_ADDRESS      as email,\n        FOLLOWED_BY        as followed_by,\n        HEADLINE           as headline,\n        INITIAL            as initial,\n        META_ID            as candidate_meta_id,\n        NAME               as name,\n        ORIGIN             as origin,\n        POSITION_ID        as position_id,\n        PHONE_NUMBER       as phone,\n        PROFILE_PHOTO_URL  as profile_photo_url,\n        RECRUITED_BY       as recruited_by,\n        REFERRED_BY        as referred_by,\n        RESUME             as resume,\n        resume_filename,\n        resume_url,\n        SOCIAL_PROFILES    as social_profiles,\n        SOURCE             as source,\n        SOURCED_BY         as sourced_by,\n        STAGE              as stage,\n        SUMMARY            as summary,\n        TAGS               as tags,\n        UPDATED_DATE       as updated_at,\n        WORK_HISTORY       as work_history,\n        OVERALL_SCORE      as overall_score\n        from flattened\n)\n, final as (\n    select\n        *,\n        iff(contains(tags,'data-transcription') > 0, true, false) as has_passed_data_transcription,\n            iff(contains(tags,'image-annotation') > 0, true, false)   as has_passed_image_annotation,\n            iff(contains(tags,'web-research') > 0, true, false)       as has_passed_web_research,\n            iff(contains(tags,'english-language') > 0, true, false)   as has_passed_english_language,\n            regexp_substr(tags, 'hrs[+]?: ([^\"\"]+)',1,1,'e')          as available_hours_tag\n    from renamed\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_breezyhr_candidates"}, "model.edw.base_breezyhr_candidate_streams": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_breezyhr_candidate_meta') }}\n),\n\nflattened as (\n    select\n        s.candidate_id,\n        f.value:_id::string as stream_each_id,\n        case \n            when f.value:first_activity::boolean then true\n            else false\n        end as is_first_activity,\n        case \n            when f.value:first_of_day::boolean then true\n            else false\n        end as is_first_of_day,\n        f.value:object::object as stream_object,\n        f.value:object:acting_user:_id::string as acting_user_id,\n        f.value:object:mentioned_ids::array as mentioned_ids,\n        f.value:object:position_id::string as position_id,\n        f.value:stream_id::string as stream_id,\n        f.value:timestamp::timestamp as streamed_at,\n        f.value:type::string as stream_type\n    from source as s,\n        lateral flatten(input => s.stream) as f\n)\n\nselect * from flattened", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_breezyhr_candidate_meta"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "base", "base_breezyhr_candidate_streams"], "unique_id": "model.edw.base_breezyhr_candidate_streams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/base/base_breezyhr_candidate_streams.sql", "original_file_path": "models/psa/breezyhr/base/base_breezyhr_candidate_streams.sql", "name": "base_breezyhr_candidate_streams", "alias": "base_breezyhr_candidate_streams", "checksum": {"name": "sha256", "checksum": "2fcb04d4d72e95b4ccc30238a772d77bccbf8cb2af35e3dd08176053028a34f9"}, "tags": [], "refs": [["base_breezyhr_candidate_meta"]], "sources": [], "description": "", "columns": {"stream_type": {"name": "stream_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/breezyhr/schema.yml", "build_path": "target/compiled/edw/models/psa/breezyhr/base/base_breezyhr_candidate_streams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_breezyhr_candidate_meta\n),\n\nflattened as (\n    select\n        s.candidate_id,\n        f.value:_id::string as stream_each_id,\n        case \n            when f.value:first_activity::boolean then true\n            else false\n        end as is_first_activity,\n        case \n            when f.value:first_of_day::boolean then true\n            else false\n        end as is_first_of_day,\n        f.value:object::object as stream_object,\n        f.value:object:acting_user:_id::string as acting_user_id,\n        f.value:object:mentioned_ids::array as mentioned_ids,\n        f.value:object:position_id::string as position_id,\n        f.value:stream_id::string as stream_id,\n        f.value:timestamp::timestamp as streamed_at,\n        f.value:type::string as stream_type\n    from source as s,\n        lateral flatten(input => s.stream) as f\n)\n\nselect * from flattened", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_breezyhr_candidate_streams"}, "model.edw.base_breezyhr_positions": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select\n        *\n    from {{ source('breezyhr','positions') }}\n),\nexpanded as (\n    select\n        *,\n        CATEGORY:name::string         as category_name,\n        LOCATION:city::string         as city,\n        LOCATION:country:name::string as country,\n        TYPE:name::string      as type_name\n    from source\n),\nrenamed as (\n    select\n        _ID               as position_id,\n        ALL_ADMINS        as all_admins,\n        ALL_USERS         as all_users,\n        APPLICATION_FORM  as application_form,\n        CANDIDATE_TYPE    as candidate_type,\n        CATEGORY          as category,\n        category_name,\n        CREATION_DATE     as created_at,\n        CREATOR_ID        as creator_id,\n        CUSTOM_ATTRIBUTES as custom_attributes,\n        DEPARTMENT        as department,\n        DESCRIPTION       as description,\n        EDUCATION         as education,\n        EXPERIENCE        as experience,\n        FRIENDLY_ID       as friendly_id,\n        LOCATION          as location,\n        city,\n        country,\n        NAME              as name,\n        ORG_TYPE          as org_type,\n        PENDING_APPROVAL  as pending_approval,\n        PIPELINE_ID       as pipeline_id,\n        QUESTIONNAIRE_ID  as questionnaire_id,\n        REQUISITION_ID    as requisition_id,\n        SCORECARD_ID      as scorecard_id,\n        STATE             as state,\n        TAGS              as tags,\n        TYPE              as type,\n        type_name,\n        UPDATED_DATE      as updated_at\n        from expanded\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.breezyhr.positions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezyhr", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezyhr", "base", "base_breezyhr_positions"], "unique_id": "model.edw.base_breezyhr_positions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezyhr/base/base_breezyhr_positions.sql", "original_file_path": "models/psa/breezyhr/base/base_breezyhr_positions.sql", "name": "base_breezyhr_positions", "alias": "base_breezyhr_positions", "checksum": {"name": "sha256", "checksum": "b9200ee13201addd59bf01b040c917b9bad93dfb6e12f836f14d016f8d7d783a"}, "tags": [], "refs": [], "sources": [["breezyhr", "positions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/base/base_breezyhr_positions.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezyhr"}, "compiled_sql": "\n\nwith source as (\n    select\n        *\n    from raw.breezyhr_singer.positions\n),\nexpanded as (\n    select\n        *,\n        CATEGORY:name::string         as category_name,\n        LOCATION:city::string         as city,\n        LOCATION:country:name::string as country,\n        TYPE:name::string      as type_name\n    from source\n),\nrenamed as (\n    select\n        _ID               as position_id,\n        ALL_ADMINS        as all_admins,\n        ALL_USERS         as all_users,\n        APPLICATION_FORM  as application_form,\n        CANDIDATE_TYPE    as candidate_type,\n        CATEGORY          as category,\n        category_name,\n        CREATION_DATE     as created_at,\n        CREATOR_ID        as creator_id,\n        CUSTOM_ATTRIBUTES as custom_attributes,\n        DEPARTMENT        as department,\n        DESCRIPTION       as description,\n        EDUCATION         as education,\n        EXPERIENCE        as experience,\n        FRIENDLY_ID       as friendly_id,\n        LOCATION          as location,\n        city,\n        country,\n        NAME              as name,\n        ORG_TYPE          as org_type,\n        PENDING_APPROVAL  as pending_approval,\n        PIPELINE_ID       as pipeline_id,\n        QUESTIONNAIRE_ID  as questionnaire_id,\n        REQUISITION_ID    as requisition_id,\n        SCORECARD_ID      as scorecard_id,\n        STATE             as state,\n        TAGS              as tags,\n        TYPE              as type,\n        type_name,\n        UPDATED_DATE      as updated_at\n        from expanded\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_breezyhr_positions"}, "model.edw.base_users_delivery_hubs": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('users', 'delivery_hubs') }}\n),\nrenamed as (\n    select\n        code as delivery_hub_code,\n        country,\n        created_at,\n        id as delivery_hub_id,\n        name as delivery_hub_name,\n        seats as seat_count,\n        status as delivery_hub_status,\n        \"GROUP\" as delivery_hub_group,\n        time_zone,\n        uid as delivery_hub_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.users.delivery_hubs"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "users", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "users", "base", "base_users_delivery_hubs"], "unique_id": "model.edw.base_users_delivery_hubs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/users/base/base_users_delivery_hubs.sql", "original_file_path": "models/psa/users/base/base_users_delivery_hubs.sql", "name": "base_users_delivery_hubs", "alias": "base_users_delivery_hubs", "checksum": {"name": "sha256", "checksum": "b69254ebb3fa9c4825eb4d8e06fe3cd5a0ce5c4f2264c140db72a22e40d18a51"}, "tags": [], "refs": [], "sources": [["users", "delivery_hubs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/users/schema.yml", "build_path": "target/compiled/edw/models/psa/users/base/base_users_delivery_hubs.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "users"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.users_ppw.delivery_hubs\n),\nrenamed as (\n    select\n        code as delivery_hub_code,\n        country,\n        created_at,\n        id as delivery_hub_id,\n        name as delivery_hub_name,\n        seats as seat_count,\n        status as delivery_hub_status,\n        \"GROUP\" as delivery_hub_group,\n        time_zone,\n        uid as delivery_hub_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_users_delivery_hubs"}, "model.edw.base_users_users": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('users', 'users') }}\n),\nrenamed as (\n    select\n        created_at,\n        email as email_address,\n        id as user_id,\n        status as user_status,\n        type as user_type,\n        uid as user_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.users.users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "users", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "users", "base", "base_users_users"], "unique_id": "model.edw.base_users_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/users/base/base_users_users.sql", "original_file_path": "models/psa/users/base/base_users_users.sql", "name": "base_users_users", "alias": "base_users_users", "checksum": {"name": "sha256", "checksum": "33b363997a251d55f9d9d802fcb2d05b5a75f4aa63b5084d2fcb3d965768a815"}, "tags": [], "refs": [], "sources": [["users", "users"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/users/schema.yml", "build_path": "target/compiled/edw/models/psa/users/base/base_users_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "users"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.users_ppw.users\n),\nrenamed as (\n    select\n        created_at,\n        email as email_address,\n        id as user_id,\n        status as user_status,\n        type as user_type,\n        uid as user_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_users_users"}, "model.edw.base_users_slots": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('users', 'slots') }}\n),\nrenamed as (\n    select\n        batch,\n        code as slot_code,\n        base_code,\n        created_at,\n        to_time( left(end_time, 5) ) as slot_end_time,\n        id as slot_id,\n        to_time( left(start_time, 5) ) as slot_start_time,\n        uid as slot_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.users.slots"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "users", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "users", "base", "base_users_slots"], "unique_id": "model.edw.base_users_slots", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/users/base/base_users_slots.sql", "original_file_path": "models/psa/users/base/base_users_slots.sql", "name": "base_users_slots", "alias": "base_users_slots", "checksum": {"name": "sha256", "checksum": "3b9dd2c293116768187f5553a3c1b800c2043e1ad6569c7c4a075b3b67f084bc"}, "tags": [], "refs": [], "sources": [["users", "slots"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/users/schema.yml", "build_path": "target/compiled/edw/models/psa/users/base/base_users_slots.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "users"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.users_ppw.slots\n),\nrenamed as (\n    select\n        batch,\n        code as slot_code,\n        base_code,\n        created_at,\n        to_time( left(end_time, 5) ) as slot_end_time,\n        id as slot_id,\n        to_time( left(start_time, 5) ) as slot_start_time,\n        uid as slot_uid,\n        updated_at,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_users_slots"}, "model.edw.base_users_time_entries": {"raw_sql": "{{\n    config(\n        materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('users', 'time_entries') }}\n\n),\nrenamed as (\n\n    select\n        created_at,\n        custom_attributes,\n        delivery_hub_id,\n        duration                    as time_entry_duration,\n        end_datetime                as time_entry_end_at,\n        id                          as time_entry_id,\n        notes,\n        overage                     as is_overage,\n        premium_for_client          as is_premium_for_client,\n        premium_for_worker          as is_premium_for_worker,\n        project_id,\n        schedule_id,\n        slot_id,\n        to_date(start_date)         as start_date,\n        start_datetime              as time_entry_start_at,\n        to_date(start_datetime)     as time_entry_date_key,\n        task_id,\n        timer                       as has_timer,\n        uid                         as time_entry_uid,\n        1                           as time_entries_count,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_deleted_at\n\n    from\n        source\n\n)\n\nselect * from renamed\nwhere 1=1\n    -- exclude test and outdated data\n    and time_entry_duration is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.users.time_entries"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "users", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "users", "base", "base_users_time_entries"], "unique_id": "model.edw.base_users_time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/users/base/base_users_time_entries.sql", "original_file_path": "models/psa/users/base/base_users_time_entries.sql", "name": "base_users_time_entries", "alias": "base_users_time_entries", "checksum": {"name": "sha256", "checksum": "1b7d3ec57e5826499063ad0edf6a2586e88d3a5cb4e43f9d911f2e35e481305d"}, "tags": [], "refs": [], "sources": [["users", "time_entries"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/users/base/base_users_time_entries.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "users"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.users_ppw.time_entries\n\n),\nrenamed as (\n\n    select\n        created_at,\n        custom_attributes,\n        delivery_hub_id,\n        duration                    as time_entry_duration,\n        end_datetime                as time_entry_end_at,\n        id                          as time_entry_id,\n        notes,\n        overage                     as is_overage,\n        premium_for_client          as is_premium_for_client,\n        premium_for_worker          as is_premium_for_worker,\n        project_id,\n        schedule_id,\n        slot_id,\n        to_date(start_date)         as start_date,\n        start_datetime              as time_entry_start_at,\n        to_date(start_datetime)     as time_entry_date_key,\n        task_id,\n        timer                       as has_timer,\n        uid                         as time_entry_uid,\n        1                           as time_entries_count,\n        updated_at,\n        user_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_deleted_at\n\n    from\n        source\n\n)\n\nselect * from renamed\nwhere 1=1\n    -- exclude test and outdated data\n    and time_entry_duration is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_users_time_entries"}, "model.edw.base_users_profiles": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('users', 'profiles') }}\n\n)\n, renamed as (\n\n    select\n        address as user_address,\n        avatar,\n        bio,\n        company as user_company,\n        contact_channels,\n        created_at,\n        custom_attributes,\n        date_of_birth,\n        emergency_contact_name,\n        emergency_contact_number,\n        emergency_contact_relation,\n        first_name,\n        flow_email as flow_email_address,\n        gender,\n        id as user_profile_id,\n        identification_document_number,\n        identification_document_type,\n        last_name,\n        meta_info,\n        officer_id,\n        pan_number,\n        phone_numbers,\n        social_profiles,\n        time_zone,\n        title as user_title,\n        updated_at,\n        user_id as user_uid,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n\n)\n, cust_arr as (\n\n    select\n        user_profile_id,\n        lower(custom.value:name) as col_name,\n        lower(custom.value:value) as col_value\n    from renamed,\n        lateral flatten(input=> parse_json(renamed.custom_attributes)) custom\n\n)\n, pivoted as (\n\n    select\n        * \n    from cust_arr\n        pivot(\n            min(col_value) for col_name in (\n                'avid email',\n                'avid cohort'\n            ))\n        as pvt (\n            user_profile_id,\n            avid_email_address,\n            avid_cohort\n        )\n\n)\n, joined as (\n\n    select\n        renamed.*,\n        pivoted.avid_email_address,\n        pivoted.avid_cohort\n    from renamed \n    inner join pivoted \n        on renamed.user_profile_id = pivoted.user_profile_id\n        \n)\nselect * from joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.users.profiles"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "users", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "users", "base", "base_users_profiles"], "unique_id": "model.edw.base_users_profiles", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/users/base/base_users_profiles.sql", "original_file_path": "models/psa/users/base/base_users_profiles.sql", "name": "base_users_profiles", "alias": "base_users_profiles", "checksum": {"name": "sha256", "checksum": "f8ec923883627245be6f5ab30cc6b7ec0b0182910d8a60d110b9fb7dc3e8710b"}, "tags": [], "refs": [], "sources": [["users", "profiles"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/users/base/base_users_profiles.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "users"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.users_ppw.profiles\n\n)\n, renamed as (\n\n    select\n        address as user_address,\n        avatar,\n        bio,\n        company as user_company,\n        contact_channels,\n        created_at,\n        custom_attributes,\n        date_of_birth,\n        emergency_contact_name,\n        emergency_contact_number,\n        emergency_contact_relation,\n        first_name,\n        flow_email as flow_email_address,\n        gender,\n        id as user_profile_id,\n        identification_document_number,\n        identification_document_type,\n        last_name,\n        meta_info,\n        officer_id,\n        pan_number,\n        phone_numbers,\n        social_profiles,\n        time_zone,\n        title as user_title,\n        updated_at,\n        user_id as user_uid,\n        _sdc_batched_at,\n        _sdc_extracted_at\n    from source\n\n)\n, cust_arr as (\n\n    select\n        user_profile_id,\n        lower(custom.value:name) as col_name,\n        lower(custom.value:value) as col_value\n    from renamed,\n        lateral flatten(input=> parse_json(renamed.custom_attributes)) custom\n\n)\n, pivoted as (\n\n    select\n        * \n    from cust_arr\n        pivot(\n            min(col_value) for col_name in (\n                'avid email',\n                'avid cohort'\n            ))\n        as pvt (\n            user_profile_id,\n            avid_email_address,\n            avid_cohort\n        )\n\n)\n, joined as (\n\n    select\n        renamed.*,\n        pivoted.avid_email_address,\n        pivoted.avid_cohort\n    from renamed \n    inner join pivoted \n        on renamed.user_profile_id = pivoted.user_profile_id\n        \n)\nselect * from joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_users_profiles"}, "model.edw.base_breezy_categories": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith external_source as (\n\n    select * from {{ source('breezy_categories', 'external') }}\n\n)\n, internal_source as (\n\n    select * from {{ source('breezy_categories', 'internal') }}\n\n)\n, unioned as (\n\n    select categories as category_name, stages as stage_name from internal_source\n    union\n    select categories as category_name, stages as stage_name from external_source\n\n)\nselect * from unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.breezy_categories.external", "source.edw.breezy_categories.internal"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "breezy", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "breezy", "base", "base_breezy_categories"], "unique_id": "model.edw.base_breezy_categories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/breezy/base/base_breezy_categories.sql", "original_file_path": "models/psa/breezy/base/base_breezy_categories.sql", "name": "base_breezy_categories", "alias": "base_breezy_categories", "checksum": {"name": "sha256", "checksum": "37220030c9c77e2ca57ef5712d8b9e73237f875f98c1b7da26658e32d844ab90"}, "tags": [], "refs": [], "sources": [["breezy_categories", "external"], ["breezy_categories", "internal"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezy/base/base_breezy_categories.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "breezy"}, "compiled_sql": "\n\nwith external_source as (\n\n    select * from raw.breezy_categories_stitch.external\n\n)\n, internal_source as (\n\n    select * from raw.breezy_categories_stitch.internal\n\n)\n, unioned as (\n\n    select categories as category_name, stages as stage_name from internal_source\n    union\n    select categories as category_name, stages as stage_name from external_source\n\n)\nselect * from unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_breezy_categories"}, "model.edw.stg_candidate_assessments": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_sheets_cpa_assessments') }}\n\n)\n, max_record as (\n\n    select\n        email,\n        \n        max(assessment_date) as max_rec\n    from source\n    group by 1\n\n)\n, assessments as (\n\n    select\n        source.*\n    from source\n    inner join max_record\n        on source.email = max_record.email\n        and source.assessment_date = max_record.max_rec\n)\nselect * from assessments", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_sheets_cpa_assessments"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "gsheets", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "gsheets", "stg_candidate_assessments"], "unique_id": "model.edw.stg_candidate_assessments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/gsheets/stg_candidate_assessments.sql", "original_file_path": "models/psa/gsheets/stg_candidate_assessments.sql", "name": "stg_candidate_assessments", "alias": "stg_candidate_assessments", "checksum": {"name": "sha256", "checksum": "27cb25796b3e7a1e14a91a8fb5f7a73c91126b9b263deadd9dcbe0e6d3ef1503"}, "tags": [], "refs": [["base_sheets_cpa_assessments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/gsheets/stg_candidate_assessments.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "gsheets"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_sheets_cpa_assessments\n\n)\n, max_record as (\n\n    select\n        email,\n        \n        max(assessment_date) as max_rec\n    from source\n    group by 1\n\n)\n, assessments as (\n\n    select\n        source.*\n    from source\n    inner join max_record\n        on source.email = max_record.email\n        and source.assessment_date = max_record.max_rec\n)\nselect * from assessments", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_candidate_assessments"}, "model.edw.base_sheets_cpa_assessments": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('cpa_assessments', 'sheet1') }}\n\n)\n, renamed as (\n\n    select\n        candidateid as candidate_id ,\n        date as assessment_date,\n        email,\n        name as worker_name,\n        pipeline as pipeline_name,\n        {# threshold__st as threshold__st, #}\n        {# tlms_user__st as tlms_user__st, #}\n        tlms_user__de::int as tlms_user__id,\n        threshold__de::int as passing_score_threshold,\n        data_transcription as data_transcription_score,\n        english_language as english_language_score,\n        image_annotation as image_annotation_score,\n        web_research as web_research_score,\n        total_score as total_score\n    from source\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cpa_assessments.sheet1"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "gsheets", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "gsheets", "base", "base_sheets_cpa_assessments"], "unique_id": "model.edw.base_sheets_cpa_assessments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/gsheets/base/base_sheets_cpa_assessments.sql", "original_file_path": "models/psa/gsheets/base/base_sheets_cpa_assessments.sql", "name": "base_sheets_cpa_assessments", "alias": "base_sheets_cpa_assessments", "checksum": {"name": "sha256", "checksum": "75fe068c480ac1c9197d71867cca339ab80e570050865fb2c2cb0fe2ff70a0e1"}, "tags": [], "refs": [], "sources": [["cpa_assessments", "sheet1"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/gsheets/base/base_sheets_cpa_assessments.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "gsheets"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.cpa_assessments_stitch.sheet1\n\n)\n, renamed as (\n\n    select\n        candidateid as candidate_id ,\n        date as assessment_date,\n        email,\n        name as worker_name,\n        pipeline as pipeline_name,\n        \n        \n        tlms_user__de::int as tlms_user__id,\n        threshold__de::int as passing_score_threshold,\n        data_transcription as data_transcription_score,\n        english_language as english_language_score,\n        image_annotation as image_annotation_score,\n        web_research as web_research_score,\n        total_score as total_score\n    from source\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheets_cpa_assessments"}, "model.edw.base_sheets_cpu_buckets": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('cpu_buckets', 'sheet1') }}\n)\n, renamed as (\n\n    select\n        cpu,\n        bucket\n    from source\n    \n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cpu_buckets.sheet1"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "gsheets", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "gsheets", "base", "base_sheets_cpu_buckets"], "unique_id": "model.edw.base_sheets_cpu_buckets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/gsheets/base/base_sheets_cpu_buckets.sql", "original_file_path": "models/psa/gsheets/base/base_sheets_cpu_buckets.sql", "name": "base_sheets_cpu_buckets", "alias": "base_sheets_cpu_buckets", "checksum": {"name": "sha256", "checksum": "4e01ae81c24e80571b5128defca1ceabcfaa3639426c86426f319d7cbca866da"}, "tags": [], "refs": [], "sources": [["cpu_buckets", "sheet1"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/gsheets/base/base_sheets_cpu_buckets.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "gsheets"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.cpu_buckets_stitch.sheet1\n)\n, renamed as (\n\n    select\n        cpu,\n        bucket\n    from source\n    \n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_sheets_cpu_buckets"}, "model.edw.stg_hist_salesforce_salesperson": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_salesforce_user') }}\n),\nroles as (\n    select * from {{ ref('base_hist_salesforce_userrole') }}\n),\nrenamed as (\n    select\n        source.about_me,\n        source.alias,\n        source.banner_photo_url,\n        source.business_hours,\n        source.city,\n        source.community_nickname,\n        source.company_name,\n        source.country,\n        source.created_by_id,\n        source.created_date,\n        source.department,\n        source.digest_frequency,\n        source.division,\n        source.email,\n        source.employee_number,\n        source.first_name,\n        source.forecast_enabled,\n        source.full_photo_url,\n        source.user_id,\n        source.is_active,\n        source.is_extindicator_visible,\n        source.is_profile_photoa_ctive,\n        source.language_locale_key,\n        source.last_login_at,\n        source.last_modified_by_id,\n        source.last_modified_at,\n        source.last_name,\n        source.last_referenced_at,\n        source.last_viewed_at,\n        source.locales_id_key,\n        source.manager_id,\n        source.medium_banner_photo_url,\n        source.medium_photo_url,\n        source.mobile_phone,\n        source.user_name,\n        source.phone,\n        source.postal_code,\n        source.profile_id,\n        source.profile_name,\n        source.qbdialer_insidesales_admin_c,\n        source.qbdialer_is_subdomain,\n        source.qbdialer_is_token,\n        source.qbdialer_permissions,\n        source.receives_admin_info_emails,\n        source.receives_info_emails,\n        source.user_signature,\n        source.small_banner_photo_url,\n        source.small_photo_url,\n        source.user_state,\n        source.street,\n        source.system_mod_stamp,\n        source.timezones_id_key,\n        source.title,\n        source.user_email_name,\n        source.user_role_id,\n        roles.user_role_name,\n        source.user_type,\n        source._sdc_batched_at,\n        source._sdc_extracted_at,\n        source._sdc_received_at,\n        source._sdc_sequence,\n        source._sdc_table_version,\n        source.dbt_valid_from,\n        source.dbt_valid_to,\n        source.dbt_updated_at,\n        md5(\n            ifnull(upper(trim(source.first_name::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.last_name::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.country::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.division::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.title::varchar)), '') || ';' ||\n            ifnull(upper(trim(roles.user_role_name::varchar)), '') || ';'\n        ) as dim_salesperson_hash_diff,\n        md5(ifnull(source.user_id::varchar, 'Unknown')) as salesperson_key\n    from source\n    inner join roles\n        on source.user_role_id = roles.user_role_id\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_user", "model.edw.base_hist_salesforce_userrole"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "stg_hist_salesforce_salesperson"], "unique_id": "model.edw.stg_hist_salesforce_salesperson", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/stg_hist_salesforce_salesperson.sql", "original_file_path": "models/psa/salesforce/stg_hist_salesforce_salesperson.sql", "name": "stg_hist_salesforce_salesperson", "alias": "stg_hist_salesforce_salesperson", "checksum": {"name": "sha256", "checksum": "12c7f622e42b96b37d376bb8201d76bb1e47d0d5d64c4ed83f759f9595dd9cc6"}, "tags": [], "refs": [["base_hist_salesforce_user"], ["base_hist_salesforce_userrole"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/stg_hist_salesforce_salesperson.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_salesforce_user\n),\nroles as (\n    select * from psa_dev.scratch_brana.base_hist_salesforce_userrole\n),\nrenamed as (\n    select\n        source.about_me,\n        source.alias,\n        source.banner_photo_url,\n        source.business_hours,\n        source.city,\n        source.community_nickname,\n        source.company_name,\n        source.country,\n        source.created_by_id,\n        source.created_date,\n        source.department,\n        source.digest_frequency,\n        source.division,\n        source.email,\n        source.employee_number,\n        source.first_name,\n        source.forecast_enabled,\n        source.full_photo_url,\n        source.user_id,\n        source.is_active,\n        source.is_extindicator_visible,\n        source.is_profile_photoa_ctive,\n        source.language_locale_key,\n        source.last_login_at,\n        source.last_modified_by_id,\n        source.last_modified_at,\n        source.last_name,\n        source.last_referenced_at,\n        source.last_viewed_at,\n        source.locales_id_key,\n        source.manager_id,\n        source.medium_banner_photo_url,\n        source.medium_photo_url,\n        source.mobile_phone,\n        source.user_name,\n        source.phone,\n        source.postal_code,\n        source.profile_id,\n        source.profile_name,\n        source.qbdialer_insidesales_admin_c,\n        source.qbdialer_is_subdomain,\n        source.qbdialer_is_token,\n        source.qbdialer_permissions,\n        source.receives_admin_info_emails,\n        source.receives_info_emails,\n        source.user_signature,\n        source.small_banner_photo_url,\n        source.small_photo_url,\n        source.user_state,\n        source.street,\n        source.system_mod_stamp,\n        source.timezones_id_key,\n        source.title,\n        source.user_email_name,\n        source.user_role_id,\n        roles.user_role_name,\n        source.user_type,\n        source._sdc_batched_at,\n        source._sdc_extracted_at,\n        source._sdc_received_at,\n        source._sdc_sequence,\n        source._sdc_table_version,\n        source.dbt_valid_from,\n        source.dbt_valid_to,\n        source.dbt_updated_at,\n        md5(\n            ifnull(upper(trim(source.first_name::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.last_name::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.country::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.division::varchar)), '') || ';' ||\n            ifnull(upper(trim(source.title::varchar)), '') || ';' ||\n            ifnull(upper(trim(roles.user_role_name::varchar)), '') || ';'\n        ) as dim_salesperson_hash_diff,\n        md5(ifnull(source.user_id::varchar, 'Unknown')) as salesperson_key\n    from source\n    inner join roles\n        on source.user_role_id = roles.user_role_id\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_salesforce_salesperson"}, "model.edw.stg_hist_salesforce_opportunity": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_salesforce_opportunity') }}\n),\nrenamed as (\n    select\n        account_id,\n        account_primary_focus,\n        account_priority_type,\n        account_region,\n        account_segment,\n        add_google_doc,\n        age_in_days,\n        amount,\n        analysis_at,\n        analysis,\n        avg_time_per_task,\n        booked_opps_target,\n        booked_status,\n        business_division,\n        campaign_id,\n        cbi,\n        challenges,\n        change_effective_date,\n        channel_cfq_d1_opp_target,\n        channel,\n        close_at,\n        closed_lost_detail,\n        close_fq,\n        cloudfactory_lead,\n        commitment,\n        company_description,\n        competitor_form,\n        contracting_date,\n        contracting,\n        contract_18_digit_id,\n        contract_terms,\n        opportunity_contract,\n        created_by_id,\n        created_at,\n        created_by_equals_me,\n        current_process,\n        d1_calls_fq_target,\n        d1_call_date,\n        d1_call,\n        d1_to_sql_days,\n        date_of_first_contact,\n        days_since_base,\n        opportunity_description,\n        downgrade_reason,\n        end_date,\n        existing_solution_primary,\n        expansion_type,\n        expected_revenue,\n        expected_mrr,\n        fiscal,\n        fiscal_quarter,\n        fiscal_year,\n        forecast_category,\n        forecast_category_name,\n        go_to_market_fq_created_opp_target,\n        go_to_market_fq_d1_opp_target,\n        go_to_market_rollup,\n        has_open_activity,\n        has_opportunity_line_item,\n        has_overdue_task,\n        has_dq_account_reason,\n        opportunity_id,\n        ideal_solution,\n        impact,\n        industry,\n        is_active_sdr,\n        is_closed,\n        is_deleted,\n        is_excluded_from_territory_2_filter,\n        is_split,\n        is_won,\n        last_activity_at,\n        last_modified_by_id,\n        last_modified_at,\n        lead_source,\n        lead_category,\n        lead_source_detail,\n        lid_is_influenced,\n        lost_reason,\n        marketing_original_source,\n        meaningful_work_num,\n        meaningful_work_unit,\n        meaningful_work,\n        micromarket,\n        monthly_amount,\n        monthly_commitment_difference,\n        monthly_commitment,\n        month_10,\n        month_11,\n        month_12,\n        month_1,\n        month_2,\n        month_3,\n        month_4,\n        month_5,\n        month_6,\n        month_7,\n        month_8,\n        month_9,\n        mrr,\n        opportunity_name,\n        net_expansion_mrr,\n        net_new_mrr,\n        net_reporting,\n        nextstep,\n        next_step_alt,\n        onboarding_start_date,\n        opportunities,\n        opportunity_18_digit_id,\n        opportunity_attribution,\n        opportunity_number,\n        opps_created_target,\n        owner_id,\n        pain_points,\n        payment_option,\n        per_unit_price,\n        phase_1_amount,\n        plan,\n        potential_impact,\n        potential_risks,\n        premium_workstation_connectivity,\n        premium_workstation_hardware,\n        premium_workstation_monitors,\n        price,\n        primary_competitor,\n        priority_reason_detail,\n        priority_reason,\n        priority_type,\n        probability,\n        production_line,\n        production_manager,\n        production_start_date,\n        product_type_fq_booked_opp_target,\n        product_type,\n        proposal_date,\n        proposal,\n        qualified_deal,\n        qualified_opportunity,\n        record_type_id,\n        relationship,\n        revenue_target,\n        sales_division,\n        sales_rep,\n        service_duration,\n        solutions_architect,\n        solution,\n        source_detail,\n        source,\n        speakertext_lead,\n        sql_date,\n        sql,\n        stage_name,\n        stakeholders,\n        system_mod_stamp_at,\n        tat,\n        tech_application,\n        termed_mrr,\n        timeline,\n        opportunity_type,\n        units,\n        unit_type,\n        use_case_category,\n        use_case,\n        volume,\n        weighted_mrr,\n        why_they_will_buy,\n        won_mrr,\n        workstream_milestones,\n        x3_rd_party_tool_form,\n        expansion_likelihood,\n        special_terms,\n        most_recent_referring_source,\n        eu_personal_data,\n        termination_notice,\n        dq_account_reason,\n        publicity,\n        competitor,\n        workstream_url,\n        referral_account,\n        sdr,\n        lost_reason_detail,\n        tool_details,\n        primary_tool,\n        other_notes,\n        notes,\n        flow_platform,\n        lead_source_most_recent,\n        upgrade_reason,\n        of_wallet,\n        premium_workstation_add_ons,\n        ramp_potential,\n        nurture_track,\n        delivery_method,\n        nurture_plan,\n        lead_source_most_recent_detail,\n        most_recent_acquisition_medium,\n        lead_type,\n        ramp_potential_timing,\n        ramp_potential_hours,\n        other_competitor,\n        content_offer,\n        last_analysis_form,\n        package_type,\n        hs_form_message,\n        x3_rd_party_tool,\n        primary_feature,\n        billable_unit,\n        seed_package_price,\n        kpis,\n        d1_outcome,\n        task_learning_curve,\n        workforce,\n        last_referenced_at,\n        last_viewed_at,\n        analysis_to_proposal_days,\n        contracting_to_close_days,\n        proposal_to_contracting_days,\n        sql_to_analysis_days,\n        region_definition,\n        territory_2_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(channel::varchar)), '')              || ';' ||\n            ifnull(upper(trim(delivery_method::varchar)), '')      || ';' ||\n            ifnull(upper(trim(eu_personal_data::varchar)), '')     || ';' ||\n            ifnull(upper(trim(expansion_likelihood::varchar)), '') || ';' ||\n            ifnull(upper(trim(expansion_type::varchar)), '')       || ';' ||\n            ifnull(upper(trim(forecast_category::varchar)), '')    || ';' ||\n            ifnull(upper(trim(lead_category::varchar)), '')        || ';' ||\n            ifnull(upper(trim(lead_source::varchar)), '')          || ';' ||\n            ifnull(upper(trim(lead_source_detail::varchar)), '')   || ';' ||\n            ifnull(upper(trim(opportunity_name::varchar)), '')     || ';' ||\n            ifnull(upper(trim(package_type::varchar)), '')         || ';' ||\n            ifnull(upper(trim(primary_tool::varchar)), '')         || ';' ||\n            ifnull(upper(trim(product_type::varchar)), '')         || ';' ||\n            ifnull(upper(trim(region_definition::varchar)), '')    || ';' ||\n            ifnull(upper(trim(relationship::varchar)), '')         || ';' ||\n            ifnull(upper(trim(stage_name::varchar)), '')           || ';' ||\n            ifnull(upper(trim(tech_application::varchar)), '')     || ';' ||\n            ifnull(upper(trim(upgrade_reason::varchar)), '')       || ';' ||\n            ifnull(upper(trim(use_case_category::varchar)), '')    || ';' ||\n            ifnull(upper(trim(use_case::varchar)), '')             || ';'\n        ) as dim_sale_hash_diff,\n        md5(ifnull(opportunity_id::varchar, 'Unknown')) as sale_key,\n        md5(ifnull(owner_id::varchar, 'Unknown')) as salesperson_key,\n        md5(ifnull(account_id::varchar, 'Unknown')) as client_key\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_opportunity"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "stg_hist_salesforce_opportunity"], "unique_id": "model.edw.stg_hist_salesforce_opportunity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/stg_hist_salesforce_opportunity.sql", "original_file_path": "models/psa/salesforce/stg_hist_salesforce_opportunity.sql", "name": "stg_hist_salesforce_opportunity", "alias": "stg_hist_salesforce_opportunity", "checksum": {"name": "sha256", "checksum": "dd963ebf1ea78225a7a8be1b2de10b20004dd077e567903ad13e404ce464c22e"}, "tags": [], "refs": [["base_hist_salesforce_opportunity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/stg_hist_salesforce_opportunity.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_salesforce_opportunity\n),\nrenamed as (\n    select\n        account_id,\n        account_primary_focus,\n        account_priority_type,\n        account_region,\n        account_segment,\n        add_google_doc,\n        age_in_days,\n        amount,\n        analysis_at,\n        analysis,\n        avg_time_per_task,\n        booked_opps_target,\n        booked_status,\n        business_division,\n        campaign_id,\n        cbi,\n        challenges,\n        change_effective_date,\n        channel_cfq_d1_opp_target,\n        channel,\n        close_at,\n        closed_lost_detail,\n        close_fq,\n        cloudfactory_lead,\n        commitment,\n        company_description,\n        competitor_form,\n        contracting_date,\n        contracting,\n        contract_18_digit_id,\n        contract_terms,\n        opportunity_contract,\n        created_by_id,\n        created_at,\n        created_by_equals_me,\n        current_process,\n        d1_calls_fq_target,\n        d1_call_date,\n        d1_call,\n        d1_to_sql_days,\n        date_of_first_contact,\n        days_since_base,\n        opportunity_description,\n        downgrade_reason,\n        end_date,\n        existing_solution_primary,\n        expansion_type,\n        expected_revenue,\n        expected_mrr,\n        fiscal,\n        fiscal_quarter,\n        fiscal_year,\n        forecast_category,\n        forecast_category_name,\n        go_to_market_fq_created_opp_target,\n        go_to_market_fq_d1_opp_target,\n        go_to_market_rollup,\n        has_open_activity,\n        has_opportunity_line_item,\n        has_overdue_task,\n        has_dq_account_reason,\n        opportunity_id,\n        ideal_solution,\n        impact,\n        industry,\n        is_active_sdr,\n        is_closed,\n        is_deleted,\n        is_excluded_from_territory_2_filter,\n        is_split,\n        is_won,\n        last_activity_at,\n        last_modified_by_id,\n        last_modified_at,\n        lead_source,\n        lead_category,\n        lead_source_detail,\n        lid_is_influenced,\n        lost_reason,\n        marketing_original_source,\n        meaningful_work_num,\n        meaningful_work_unit,\n        meaningful_work,\n        micromarket,\n        monthly_amount,\n        monthly_commitment_difference,\n        monthly_commitment,\n        month_10,\n        month_11,\n        month_12,\n        month_1,\n        month_2,\n        month_3,\n        month_4,\n        month_5,\n        month_6,\n        month_7,\n        month_8,\n        month_9,\n        mrr,\n        opportunity_name,\n        net_expansion_mrr,\n        net_new_mrr,\n        net_reporting,\n        nextstep,\n        next_step_alt,\n        onboarding_start_date,\n        opportunities,\n        opportunity_18_digit_id,\n        opportunity_attribution,\n        opportunity_number,\n        opps_created_target,\n        owner_id,\n        pain_points,\n        payment_option,\n        per_unit_price,\n        phase_1_amount,\n        plan,\n        potential_impact,\n        potential_risks,\n        premium_workstation_connectivity,\n        premium_workstation_hardware,\n        premium_workstation_monitors,\n        price,\n        primary_competitor,\n        priority_reason_detail,\n        priority_reason,\n        priority_type,\n        probability,\n        production_line,\n        production_manager,\n        production_start_date,\n        product_type_fq_booked_opp_target,\n        product_type,\n        proposal_date,\n        proposal,\n        qualified_deal,\n        qualified_opportunity,\n        record_type_id,\n        relationship,\n        revenue_target,\n        sales_division,\n        sales_rep,\n        service_duration,\n        solutions_architect,\n        solution,\n        source_detail,\n        source,\n        speakertext_lead,\n        sql_date,\n        sql,\n        stage_name,\n        stakeholders,\n        system_mod_stamp_at,\n        tat,\n        tech_application,\n        termed_mrr,\n        timeline,\n        opportunity_type,\n        units,\n        unit_type,\n        use_case_category,\n        use_case,\n        volume,\n        weighted_mrr,\n        why_they_will_buy,\n        won_mrr,\n        workstream_milestones,\n        x3_rd_party_tool_form,\n        expansion_likelihood,\n        special_terms,\n        most_recent_referring_source,\n        eu_personal_data,\n        termination_notice,\n        dq_account_reason,\n        publicity,\n        competitor,\n        workstream_url,\n        referral_account,\n        sdr,\n        lost_reason_detail,\n        tool_details,\n        primary_tool,\n        other_notes,\n        notes,\n        flow_platform,\n        lead_source_most_recent,\n        upgrade_reason,\n        of_wallet,\n        premium_workstation_add_ons,\n        ramp_potential,\n        nurture_track,\n        delivery_method,\n        nurture_plan,\n        lead_source_most_recent_detail,\n        most_recent_acquisition_medium,\n        lead_type,\n        ramp_potential_timing,\n        ramp_potential_hours,\n        other_competitor,\n        content_offer,\n        last_analysis_form,\n        package_type,\n        hs_form_message,\n        x3_rd_party_tool,\n        primary_feature,\n        billable_unit,\n        seed_package_price,\n        kpis,\n        d1_outcome,\n        task_learning_curve,\n        workforce,\n        last_referenced_at,\n        last_viewed_at,\n        analysis_to_proposal_days,\n        contracting_to_close_days,\n        proposal_to_contracting_days,\n        sql_to_analysis_days,\n        region_definition,\n        territory_2_id,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(channel::varchar)), '')              || ';' ||\n            ifnull(upper(trim(delivery_method::varchar)), '')      || ';' ||\n            ifnull(upper(trim(eu_personal_data::varchar)), '')     || ';' ||\n            ifnull(upper(trim(expansion_likelihood::varchar)), '') || ';' ||\n            ifnull(upper(trim(expansion_type::varchar)), '')       || ';' ||\n            ifnull(upper(trim(forecast_category::varchar)), '')    || ';' ||\n            ifnull(upper(trim(lead_category::varchar)), '')        || ';' ||\n            ifnull(upper(trim(lead_source::varchar)), '')          || ';' ||\n            ifnull(upper(trim(lead_source_detail::varchar)), '')   || ';' ||\n            ifnull(upper(trim(opportunity_name::varchar)), '')     || ';' ||\n            ifnull(upper(trim(package_type::varchar)), '')         || ';' ||\n            ifnull(upper(trim(primary_tool::varchar)), '')         || ';' ||\n            ifnull(upper(trim(product_type::varchar)), '')         || ';' ||\n            ifnull(upper(trim(region_definition::varchar)), '')    || ';' ||\n            ifnull(upper(trim(relationship::varchar)), '')         || ';' ||\n            ifnull(upper(trim(stage_name::varchar)), '')           || ';' ||\n            ifnull(upper(trim(tech_application::varchar)), '')     || ';' ||\n            ifnull(upper(trim(upgrade_reason::varchar)), '')       || ';' ||\n            ifnull(upper(trim(use_case_category::varchar)), '')    || ';' ||\n            ifnull(upper(trim(use_case::varchar)), '')             || ';'\n        ) as dim_sale_hash_diff,\n        md5(ifnull(opportunity_id::varchar, 'Unknown')) as sale_key,\n        md5(ifnull(owner_id::varchar, 'Unknown')) as salesperson_key,\n        md5(ifnull(account_id::varchar, 'Unknown')) as client_key\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_salesforce_opportunity"}, "model.edw.stg_hist_salesforce_client": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_salesforce_account') }}\n),\nrenamed as (\n    select\n        account_source,\n        accounts,\n        account_18_digit_id,\n        account_monthly_commitment,\n        account_mrr,\n        account_number,\n        account_source_detail,\n        account_status as client_status,\n        active_contracts,\n        active_subscription_contracts,\n        annual_revenue,\n        assigned_account,\n        billing_city,\n        billing_country,\n        billing_postal_code,\n        billing_state,\n        billing_street,\n        booked_opportunities,\n        bypass_new_owner_alert,\n        cloudfactory_lead_chk,\n        company_careers_page,\n        content_offer,\n        created_by_id,\n        created_at,\n        crunchbase_category,\n        crunchbase_url,\n        csm_client_score,\n        delighted_inc_detractors,\n        delighted_inc_nps,\n        delighted_inc_passives,\n        delighted_inc_promoters,\n        delivery_manager,\n        delivery_owner,\n        account_description,\n        fax,\n        first_booked_opportunity,\n        fortune_1000,\n        hubspot_account_campaign,\n        account_id as client_id,\n        ideal_client_profile_score,\n        industry,\n        is_deleted,\n        last_activity_at,\n        last_modifiedby_id,\n        last_modified_at,\n        last_dq_account_reason,\n        last_round_amount,\n        last_round_date,\n        last_round_type,\n        last_sales_activity,\n        lead_channel,\n        lead_source,\n        legal_name,\n        linkedin,\n        master_record_id,\n        micromarket,\n        most_recent_acquisition_medium,\n        most_recent_referring_source,\n        account_name as client_name,\n        account_name_alt,\n        new_owner_message,\n        no_of_logos,\n        number_of_employees,\n        number_of_locations,\n        owner_id,\n        parent_id,\n        partner_profile,\n        account_phone as client_phone,\n        photo_url,\n        pod_effort_score,\n        pod,\n        primary_focus,\n        priority_reason_detail,\n        priority_reason,\n        priority_type,\n        qb_dialer_dials,\n        account_rating,\n        record_type_id,\n        region,\n        segment,\n        shipping_city,\n        shipping_country,\n        shipping_postalcode,\n        shipping_state,\n        shipping_street,\n        solutions_architect,\n        sourced_partner,\n        speakertext_lead_chk,\n        system_mod_stamp,\n        tech_application,\n        total_funding,\n        twitter,\n        account_type,\n        use_case,\n        vat,\n        website,\n        weighted_client_score,\n        weighted_pod_effort_score,\n        zisf_zoom_info_industry,\n        zisf_zoom_id,\n        zisf_zoom_last_up_atd,\n        last_referenced_at,\n        ideal_client_profile,\n        qb_dialer_last_calltime,\n        last_viewed_at,\n        zoom_info_description,\n        zoom_info_street,\n        zoom_info_city,\n        zoom_info_fax,\n        zoom_info_account_source,\n        zoom_info,\n        zoom_info_phone,\n        zoom_info_state,\n        zoom_info_country,\n        zoom_info_revenue,\n        zoom_info_employee_count,\n        zoom_info_website,\n        region_definition,\n        region_definition_name,\n        region_definition_name_form,\n        get_region_definition,\n        ideal_client_profile_detail,\n        dozisf_zoom_info_last_updated,\n        dozisf_zoom_info_first_updated,\n        zoom_info_enriched_status,\n        dozisf_zoom_info_id,\n        zoom_info_total_funding,\n        zoom_info_parent_company_zoom_info_id,\n        zoom_info_funding_rounds,\n        zoom_info_industry,\n        zoom_info_employee_range as employee_range,\n        zoom_info_parent_company_name,\n        zoom_info_total_funding_st,\n        zoom_info_ultimate_parent_company_zoominf,\n        zoom_info_ultimate_parent_company_name,\n        program_manager,\n        account_minimum_monthly_commitment,\n        tier,\n        priority,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(account_name::varchar)), '')               || ';' ||\n            ifnull(upper(trim(delivery_manager::varchar)), '')           || ';' ||\n            ifnull(upper(trim(delivery_owner::varchar)), '')             || ';' ||\n            ifnull(upper(trim(lead_channel::varchar)), '')               || ';' ||\n            ifnull(upper(trim(lead_source::varchar)), '')                || ';' ||\n            ifnull(upper(trim(last_round_type::varchar)), '')            || ';' ||\n            ifnull(upper(trim(industry::varchar)), '')                   || ';' ||\n            ifnull(upper(trim(ideal_client_profile_score::varchar)), '') || ';' ||\n            ifnull(upper(trim(crunchbase_category::varchar)), '')        || ';' ||\n            ifnull(upper(trim(billing_country::varchar)), '')            || ';' ||\n            ifnull(upper(trim(billing_state::varchar)), '')              || ';' ||\n            ifnull(upper(trim(billing_city::varchar)), '')               || ';' ||\n            ifnull(upper(trim(account_status::varchar)), '')             || ';' ||\n            ifnull(upper(trim(annual_revenue::varchar)), '')             || ';' ||\n            ifnull(upper(trim(employee_range::varchar)), '')             || ';' ||\n            ifnull(upper(trim(account_phone::varchar)), '')              || ';' ||\n            ifnull(upper(trim(primary_focus::varchar)), '')              || ';' ||\n            ifnull(upper(trim(region::varchar)), '')                     || ';' ||\n            ifnull(upper(trim(segment::varchar)), '')                    || ';'\n        ) as dim_client_hash_diff,\n        md5(ifnull(account_id::varchar, 'Unknown')) as client_key\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_account"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "stg_hist_salesforce_client"], "unique_id": "model.edw.stg_hist_salesforce_client", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/stg_hist_salesforce_client.sql", "original_file_path": "models/psa/salesforce/stg_hist_salesforce_client.sql", "name": "stg_hist_salesforce_client", "alias": "stg_hist_salesforce_client", "checksum": {"name": "sha256", "checksum": "68a570663dada98743bfbb2903fe19ad2c2f17261daecdb07476132c905f4bfe"}, "tags": [], "refs": [["base_hist_salesforce_account"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/stg_hist_salesforce_client.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_salesforce_account\n),\nrenamed as (\n    select\n        account_source,\n        accounts,\n        account_18_digit_id,\n        account_monthly_commitment,\n        account_mrr,\n        account_number,\n        account_source_detail,\n        account_status as client_status,\n        active_contracts,\n        active_subscription_contracts,\n        annual_revenue,\n        assigned_account,\n        billing_city,\n        billing_country,\n        billing_postal_code,\n        billing_state,\n        billing_street,\n        booked_opportunities,\n        bypass_new_owner_alert,\n        cloudfactory_lead_chk,\n        company_careers_page,\n        content_offer,\n        created_by_id,\n        created_at,\n        crunchbase_category,\n        crunchbase_url,\n        csm_client_score,\n        delighted_inc_detractors,\n        delighted_inc_nps,\n        delighted_inc_passives,\n        delighted_inc_promoters,\n        delivery_manager,\n        delivery_owner,\n        account_description,\n        fax,\n        first_booked_opportunity,\n        fortune_1000,\n        hubspot_account_campaign,\n        account_id as client_id,\n        ideal_client_profile_score,\n        industry,\n        is_deleted,\n        last_activity_at,\n        last_modifiedby_id,\n        last_modified_at,\n        last_dq_account_reason,\n        last_round_amount,\n        last_round_date,\n        last_round_type,\n        last_sales_activity,\n        lead_channel,\n        lead_source,\n        legal_name,\n        linkedin,\n        master_record_id,\n        micromarket,\n        most_recent_acquisition_medium,\n        most_recent_referring_source,\n        account_name as client_name,\n        account_name_alt,\n        new_owner_message,\n        no_of_logos,\n        number_of_employees,\n        number_of_locations,\n        owner_id,\n        parent_id,\n        partner_profile,\n        account_phone as client_phone,\n        photo_url,\n        pod_effort_score,\n        pod,\n        primary_focus,\n        priority_reason_detail,\n        priority_reason,\n        priority_type,\n        qb_dialer_dials,\n        account_rating,\n        record_type_id,\n        region,\n        segment,\n        shipping_city,\n        shipping_country,\n        shipping_postalcode,\n        shipping_state,\n        shipping_street,\n        solutions_architect,\n        sourced_partner,\n        speakertext_lead_chk,\n        system_mod_stamp,\n        tech_application,\n        total_funding,\n        twitter,\n        account_type,\n        use_case,\n        vat,\n        website,\n        weighted_client_score,\n        weighted_pod_effort_score,\n        zisf_zoom_info_industry,\n        zisf_zoom_id,\n        zisf_zoom_last_up_atd,\n        last_referenced_at,\n        ideal_client_profile,\n        qb_dialer_last_calltime,\n        last_viewed_at,\n        zoom_info_description,\n        zoom_info_street,\n        zoom_info_city,\n        zoom_info_fax,\n        zoom_info_account_source,\n        zoom_info,\n        zoom_info_phone,\n        zoom_info_state,\n        zoom_info_country,\n        zoom_info_revenue,\n        zoom_info_employee_count,\n        zoom_info_website,\n        region_definition,\n        region_definition_name,\n        region_definition_name_form,\n        get_region_definition,\n        ideal_client_profile_detail,\n        dozisf_zoom_info_last_updated,\n        dozisf_zoom_info_first_updated,\n        zoom_info_enriched_status,\n        dozisf_zoom_info_id,\n        zoom_info_total_funding,\n        zoom_info_parent_company_zoom_info_id,\n        zoom_info_funding_rounds,\n        zoom_info_industry,\n        zoom_info_employee_range as employee_range,\n        zoom_info_parent_company_name,\n        zoom_info_total_funding_st,\n        zoom_info_ultimate_parent_company_zoominf,\n        zoom_info_ultimate_parent_company_name,\n        program_manager,\n        account_minimum_monthly_commitment,\n        tier,\n        priority,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        md5(\n            ifnull(upper(trim(account_name::varchar)), '')               || ';' ||\n            ifnull(upper(trim(delivery_manager::varchar)), '')           || ';' ||\n            ifnull(upper(trim(delivery_owner::varchar)), '')             || ';' ||\n            ifnull(upper(trim(lead_channel::varchar)), '')               || ';' ||\n            ifnull(upper(trim(lead_source::varchar)), '')                || ';' ||\n            ifnull(upper(trim(last_round_type::varchar)), '')            || ';' ||\n            ifnull(upper(trim(industry::varchar)), '')                   || ';' ||\n            ifnull(upper(trim(ideal_client_profile_score::varchar)), '') || ';' ||\n            ifnull(upper(trim(crunchbase_category::varchar)), '')        || ';' ||\n            ifnull(upper(trim(billing_country::varchar)), '')            || ';' ||\n            ifnull(upper(trim(billing_state::varchar)), '')              || ';' ||\n            ifnull(upper(trim(billing_city::varchar)), '')               || ';' ||\n            ifnull(upper(trim(account_status::varchar)), '')             || ';' ||\n            ifnull(upper(trim(annual_revenue::varchar)), '')             || ';' ||\n            ifnull(upper(trim(employee_range::varchar)), '')             || ';' ||\n            ifnull(upper(trim(account_phone::varchar)), '')              || ';' ||\n            ifnull(upper(trim(primary_focus::varchar)), '')              || ';' ||\n            ifnull(upper(trim(region::varchar)), '')                     || ';' ||\n            ifnull(upper(trim(segment::varchar)), '')                    || ';'\n        ) as dim_client_hash_diff,\n        md5(ifnull(account_id::varchar, 'Unknown')) as client_key\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_salesforce_client"}, "model.edw.stg_hist_salesforce_contract": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_hist_salesforce_contract') }}\n\n),\n\nrenamed as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        last_modified_at,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version,\n        seed_package_price,\n        strategic_priorities,\n        system_mod_stamp,\n        use_case,\n        work_description,\n        contract_label,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n\n    from source\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "stg_hist_salesforce_contract"], "unique_id": "model.edw.stg_hist_salesforce_contract", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/stg_hist_salesforce_contract.sql", "original_file_path": "models/psa/salesforce/stg_hist_salesforce_contract.sql", "name": "stg_hist_salesforce_contract", "alias": "stg_hist_salesforce_contract", "checksum": {"name": "sha256", "checksum": "c87265dfbc773ed4f2ae4c99fdead94110a75d790c2c817ce37c6c0621477c10"}, "tags": [], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/stg_hist_salesforce_contract.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_hist_salesforce_contract\n\n),\n\nrenamed as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        last_modified_at,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version,\n        seed_package_price,\n        strategic_priorities,\n        system_mod_stamp,\n        use_case,\n        work_description,\n        contract_label,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n\n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_salesforce_contract"}, "model.edw.stg_hist_salesforce_opportunity_history": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ ref('base_hist_salesforce_opportunityhistory') }}\n),\nrenamed as (\n    select\n        amount,\n        close_at,\n        created_by_id,\n        created_at,\n        expected_revenue,\n        forecast_category,\n        opportunity_history_id,\n        is_deleted,\n        opportunity_id,\n        probability,\n        stage_name,\n        system_mod_stamp,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        current_date()                  as vault_load_date\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_opportunityhistory"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "stg_hist_salesforce_opportunity_history"], "unique_id": "model.edw.stg_hist_salesforce_opportunity_history", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/stg_hist_salesforce_opportunity_history.sql", "original_file_path": "models/psa/salesforce/stg_hist_salesforce_opportunity_history.sql", "name": "stg_hist_salesforce_opportunity_history", "alias": "stg_hist_salesforce_opportunity_history", "checksum": {"name": "sha256", "checksum": "24b372df94493a0b13c4452ff28c0ea10ed0e612fabe8e635b25498d7266c033"}, "tags": [], "refs": [["base_hist_salesforce_opportunityhistory"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/stg_hist_salesforce_opportunity_history.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n    select * from psa_dev.scratch_brana.base_hist_salesforce_opportunityhistory\n),\nrenamed as (\n    select\n        amount,\n        close_at,\n        created_by_id,\n        created_at,\n        expected_revenue,\n        forecast_category,\n        opportunity_history_id,\n        is_deleted,\n        opportunity_id,\n        probability,\n        stage_name,\n        system_mod_stamp,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at,\n        current_date()                  as vault_load_date\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_hist_salesforce_opportunity_history"}, "model.edw.base_fixture_salesforce_contract_20210405": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('fixture_contracts_extracted_20210405') }}\n\n),\n\nrenamed as (\n\n    select\n        account__c                                          as client_id,\n        md5(ifnull(account__c::varchar, 'Unknown'))         as client_key,\n        calculated_price__c                                 as contract_price,\n        calculated_units__c                                 as contract_units,\n        id                                                  as contract_id,\n        isdeleted                                           as is_deleted,\n        lastmodifieddate                                    as last_modified_at,\n        monthly_commitment__c                               as monthly_units,\n        name                                                as contract_name,\n        package_type__c                                     as package_type,\n        package_version__c                                  as package_version,\n        seed_package_price__c                               as seed_package_price,\n        systemmodstamp                                      as system_mod_stamp\n\n\n    from source\n\n)\n\nselect\n    *\n\nfrom\n    renamed\n\nwhere 1=1\n    and is_deleted = False", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.edw.fixture_contracts_extracted_20210405"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "fixtures", "base_fixture_salesforce_contract_20210405"], "unique_id": "model.edw.base_fixture_salesforce_contract_20210405", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/fixtures/base_fixture_salesforce_contract_20210405.sql", "original_file_path": "models/psa/salesforce/fixtures/base_fixture_salesforce_contract_20210405.sql", "name": "base_fixture_salesforce_contract_20210405", "alias": "base_fixture_salesforce_contract_20210405", "checksum": {"name": "sha256", "checksum": "cef1d8bea48cbf51361b82205a48ac573ba74bd4a8fc0bd11fdbd2a71fbe880a"}, "tags": [], "refs": [["fixture_contracts_extracted_20210405"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/fixtures/base_fixture_salesforce_contract_20210405.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.fixture_contracts_extracted_20210405\n\n),\n\nrenamed as (\n\n    select\n        account__c                                          as client_id,\n        md5(ifnull(account__c::varchar, 'Unknown'))         as client_key,\n        calculated_price__c                                 as contract_price,\n        calculated_units__c                                 as contract_units,\n        id                                                  as contract_id,\n        isdeleted                                           as is_deleted,\n        lastmodifieddate                                    as last_modified_at,\n        monthly_commitment__c                               as monthly_units,\n        name                                                as contract_name,\n        package_type__c                                     as package_type,\n        package_version__c                                  as package_version,\n        seed_package_price__c                               as seed_package_price,\n        systemmodstamp                                      as system_mod_stamp\n\n\n    from source\n\n)\n\nselect\n    *\n\nfrom\n    renamed\n\nwhere 1=1\n    and is_deleted = False", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_fixture_salesforce_contract_20210405"}, "model.edw.base_hist_salesforce_contract": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('contract') }}\n\n),\n\nrenamed as (\n\n    select\n        account_owner_first_name__c                     as account_owner_first_name,\n        account_owner_full_name__c                      as account_owner_full_name,\n        account__c                                      as client_id,\n        md5(ifnull(account__c::varchar, 'Unknown'))     as client_key,\n        active_subscriptions_this_month__c              as active_subscriptions_this_month,\n        active_this_month__c                            as active_this_month,\n        actual_end__c                                   as actual_end,\n        base_opportunity_close_date__c                  as base_opportunity_close_date,\n        base_opportunity_owner__c                       as base_opportunity_owner,\n        base_opportunity_pilot__c                       as base_opportunity_pilot,\n        calculated_price__c                             as contract_price,\n        calculated_units__c                             as contract_units,\n        churn_detail__c                                 as churn_detail,\n        churn_reason__c                                 as churn_reason,\n        complexity__c                                   as complexity,\n        contract_health_history_name__c                 as contract_health_history_name,\n        contract_health_risk_reason__c                  as contract_health_risk_reason,\n        contract_to_training_start_days__c              as contract_to_training_start_days,\n        createdbyid                                     as created_by_id,\n        createddate                                     as created_date,\n        days_since_base__c                              as days_since_base,\n        delivery_method__c                              as delivery_method,\n        delivery_owner__c                               as delivery_owner,\n        eu_personal_data__c                             as eu_personal_data,\n        expansion_likelihood__c                         as expansion_likelihood,\n        health_detail__c                                as health_detail,\n        health_icon__c                                  as health_icon,\n        health__c                                       as health,\n        id                                              as contract_id,\n        isdeleted                                       as is_deleted,\n        lastactivitydate                                as last_activity_date,\n        lastmodifiedbyid                                as last_modified_by_id,\n        lastmodifieddate                                as last_modified_at,\n        lost_subscriptions_this_month__c                as lost_subscriptions_this_month,\n        monthly_commitment__c                           as monthly_units,\n        name                                            as contract_name,\n        package_type__c                                 as package_type,\n        package_version__c                              as package_version,\n        pause_effective_date__c                         as pause_effective_date,\n        pod__c                                          as pod,\n        premium_workstation_add_ons__c                  as premium_workstation_add_ons,\n        premium_workstation_connectivity__c             as premium_workstation_connectivity,\n        premium_workstation_hardware__c                 as premium_workstation_hardware,\n        premium_workstation_monitors__c                 as premium_workstation_monitors,\n        publicity__c                                    as publicity,\n        seed_package_price__c                           as seed_package_price,\n        strategic_priorities__c                         as strategic_priorities,\n        systemmodstamp                                  as system_mod_stamp,\n        tool_details__c                                 as tool_details,\n        training_start__c                               as training_start,\n        use_case_change_frequency__c                    as use_case_change_frequency,\n        use_case__c                                     as use_case,\n        work_description__c                             as work_description,\n        x3rd_party_tool__c                              as x3rd_party_tool,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        lastreferenceddate                              as last_referenced_date,\n        lastvieweddate                                  as last_viewed_date,\n        contract_display_for_flow__c                    as contract_label,\n        last_client_health_score__c                     as last_client_health_score,\n        financial_signals__c                            as financial_signals,\n        health_score__c                                 as health_score,\n        quality_of_product_delivery_score__c            as quality_of_product_delivery_score,\n        human_market_input_score__c                     as human_market_input_score,\n        financial_signals_score__c                      as financial_signals_score,\n        human_market_input__c                           as human_market_input,\n        relationship_signals__c                         as relationship_signals,\n        quality_of_product_delivery__c                  as quality_of_product_delivery,\n        relationship_signals_score__c                   as relationship_signals_score,\n        health_history__c                               as health_history,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n\n    from source\n\n)\n\nselect\n    *\n\nfrom\n    renamed\n\nwhere 1=1\n    and is_deleted = False", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.contract"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_contract"], "unique_id": "model.edw.base_hist_salesforce_contract", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_contract.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_contract.sql", "name": "base_hist_salesforce_contract", "alias": "base_hist_salesforce_contract", "checksum": {"name": "sha256", "checksum": "1638ffb44441c2ea8b7787e19787b8a54b5104580d83e33f1939b25e6f947ed9"}, "tags": [], "refs": [["contract"]], "sources": [], "description": "", "columns": {"contract_id": {"name": "contract_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_id": {"name": "client_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_price": {"name": "contract_price", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_units": {"name": "contract_units", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_units": {"name": "monthly_units", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_name": {"name": "contract_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_type": {"name": "package_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_version": {"name": "package_version", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_package_price": {"name": "seed_package_price", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategic_priorities": {"name": "strategic_priorities", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "system_mod_stamp": {"name": "system_mod_stamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "use_case": {"name": "use_case", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_description": {"name": "work_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_label": {"name": "contract_label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_contract.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.contract\n\n),\n\nrenamed as (\n\n    select\n        account_owner_first_name__c                     as account_owner_first_name,\n        account_owner_full_name__c                      as account_owner_full_name,\n        account__c                                      as client_id,\n        md5(ifnull(account__c::varchar, 'Unknown'))     as client_key,\n        active_subscriptions_this_month__c              as active_subscriptions_this_month,\n        active_this_month__c                            as active_this_month,\n        actual_end__c                                   as actual_end,\n        base_opportunity_close_date__c                  as base_opportunity_close_date,\n        base_opportunity_owner__c                       as base_opportunity_owner,\n        base_opportunity_pilot__c                       as base_opportunity_pilot,\n        calculated_price__c                             as contract_price,\n        calculated_units__c                             as contract_units,\n        churn_detail__c                                 as churn_detail,\n        churn_reason__c                                 as churn_reason,\n        complexity__c                                   as complexity,\n        contract_health_history_name__c                 as contract_health_history_name,\n        contract_health_risk_reason__c                  as contract_health_risk_reason,\n        contract_to_training_start_days__c              as contract_to_training_start_days,\n        createdbyid                                     as created_by_id,\n        createddate                                     as created_date,\n        days_since_base__c                              as days_since_base,\n        delivery_method__c                              as delivery_method,\n        delivery_owner__c                               as delivery_owner,\n        eu_personal_data__c                             as eu_personal_data,\n        expansion_likelihood__c                         as expansion_likelihood,\n        health_detail__c                                as health_detail,\n        health_icon__c                                  as health_icon,\n        health__c                                       as health,\n        id                                              as contract_id,\n        isdeleted                                       as is_deleted,\n        lastactivitydate                                as last_activity_date,\n        lastmodifiedbyid                                as last_modified_by_id,\n        lastmodifieddate                                as last_modified_at,\n        lost_subscriptions_this_month__c                as lost_subscriptions_this_month,\n        monthly_commitment__c                           as monthly_units,\n        name                                            as contract_name,\n        package_type__c                                 as package_type,\n        package_version__c                              as package_version,\n        pause_effective_date__c                         as pause_effective_date,\n        pod__c                                          as pod,\n        premium_workstation_add_ons__c                  as premium_workstation_add_ons,\n        premium_workstation_connectivity__c             as premium_workstation_connectivity,\n        premium_workstation_hardware__c                 as premium_workstation_hardware,\n        premium_workstation_monitors__c                 as premium_workstation_monitors,\n        publicity__c                                    as publicity,\n        seed_package_price__c                           as seed_package_price,\n        strategic_priorities__c                         as strategic_priorities,\n        systemmodstamp                                  as system_mod_stamp,\n        tool_details__c                                 as tool_details,\n        training_start__c                               as training_start,\n        use_case_change_frequency__c                    as use_case_change_frequency,\n        use_case__c                                     as use_case,\n        work_description__c                             as work_description,\n        x3rd_party_tool__c                              as x3rd_party_tool,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        lastreferenceddate                              as last_referenced_date,\n        lastvieweddate                                  as last_viewed_date,\n        contract_display_for_flow__c                    as contract_label,\n        last_client_health_score__c                     as last_client_health_score,\n        financial_signals__c                            as financial_signals,\n        health_score__c                                 as health_score,\n        quality_of_product_delivery_score__c            as quality_of_product_delivery_score,\n        human_market_input_score__c                     as human_market_input_score,\n        financial_signals_score__c                      as financial_signals_score,\n        human_market_input__c                           as human_market_input,\n        relationship_signals__c                         as relationship_signals,\n        quality_of_product_delivery__c                  as quality_of_product_delivery,\n        relationship_signals_score__c                   as relationship_signals_score,\n        health_history__c                               as health_history,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n\n    from source\n\n)\n\nselect\n    *\n\nfrom\n    renamed\n\nwhere 1=1\n    and is_deleted = False", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_contract"}, "model.edw.base_hist_salesforce_userrole": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('userrole') }}\n),\nrenamed as (\n    select \n        CASEACCESSFORACCOUNTOWNER        as case_access_for_account_owner,\n        CONTACTACCESSFORACCOUNTOWNER     as contact_access_for_account_owner,\n        DEVELOPERNAME                    as developer_name,\n        FORECASTUSERID                   as forecast_user_id,\n        ID                               as user_role_id,\n        LASTMODIFIEDBYID                 as last_modified_by_id,\n        LASTMODIFIEDDATE                 as last_modified_at,\n        MAYFORECASTMANAGERSHARE          as may_forecast_manager_share,\n        NAME                             as user_role_name,\n        OPPORTUNITYACCESSFORACCOUNTOWNER as opportunity_access_for_account_owner,\n        PARENTROLEID                     as parent_role_id,\n        PORTALTYPE                       as portal_type,\n        ROLLUPDESCRIPTION                as rollup_description,\n        SYSTEMMODSTAMP                   as system_mod_stamp,\n        _SDC_BATCHED_AT                  as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                 as _sdc_received_at,\n        _SDC_SEQUENCE                    as _sdc_sequence,\n        _SDC_TABLE_VERSION               as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.userrole"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_userrole"], "unique_id": "model.edw.base_hist_salesforce_userrole", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_userrole.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_userrole.sql", "name": "base_hist_salesforce_userrole", "alias": "base_hist_salesforce_userrole", "checksum": {"name": "sha256", "checksum": "b569aeae00bdf3bb42cade004d441158b7cc2fa4cb81d55247212be024239ead"}, "tags": [], "refs": [["userrole"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_userrole.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.userrole\n),\nrenamed as (\n    select \n        CASEACCESSFORACCOUNTOWNER        as case_access_for_account_owner,\n        CONTACTACCESSFORACCOUNTOWNER     as contact_access_for_account_owner,\n        DEVELOPERNAME                    as developer_name,\n        FORECASTUSERID                   as forecast_user_id,\n        ID                               as user_role_id,\n        LASTMODIFIEDBYID                 as last_modified_by_id,\n        LASTMODIFIEDDATE                 as last_modified_at,\n        MAYFORECASTMANAGERSHARE          as may_forecast_manager_share,\n        NAME                             as user_role_name,\n        OPPORTUNITYACCESSFORACCOUNTOWNER as opportunity_access_for_account_owner,\n        PARENTROLEID                     as parent_role_id,\n        PORTALTYPE                       as portal_type,\n        ROLLUPDESCRIPTION                as rollup_description,\n        SYSTEMMODSTAMP                   as system_mod_stamp,\n        _SDC_BATCHED_AT                  as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                 as _sdc_received_at,\n        _SDC_SEQUENCE                    as _sdc_sequence,\n        _SDC_TABLE_VERSION               as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_userrole"}, "model.edw.base_salesforce_contract": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce', 'contract__c') }}\n\n),\n\nrenamed as (\n\n    select\n        account_owner_first_name__c                     as account_owner_first_name,\n        account_owner_full_name__c                      as account_owner_full_name,\n        account__c                                      as client_id,\n        md5(ifnull(account__c::varchar, 'Unknown'))     as client_key,\n        active_subscriptions_this_month__c              as active_subscriptions_this_month,\n        active_this_month__c                            as active_this_month,\n        actual_end__c                                   as actual_end,\n        base_opportunity_close_date__c                  as base_opportunity_close_date,\n        base_opportunity_owner__c                       as base_opportunity_owner,\n        base_opportunity_pilot__c                       as base_opportunity_pilot,\n        calculated_price__c                             as contract_price,\n        calculated_units__c                             as contract_units,\n        churn_detail__c                                 as churn_detail,\n        churn_reason__c                                 as churn_reason,\n        complexity__c                                   as complexity,\n        contract_health_history_name__c                 as contract_health_history_name,\n        contract_health_risk_reason__c                  as contract_health_risk_reason,\n        contract_to_training_start_days__c              as contract_to_training_start_days,\n        createdbyid                                     as created_by_id,\n        createddate                                     as created_date,\n        days_since_base__c                              as days_since_base,\n        delivery_method__c                              as delivery_method,\n        delivery_owner__c                               as delivery_owner,\n        eu_personal_data__c                             as eu_personal_data,\n        expansion_likelihood__c                         as expansion_likelihood,\n        health_detail__c                                as health_detail,\n        health_icon__c                                  as health_icon,\n        health__c                                       as health,\n        id                                              as contract_id,\n        isdeleted                                       as is_deleted,\n        lastactivitydate                                as last_activity_date,\n        lastmodifiedbyid                                as last_modified_by_id,\n        lastmodifieddate                                as last_modified_at,\n        lost_subscriptions_this_month__c                as lost_subscriptions_this_month,\n        monthly_commitment__c                           as monthly_units,\n        name                                            as contract_name,\n        package_type__c                                 as package_type,\n        package_version__c                              as package_version,\n        pause_effective_date__c                         as pause_effective_date,\n        pod__c                                          as pod,\n        premium_workstation_add_ons__c                  as premium_workstation_add_ons,\n        premium_workstation_connectivity__c             as premium_workstation_connectivity,\n        premium_workstation_hardware__c                 as premium_workstation_hardware,\n        premium_workstation_monitors__c                 as premium_workstation_monitors,\n        publicity__c                                    as publicity,\n        seed_package_price__c                           as seed_package_price,\n        strategic_priorities__c                         as strategic_priorities,\n        systemmodstamp                                  as system_mod_stamp,\n        tool_details__c                                 as tool_details,\n        training_start__c                               as training_start,\n        use_case_change_frequency__c                    as use_case_change_frequency,\n        use_case__c                                     as use_case,\n        work_description__c                             as work_description,\n        x3rd_party_tool__c                              as x3rd_party_tool,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        lastreferenceddate                              as last_referenced_date,\n        lastvieweddate                                  as last_viewed_date,\n        contract_display_for_flow__c                    as contract_label,\n        last_client_health_score__c                     as last_client_health_score,\n        financial_signals__c                            as financial_signals,\n        health_score__c                                 as health_score,\n        quality_of_product_delivery_score__c            as quality_of_product_delivery_score,\n        human_market_input_score__c                     as human_market_input_score,\n        financial_signals_score__c                      as financial_signals_score,\n        human_market_input__c                           as human_market_input,\n        relationship_signals__c                         as relationship_signals,\n        quality_of_product_delivery__c                  as quality_of_product_delivery,\n        relationship_signals_score__c                   as relationship_signals_score,\n        health_history__c                               as health_history\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.contract__c"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_contract"], "unique_id": "model.edw.base_salesforce_contract", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_contract.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_contract.sql", "name": "base_salesforce_contract", "alias": "base_salesforce_contract", "checksum": {"name": "sha256", "checksum": "8025c8b9e1d3cf28f4d1adfb31fc3ea73205ae80ee639e2542ba3810df78deb9"}, "tags": [], "refs": [], "sources": [["salesforce", "contract__c"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_contract.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.contract__c\n\n),\n\nrenamed as (\n\n    select\n        account_owner_first_name__c                     as account_owner_first_name,\n        account_owner_full_name__c                      as account_owner_full_name,\n        account__c                                      as client_id,\n        md5(ifnull(account__c::varchar, 'Unknown'))     as client_key,\n        active_subscriptions_this_month__c              as active_subscriptions_this_month,\n        active_this_month__c                            as active_this_month,\n        actual_end__c                                   as actual_end,\n        base_opportunity_close_date__c                  as base_opportunity_close_date,\n        base_opportunity_owner__c                       as base_opportunity_owner,\n        base_opportunity_pilot__c                       as base_opportunity_pilot,\n        calculated_price__c                             as contract_price,\n        calculated_units__c                             as contract_units,\n        churn_detail__c                                 as churn_detail,\n        churn_reason__c                                 as churn_reason,\n        complexity__c                                   as complexity,\n        contract_health_history_name__c                 as contract_health_history_name,\n        contract_health_risk_reason__c                  as contract_health_risk_reason,\n        contract_to_training_start_days__c              as contract_to_training_start_days,\n        createdbyid                                     as created_by_id,\n        createddate                                     as created_date,\n        days_since_base__c                              as days_since_base,\n        delivery_method__c                              as delivery_method,\n        delivery_owner__c                               as delivery_owner,\n        eu_personal_data__c                             as eu_personal_data,\n        expansion_likelihood__c                         as expansion_likelihood,\n        health_detail__c                                as health_detail,\n        health_icon__c                                  as health_icon,\n        health__c                                       as health,\n        id                                              as contract_id,\n        isdeleted                                       as is_deleted,\n        lastactivitydate                                as last_activity_date,\n        lastmodifiedbyid                                as last_modified_by_id,\n        lastmodifieddate                                as last_modified_at,\n        lost_subscriptions_this_month__c                as lost_subscriptions_this_month,\n        monthly_commitment__c                           as monthly_units,\n        name                                            as contract_name,\n        package_type__c                                 as package_type,\n        package_version__c                              as package_version,\n        pause_effective_date__c                         as pause_effective_date,\n        pod__c                                          as pod,\n        premium_workstation_add_ons__c                  as premium_workstation_add_ons,\n        premium_workstation_connectivity__c             as premium_workstation_connectivity,\n        premium_workstation_hardware__c                 as premium_workstation_hardware,\n        premium_workstation_monitors__c                 as premium_workstation_monitors,\n        publicity__c                                    as publicity,\n        seed_package_price__c                           as seed_package_price,\n        strategic_priorities__c                         as strategic_priorities,\n        systemmodstamp                                  as system_mod_stamp,\n        tool_details__c                                 as tool_details,\n        training_start__c                               as training_start,\n        use_case_change_frequency__c                    as use_case_change_frequency,\n        use_case__c                                     as use_case,\n        work_description__c                             as work_description,\n        x3rd_party_tool__c                              as x3rd_party_tool,\n        _sdc_batched_at,\n        _sdc_extracted_at,\n        _sdc_received_at,\n        _sdc_sequence,\n        _sdc_table_version,\n        lastreferenceddate                              as last_referenced_date,\n        lastvieweddate                                  as last_viewed_date,\n        contract_display_for_flow__c                    as contract_label,\n        last_client_health_score__c                     as last_client_health_score,\n        financial_signals__c                            as financial_signals,\n        health_score__c                                 as health_score,\n        quality_of_product_delivery_score__c            as quality_of_product_delivery_score,\n        human_market_input_score__c                     as human_market_input_score,\n        financial_signals_score__c                      as financial_signals_score,\n        human_market_input__c                           as human_market_input,\n        relationship_signals__c                         as relationship_signals,\n        quality_of_product_delivery__c                  as quality_of_product_delivery,\n        relationship_signals_score__c                   as relationship_signals_score,\n        health_history__c                               as health_history\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_contract"}, "model.edw.base_salesforce_userrole": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce','userrole') }}\n),\nrenamed as (\n    select \n        CASEACCESSFORACCOUNTOWNER        as case_access_for_account_owner,\n        CONTACTACCESSFORACCOUNTOWNER     as contact_access_for_account_owner,\n        DEVELOPERNAME                    as developer_name,\n        FORECASTUSERID                   as forecast_user_id,\n        ID                               as user_role_id,\n        LASTMODIFIEDBYID                 as last_modified_by_id,\n        LASTMODIFIEDDATE                 as last_modified_at,\n        MAYFORECASTMANAGERSHARE          as may_forecast_manager_share,\n        NAME                             as user_role_name,\n        OPPORTUNITYACCESSFORACCOUNTOWNER as opportunity_access_for_account_owner,\n        PARENTROLEID                     as parent_role_id,\n        PORTALTYPE                       as portal_type,\n        ROLLUPDESCRIPTION                as rollup_description,\n        SYSTEMMODSTAMP                   as system_mod_stamp,\n        _SDC_BATCHED_AT                  as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                 as _sdc_received_at,\n        _SDC_SEQUENCE                    as _sdc_sequence,\n        _SDC_TABLE_VERSION               as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.userrole"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_userrole"], "unique_id": "model.edw.base_salesforce_userrole", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_userrole.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_userrole.sql", "name": "base_salesforce_userrole", "alias": "base_salesforce_userrole", "checksum": {"name": "sha256", "checksum": "d61f66c8e79f2ebe6202b4ee7cfd0fff1bc3bdc727bb3a6704612cb38e95bb0b"}, "tags": [], "refs": [], "sources": [["salesforce", "userrole"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_userrole.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.userrole\n),\nrenamed as (\n    select \n        CASEACCESSFORACCOUNTOWNER        as case_access_for_account_owner,\n        CONTACTACCESSFORACCOUNTOWNER     as contact_access_for_account_owner,\n        DEVELOPERNAME                    as developer_name,\n        FORECASTUSERID                   as forecast_user_id,\n        ID                               as user_role_id,\n        LASTMODIFIEDBYID                 as last_modified_by_id,\n        LASTMODIFIEDDATE                 as last_modified_at,\n        MAYFORECASTMANAGERSHARE          as may_forecast_manager_share,\n        NAME                             as user_role_name,\n        OPPORTUNITYACCESSFORACCOUNTOWNER as opportunity_access_for_account_owner,\n        PARENTROLEID                     as parent_role_id,\n        PORTALTYPE                       as portal_type,\n        ROLLUPDESCRIPTION                as rollup_description,\n        SYSTEMMODSTAMP                   as system_mod_stamp,\n        _SDC_BATCHED_AT                  as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                 as _sdc_received_at,\n        _SDC_SEQUENCE                    as _sdc_sequence,\n        _SDC_TABLE_VERSION               as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_userrole"}, "model.edw.base_salesforce_recordtype": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce','recordtype') }}\n),\nrenamed as (\n    select \n        BUSINESSPROCESSID  as business_process_id,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        DESCRIPTION        as record_type_description,\n        DEVELOPERNAME      as developer_name,\n        ID                 as record_type_id,\n        ISACTIVE           as is_active,\n        LASTMODIFIEDBYID   as last_modified_by_id,\n        LASTMODIFIEDDATE   as last_modified_at,\n        NAME               as record_type_name,\n        NAMESPACEPREFIX    as name_space_prefix,\n        SOBJECTTYPE        as sobject_type,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.recordtype"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_recordtype"], "unique_id": "model.edw.base_salesforce_recordtype", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_recordtype.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_recordtype.sql", "name": "base_salesforce_recordtype", "alias": "base_salesforce_recordtype", "checksum": {"name": "sha256", "checksum": "962f5985fcc00fdc818fd1994f7ee79d3ae3351f61f26d1709f636d4ef721bb4"}, "tags": [], "refs": [], "sources": [["salesforce", "recordtype"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_recordtype.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.recordtype\n),\nrenamed as (\n    select \n        BUSINESSPROCESSID  as business_process_id,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        DESCRIPTION        as record_type_description,\n        DEVELOPERNAME      as developer_name,\n        ID                 as record_type_id,\n        ISACTIVE           as is_active,\n        LASTMODIFIEDBYID   as last_modified_by_id,\n        LASTMODIFIEDDATE   as last_modified_at,\n        NAME               as record_type_name,\n        NAMESPACEPREFIX    as name_space_prefix,\n        SOBJECTTYPE        as sobject_type,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_recordtype"}, "model.edw.base_salesforce_opportunity": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce','opportunity') }}\n),\nrenamed as (\n    select \n        ACCOUNTID                             as account_id,\n        ACCOUNT_PRIMARY_FOCUS__C              as account_primary_focus,\n        ACCOUNT_PRIORITY_TYPE__C              as account_priority_type,\n        ACCOUNT_REGION__C                     as account_region,\n        ACCOUNT_SEGMENT__C                    as account_segment,\n        ADD_GOOGLE_DOC__C                     as add_google_doc,\n        AGE_IN_DAYS__C                        as age_in_days,\n        AMOUNT                                as amount,\n        ANALYSIS_DATE__C                      as analysis_at,\n        ANALYSIS__C                           as analysis,\n        AVG_TIME_PER_TASK__C                  as avg_time_per_task,\n        BOOKED_OPPS_TARGET__C                 as booked_opps_target,\n        BOOKED_STATUS__C                      as booked_status,\n        BUSINESS_DIVISION__C                  as business_division,\n        CAMPAIGNID                            as campaign_id,\n        CBI__C                                as cbi,\n        CHALLENGES__C                         as challenges,\n        CHANGE_EFFECTIVE_DATE__C              as change_effective_date,\n        CHANNEL_CFQ_D1_OPP_TARGET__C          as channel_cfq_d1_opp_target,\n        CHANNEL__C                            as channel,\n        CLOSEDATE                             as close_at,\n        CLOSED_LOST_DETAIL__C                 as closed_lost_detail,\n        CLOSE_FQ__C                           as close_fq,\n        CLOUDFACTORY_LEAD__C                  as cloudfactory_lead,\n        COMMITMENT__C                         as commitment,\n        COMPANY_DESCRIPTION__C                as company_description,\n        COMPETITOR_FORM__C                    as competitor_form,\n        CONTRACTING_DATE__C                   as contracting_date,\n        CONTRACTING__C                        as contracting,\n        CONTRACT_18_DIGIT_ID__C               as contract_18_digit_id,\n        CONTRACT_TERMS__C                     as contract_terms,\n        CONTRACT__C                           as opportunity_contract,\n        CREATEDBYID                           as created_by_id,\n        CREATEDDATE                           as created_at,\n        CREATED_BY_EQUALS_ME__C               as created_by_equals_me,\n        CURRENT_PROCESS__C                    as current_process,\n        D1_CALLS_FQ_TARGET__C                 as d1_calls_fq_target,\n        D1_CALL_DATE__C                       as d1_call_date,\n        D1_CALL__C                            as d1_call,\n        D1_TO_SQL_DAYS__C                     as d1_to_sql_days,\n        DATE_OF_FIRST_CONTACT__C              as date_of_first_contact,\n        DAYS_SINCE_BASE__C                    as days_since_base,\n        DESCRIPTION                           as opportunity_description,\n        DOWNGRADE_REASON__C                   as downgrade_reason,\n        END_DATE__C                           as end_date,\n        EXISTING_SOLUTION_PRIMARY__C          as existing_solution_primary,\n        EXPANSION_TYPE__C                     as expansion_type,\n        EXPECTEDREVENUE                       as expected_revenue,\n        EXPECTED_MRR__C                       as expected_mrr,\n        FISCAL                                as fiscal,\n        FISCALQUARTER                         as fiscal_quarter,\n        FISCALYEAR                            as fiscal_year,\n        FORECASTCATEGORY                      as forecast_category,\n        FORECASTCATEGORYNAME                  as forecast_category_name,\n        GO_TO_MARKET_FQ_CREATED_OPP_TARGET__C as go_to_market_fq_created_opp_target,\n        GO_TO_MARKET_FQ_D1_OPP_TARGET__C      as go_to_market_fq_d1_opp_target,\n        GO_TO_MARKET_ROLLUP__C                as go_to_market_rollup,\n        HASOPENACTIVITY                       as has_open_activity,\n        HASOPPORTUNITYLINEITEM                as has_opportunity_line_item,\n        HASOVERDUETASK                        as has_overdue_task,\n        HAS_DQ_ACCOUNT_REASON__C              as has_dq_account_reason,\n        ID                                    as opportunity_id,\n        IDEAL_SOLUTION__C                     as ideal_solution,\n        IMPACT__C                             as impact,\n        INDUSTRY__C                           as industry,\n        ISACTIVE_SDR__C                       as is_active_sdr,\n        ISCLOSED                              as is_closed,\n        ISDELETED                             as is_deleted,\n        ISEXCLUDEDFROMTERRITORY2FILTER        as is_excluded_from_territory_2_filter,\n        ISSPLIT                               as is_split,\n        ISWON                                 as is_won,\n        LASTACTIVITYDATE                      as last_activity_at,\n        LASTMODIFIEDBYID                      as last_modified_by_id,\n        LASTMODIFIEDDATE                      as last_modified_at,\n        LEADSOURCE                            as lead_source,\n        LEAD_CATEGORY__C                      as lead_category,\n        LEAD_SOURCE_DETAIL__C                 as lead_source_detail,\n        LID__IS_INFLUENCED__C                 as lid_is_influenced,\n        LOST_REASON__C                        as lost_reason,\n        MARKETING_ORIGINAL_SOURCE__C          as marketing_original_source,\n        MEANINGFUL_WORK_NUM__C                as meaningful_work_num,\n        MEANINGFUL_WORK_UNIT__C               as meaningful_work_unit,\n        MEANINGFUL_WORK__C                    as meaningful_work,\n        MICROMARKET__C                        as micromarket,\n        MONTHLY_AMOUNT__C                     as monthly_amount,\n        MONTHLY_COMMITMENT_DIFFERENCE__C      as monthly_commitment_difference,\n        MONTHLY_COMMITMENT__C                 as monthly_commitment,\n        MONTH_10__C                           as month_10,\n        MONTH_11__C                           as month_11,\n        MONTH_12__C                           as month_12,\n        MONTH_1__C                            as month_1,\n        MONTH_2__C                            as month_2,\n        MONTH_3__C                            as month_3,\n        MONTH_4__C                            as month_4,\n        MONTH_5__C                            as month_5,\n        MONTH_6__C                            as month_6,\n        MONTH_7__C                            as month_7,\n        MONTH_8__C                            as month_8,\n        MONTH_9__C                            as month_9,\n        MRR__C                                as mrr,\n        NAME                                  as opportunity_name,\n        NET_EXPANSION_MRR__C                  as net_expansion_mrr,\n        NET_NEW_MRR__C                        as net_new_mrr,\n        NET_REPORTING__C                      as net_reporting,\n        NEXTSTEP                              as nextstep,\n        NEXT_STEP__C                          as next_step_alt,\n        ONBOARDING_START_DATE__C              as onboarding_start_date,\n        OPPORTUNITIES__C                      as opportunities,\n        OPPORTUNITY_18_DIGIT_ID__C            as opportunity_18_digit_id,\n        OPPORTUNITY_ATTRIBUTION__C            as opportunity_attribution,\n        OPPORTUNITY_NUMBER__C                 as opportunity_number,\n        OPPS_CREATED_TARGET__C                as opps_created_target,\n        OWNERID                               as owner_id,\n        PAIN_POINTS__C                        as pain_points,\n        PAYMENT_OPTION__C                     as payment_option,\n        PER_UNIT_PRICE__C                     as per_unit_price,\n        PHASE_1_AMOUNT__C                     as phase_1_amount,\n        PLAN__C                               as plan,\n        POTENTIAL_IMPACT__C                   as potential_impact,\n        POTENTIAL_RISKS__C                    as potential_risks,\n        PREMIUM_WORKSTATION_CONNECTIVITY__C   as premium_workstation_connectivity,\n        PREMIUM_WORKSTATION_HARDWARE__C       as premium_workstation_hardware,\n        PREMIUM_WORKSTATION_MONITORS__C       as premium_workstation_monitors,\n        PRICE__C                              as price,\n        PRIMARY_COMPETITOR__C                 as primary_competitor,\n        PRIORITY_REASON_DETAIL__C             as priority_reason_detail,\n        PRIORITY_REASON__C                    as priority_reason,\n        PRIORITY_TYPE__C                      as priority_type,\n        PROBABILITY                           as probability,\n        PRODUCTION_LINE__C                    as production_line,\n        PRODUCTION_MANAGER__C                 as production_manager,\n        PRODUCTION_START_DATE__C              as production_start_date,\n        PRODUCT_TYPE_FQ_BOOKED_OPP_TARGET__C  as product_type_fq_booked_opp_target,\n        PRODUCT_TYPE__C                       as product_type,\n        PROPOSAL_DATE__C                      as proposal_date,\n        PROPOSAL__C                           as proposal,\n        QUALIFIED_DEAL__C                     as qualified_deal,\n        QUALIFIED_OPPORTUNITY__C              as qualified_opportunity,\n        RECORDTYPEID                          as record_type_id,\n        RELATIONSHIP__C                       as relationship,\n        REVENUE_TARGET__C                     as revenue_target,\n        SALES_DIVISION__C                     as sales_division,\n        SALES_REP__C                          as sales_rep,\n        SERVICE_DURATION__C                   as service_duration,\n        SOLUTIONS_ARCHITECT__C                as solutions_architect,\n        SOLUTION__C                           as solution,\n        SOURCE_DETAIL__C                      as source_detail,\n        SOURCE__C                             as source,\n        SPEAKERTEXT_LEAD__C                   as speakertext_lead,\n        SQL_DATE__C                           as sql_date,\n        SQL__C                                as sql,\n        STAGENAME                             as stage_name,\n        STAKEHOLDERS__C                       as stakeholders,\n        SYSTEMMODSTAMP                        as system_mod_stamp_at,\n        TAT__C                                as tat,\n        TECH_APPLICATION__C                   as tech_application,\n        TERMED_MRR__C                         as termed_mrr,\n        TIMELINE__C                           as timeline,\n        TYPE                                  as opportunity_type,\n        UNITS__C                              as units,\n        UNIT_TYPE__C                          as unit_type,\n        USE_CASE_CATEGORY__C                  as use_case_category,\n        USE_CASE__C                           as use_case,\n        VOLUME__C                             as volume,\n        WEIGHTED_MRR__C                       as weighted_mrr,\n        WHY_THEY_WILL_BUY__C                  as why_they_will_buy,\n        WON_MRR__C                            as won_mrr,\n        WORKSTREAM_MILESTONES__C              as workstream_milestones,\n        X3RD_PARTY_TOOL_FORM__C               as x3_rd_party_tool_form,\n        EXPANSION_LIKELIHOOD__C               as expansion_likelihood,\n        SPECIAL_TERMS__C                      as special_terms,\n        MOST_RECENT_REFERRING_SOURCE__C       as most_recent_referring_source,\n        EU_PERSONAL_DATA__C                   as eu_personal_data,\n        TERMINATION_NOTICE__C                 as termination_notice,\n        DQ_ACCOUNT_REASON__C                  as dq_account_reason,\n        PUBLICITY__C                          as publicity,\n        COMPETITOR__C                         as competitor,\n        WORKSTREAM_URL__C                     as workstream_url,\n        REFERRAL_ACCOUNT__C                   as referral_account,\n        SDR__C                                as sdr,\n        LOST_REASON_DETAIL__C                 as lost_reason_detail,\n        TOOL_DETAILS__C                       as tool_details,\n        PRIMARY_TOOL__C                       as primary_tool,\n        OTHER_NOTES__C                        as other_notes,\n        NOTES__C                              as notes,\n        FLOW_PLATFORM__C                      as flow_platform,\n        LEAD_SOURCE_MOST_RECENT__C            as lead_source_most_recent,\n        UPGRADE_REASON__C                     as upgrade_reason,\n        OF_WALLET__C                          as of_wallet,\n        PREMIUM_WORKSTATION_ADD_ONS__C        as premium_workstation_add_ons,\n        RAMP_POTENTIAL__C                     as ramp_potential,\n        NURTURE_TRACK__C                      as nurture_track,\n        DELIVERY_METHOD__C                    as delivery_method,\n        NURTURE_PLAN__C                       as nurture_plan,\n        LEAD_SOURCE_MOST_RECENT_DETAIL__C     as lead_source_most_recent_detail,\n        MOST_RECENT_ACQUISITION_MEDIUM__C     as most_recent_acquisition_medium,\n        LEAD_TYPE__C                          as lead_type,\n        RAMP_POTENTIAL_TIMING__C              as ramp_potential_timing,\n        RAMP_POTENTIAL_HOURS__C               as ramp_potential_hours,\n        OTHER_COMPETITOR__C                   as other_competitor,\n        CONTENT_OFFER__C                      as content_offer,\n        LAST_ANALYSIS_FORM__C                 as last_analysis_form,\n        PACKAGE_TYPE__C                       as package_type,\n        HS_FORM_MESSAGE__C                    as hs_form_message,\n        X3RD_PARTY_TOOL__C                    as x3_rd_party_tool,\n        PRIMARY_FEATURE__C                    as primary_feature,\n        BILLABLE_UNIT__C                      as billable_unit,\n        SEED_PACKAGE_PRICE__C                 as seed_package_price,\n        KPIS__C                               as kpis,\n        D1_OUTCOME__C                         as d1_outcome,\n        TASK_LEARNING_CURVE__C                as task_learning_curve,\n        WORKFORCE__C                          as workforce,\n        LASTREFERENCEDDATE                    as last_referenced_at,\n        LASTVIEWEDDATE                        as last_viewed_at,\n        ANALYSIS_TO_PROPOSAL_DAYS__C          as analysis_to_proposal_days,\n        CONTRACTING_TO_CLOSE_DAYS__C          as contracting_to_close_days,\n        PROPOSAL_TO_CONTRACTING_DAYS__C       as proposal_to_contracting_days,\n        SQL_TO_ANALYSIS_DAYS__C               as sql_to_analysis_days,\n        REGION_DEFINITION__C                  as region_definition,\n        TERRITORY2ID                          as territory_2_id,\n        _SDC_BATCHED_AT                       as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                     as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                      as _sdc_received_at,\n        _SDC_SEQUENCE                         as _sdc_sequence,\n        _SDC_TABLE_VERSION                    as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.opportunity"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_opportunity"], "unique_id": "model.edw.base_salesforce_opportunity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_opportunity.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_opportunity.sql", "name": "base_salesforce_opportunity", "alias": "base_salesforce_opportunity", "checksum": {"name": "sha256", "checksum": "87b89ff97203e20e8e2bac0ab79b7927d658752aad25aa53e947275acb1eba4b"}, "tags": [], "refs": [], "sources": [["salesforce", "opportunity"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_opportunity.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.opportunity\n),\nrenamed as (\n    select \n        ACCOUNTID                             as account_id,\n        ACCOUNT_PRIMARY_FOCUS__C              as account_primary_focus,\n        ACCOUNT_PRIORITY_TYPE__C              as account_priority_type,\n        ACCOUNT_REGION__C                     as account_region,\n        ACCOUNT_SEGMENT__C                    as account_segment,\n        ADD_GOOGLE_DOC__C                     as add_google_doc,\n        AGE_IN_DAYS__C                        as age_in_days,\n        AMOUNT                                as amount,\n        ANALYSIS_DATE__C                      as analysis_at,\n        ANALYSIS__C                           as analysis,\n        AVG_TIME_PER_TASK__C                  as avg_time_per_task,\n        BOOKED_OPPS_TARGET__C                 as booked_opps_target,\n        BOOKED_STATUS__C                      as booked_status,\n        BUSINESS_DIVISION__C                  as business_division,\n        CAMPAIGNID                            as campaign_id,\n        CBI__C                                as cbi,\n        CHALLENGES__C                         as challenges,\n        CHANGE_EFFECTIVE_DATE__C              as change_effective_date,\n        CHANNEL_CFQ_D1_OPP_TARGET__C          as channel_cfq_d1_opp_target,\n        CHANNEL__C                            as channel,\n        CLOSEDATE                             as close_at,\n        CLOSED_LOST_DETAIL__C                 as closed_lost_detail,\n        CLOSE_FQ__C                           as close_fq,\n        CLOUDFACTORY_LEAD__C                  as cloudfactory_lead,\n        COMMITMENT__C                         as commitment,\n        COMPANY_DESCRIPTION__C                as company_description,\n        COMPETITOR_FORM__C                    as competitor_form,\n        CONTRACTING_DATE__C                   as contracting_date,\n        CONTRACTING__C                        as contracting,\n        CONTRACT_18_DIGIT_ID__C               as contract_18_digit_id,\n        CONTRACT_TERMS__C                     as contract_terms,\n        CONTRACT__C                           as opportunity_contract,\n        CREATEDBYID                           as created_by_id,\n        CREATEDDATE                           as created_at,\n        CREATED_BY_EQUALS_ME__C               as created_by_equals_me,\n        CURRENT_PROCESS__C                    as current_process,\n        D1_CALLS_FQ_TARGET__C                 as d1_calls_fq_target,\n        D1_CALL_DATE__C                       as d1_call_date,\n        D1_CALL__C                            as d1_call,\n        D1_TO_SQL_DAYS__C                     as d1_to_sql_days,\n        DATE_OF_FIRST_CONTACT__C              as date_of_first_contact,\n        DAYS_SINCE_BASE__C                    as days_since_base,\n        DESCRIPTION                           as opportunity_description,\n        DOWNGRADE_REASON__C                   as downgrade_reason,\n        END_DATE__C                           as end_date,\n        EXISTING_SOLUTION_PRIMARY__C          as existing_solution_primary,\n        EXPANSION_TYPE__C                     as expansion_type,\n        EXPECTEDREVENUE                       as expected_revenue,\n        EXPECTED_MRR__C                       as expected_mrr,\n        FISCAL                                as fiscal,\n        FISCALQUARTER                         as fiscal_quarter,\n        FISCALYEAR                            as fiscal_year,\n        FORECASTCATEGORY                      as forecast_category,\n        FORECASTCATEGORYNAME                  as forecast_category_name,\n        GO_TO_MARKET_FQ_CREATED_OPP_TARGET__C as go_to_market_fq_created_opp_target,\n        GO_TO_MARKET_FQ_D1_OPP_TARGET__C      as go_to_market_fq_d1_opp_target,\n        GO_TO_MARKET_ROLLUP__C                as go_to_market_rollup,\n        HASOPENACTIVITY                       as has_open_activity,\n        HASOPPORTUNITYLINEITEM                as has_opportunity_line_item,\n        HASOVERDUETASK                        as has_overdue_task,\n        HAS_DQ_ACCOUNT_REASON__C              as has_dq_account_reason,\n        ID                                    as opportunity_id,\n        IDEAL_SOLUTION__C                     as ideal_solution,\n        IMPACT__C                             as impact,\n        INDUSTRY__C                           as industry,\n        ISACTIVE_SDR__C                       as is_active_sdr,\n        ISCLOSED                              as is_closed,\n        ISDELETED                             as is_deleted,\n        ISEXCLUDEDFROMTERRITORY2FILTER        as is_excluded_from_territory_2_filter,\n        ISSPLIT                               as is_split,\n        ISWON                                 as is_won,\n        LASTACTIVITYDATE                      as last_activity_at,\n        LASTMODIFIEDBYID                      as last_modified_by_id,\n        LASTMODIFIEDDATE                      as last_modified_at,\n        LEADSOURCE                            as lead_source,\n        LEAD_CATEGORY__C                      as lead_category,\n        LEAD_SOURCE_DETAIL__C                 as lead_source_detail,\n        LID__IS_INFLUENCED__C                 as lid_is_influenced,\n        LOST_REASON__C                        as lost_reason,\n        MARKETING_ORIGINAL_SOURCE__C          as marketing_original_source,\n        MEANINGFUL_WORK_NUM__C                as meaningful_work_num,\n        MEANINGFUL_WORK_UNIT__C               as meaningful_work_unit,\n        MEANINGFUL_WORK__C                    as meaningful_work,\n        MICROMARKET__C                        as micromarket,\n        MONTHLY_AMOUNT__C                     as monthly_amount,\n        MONTHLY_COMMITMENT_DIFFERENCE__C      as monthly_commitment_difference,\n        MONTHLY_COMMITMENT__C                 as monthly_commitment,\n        MONTH_10__C                           as month_10,\n        MONTH_11__C                           as month_11,\n        MONTH_12__C                           as month_12,\n        MONTH_1__C                            as month_1,\n        MONTH_2__C                            as month_2,\n        MONTH_3__C                            as month_3,\n        MONTH_4__C                            as month_4,\n        MONTH_5__C                            as month_5,\n        MONTH_6__C                            as month_6,\n        MONTH_7__C                            as month_7,\n        MONTH_8__C                            as month_8,\n        MONTH_9__C                            as month_9,\n        MRR__C                                as mrr,\n        NAME                                  as opportunity_name,\n        NET_EXPANSION_MRR__C                  as net_expansion_mrr,\n        NET_NEW_MRR__C                        as net_new_mrr,\n        NET_REPORTING__C                      as net_reporting,\n        NEXTSTEP                              as nextstep,\n        NEXT_STEP__C                          as next_step_alt,\n        ONBOARDING_START_DATE__C              as onboarding_start_date,\n        OPPORTUNITIES__C                      as opportunities,\n        OPPORTUNITY_18_DIGIT_ID__C            as opportunity_18_digit_id,\n        OPPORTUNITY_ATTRIBUTION__C            as opportunity_attribution,\n        OPPORTUNITY_NUMBER__C                 as opportunity_number,\n        OPPS_CREATED_TARGET__C                as opps_created_target,\n        OWNERID                               as owner_id,\n        PAIN_POINTS__C                        as pain_points,\n        PAYMENT_OPTION__C                     as payment_option,\n        PER_UNIT_PRICE__C                     as per_unit_price,\n        PHASE_1_AMOUNT__C                     as phase_1_amount,\n        PLAN__C                               as plan,\n        POTENTIAL_IMPACT__C                   as potential_impact,\n        POTENTIAL_RISKS__C                    as potential_risks,\n        PREMIUM_WORKSTATION_CONNECTIVITY__C   as premium_workstation_connectivity,\n        PREMIUM_WORKSTATION_HARDWARE__C       as premium_workstation_hardware,\n        PREMIUM_WORKSTATION_MONITORS__C       as premium_workstation_monitors,\n        PRICE__C                              as price,\n        PRIMARY_COMPETITOR__C                 as primary_competitor,\n        PRIORITY_REASON_DETAIL__C             as priority_reason_detail,\n        PRIORITY_REASON__C                    as priority_reason,\n        PRIORITY_TYPE__C                      as priority_type,\n        PROBABILITY                           as probability,\n        PRODUCTION_LINE__C                    as production_line,\n        PRODUCTION_MANAGER__C                 as production_manager,\n        PRODUCTION_START_DATE__C              as production_start_date,\n        PRODUCT_TYPE_FQ_BOOKED_OPP_TARGET__C  as product_type_fq_booked_opp_target,\n        PRODUCT_TYPE__C                       as product_type,\n        PROPOSAL_DATE__C                      as proposal_date,\n        PROPOSAL__C                           as proposal,\n        QUALIFIED_DEAL__C                     as qualified_deal,\n        QUALIFIED_OPPORTUNITY__C              as qualified_opportunity,\n        RECORDTYPEID                          as record_type_id,\n        RELATIONSHIP__C                       as relationship,\n        REVENUE_TARGET__C                     as revenue_target,\n        SALES_DIVISION__C                     as sales_division,\n        SALES_REP__C                          as sales_rep,\n        SERVICE_DURATION__C                   as service_duration,\n        SOLUTIONS_ARCHITECT__C                as solutions_architect,\n        SOLUTION__C                           as solution,\n        SOURCE_DETAIL__C                      as source_detail,\n        SOURCE__C                             as source,\n        SPEAKERTEXT_LEAD__C                   as speakertext_lead,\n        SQL_DATE__C                           as sql_date,\n        SQL__C                                as sql,\n        STAGENAME                             as stage_name,\n        STAKEHOLDERS__C                       as stakeholders,\n        SYSTEMMODSTAMP                        as system_mod_stamp_at,\n        TAT__C                                as tat,\n        TECH_APPLICATION__C                   as tech_application,\n        TERMED_MRR__C                         as termed_mrr,\n        TIMELINE__C                           as timeline,\n        TYPE                                  as opportunity_type,\n        UNITS__C                              as units,\n        UNIT_TYPE__C                          as unit_type,\n        USE_CASE_CATEGORY__C                  as use_case_category,\n        USE_CASE__C                           as use_case,\n        VOLUME__C                             as volume,\n        WEIGHTED_MRR__C                       as weighted_mrr,\n        WHY_THEY_WILL_BUY__C                  as why_they_will_buy,\n        WON_MRR__C                            as won_mrr,\n        WORKSTREAM_MILESTONES__C              as workstream_milestones,\n        X3RD_PARTY_TOOL_FORM__C               as x3_rd_party_tool_form,\n        EXPANSION_LIKELIHOOD__C               as expansion_likelihood,\n        SPECIAL_TERMS__C                      as special_terms,\n        MOST_RECENT_REFERRING_SOURCE__C       as most_recent_referring_source,\n        EU_PERSONAL_DATA__C                   as eu_personal_data,\n        TERMINATION_NOTICE__C                 as termination_notice,\n        DQ_ACCOUNT_REASON__C                  as dq_account_reason,\n        PUBLICITY__C                          as publicity,\n        COMPETITOR__C                         as competitor,\n        WORKSTREAM_URL__C                     as workstream_url,\n        REFERRAL_ACCOUNT__C                   as referral_account,\n        SDR__C                                as sdr,\n        LOST_REASON_DETAIL__C                 as lost_reason_detail,\n        TOOL_DETAILS__C                       as tool_details,\n        PRIMARY_TOOL__C                       as primary_tool,\n        OTHER_NOTES__C                        as other_notes,\n        NOTES__C                              as notes,\n        FLOW_PLATFORM__C                      as flow_platform,\n        LEAD_SOURCE_MOST_RECENT__C            as lead_source_most_recent,\n        UPGRADE_REASON__C                     as upgrade_reason,\n        OF_WALLET__C                          as of_wallet,\n        PREMIUM_WORKSTATION_ADD_ONS__C        as premium_workstation_add_ons,\n        RAMP_POTENTIAL__C                     as ramp_potential,\n        NURTURE_TRACK__C                      as nurture_track,\n        DELIVERY_METHOD__C                    as delivery_method,\n        NURTURE_PLAN__C                       as nurture_plan,\n        LEAD_SOURCE_MOST_RECENT_DETAIL__C     as lead_source_most_recent_detail,\n        MOST_RECENT_ACQUISITION_MEDIUM__C     as most_recent_acquisition_medium,\n        LEAD_TYPE__C                          as lead_type,\n        RAMP_POTENTIAL_TIMING__C              as ramp_potential_timing,\n        RAMP_POTENTIAL_HOURS__C               as ramp_potential_hours,\n        OTHER_COMPETITOR__C                   as other_competitor,\n        CONTENT_OFFER__C                      as content_offer,\n        LAST_ANALYSIS_FORM__C                 as last_analysis_form,\n        PACKAGE_TYPE__C                       as package_type,\n        HS_FORM_MESSAGE__C                    as hs_form_message,\n        X3RD_PARTY_TOOL__C                    as x3_rd_party_tool,\n        PRIMARY_FEATURE__C                    as primary_feature,\n        BILLABLE_UNIT__C                      as billable_unit,\n        SEED_PACKAGE_PRICE__C                 as seed_package_price,\n        KPIS__C                               as kpis,\n        D1_OUTCOME__C                         as d1_outcome,\n        TASK_LEARNING_CURVE__C                as task_learning_curve,\n        WORKFORCE__C                          as workforce,\n        LASTREFERENCEDDATE                    as last_referenced_at,\n        LASTVIEWEDDATE                        as last_viewed_at,\n        ANALYSIS_TO_PROPOSAL_DAYS__C          as analysis_to_proposal_days,\n        CONTRACTING_TO_CLOSE_DAYS__C          as contracting_to_close_days,\n        PROPOSAL_TO_CONTRACTING_DAYS__C       as proposal_to_contracting_days,\n        SQL_TO_ANALYSIS_DAYS__C               as sql_to_analysis_days,\n        REGION_DEFINITION__C                  as region_definition,\n        TERRITORY2ID                          as territory_2_id,\n        _SDC_BATCHED_AT                       as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                     as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                      as _sdc_received_at,\n        _SDC_SEQUENCE                         as _sdc_sequence,\n        _SDC_TABLE_VERSION                    as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_opportunity"}, "model.edw.base_salesforce_opportunityhistory": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce','opportunityhistory') }}\n),\nrenamed as (\n    select \n        AMOUNT             as amount,\n        CLOSEDATE          as close_at,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        EXPECTEDREVENUE    as expected_revenue,\n        FORECASTCATEGORY   as forecast_category,\n        ID                 as opportunity_history_id,\n        ISDELETED          as is_deleted,\n        OPPORTUNITYID      as opportunity_id,\n        PROBABILITY        as probability,\n        STAGENAME          as stage_name,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.opportunityhistory"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_opportunityhistory"], "unique_id": "model.edw.base_salesforce_opportunityhistory", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_opportunityhistory.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_opportunityhistory.sql", "name": "base_salesforce_opportunityhistory", "alias": "base_salesforce_opportunityhistory", "checksum": {"name": "sha256", "checksum": "1febdbeb24f0ec0bae2c485c91b0f5e8a0707e5175e79705f9df7abcd91cfff2"}, "tags": [], "refs": [], "sources": [["salesforce", "opportunityhistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_opportunityhistory.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.opportunityhistory\n),\nrenamed as (\n    select \n        AMOUNT             as amount,\n        CLOSEDATE          as close_at,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        EXPECTEDREVENUE    as expected_revenue,\n        FORECASTCATEGORY   as forecast_category,\n        ID                 as opportunity_history_id,\n        ISDELETED          as is_deleted,\n        OPPORTUNITYID      as opportunity_id,\n        PROBABILITY        as probability,\n        STAGENAME          as stage_name,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_opportunityhistory"}, "model.edw.base_salesforce_account": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce','account') }}\n),\nrenamed as (\n    select \n        ACCOUNTSOURCE                               as account_source,\n        ACCOUNTS__C                                 as accounts,\n        ACCOUNT_18_DIGIT_ID__C                      as account_18_digit_id,\n        ACCOUNT_MONTHLY_COMMITMENT__C               as account_monthly_commitment,\n        ACCOUNT_MRR__C                              as account_mrr,\n        ACCOUNT_NUMBER__C                           as account_number,\n        ACCOUNT_SOURCE_DETAIL__C                    as account_source_detail,\n        ACCOUNT_STATUS__C                           as account_status,\n        ACTIVE_CONTRACTS__C                         as active_contracts,\n        ACTIVE_SUBSCRIPTION_CONTRACTS__C            as active_subscription_contracts,\n        ANNUALREVENUE                               as annual_revenue,\n        ASSIGNED_ACCOUNT__C                         as assigned_account,\n        BILLINGCITY                                 as billing_city,\n        BILLINGCOUNTRY                              as billing_country,\n        BILLINGPOSTALCODE                           as billing_postal_code,\n        BILLINGSTATE                                as billing_state,\n        BILLINGSTREET                               as billing_street,\n        BOOKED_OPPORTUNITIES__C                     as booked_opportunities,\n        BYPASS_NEW_OWNER_ALERT__C                   as bypass_new_owner_alert,\n        CLOUDFACTORY_LEAD_CHK__C                    as cloudfactory_lead_chk,\n        COMPANY_CAREERS_PAGE__C                     as company_careers_page,\n        CONTENT_OFFER__C                            as content_offer,\n        CREATEDBYID                                 as created_by_id,\n        CREATEDDATE                                 as created_at,\n        CRUNCHBASE_CATEGORY__C                      as crunchbase_category,\n        CRUNCHBASE_URL__C                           as crunchbase_url,\n        CSM_CLIENT_SCORE__C                         as csm_client_score,\n        DELIGHTEDINC__DETRACTORS__C                 as delighted_inc_detractors,\n        DELIGHTEDINC__NPS__C                        as delighted_inc_nps,\n        DELIGHTEDINC__PASSIVES__C                   as delighted_inc_passives,\n        DELIGHTEDINC__PROMOTERS__C                  as delighted_inc_promoters,\n        DELIVERY_MANAGER__C                         as delivery_manager,\n        DELIVERY_OWNER__C                           as delivery_owner,\n        DESCRIPTION                                 as account_description,\n        FAX                                         as fax,\n        FIRST_BOOKED_OPPORTUNITY__C                 as first_booked_opportunity,\n        FORTUNE_1000__C                             as fortune_1000,\n        HUBSPOT_ACCOUNT_CAMPAIGN__C                 as hubspot_account_campaign,\n        ID                                          as account_id,\n        IDEAL_CLIENT_PROFILE_SCORE__C               as ideal_client_profile_score,\n        INDUSTRY                                    as industry,\n        ISDELETED                                   as is_deleted,\n        LASTACTIVITYDATE                            as last_activity_at,\n        LASTMODIFIEDBYID                            as last_modifiedby_id,\n        LASTMODIFIEDDATE                            as last_modified_at,\n        LAST_DQ_ACCOUNT_REASON__C                   as last_dq_account_reason,\n        LAST_ROUND_AMOUNT__C                        as last_round_amount,\n        LAST_ROUND_DATE__C                          as last_round_date,\n        LAST_ROUND_TYPE__C                          as last_round_type,\n        LAST_SALES_ACTIVITY__C                      as last_sales_activity,\n        LEAD_CHANNEL__C                             as lead_channel,\n        LEAD_SOURCE__C                              as lead_source,\n        LEGAL_NAME__C                               as legal_name,\n        LINKEDIN__C                                 as linkedin,\n        MASTERRECORDID                              as master_record_id,\n        MICROMARKET__C                              as micromarket,\n        MOST_RECENT_ACQUISITION_MEDIUM__C           as most_recent_acquisition_medium,\n        MOST_RECENT_REFERRING_SOURCE__C             as most_recent_referring_source,\n        NAME                                        as account_name,\n        NAME__C                                     as account_name_alt,\n        NEW_OWNER_MESSAGE__C                        as new_owner_message,\n        NO_OF_LOGOS__C                              as no_of_logos,\n        NUMBEROFEMPLOYEES                           as number_of_employees,\n        NUMBER_OF_LOCATIONS__C                      as number_of_locations,\n        OWNERID                                     as owner_id,\n        PARENTID                                    as parent_id,\n        PARTNER_PROFILE__C                          as partner_profile,\n        PHONE                                       as account_phone,\n        PHOTOURL                                    as photo_url,\n        POD_EFFORT_SCORE__C                         as pod_effort_score,\n        POD__C                                      as pod,\n        PRIMARY_FOCUS__C                            as primary_focus,\n        PRIORITY_REASON_DETAIL__C                   as priority_reason_detail,\n        PRIORITY_REASON__C                          as priority_reason,\n        PRIORITY_TYPE__C                            as priority_type,\n        QBDIALER__DIALS__C                          as qb_dialer_dials,\n        RATING                                      as account_rating,\n        RECORDTYPEID                                as record_type_id,\n        REGION__C                                   as region,\n        SEGMENT__C                                  as segment,\n        SHIPPINGCITY                                as shipping_city,\n        SHIPPINGCOUNTRY                             as shipping_country,\n        SHIPPINGPOSTALCODE                          as shipping_postalcode,\n        SHIPPINGSTATE                               as shipping_state,\n        SHIPPINGSTREET                              as shipping_street,\n        SOLUTIONS_ARCHITECT__C                      as solutions_architect,\n        SOURCED_PARTNER__C                          as sourced_partner,\n        SPEAKERTEXT_LEAD_CHK__C                     as speakertext_lead_chk,\n        SYSTEMMODSTAMP                              as system_mod_stamp,\n        TECH_APPLICATION__C                         as tech_application,\n        TOTAL_FUNDING__C                            as total_funding,\n        TWITTER__C                                  as twitter,\n        TYPE                                        as account_type,\n        USE_CASE__C                                 as use_case,\n        VAT__C                                      as vat,\n        WEBSITE                                     as website,\n        WEIGHTED_CLIENT_SCORE__C                    as weighted_client_score,\n        WEIGHTED_POD_EFFORT_SCORE__C                as weighted_pod_effort_score,\n        ZISF__ZOOMINFO_INDUSTRY__C                  as zisf_zoom_info_industry,\n        ZISF__ZOOM_ID__C                            as zisf_zoom_id,\n        ZISF__ZOOM_LASTUPDATED__C                   as zisf_zoom_last_up_atd,\n        LASTREFERENCEDDATE                          as last_referenced_at,\n        IDEAL_CLIENT_PROFILE__C                     as ideal_client_profile,\n        QBDIALER__LASTCALLTIME__C                   as qb_dialer_last_calltime,\n        LASTVIEWEDDATE                              as last_viewed_at,\n        ZOOMINFO_DESCRIPTION__C                     as zoom_info_description,\n        ZOOMINFO_STREET__C                          as zoom_info_street,\n        ZOOMINFO_CITY__C                            as zoom_info_city,\n        ZOOMINFO_FAX__C                             as zoom_info_fax,\n        ZOOMINFO_ACCOUNT_SOURCE__C                  as zoom_info_account_source,\n        ZOOMINFO__C                                 as zoom_info,\n        ZOOMINFO_PHONE__C                           as zoom_info_phone,\n        ZOOMINFO_STATE__C                           as zoom_info_state,\n        ZOOMINFO_COUNTRY__C                         as zoom_info_country,\n        ZOOMINFO_REVENUE__C                         as zoom_info_revenue,\n        ZOOMINFO_EMPLOYEE_COUNT__C                  as zoom_info_employee_count,\n        ZOOMINFO_WEBSITE__C                         as zoom_info_website,\n        REGION_DEFINITION__C                        as region_definition,\n        REGION_DEFINITION_NAME__C                   as region_definition_name,\n        REGION_DEFINITION_NAME_FORM__C              as region_definition_name_form,\n        GET_REGION_DEFINITION__C                    as get_region_definition,\n        IDEAL_CLIENT_PROFILE_DETAIL__C              as ideal_client_profile_detail,\n        DOZISF__ZOOMINFO_LAST_UPDATED__C            as dozisf_zoom_info_last_updated,\n        DOZISF__ZOOMINFO_FIRST_UPDATED__C           as dozisf_zoom_info_first_updated,\n        ZOOMINFO_ENRICHED_STATUS__C                 as zoom_info_enriched_status,\n        DOZISF__ZOOMINFO_ID__C                      as dozisf_zoom_info_id,\n        ZOOMINFO_TOTAL_FUNDING__C                   as zoom_info_total_funding,\n        ZOOMINFO_PARENT_COMPANY_ZOOMINFO_ID__C      as zoom_info_parent_company_zoom_info_id,\n        ZOOMINFO_FUNDING_ROUNDS__C                  as zoom_info_funding_rounds,\n        ZOOMINFO_INDUSTRY__C                        as zoom_info_industry,\n        ZOOMINFO_EMPLOYEE_RANGE__C                  as zoom_info_employee_range,\n        ZOOMINFO_PARENT_COMPANY_NAME__C             as zoom_info_parent_company_name,\n        ZOOMINFO_TOTAL_FUNDING__C__ST               as zoom_info_total_funding_st,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_ZOOMINF__C as zoom_info_ultimate_parent_company_zoominf,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_NAME__C    as zoom_info_ultimate_parent_company_name,\n        PROGRAM_MANAGER__C                          as program_manager,\n        ACCOUNT_MINIMUM_MONTHLY_COMMITMENT__C       as account_minimum_monthly_commitment,\n        TIER__C                                     as tier,\n        PRIORITY__C                                 as priority,\n        _SDC_BATCHED_AT                             as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                           as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                            as _sdc_received_at,\n        _SDC_SEQUENCE                               as _sdc_sequence,\n        _SDC_TABLE_VERSION                          as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.account"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_account"], "unique_id": "model.edw.base_salesforce_account", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_account.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_account.sql", "name": "base_salesforce_account", "alias": "base_salesforce_account", "checksum": {"name": "sha256", "checksum": "f2d4b2edb811aa87ab181b07f78e1e11824bda299588d931dcd8b844bdca7b94"}, "tags": [], "refs": [], "sources": [["salesforce", "account"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_account.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.account\n),\nrenamed as (\n    select \n        ACCOUNTSOURCE                               as account_source,\n        ACCOUNTS__C                                 as accounts,\n        ACCOUNT_18_DIGIT_ID__C                      as account_18_digit_id,\n        ACCOUNT_MONTHLY_COMMITMENT__C               as account_monthly_commitment,\n        ACCOUNT_MRR__C                              as account_mrr,\n        ACCOUNT_NUMBER__C                           as account_number,\n        ACCOUNT_SOURCE_DETAIL__C                    as account_source_detail,\n        ACCOUNT_STATUS__C                           as account_status,\n        ACTIVE_CONTRACTS__C                         as active_contracts,\n        ACTIVE_SUBSCRIPTION_CONTRACTS__C            as active_subscription_contracts,\n        ANNUALREVENUE                               as annual_revenue,\n        ASSIGNED_ACCOUNT__C                         as assigned_account,\n        BILLINGCITY                                 as billing_city,\n        BILLINGCOUNTRY                              as billing_country,\n        BILLINGPOSTALCODE                           as billing_postal_code,\n        BILLINGSTATE                                as billing_state,\n        BILLINGSTREET                               as billing_street,\n        BOOKED_OPPORTUNITIES__C                     as booked_opportunities,\n        BYPASS_NEW_OWNER_ALERT__C                   as bypass_new_owner_alert,\n        CLOUDFACTORY_LEAD_CHK__C                    as cloudfactory_lead_chk,\n        COMPANY_CAREERS_PAGE__C                     as company_careers_page,\n        CONTENT_OFFER__C                            as content_offer,\n        CREATEDBYID                                 as created_by_id,\n        CREATEDDATE                                 as created_at,\n        CRUNCHBASE_CATEGORY__C                      as crunchbase_category,\n        CRUNCHBASE_URL__C                           as crunchbase_url,\n        CSM_CLIENT_SCORE__C                         as csm_client_score,\n        DELIGHTEDINC__DETRACTORS__C                 as delighted_inc_detractors,\n        DELIGHTEDINC__NPS__C                        as delighted_inc_nps,\n        DELIGHTEDINC__PASSIVES__C                   as delighted_inc_passives,\n        DELIGHTEDINC__PROMOTERS__C                  as delighted_inc_promoters,\n        DELIVERY_MANAGER__C                         as delivery_manager,\n        DELIVERY_OWNER__C                           as delivery_owner,\n        DESCRIPTION                                 as account_description,\n        FAX                                         as fax,\n        FIRST_BOOKED_OPPORTUNITY__C                 as first_booked_opportunity,\n        FORTUNE_1000__C                             as fortune_1000,\n        HUBSPOT_ACCOUNT_CAMPAIGN__C                 as hubspot_account_campaign,\n        ID                                          as account_id,\n        IDEAL_CLIENT_PROFILE_SCORE__C               as ideal_client_profile_score,\n        INDUSTRY                                    as industry,\n        ISDELETED                                   as is_deleted,\n        LASTACTIVITYDATE                            as last_activity_at,\n        LASTMODIFIEDBYID                            as last_modifiedby_id,\n        LASTMODIFIEDDATE                            as last_modified_at,\n        LAST_DQ_ACCOUNT_REASON__C                   as last_dq_account_reason,\n        LAST_ROUND_AMOUNT__C                        as last_round_amount,\n        LAST_ROUND_DATE__C                          as last_round_date,\n        LAST_ROUND_TYPE__C                          as last_round_type,\n        LAST_SALES_ACTIVITY__C                      as last_sales_activity,\n        LEAD_CHANNEL__C                             as lead_channel,\n        LEAD_SOURCE__C                              as lead_source,\n        LEGAL_NAME__C                               as legal_name,\n        LINKEDIN__C                                 as linkedin,\n        MASTERRECORDID                              as master_record_id,\n        MICROMARKET__C                              as micromarket,\n        MOST_RECENT_ACQUISITION_MEDIUM__C           as most_recent_acquisition_medium,\n        MOST_RECENT_REFERRING_SOURCE__C             as most_recent_referring_source,\n        NAME                                        as account_name,\n        NAME__C                                     as account_name_alt,\n        NEW_OWNER_MESSAGE__C                        as new_owner_message,\n        NO_OF_LOGOS__C                              as no_of_logos,\n        NUMBEROFEMPLOYEES                           as number_of_employees,\n        NUMBER_OF_LOCATIONS__C                      as number_of_locations,\n        OWNERID                                     as owner_id,\n        PARENTID                                    as parent_id,\n        PARTNER_PROFILE__C                          as partner_profile,\n        PHONE                                       as account_phone,\n        PHOTOURL                                    as photo_url,\n        POD_EFFORT_SCORE__C                         as pod_effort_score,\n        POD__C                                      as pod,\n        PRIMARY_FOCUS__C                            as primary_focus,\n        PRIORITY_REASON_DETAIL__C                   as priority_reason_detail,\n        PRIORITY_REASON__C                          as priority_reason,\n        PRIORITY_TYPE__C                            as priority_type,\n        QBDIALER__DIALS__C                          as qb_dialer_dials,\n        RATING                                      as account_rating,\n        RECORDTYPEID                                as record_type_id,\n        REGION__C                                   as region,\n        SEGMENT__C                                  as segment,\n        SHIPPINGCITY                                as shipping_city,\n        SHIPPINGCOUNTRY                             as shipping_country,\n        SHIPPINGPOSTALCODE                          as shipping_postalcode,\n        SHIPPINGSTATE                               as shipping_state,\n        SHIPPINGSTREET                              as shipping_street,\n        SOLUTIONS_ARCHITECT__C                      as solutions_architect,\n        SOURCED_PARTNER__C                          as sourced_partner,\n        SPEAKERTEXT_LEAD_CHK__C                     as speakertext_lead_chk,\n        SYSTEMMODSTAMP                              as system_mod_stamp,\n        TECH_APPLICATION__C                         as tech_application,\n        TOTAL_FUNDING__C                            as total_funding,\n        TWITTER__C                                  as twitter,\n        TYPE                                        as account_type,\n        USE_CASE__C                                 as use_case,\n        VAT__C                                      as vat,\n        WEBSITE                                     as website,\n        WEIGHTED_CLIENT_SCORE__C                    as weighted_client_score,\n        WEIGHTED_POD_EFFORT_SCORE__C                as weighted_pod_effort_score,\n        ZISF__ZOOMINFO_INDUSTRY__C                  as zisf_zoom_info_industry,\n        ZISF__ZOOM_ID__C                            as zisf_zoom_id,\n        ZISF__ZOOM_LASTUPDATED__C                   as zisf_zoom_last_up_atd,\n        LASTREFERENCEDDATE                          as last_referenced_at,\n        IDEAL_CLIENT_PROFILE__C                     as ideal_client_profile,\n        QBDIALER__LASTCALLTIME__C                   as qb_dialer_last_calltime,\n        LASTVIEWEDDATE                              as last_viewed_at,\n        ZOOMINFO_DESCRIPTION__C                     as zoom_info_description,\n        ZOOMINFO_STREET__C                          as zoom_info_street,\n        ZOOMINFO_CITY__C                            as zoom_info_city,\n        ZOOMINFO_FAX__C                             as zoom_info_fax,\n        ZOOMINFO_ACCOUNT_SOURCE__C                  as zoom_info_account_source,\n        ZOOMINFO__C                                 as zoom_info,\n        ZOOMINFO_PHONE__C                           as zoom_info_phone,\n        ZOOMINFO_STATE__C                           as zoom_info_state,\n        ZOOMINFO_COUNTRY__C                         as zoom_info_country,\n        ZOOMINFO_REVENUE__C                         as zoom_info_revenue,\n        ZOOMINFO_EMPLOYEE_COUNT__C                  as zoom_info_employee_count,\n        ZOOMINFO_WEBSITE__C                         as zoom_info_website,\n        REGION_DEFINITION__C                        as region_definition,\n        REGION_DEFINITION_NAME__C                   as region_definition_name,\n        REGION_DEFINITION_NAME_FORM__C              as region_definition_name_form,\n        GET_REGION_DEFINITION__C                    as get_region_definition,\n        IDEAL_CLIENT_PROFILE_DETAIL__C              as ideal_client_profile_detail,\n        DOZISF__ZOOMINFO_LAST_UPDATED__C            as dozisf_zoom_info_last_updated,\n        DOZISF__ZOOMINFO_FIRST_UPDATED__C           as dozisf_zoom_info_first_updated,\n        ZOOMINFO_ENRICHED_STATUS__C                 as zoom_info_enriched_status,\n        DOZISF__ZOOMINFO_ID__C                      as dozisf_zoom_info_id,\n        ZOOMINFO_TOTAL_FUNDING__C                   as zoom_info_total_funding,\n        ZOOMINFO_PARENT_COMPANY_ZOOMINFO_ID__C      as zoom_info_parent_company_zoom_info_id,\n        ZOOMINFO_FUNDING_ROUNDS__C                  as zoom_info_funding_rounds,\n        ZOOMINFO_INDUSTRY__C                        as zoom_info_industry,\n        ZOOMINFO_EMPLOYEE_RANGE__C                  as zoom_info_employee_range,\n        ZOOMINFO_PARENT_COMPANY_NAME__C             as zoom_info_parent_company_name,\n        ZOOMINFO_TOTAL_FUNDING__C__ST               as zoom_info_total_funding_st,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_ZOOMINF__C as zoom_info_ultimate_parent_company_zoominf,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_NAME__C    as zoom_info_ultimate_parent_company_name,\n        PROGRAM_MANAGER__C                          as program_manager,\n        ACCOUNT_MINIMUM_MONTHLY_COMMITMENT__C       as account_minimum_monthly_commitment,\n        TIER__C                                     as tier,\n        PRIORITY__C                                 as priority,\n        _SDC_BATCHED_AT                             as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                           as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                            as _sdc_received_at,\n        _SDC_SEQUENCE                               as _sdc_sequence,\n        _SDC_TABLE_VERSION                          as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_account"}, "model.edw.base_hist_salesforce_opportunityhistory": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('opportunityhistory') }}\n),\nrenamed as (\n    select \n        AMOUNT             as amount,\n        CLOSEDATE          as close_at,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        EXPECTEDREVENUE    as expected_revenue,\n        FORECASTCATEGORY   as forecast_category,\n        ID                 as opportunity_history_id,\n        ISDELETED          as is_deleted,\n        OPPORTUNITYID      as opportunity_id,\n        PROBABILITY        as probability,\n        STAGENAME          as stage_name,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.opportunityhistory"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_opportunityhistory"], "unique_id": "model.edw.base_hist_salesforce_opportunityhistory", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_opportunityhistory.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_opportunityhistory.sql", "name": "base_hist_salesforce_opportunityhistory", "alias": "base_hist_salesforce_opportunityhistory", "checksum": {"name": "sha256", "checksum": "e78ec5de46a0ae77e2c252600bfac175eb22b37e57cff1a4fe0a0b64194896c9"}, "tags": [], "refs": [["opportunityhistory"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_opportunityhistory.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.opportunityhistory\n),\nrenamed as (\n    select \n        AMOUNT             as amount,\n        CLOSEDATE          as close_at,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        EXPECTEDREVENUE    as expected_revenue,\n        FORECASTCATEGORY   as forecast_category,\n        ID                 as opportunity_history_id,\n        ISDELETED          as is_deleted,\n        OPPORTUNITYID      as opportunity_id,\n        PROBABILITY        as probability,\n        STAGENAME          as stage_name,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_opportunityhistory"}, "model.edw.base_hist_salesforce_opportunity": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('opportunity') }}\n),\nrenamed as (\n    select \n        ACCOUNTID                             as account_id,\n        ACCOUNT_PRIMARY_FOCUS__C              as account_primary_focus,\n        ACCOUNT_PRIORITY_TYPE__C              as account_priority_type,\n        ACCOUNT_REGION__C                     as account_region,\n        ACCOUNT_SEGMENT__C                    as account_segment,\n        ADD_GOOGLE_DOC__C                     as add_google_doc,\n        AGE_IN_DAYS__C                        as age_in_days,\n        AMOUNT                                as amount,\n        ANALYSIS_DATE__C                      as analysis_at,\n        ANALYSIS__C                           as analysis,\n        AVG_TIME_PER_TASK__C                  as avg_time_per_task,\n        BOOKED_OPPS_TARGET__C                 as booked_opps_target,\n        BOOKED_STATUS__C                      as booked_status,\n        BUSINESS_DIVISION__C                  as business_division,\n        CAMPAIGNID                            as campaign_id,\n        CBI__C                                as cbi,\n        CHALLENGES__C                         as challenges,\n        CHANGE_EFFECTIVE_DATE__C              as change_effective_date,\n        CHANNEL_CFQ_D1_OPP_TARGET__C          as channel_cfq_d1_opp_target,\n        CHANNEL__C                            as channel,\n        CLOSEDATE                             as close_at,\n        CLOSED_LOST_DETAIL__C                 as closed_lost_detail,\n        CLOSE_FQ__C                           as close_fq,\n        CLOUDFACTORY_LEAD__C                  as cloudfactory_lead,\n        COMMITMENT__C                         as commitment,\n        COMPANY_DESCRIPTION__C                as company_description,\n        COMPETITOR_FORM__C                    as competitor_form,\n        CONTRACTING_DATE__C                   as contracting_date,\n        CONTRACTING__C                        as contracting,\n        CONTRACT_18_DIGIT_ID__C               as contract_18_digit_id,\n        CONTRACT_TERMS__C                     as contract_terms,\n        CONTRACT__C                           as opportunity_contract,\n        CREATEDBYID                           as created_by_id,\n        CREATEDDATE                           as created_at,\n        CREATED_BY_EQUALS_ME__C               as created_by_equals_me,\n        CURRENT_PROCESS__C                    as current_process,\n        D1_CALLS_FQ_TARGET__C                 as d1_calls_fq_target,\n        D1_CALL_DATE__C                       as d1_call_date,\n        D1_CALL__C                            as d1_call,\n        D1_TO_SQL_DAYS__C                     as d1_to_sql_days,\n        DATE_OF_FIRST_CONTACT__C              as date_of_first_contact,\n        DAYS_SINCE_BASE__C                    as days_since_base,\n        DESCRIPTION                           as opportunity_description,\n        DOWNGRADE_REASON__C                   as downgrade_reason,\n        END_DATE__C                           as end_date,\n        EXISTING_SOLUTION_PRIMARY__C          as existing_solution_primary,\n        EXPANSION_TYPE__C                     as expansion_type,\n        EXPECTEDREVENUE                       as expected_revenue,\n        EXPECTED_MRR__C                       as expected_mrr,\n        FISCAL                                as fiscal,\n        FISCALQUARTER                         as fiscal_quarter,\n        FISCALYEAR                            as fiscal_year,\n        FORECASTCATEGORY                      as forecast_category,\n        FORECASTCATEGORYNAME                  as forecast_category_name,\n        GO_TO_MARKET_FQ_CREATED_OPP_TARGET__C as go_to_market_fq_created_opp_target,\n        GO_TO_MARKET_FQ_D1_OPP_TARGET__C      as go_to_market_fq_d1_opp_target,\n        GO_TO_MARKET_ROLLUP__C                as go_to_market_rollup,\n        HASOPENACTIVITY                       as has_open_activity,\n        HASOPPORTUNITYLINEITEM                as has_opportunity_line_item,\n        HASOVERDUETASK                        as has_overdue_task,\n        HAS_DQ_ACCOUNT_REASON__C              as has_dq_account_reason,\n        ID                                    as opportunity_id,\n        IDEAL_SOLUTION__C                     as ideal_solution,\n        IMPACT__C                             as impact,\n        INDUSTRY__C                           as industry,\n        ISACTIVE_SDR__C                       as is_active_sdr,\n        ISCLOSED                              as is_closed,\n        ISDELETED                             as is_deleted,\n        ISEXCLUDEDFROMTERRITORY2FILTER        as is_excluded_from_territory_2_filter,\n        ISSPLIT                               as is_split,\n        ISWON                                 as is_won,\n        LASTACTIVITYDATE                      as last_activity_at,\n        LASTMODIFIEDBYID                      as last_modified_by_id,\n        LASTMODIFIEDDATE                      as last_modified_at,\n        LEADSOURCE                            as lead_source,\n        LEAD_CATEGORY__C                      as lead_category,\n        LEAD_SOURCE_DETAIL__C                 as lead_source_detail,\n        LID__IS_INFLUENCED__C                 as lid_is_influenced,\n        LOST_REASON__C                        as lost_reason,\n        MARKETING_ORIGINAL_SOURCE__C          as marketing_original_source,\n        MEANINGFUL_WORK_NUM__C                as meaningful_work_num,\n        MEANINGFUL_WORK_UNIT__C               as meaningful_work_unit,\n        MEANINGFUL_WORK__C                    as meaningful_work,\n        MICROMARKET__C                        as micromarket,\n        MONTHLY_AMOUNT__C                     as monthly_amount,\n        MONTHLY_COMMITMENT_DIFFERENCE__C      as monthly_commitment_difference,\n        MONTHLY_COMMITMENT__C                 as monthly_commitment,\n        MONTH_10__C                           as month_10,\n        MONTH_11__C                           as month_11,\n        MONTH_12__C                           as month_12,\n        MONTH_1__C                            as month_1,\n        MONTH_2__C                            as month_2,\n        MONTH_3__C                            as month_3,\n        MONTH_4__C                            as month_4,\n        MONTH_5__C                            as month_5,\n        MONTH_6__C                            as month_6,\n        MONTH_7__C                            as month_7,\n        MONTH_8__C                            as month_8,\n        MONTH_9__C                            as month_9,\n        MRR__C                                as mrr,\n        NAME                                  as opportunity_name,\n        NET_EXPANSION_MRR__C                  as net_expansion_mrr,\n        NET_NEW_MRR__C                        as net_new_mrr,\n        NET_REPORTING__C                      as net_reporting,\n        NEXTSTEP                              as nextstep,\n        NEXT_STEP__C                          as next_step_alt,\n        ONBOARDING_START_DATE__C              as onboarding_start_date,\n        OPPORTUNITIES__C                      as opportunities,\n        OPPORTUNITY_18_DIGIT_ID__C            as opportunity_18_digit_id,\n        OPPORTUNITY_ATTRIBUTION__C            as opportunity_attribution,\n        OPPORTUNITY_NUMBER__C                 as opportunity_number,\n        OPPS_CREATED_TARGET__C                as opps_created_target,\n        OWNERID                               as owner_id,\n        PAIN_POINTS__C                        as pain_points,\n        PAYMENT_OPTION__C                     as payment_option,\n        PER_UNIT_PRICE__C                     as per_unit_price,\n        PHASE_1_AMOUNT__C                     as phase_1_amount,\n        PLAN__C                               as plan,\n        POTENTIAL_IMPACT__C                   as potential_impact,\n        POTENTIAL_RISKS__C                    as potential_risks,\n        PREMIUM_WORKSTATION_CONNECTIVITY__C   as premium_workstation_connectivity,\n        PREMIUM_WORKSTATION_HARDWARE__C       as premium_workstation_hardware,\n        PREMIUM_WORKSTATION_MONITORS__C       as premium_workstation_monitors,\n        PRICE__C                              as price,\n        PRIMARY_COMPETITOR__C                 as primary_competitor,\n        PRIORITY_REASON_DETAIL__C             as priority_reason_detail,\n        PRIORITY_REASON__C                    as priority_reason,\n        PRIORITY_TYPE__C                      as priority_type,\n        PROBABILITY                           as probability,\n        PRODUCTION_LINE__C                    as production_line,\n        PRODUCTION_MANAGER__C                 as production_manager,\n        PRODUCTION_START_DATE__C              as production_start_date,\n        PRODUCT_TYPE_FQ_BOOKED_OPP_TARGET__C  as product_type_fq_booked_opp_target,\n        PRODUCT_TYPE__C                       as product_type,\n        PROPOSAL_DATE__C                      as proposal_date,\n        PROPOSAL__C                           as proposal,\n        QUALIFIED_DEAL__C                     as qualified_deal,\n        QUALIFIED_OPPORTUNITY__C              as qualified_opportunity,\n        RECORDTYPEID                          as record_type_id,\n        RELATIONSHIP__C                       as relationship,\n        REVENUE_TARGET__C                     as revenue_target,\n        SALES_DIVISION__C                     as sales_division,\n        SALES_REP__C                          as sales_rep,\n        SERVICE_DURATION__C                   as service_duration,\n        SOLUTIONS_ARCHITECT__C                as solutions_architect,\n        SOLUTION__C                           as solution,\n        SOURCE_DETAIL__C                      as source_detail,\n        SOURCE__C                             as source,\n        SPEAKERTEXT_LEAD__C                   as speakertext_lead,\n        SQL_DATE__C                           as sql_date,\n        SQL__C                                as sql,\n        STAGENAME                             as stage_name,\n        STAKEHOLDERS__C                       as stakeholders,\n        SYSTEMMODSTAMP                        as system_mod_stamp_at,\n        TAT__C                                as tat,\n        TECH_APPLICATION__C                   as tech_application,\n        TERMED_MRR__C                         as termed_mrr,\n        TIMELINE__C                           as timeline,\n        TYPE                                  as opportunity_type,\n        UNITS__C                              as units,\n        UNIT_TYPE__C                          as unit_type,\n        USE_CASE_CATEGORY__C                  as use_case_category,\n        USE_CASE__C                           as use_case,\n        VOLUME__C                             as volume,\n        WEIGHTED_MRR__C                       as weighted_mrr,\n        WHY_THEY_WILL_BUY__C                  as why_they_will_buy,\n        WON_MRR__C                            as won_mrr,\n        WORKSTREAM_MILESTONES__C              as workstream_milestones,\n        X3RD_PARTY_TOOL_FORM__C               as x3_rd_party_tool_form,\n        EXPANSION_LIKELIHOOD__C               as expansion_likelihood,\n        SPECIAL_TERMS__C                      as special_terms,\n        MOST_RECENT_REFERRING_SOURCE__C       as most_recent_referring_source,\n        EU_PERSONAL_DATA__C                   as eu_personal_data,\n        TERMINATION_NOTICE__C                 as termination_notice,\n        DQ_ACCOUNT_REASON__C                  as dq_account_reason,\n        PUBLICITY__C                          as publicity,\n        COMPETITOR__C                         as competitor,\n        WORKSTREAM_URL__C                     as workstream_url,\n        REFERRAL_ACCOUNT__C                   as referral_account,\n        SDR__C                                as sdr,\n        LOST_REASON_DETAIL__C                 as lost_reason_detail,\n        TOOL_DETAILS__C                       as tool_details,\n        PRIMARY_TOOL__C                       as primary_tool,\n        OTHER_NOTES__C                        as other_notes,\n        NOTES__C                              as notes,\n        FLOW_PLATFORM__C                      as flow_platform,\n        LEAD_SOURCE_MOST_RECENT__C            as lead_source_most_recent,\n        UPGRADE_REASON__C                     as upgrade_reason,\n        OF_WALLET__C                          as of_wallet,\n        PREMIUM_WORKSTATION_ADD_ONS__C        as premium_workstation_add_ons,\n        RAMP_POTENTIAL__C                     as ramp_potential,\n        NURTURE_TRACK__C                      as nurture_track,\n        DELIVERY_METHOD__C                    as delivery_method,\n        NURTURE_PLAN__C                       as nurture_plan,\n        LEAD_SOURCE_MOST_RECENT_DETAIL__C     as lead_source_most_recent_detail,\n        MOST_RECENT_ACQUISITION_MEDIUM__C     as most_recent_acquisition_medium,\n        LEAD_TYPE__C                          as lead_type,\n        RAMP_POTENTIAL_TIMING__C              as ramp_potential_timing,\n        RAMP_POTENTIAL_HOURS__C               as ramp_potential_hours,\n        OTHER_COMPETITOR__C                   as other_competitor,\n        CONTENT_OFFER__C                      as content_offer,\n        LAST_ANALYSIS_FORM__C                 as last_analysis_form,\n        PACKAGE_TYPE__C                       as package_type,\n        HS_FORM_MESSAGE__C                    as hs_form_message,\n        X3RD_PARTY_TOOL__C                    as x3_rd_party_tool,\n        PRIMARY_FEATURE__C                    as primary_feature,\n        BILLABLE_UNIT__C                      as billable_unit,\n        SEED_PACKAGE_PRICE__C                 as seed_package_price,\n        KPIS__C                               as kpis,\n        D1_OUTCOME__C                         as d1_outcome,\n        TASK_LEARNING_CURVE__C                as task_learning_curve,\n        WORKFORCE__C                          as workforce,\n        LASTREFERENCEDDATE                    as last_referenced_at,\n        LASTVIEWEDDATE                        as last_viewed_at,\n        ANALYSIS_TO_PROPOSAL_DAYS__C          as analysis_to_proposal_days,\n        CONTRACTING_TO_CLOSE_DAYS__C          as contracting_to_close_days,\n        PROPOSAL_TO_CONTRACTING_DAYS__C       as proposal_to_contracting_days,\n        SQL_TO_ANALYSIS_DAYS__C               as sql_to_analysis_days,\n        REGION_DEFINITION__C                  as region_definition,\n        TERRITORY2ID                          as territory_2_id,\n        _SDC_BATCHED_AT                       as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                     as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                      as _sdc_received_at,\n        _SDC_SEQUENCE                         as _sdc_sequence,\n        _SDC_TABLE_VERSION                    as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.opportunity"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_opportunity"], "unique_id": "model.edw.base_hist_salesforce_opportunity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_opportunity.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_opportunity.sql", "name": "base_hist_salesforce_opportunity", "alias": "base_hist_salesforce_opportunity", "checksum": {"name": "sha256", "checksum": "5c8d0c7372c5288fa81a37c6148a85294a708a01c12f702d6656fe8bad70044d"}, "tags": [], "refs": [["opportunity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_opportunity.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.opportunity\n),\nrenamed as (\n    select \n        ACCOUNTID                             as account_id,\n        ACCOUNT_PRIMARY_FOCUS__C              as account_primary_focus,\n        ACCOUNT_PRIORITY_TYPE__C              as account_priority_type,\n        ACCOUNT_REGION__C                     as account_region,\n        ACCOUNT_SEGMENT__C                    as account_segment,\n        ADD_GOOGLE_DOC__C                     as add_google_doc,\n        AGE_IN_DAYS__C                        as age_in_days,\n        AMOUNT                                as amount,\n        ANALYSIS_DATE__C                      as analysis_at,\n        ANALYSIS__C                           as analysis,\n        AVG_TIME_PER_TASK__C                  as avg_time_per_task,\n        BOOKED_OPPS_TARGET__C                 as booked_opps_target,\n        BOOKED_STATUS__C                      as booked_status,\n        BUSINESS_DIVISION__C                  as business_division,\n        CAMPAIGNID                            as campaign_id,\n        CBI__C                                as cbi,\n        CHALLENGES__C                         as challenges,\n        CHANGE_EFFECTIVE_DATE__C              as change_effective_date,\n        CHANNEL_CFQ_D1_OPP_TARGET__C          as channel_cfq_d1_opp_target,\n        CHANNEL__C                            as channel,\n        CLOSEDATE                             as close_at,\n        CLOSED_LOST_DETAIL__C                 as closed_lost_detail,\n        CLOSE_FQ__C                           as close_fq,\n        CLOUDFACTORY_LEAD__C                  as cloudfactory_lead,\n        COMMITMENT__C                         as commitment,\n        COMPANY_DESCRIPTION__C                as company_description,\n        COMPETITOR_FORM__C                    as competitor_form,\n        CONTRACTING_DATE__C                   as contracting_date,\n        CONTRACTING__C                        as contracting,\n        CONTRACT_18_DIGIT_ID__C               as contract_18_digit_id,\n        CONTRACT_TERMS__C                     as contract_terms,\n        CONTRACT__C                           as opportunity_contract,\n        CREATEDBYID                           as created_by_id,\n        CREATEDDATE                           as created_at,\n        CREATED_BY_EQUALS_ME__C               as created_by_equals_me,\n        CURRENT_PROCESS__C                    as current_process,\n        D1_CALLS_FQ_TARGET__C                 as d1_calls_fq_target,\n        D1_CALL_DATE__C                       as d1_call_date,\n        D1_CALL__C                            as d1_call,\n        D1_TO_SQL_DAYS__C                     as d1_to_sql_days,\n        DATE_OF_FIRST_CONTACT__C              as date_of_first_contact,\n        DAYS_SINCE_BASE__C                    as days_since_base,\n        DESCRIPTION                           as opportunity_description,\n        DOWNGRADE_REASON__C                   as downgrade_reason,\n        END_DATE__C                           as end_date,\n        EXISTING_SOLUTION_PRIMARY__C          as existing_solution_primary,\n        EXPANSION_TYPE__C                     as expansion_type,\n        EXPECTEDREVENUE                       as expected_revenue,\n        EXPECTED_MRR__C                       as expected_mrr,\n        FISCAL                                as fiscal,\n        FISCALQUARTER                         as fiscal_quarter,\n        FISCALYEAR                            as fiscal_year,\n        FORECASTCATEGORY                      as forecast_category,\n        FORECASTCATEGORYNAME                  as forecast_category_name,\n        GO_TO_MARKET_FQ_CREATED_OPP_TARGET__C as go_to_market_fq_created_opp_target,\n        GO_TO_MARKET_FQ_D1_OPP_TARGET__C      as go_to_market_fq_d1_opp_target,\n        GO_TO_MARKET_ROLLUP__C                as go_to_market_rollup,\n        HASOPENACTIVITY                       as has_open_activity,\n        HASOPPORTUNITYLINEITEM                as has_opportunity_line_item,\n        HASOVERDUETASK                        as has_overdue_task,\n        HAS_DQ_ACCOUNT_REASON__C              as has_dq_account_reason,\n        ID                                    as opportunity_id,\n        IDEAL_SOLUTION__C                     as ideal_solution,\n        IMPACT__C                             as impact,\n        INDUSTRY__C                           as industry,\n        ISACTIVE_SDR__C                       as is_active_sdr,\n        ISCLOSED                              as is_closed,\n        ISDELETED                             as is_deleted,\n        ISEXCLUDEDFROMTERRITORY2FILTER        as is_excluded_from_territory_2_filter,\n        ISSPLIT                               as is_split,\n        ISWON                                 as is_won,\n        LASTACTIVITYDATE                      as last_activity_at,\n        LASTMODIFIEDBYID                      as last_modified_by_id,\n        LASTMODIFIEDDATE                      as last_modified_at,\n        LEADSOURCE                            as lead_source,\n        LEAD_CATEGORY__C                      as lead_category,\n        LEAD_SOURCE_DETAIL__C                 as lead_source_detail,\n        LID__IS_INFLUENCED__C                 as lid_is_influenced,\n        LOST_REASON__C                        as lost_reason,\n        MARKETING_ORIGINAL_SOURCE__C          as marketing_original_source,\n        MEANINGFUL_WORK_NUM__C                as meaningful_work_num,\n        MEANINGFUL_WORK_UNIT__C               as meaningful_work_unit,\n        MEANINGFUL_WORK__C                    as meaningful_work,\n        MICROMARKET__C                        as micromarket,\n        MONTHLY_AMOUNT__C                     as monthly_amount,\n        MONTHLY_COMMITMENT_DIFFERENCE__C      as monthly_commitment_difference,\n        MONTHLY_COMMITMENT__C                 as monthly_commitment,\n        MONTH_10__C                           as month_10,\n        MONTH_11__C                           as month_11,\n        MONTH_12__C                           as month_12,\n        MONTH_1__C                            as month_1,\n        MONTH_2__C                            as month_2,\n        MONTH_3__C                            as month_3,\n        MONTH_4__C                            as month_4,\n        MONTH_5__C                            as month_5,\n        MONTH_6__C                            as month_6,\n        MONTH_7__C                            as month_7,\n        MONTH_8__C                            as month_8,\n        MONTH_9__C                            as month_9,\n        MRR__C                                as mrr,\n        NAME                                  as opportunity_name,\n        NET_EXPANSION_MRR__C                  as net_expansion_mrr,\n        NET_NEW_MRR__C                        as net_new_mrr,\n        NET_REPORTING__C                      as net_reporting,\n        NEXTSTEP                              as nextstep,\n        NEXT_STEP__C                          as next_step_alt,\n        ONBOARDING_START_DATE__C              as onboarding_start_date,\n        OPPORTUNITIES__C                      as opportunities,\n        OPPORTUNITY_18_DIGIT_ID__C            as opportunity_18_digit_id,\n        OPPORTUNITY_ATTRIBUTION__C            as opportunity_attribution,\n        OPPORTUNITY_NUMBER__C                 as opportunity_number,\n        OPPS_CREATED_TARGET__C                as opps_created_target,\n        OWNERID                               as owner_id,\n        PAIN_POINTS__C                        as pain_points,\n        PAYMENT_OPTION__C                     as payment_option,\n        PER_UNIT_PRICE__C                     as per_unit_price,\n        PHASE_1_AMOUNT__C                     as phase_1_amount,\n        PLAN__C                               as plan,\n        POTENTIAL_IMPACT__C                   as potential_impact,\n        POTENTIAL_RISKS__C                    as potential_risks,\n        PREMIUM_WORKSTATION_CONNECTIVITY__C   as premium_workstation_connectivity,\n        PREMIUM_WORKSTATION_HARDWARE__C       as premium_workstation_hardware,\n        PREMIUM_WORKSTATION_MONITORS__C       as premium_workstation_monitors,\n        PRICE__C                              as price,\n        PRIMARY_COMPETITOR__C                 as primary_competitor,\n        PRIORITY_REASON_DETAIL__C             as priority_reason_detail,\n        PRIORITY_REASON__C                    as priority_reason,\n        PRIORITY_TYPE__C                      as priority_type,\n        PROBABILITY                           as probability,\n        PRODUCTION_LINE__C                    as production_line,\n        PRODUCTION_MANAGER__C                 as production_manager,\n        PRODUCTION_START_DATE__C              as production_start_date,\n        PRODUCT_TYPE_FQ_BOOKED_OPP_TARGET__C  as product_type_fq_booked_opp_target,\n        PRODUCT_TYPE__C                       as product_type,\n        PROPOSAL_DATE__C                      as proposal_date,\n        PROPOSAL__C                           as proposal,\n        QUALIFIED_DEAL__C                     as qualified_deal,\n        QUALIFIED_OPPORTUNITY__C              as qualified_opportunity,\n        RECORDTYPEID                          as record_type_id,\n        RELATIONSHIP__C                       as relationship,\n        REVENUE_TARGET__C                     as revenue_target,\n        SALES_DIVISION__C                     as sales_division,\n        SALES_REP__C                          as sales_rep,\n        SERVICE_DURATION__C                   as service_duration,\n        SOLUTIONS_ARCHITECT__C                as solutions_architect,\n        SOLUTION__C                           as solution,\n        SOURCE_DETAIL__C                      as source_detail,\n        SOURCE__C                             as source,\n        SPEAKERTEXT_LEAD__C                   as speakertext_lead,\n        SQL_DATE__C                           as sql_date,\n        SQL__C                                as sql,\n        STAGENAME                             as stage_name,\n        STAKEHOLDERS__C                       as stakeholders,\n        SYSTEMMODSTAMP                        as system_mod_stamp_at,\n        TAT__C                                as tat,\n        TECH_APPLICATION__C                   as tech_application,\n        TERMED_MRR__C                         as termed_mrr,\n        TIMELINE__C                           as timeline,\n        TYPE                                  as opportunity_type,\n        UNITS__C                              as units,\n        UNIT_TYPE__C                          as unit_type,\n        USE_CASE_CATEGORY__C                  as use_case_category,\n        USE_CASE__C                           as use_case,\n        VOLUME__C                             as volume,\n        WEIGHTED_MRR__C                       as weighted_mrr,\n        WHY_THEY_WILL_BUY__C                  as why_they_will_buy,\n        WON_MRR__C                            as won_mrr,\n        WORKSTREAM_MILESTONES__C              as workstream_milestones,\n        X3RD_PARTY_TOOL_FORM__C               as x3_rd_party_tool_form,\n        EXPANSION_LIKELIHOOD__C               as expansion_likelihood,\n        SPECIAL_TERMS__C                      as special_terms,\n        MOST_RECENT_REFERRING_SOURCE__C       as most_recent_referring_source,\n        EU_PERSONAL_DATA__C                   as eu_personal_data,\n        TERMINATION_NOTICE__C                 as termination_notice,\n        DQ_ACCOUNT_REASON__C                  as dq_account_reason,\n        PUBLICITY__C                          as publicity,\n        COMPETITOR__C                         as competitor,\n        WORKSTREAM_URL__C                     as workstream_url,\n        REFERRAL_ACCOUNT__C                   as referral_account,\n        SDR__C                                as sdr,\n        LOST_REASON_DETAIL__C                 as lost_reason_detail,\n        TOOL_DETAILS__C                       as tool_details,\n        PRIMARY_TOOL__C                       as primary_tool,\n        OTHER_NOTES__C                        as other_notes,\n        NOTES__C                              as notes,\n        FLOW_PLATFORM__C                      as flow_platform,\n        LEAD_SOURCE_MOST_RECENT__C            as lead_source_most_recent,\n        UPGRADE_REASON__C                     as upgrade_reason,\n        OF_WALLET__C                          as of_wallet,\n        PREMIUM_WORKSTATION_ADD_ONS__C        as premium_workstation_add_ons,\n        RAMP_POTENTIAL__C                     as ramp_potential,\n        NURTURE_TRACK__C                      as nurture_track,\n        DELIVERY_METHOD__C                    as delivery_method,\n        NURTURE_PLAN__C                       as nurture_plan,\n        LEAD_SOURCE_MOST_RECENT_DETAIL__C     as lead_source_most_recent_detail,\n        MOST_RECENT_ACQUISITION_MEDIUM__C     as most_recent_acquisition_medium,\n        LEAD_TYPE__C                          as lead_type,\n        RAMP_POTENTIAL_TIMING__C              as ramp_potential_timing,\n        RAMP_POTENTIAL_HOURS__C               as ramp_potential_hours,\n        OTHER_COMPETITOR__C                   as other_competitor,\n        CONTENT_OFFER__C                      as content_offer,\n        LAST_ANALYSIS_FORM__C                 as last_analysis_form,\n        PACKAGE_TYPE__C                       as package_type,\n        HS_FORM_MESSAGE__C                    as hs_form_message,\n        X3RD_PARTY_TOOL__C                    as x3_rd_party_tool,\n        PRIMARY_FEATURE__C                    as primary_feature,\n        BILLABLE_UNIT__C                      as billable_unit,\n        SEED_PACKAGE_PRICE__C                 as seed_package_price,\n        KPIS__C                               as kpis,\n        D1_OUTCOME__C                         as d1_outcome,\n        TASK_LEARNING_CURVE__C                as task_learning_curve,\n        WORKFORCE__C                          as workforce,\n        LASTREFERENCEDDATE                    as last_referenced_at,\n        LASTVIEWEDDATE                        as last_viewed_at,\n        ANALYSIS_TO_PROPOSAL_DAYS__C          as analysis_to_proposal_days,\n        CONTRACTING_TO_CLOSE_DAYS__C          as contracting_to_close_days,\n        PROPOSAL_TO_CONTRACTING_DAYS__C       as proposal_to_contracting_days,\n        SQL_TO_ANALYSIS_DAYS__C               as sql_to_analysis_days,\n        REGION_DEFINITION__C                  as region_definition,\n        TERRITORY2ID                          as territory_2_id,\n        _SDC_BATCHED_AT                       as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                     as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                      as _sdc_received_at,\n        _SDC_SEQUENCE                         as _sdc_sequence,\n        _SDC_TABLE_VERSION                    as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_opportunity"}, "model.edw.base_hist_salesforce_user": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('user') }}\n),\nrenamed as (\n    select \n        ABOUTME                                            as about_me,\n        ALIAS                                              as alias,\n        BANNERPHOTOURL                                     as banner_photo_url,\n        BUSINESS_HOURS__C                                  as business_hours,\n        CITY                                               as city,\n        COMMUNITYNICKNAME                                  as community_nickname,\n        COMPANYNAME                                        as company_name,\n        COUNTRY                                            as country,\n        CREATEDBYID                                        as created_by_id,\n        CREATEDDATE                                        as created_date,\n        DEFAULTGROUPNOTIFICATIONFREQUENCY                  as default_group_notification_frequency,\n        DEPARTMENT                                         as department,\n        DIGESTFREQUENCY                                    as digest_frequency,\n        DIVISION                                           as division,\n        EMAIL                                              as email,\n        EMAILENCODINGKEY                                   as email_encoding_key,\n        EMAILPREFERENCESAUTOBCC                            as email_preferences_autobcc,\n        EMAILPREFERENCESAUTOBCCSTAYINTOUCH                 as email_preferences_autobccstayintouch,\n        EMAILPREFERENCESSTAYINTOUCHREMINDER                as email_preferences_stayintouchreminder,\n        EMPLOYEENUMBER                                     as employee_number,\n        FIRSTNAME                                          as first_name,\n        FORECASTENABLED                                    as forecast_enabled,\n        FULLPHOTOURL                                       as full_photo_url,\n        ID                                                 as user_id,\n        ISACTIVE                                           as is_active,\n        ISEXTINDICATORVISIBLE                              as is_extindicator_visible,\n        ISPROFILEPHOTOACTIVE                               as is_profile_photoa_ctive,\n        LANGUAGELOCALEKEY                                  as language_locale_key,\n        LASTLOGINDATE                                      as last_login_at,\n        LASTMODIFIEDBYID                                   as last_modified_by_id,\n        LASTMODIFIEDDATE                                   as last_modified_at,\n        LASTNAME                                           as last_name,\n        LASTREFERENCEDDATE                                 as last_referenced_at,\n        LASTVIEWEDDATE                                     as last_viewed_at,\n        LOCALESIDKEY                                       as locales_id_key,\n        MANAGERID                                          as manager_id,\n        MEDIUMBANNERPHOTOURL                               as medium_banner_photo_url,\n        MEDIUMPHOTOURL                                     as medium_photo_url,\n        MOBILEPHONE                                        as mobile_phone,\n        NAME                                               as user_name,\n        PHONE                                              as phone,\n        POSTALCODE                                         as postal_code,\n        PROFILEID                                          as profile_id,\n        PROFILE_NAME__C                                    as profile_name,\n        QBDIALER__INSIDESALES_ADMIN__C                     as qbdialer_insidesales_admin_c,\n        QBDIALER__IS_SUBDOMAIN__C                          as qbdialer_is_subdomain,\n        QBDIALER__IS_TOKEN__C                              as qbdialer_is_token,\n        QBDIALER__PERMISSIONS__C                           as qbdialer_permissions,\n        RECEIVESADMININFOEMAILS                            as receives_admin_info_emails,\n        RECEIVESINFOEMAILS                                 as receives_info_emails,\n        SIGNATURE                                          as user_signature,\n        SMALLBANNERPHOTOURL                                as small_banner_photo_url,\n        SMALLPHOTOURL                                      as small_photo_url,\n        STATE                                              as user_state,\n        STREET                                             as street,\n        SYSTEMMODSTAMP                                     as system_mod_stamp,\n        TIMEZONESIDKEY                                     as timezones_id_key,\n        TITLE                                              as title,\n        USERNAME                                           as user_email_name,\n        USERPERMISSIONSAVANTGOUSER                         as user_permissions_avantgo_user,\n        USERPERMISSIONSCALLCENTERAUTOLOGIN                 as user_permissions_callcenter_auto_login,\n        USERPERMISSIONSINTERACTIONUSER                     as user_permissions_interaction_user,\n        USERPERMISSIONSMARKETINGUSER                       as user_permissions_marketing_user,\n        USERPERMISSIONSMOBILEUSER                          as user_permissions_mobile_user,\n        USERPERMISSIONSOFFLINEUSER                         as user_permissions_offline_user,\n        USERPERMISSIONSSFCONTENTUSER                       as user_permissions_sfcontent_user,\n        USERPERMISSIONSSUPPORTUSER                         as user_permissions_support_user,\n        USERPREFERENCESACTIVITYREMINDERSPOPUP              as user_preferences_activity_reminders_popup,\n        USERPREFERENCESAPEXPAGESDEVELOPERMODE              as user_preferences_apex_pages_developervmode,\n        USERPREFERENCESCACHEDIAGNOSTICS                    as user_preferences_cache_diagnostics,\n        USERPREFERENCESCONTENTEMAILASANDWHEN               as user_preferences_content_email_as_and_when,\n        USERPREFERENCESCONTENTNOEMAIL                      as user_preferences_content_no_email,\n        USERPREFERENCESCREATELEXAPPSWTSHOWN                as user_preferences_create_lex_apps_wt_shown,\n        USERPREFERENCESDISABLEALLFEEDSEMAIL                as user_preferences_disable_allfeedsemail,\n        USERPREFERENCESDISABLEBOOKMARKEMAIL                as user_preferences_disable_bookmarkemail,\n        USERPREFERENCESDISABLECHANGECOMMENTEMAIL           as user_preferences_disable_changecommentemail,\n        USERPREFERENCESDISABLEENDORSEMENTEMAIL             as user_preferences_disable_endorsementemail,\n        USERPREFERENCESDISABLEFILESHARENOTIFICATIONSFORAPI as user_preferences_disable_filesharenotificationsforapi,\n        USERPREFERENCESDISABLEFOLLOWERSEMAIL               as user_preferences_disable_followersemail,\n        USERPREFERENCESDISABLELATERCOMMENTEMAIL            as user_preferences_disable_latercommentemail,\n        USERPREFERENCESDISABLELIKEEMAIL                    as user_preferences_disable_likeemail,\n        USERPREFERENCESDISABLEMENTIONSPOSTEMAIL            as user_preferences_disable_mentionspostemail,\n        USERPREFERENCESDISABLEMESSAGEEMAIL                 as user_preferences_disable_messageemail,\n        USERPREFERENCESDISABLEPROFILEPOSTEMAIL             as user_preferences_disable_profilepostemail,\n        USERPREFERENCESDISABLESHAREPOSTEMAIL               as user_preferences_disable_sharepostemail,\n        USERPREFERENCESDISCOMMENTAFTERLIKEEMAIL            as user_preferences_dis_comment_after_like_email,\n        USERPREFERENCESDISMENTIONSCOMMENTEMAIL             as user_preferences_dis_mentions_comment_email,\n        USERPREFERENCESDISPROFPOSTCOMMENTEMAIL             as user_preferences_dis_prof_post_comment_email,\n        USERPREFERENCESENABLEAUTOSUBFORFEEDS               as user_preferences_enable_auto_sub_for_feeds,\n        USERPREFERENCESEVENTREMINDERSCHECKBOXDEFAULT       as user_preferences_event_reminders_checkbox_default,\n        USERPREFERENCESEXCLUDEMAILAPPATTACHMENTS           as user_preferences_exclude_mail_app_attachments,\n        USERPREFERENCESFAVORITESSHOWTOPFAVORITES           as user_preferences_favorites_show_top_favorites,\n        USERPREFERENCESFAVORITESWTSHOWN                    as user_preferences_favorites_wt_shown,\n        USERPREFERENCESGLOBALNAVBARWTSHOWN                 as user_preferences_global_navbar_wt_shown,\n        USERPREFERENCESGLOBALNAVGRIDMENUWTSHOWN            as user_preferences_global_navgrid_menu_wt_shown,\n        USERPREFERENCESHIDEBIGGERPHOTOCALLOUT              as user_preferences_hide_bigger_photo_callout,\n        USERPREFERENCESHIDECHATTERONBOARDINGSPLASH         as user_preferences_hide_chatter_onboarding_splash,\n        USERPREFERENCESHIDECSNDESKTOPTASK                  as user_preferences_hide_csn_desktop_task,\n        USERPREFERENCESHIDECSNGETCHATTERMOBILETASK         as user_preferences_hide_csn_get_chatter_mobile_task,\n        USERPREFERENCESHIDEENDUSERONBOARDINGASSISTANTMODAL as user_preferences_hide_enduser_onboarding_assistant_modal,\n        USERPREFERENCESHIDELIGHTNINGMIGRATIONMODAL         as user_preferences_hide_lightning_migration_modal,\n        USERPREFERENCESHIDES1BROWSERUI                     as user_preferences_hides1_browser_ui,\n        USERPREFERENCESHIDESECONDCHATTERONBOARDINGSPLASH   as user_preferences_hide_second_chatter_onboarding_splash,\n        USERPREFERENCESHIDESFXWELCOMEMAT                   as user_preferences_hide_sfx_welcome_mat,\n        USERPREFERENCESLIGHTNINGEXPERIENCEPREFERRED        as user_preferences_lightning_experience_preferred,\n        USERPREFERENCESPATHASSISTANTCOLLAPSED              as user_preferences_path_assistant_collapsed,\n        USERPREFERENCESRECORDHOMERESERVEDWTSHOWN           as user_preferences_record_home_reserved_wt_shown,\n        USERPREFERENCESRECORDHOMESECTIONCOLLAPSEWTSHOWN    as user_preferences_record_home_section_collapse_wt_shown,\n        USERPREFERENCESREMINDERSOUNDOFF                    as user_preferences_reminder_sound_off,\n        USERPREFERENCESSHOWCITYTOEXTERNALUSERS             as user_preferences_show_city_to_external_users,\n        USERPREFERENCESSHOWCITYTOGUESTUSERS                as user_preferences_show_city_to_guest_users,\n        USERPREFERENCESSHOWCOUNTRYTOEXTERNALUSERS          as user_preferences_show_country_to_external_users,\n        USERPREFERENCESSHOWCOUNTRYTOGUESTUSERS             as user_preferences_show_country_to_guest_users,\n        USERPREFERENCESSHOWEMAILTOEXTERNALUSERS            as user_preferences_show_email_to_external_users,\n        USERPREFERENCESSHOWEMAILTOGUESTUSERS               as user_preferences_show_email_to_guest_users,\n        USERPREFERENCESSHOWFAXTOEXTERNALUSERS              as user_preferences_show_fax_to_external_users,\n        USERPREFERENCESSHOWFAXTOGUESTUSERS                 as user_preferences_show_fax_to_guest_users,\n        USERPREFERENCESSHOWMANAGERTOEXTERNALUSERS          as user_preferences_show_manager_to_external_users,\n        USERPREFERENCESSHOWMANAGERTOGUESTUSERS             as user_preferences_show_manager_to_guest_users,\n        USERPREFERENCESSHOWMOBILEPHONETOEXTERNALUSERS      as user_preferences_show_mobile_phone_to_external_users,\n        USERPREFERENCESSHOWMOBILEPHONETOGUESTUSERS         as user_preferences_show_mobile_phone_to_guest_users,\n        USERPREFERENCESSHOWPOSTALCODETOEXTERNALUSERS       as user_preferences_show_postal_code_to_external_users,\n        USERPREFERENCESSHOWPOSTALCODETOGUESTUSERS          as user_preferences_show_postal_code_to_guest_users,\n        USERPREFERENCESSHOWPROFILEPICTOGUESTUSERS          as user_preferences_show_profile_pic_to_guest_users,\n        USERPREFERENCESSHOWSTATETOEXTERNALUSERS            as user_preferences_show_state_to_external_users,\n        USERPREFERENCESSHOWSTATETOGUESTUSERS               as user_preferences_show_state_to_guest_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOEXTERNALUSERS    as user_preferences_show_street_address_to_external_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOGUESTUSERS       as user_preferences_show_street_address_to_guest_users,\n        USERPREFERENCESSHOWTITLETOEXTERNALUSERS            as user_preferences_show_title_to_external_users,\n        USERPREFERENCESSHOWTITLETOGUESTUSERS               as user_preferences_show_title_to_guest_users,\n        USERPREFERENCESSHOWWORKPHONETOEXTERNALUSERS        as user_preferences_show_work_phone_to_external_users,\n        USERPREFERENCESSHOWWORKPHONETOGUESTUSERS           as user_preferences_show_work_phone_to_guest_users,\n        USERPREFERENCESSORTFEEDBYCOMMENT                   as user_preferences_sort_feed_by_comment,\n        USERPREFERENCESTASKREMINDERSCHECKBOXDEFAULT        as user_preferences_task_reminders_checkbox_default,\n        USERROLEID                                         as user_role_id,\n        USERTYPE                                           as user_type,\n        _SDC_BATCHED_AT                                    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                                  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                                   as _sdc_received_at,\n        _SDC_SEQUENCE                                      as _sdc_sequence,\n        _SDC_TABLE_VERSION                                 as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.user"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_user"], "unique_id": "model.edw.base_hist_salesforce_user", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_user.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_user.sql", "name": "base_hist_salesforce_user", "alias": "base_hist_salesforce_user", "checksum": {"name": "sha256", "checksum": "bbb5471e123a213b668504b9403e082f53e101e68ad39c3fc32973b6780548ed"}, "tags": [], "refs": [["user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_user.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.user\n),\nrenamed as (\n    select \n        ABOUTME                                            as about_me,\n        ALIAS                                              as alias,\n        BANNERPHOTOURL                                     as banner_photo_url,\n        BUSINESS_HOURS__C                                  as business_hours,\n        CITY                                               as city,\n        COMMUNITYNICKNAME                                  as community_nickname,\n        COMPANYNAME                                        as company_name,\n        COUNTRY                                            as country,\n        CREATEDBYID                                        as created_by_id,\n        CREATEDDATE                                        as created_date,\n        DEFAULTGROUPNOTIFICATIONFREQUENCY                  as default_group_notification_frequency,\n        DEPARTMENT                                         as department,\n        DIGESTFREQUENCY                                    as digest_frequency,\n        DIVISION                                           as division,\n        EMAIL                                              as email,\n        EMAILENCODINGKEY                                   as email_encoding_key,\n        EMAILPREFERENCESAUTOBCC                            as email_preferences_autobcc,\n        EMAILPREFERENCESAUTOBCCSTAYINTOUCH                 as email_preferences_autobccstayintouch,\n        EMAILPREFERENCESSTAYINTOUCHREMINDER                as email_preferences_stayintouchreminder,\n        EMPLOYEENUMBER                                     as employee_number,\n        FIRSTNAME                                          as first_name,\n        FORECASTENABLED                                    as forecast_enabled,\n        FULLPHOTOURL                                       as full_photo_url,\n        ID                                                 as user_id,\n        ISACTIVE                                           as is_active,\n        ISEXTINDICATORVISIBLE                              as is_extindicator_visible,\n        ISPROFILEPHOTOACTIVE                               as is_profile_photoa_ctive,\n        LANGUAGELOCALEKEY                                  as language_locale_key,\n        LASTLOGINDATE                                      as last_login_at,\n        LASTMODIFIEDBYID                                   as last_modified_by_id,\n        LASTMODIFIEDDATE                                   as last_modified_at,\n        LASTNAME                                           as last_name,\n        LASTREFERENCEDDATE                                 as last_referenced_at,\n        LASTVIEWEDDATE                                     as last_viewed_at,\n        LOCALESIDKEY                                       as locales_id_key,\n        MANAGERID                                          as manager_id,\n        MEDIUMBANNERPHOTOURL                               as medium_banner_photo_url,\n        MEDIUMPHOTOURL                                     as medium_photo_url,\n        MOBILEPHONE                                        as mobile_phone,\n        NAME                                               as user_name,\n        PHONE                                              as phone,\n        POSTALCODE                                         as postal_code,\n        PROFILEID                                          as profile_id,\n        PROFILE_NAME__C                                    as profile_name,\n        QBDIALER__INSIDESALES_ADMIN__C                     as qbdialer_insidesales_admin_c,\n        QBDIALER__IS_SUBDOMAIN__C                          as qbdialer_is_subdomain,\n        QBDIALER__IS_TOKEN__C                              as qbdialer_is_token,\n        QBDIALER__PERMISSIONS__C                           as qbdialer_permissions,\n        RECEIVESADMININFOEMAILS                            as receives_admin_info_emails,\n        RECEIVESINFOEMAILS                                 as receives_info_emails,\n        SIGNATURE                                          as user_signature,\n        SMALLBANNERPHOTOURL                                as small_banner_photo_url,\n        SMALLPHOTOURL                                      as small_photo_url,\n        STATE                                              as user_state,\n        STREET                                             as street,\n        SYSTEMMODSTAMP                                     as system_mod_stamp,\n        TIMEZONESIDKEY                                     as timezones_id_key,\n        TITLE                                              as title,\n        USERNAME                                           as user_email_name,\n        USERPERMISSIONSAVANTGOUSER                         as user_permissions_avantgo_user,\n        USERPERMISSIONSCALLCENTERAUTOLOGIN                 as user_permissions_callcenter_auto_login,\n        USERPERMISSIONSINTERACTIONUSER                     as user_permissions_interaction_user,\n        USERPERMISSIONSMARKETINGUSER                       as user_permissions_marketing_user,\n        USERPERMISSIONSMOBILEUSER                          as user_permissions_mobile_user,\n        USERPERMISSIONSOFFLINEUSER                         as user_permissions_offline_user,\n        USERPERMISSIONSSFCONTENTUSER                       as user_permissions_sfcontent_user,\n        USERPERMISSIONSSUPPORTUSER                         as user_permissions_support_user,\n        USERPREFERENCESACTIVITYREMINDERSPOPUP              as user_preferences_activity_reminders_popup,\n        USERPREFERENCESAPEXPAGESDEVELOPERMODE              as user_preferences_apex_pages_developervmode,\n        USERPREFERENCESCACHEDIAGNOSTICS                    as user_preferences_cache_diagnostics,\n        USERPREFERENCESCONTENTEMAILASANDWHEN               as user_preferences_content_email_as_and_when,\n        USERPREFERENCESCONTENTNOEMAIL                      as user_preferences_content_no_email,\n        USERPREFERENCESCREATELEXAPPSWTSHOWN                as user_preferences_create_lex_apps_wt_shown,\n        USERPREFERENCESDISABLEALLFEEDSEMAIL                as user_preferences_disable_allfeedsemail,\n        USERPREFERENCESDISABLEBOOKMARKEMAIL                as user_preferences_disable_bookmarkemail,\n        USERPREFERENCESDISABLECHANGECOMMENTEMAIL           as user_preferences_disable_changecommentemail,\n        USERPREFERENCESDISABLEENDORSEMENTEMAIL             as user_preferences_disable_endorsementemail,\n        USERPREFERENCESDISABLEFILESHARENOTIFICATIONSFORAPI as user_preferences_disable_filesharenotificationsforapi,\n        USERPREFERENCESDISABLEFOLLOWERSEMAIL               as user_preferences_disable_followersemail,\n        USERPREFERENCESDISABLELATERCOMMENTEMAIL            as user_preferences_disable_latercommentemail,\n        USERPREFERENCESDISABLELIKEEMAIL                    as user_preferences_disable_likeemail,\n        USERPREFERENCESDISABLEMENTIONSPOSTEMAIL            as user_preferences_disable_mentionspostemail,\n        USERPREFERENCESDISABLEMESSAGEEMAIL                 as user_preferences_disable_messageemail,\n        USERPREFERENCESDISABLEPROFILEPOSTEMAIL             as user_preferences_disable_profilepostemail,\n        USERPREFERENCESDISABLESHAREPOSTEMAIL               as user_preferences_disable_sharepostemail,\n        USERPREFERENCESDISCOMMENTAFTERLIKEEMAIL            as user_preferences_dis_comment_after_like_email,\n        USERPREFERENCESDISMENTIONSCOMMENTEMAIL             as user_preferences_dis_mentions_comment_email,\n        USERPREFERENCESDISPROFPOSTCOMMENTEMAIL             as user_preferences_dis_prof_post_comment_email,\n        USERPREFERENCESENABLEAUTOSUBFORFEEDS               as user_preferences_enable_auto_sub_for_feeds,\n        USERPREFERENCESEVENTREMINDERSCHECKBOXDEFAULT       as user_preferences_event_reminders_checkbox_default,\n        USERPREFERENCESEXCLUDEMAILAPPATTACHMENTS           as user_preferences_exclude_mail_app_attachments,\n        USERPREFERENCESFAVORITESSHOWTOPFAVORITES           as user_preferences_favorites_show_top_favorites,\n        USERPREFERENCESFAVORITESWTSHOWN                    as user_preferences_favorites_wt_shown,\n        USERPREFERENCESGLOBALNAVBARWTSHOWN                 as user_preferences_global_navbar_wt_shown,\n        USERPREFERENCESGLOBALNAVGRIDMENUWTSHOWN            as user_preferences_global_navgrid_menu_wt_shown,\n        USERPREFERENCESHIDEBIGGERPHOTOCALLOUT              as user_preferences_hide_bigger_photo_callout,\n        USERPREFERENCESHIDECHATTERONBOARDINGSPLASH         as user_preferences_hide_chatter_onboarding_splash,\n        USERPREFERENCESHIDECSNDESKTOPTASK                  as user_preferences_hide_csn_desktop_task,\n        USERPREFERENCESHIDECSNGETCHATTERMOBILETASK         as user_preferences_hide_csn_get_chatter_mobile_task,\n        USERPREFERENCESHIDEENDUSERONBOARDINGASSISTANTMODAL as user_preferences_hide_enduser_onboarding_assistant_modal,\n        USERPREFERENCESHIDELIGHTNINGMIGRATIONMODAL         as user_preferences_hide_lightning_migration_modal,\n        USERPREFERENCESHIDES1BROWSERUI                     as user_preferences_hides1_browser_ui,\n        USERPREFERENCESHIDESECONDCHATTERONBOARDINGSPLASH   as user_preferences_hide_second_chatter_onboarding_splash,\n        USERPREFERENCESHIDESFXWELCOMEMAT                   as user_preferences_hide_sfx_welcome_mat,\n        USERPREFERENCESLIGHTNINGEXPERIENCEPREFERRED        as user_preferences_lightning_experience_preferred,\n        USERPREFERENCESPATHASSISTANTCOLLAPSED              as user_preferences_path_assistant_collapsed,\n        USERPREFERENCESRECORDHOMERESERVEDWTSHOWN           as user_preferences_record_home_reserved_wt_shown,\n        USERPREFERENCESRECORDHOMESECTIONCOLLAPSEWTSHOWN    as user_preferences_record_home_section_collapse_wt_shown,\n        USERPREFERENCESREMINDERSOUNDOFF                    as user_preferences_reminder_sound_off,\n        USERPREFERENCESSHOWCITYTOEXTERNALUSERS             as user_preferences_show_city_to_external_users,\n        USERPREFERENCESSHOWCITYTOGUESTUSERS                as user_preferences_show_city_to_guest_users,\n        USERPREFERENCESSHOWCOUNTRYTOEXTERNALUSERS          as user_preferences_show_country_to_external_users,\n        USERPREFERENCESSHOWCOUNTRYTOGUESTUSERS             as user_preferences_show_country_to_guest_users,\n        USERPREFERENCESSHOWEMAILTOEXTERNALUSERS            as user_preferences_show_email_to_external_users,\n        USERPREFERENCESSHOWEMAILTOGUESTUSERS               as user_preferences_show_email_to_guest_users,\n        USERPREFERENCESSHOWFAXTOEXTERNALUSERS              as user_preferences_show_fax_to_external_users,\n        USERPREFERENCESSHOWFAXTOGUESTUSERS                 as user_preferences_show_fax_to_guest_users,\n        USERPREFERENCESSHOWMANAGERTOEXTERNALUSERS          as user_preferences_show_manager_to_external_users,\n        USERPREFERENCESSHOWMANAGERTOGUESTUSERS             as user_preferences_show_manager_to_guest_users,\n        USERPREFERENCESSHOWMOBILEPHONETOEXTERNALUSERS      as user_preferences_show_mobile_phone_to_external_users,\n        USERPREFERENCESSHOWMOBILEPHONETOGUESTUSERS         as user_preferences_show_mobile_phone_to_guest_users,\n        USERPREFERENCESSHOWPOSTALCODETOEXTERNALUSERS       as user_preferences_show_postal_code_to_external_users,\n        USERPREFERENCESSHOWPOSTALCODETOGUESTUSERS          as user_preferences_show_postal_code_to_guest_users,\n        USERPREFERENCESSHOWPROFILEPICTOGUESTUSERS          as user_preferences_show_profile_pic_to_guest_users,\n        USERPREFERENCESSHOWSTATETOEXTERNALUSERS            as user_preferences_show_state_to_external_users,\n        USERPREFERENCESSHOWSTATETOGUESTUSERS               as user_preferences_show_state_to_guest_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOEXTERNALUSERS    as user_preferences_show_street_address_to_external_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOGUESTUSERS       as user_preferences_show_street_address_to_guest_users,\n        USERPREFERENCESSHOWTITLETOEXTERNALUSERS            as user_preferences_show_title_to_external_users,\n        USERPREFERENCESSHOWTITLETOGUESTUSERS               as user_preferences_show_title_to_guest_users,\n        USERPREFERENCESSHOWWORKPHONETOEXTERNALUSERS        as user_preferences_show_work_phone_to_external_users,\n        USERPREFERENCESSHOWWORKPHONETOGUESTUSERS           as user_preferences_show_work_phone_to_guest_users,\n        USERPREFERENCESSORTFEEDBYCOMMENT                   as user_preferences_sort_feed_by_comment,\n        USERPREFERENCESTASKREMINDERSCHECKBOXDEFAULT        as user_preferences_task_reminders_checkbox_default,\n        USERROLEID                                         as user_role_id,\n        USERTYPE                                           as user_type,\n        _SDC_BATCHED_AT                                    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                                  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                                   as _sdc_received_at,\n        _SDC_SEQUENCE                                      as _sdc_sequence,\n        _SDC_TABLE_VERSION                                 as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_user"}, "model.edw.base_hist_salesforce_recordtype": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('recordtype') }}\n),\nrenamed as (\n    select \n        BUSINESSPROCESSID  as business_process_id,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        DESCRIPTION        as record_type_description,\n        DEVELOPERNAME      as developer_name,\n        ID                 as record_type_id,\n        ISACTIVE           as is_active,\n        LASTMODIFIEDBYID   as last_modified_by_id,\n        LASTMODIFIEDDATE   as last_modified_at,\n        NAME               as record_type_name,\n        NAMESPACEPREFIX    as name_space_prefix,\n        SOBJECTTYPE        as sobject_type,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.recordtype"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_recordtype"], "unique_id": "model.edw.base_hist_salesforce_recordtype", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_recordtype.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_recordtype.sql", "name": "base_hist_salesforce_recordtype", "alias": "base_hist_salesforce_recordtype", "checksum": {"name": "sha256", "checksum": "c9cf1a9ba88ba2a24b9fca57598e79113cc01b4b5a0c541339d8f92bab46bae0"}, "tags": [], "refs": [["recordtype"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_recordtype.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.recordtype\n),\nrenamed as (\n    select \n        BUSINESSPROCESSID  as business_process_id,\n        CREATEDBYID        as created_by_id,\n        CREATEDDATE        as created_at,\n        DESCRIPTION        as record_type_description,\n        DEVELOPERNAME      as developer_name,\n        ID                 as record_type_id,\n        ISACTIVE           as is_active,\n        LASTMODIFIEDBYID   as last_modified_by_id,\n        LASTMODIFIEDDATE   as last_modified_at,\n        NAME               as record_type_name,\n        NAMESPACEPREFIX    as name_space_prefix,\n        SOBJECTTYPE        as sobject_type,\n        SYSTEMMODSTAMP     as system_mod_stamp,\n        _SDC_BATCHED_AT    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT   as _sdc_received_at,\n        _SDC_SEQUENCE      as _sdc_sequence,\n        _SDC_TABLE_VERSION as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_recordtype"}, "model.edw.base_hist_salesforce_account": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('account') }}\n),\nrenamed as (\n    select \n        ACCOUNTSOURCE                               as account_source,\n        ACCOUNTS__C                                 as accounts,\n        ACCOUNT_18_DIGIT_ID__C                      as account_18_digit_id,\n        ACCOUNT_MONTHLY_COMMITMENT__C               as account_monthly_commitment,\n        ACCOUNT_MRR__C                              as account_mrr,\n        ACCOUNT_NUMBER__C                           as account_number,\n        ACCOUNT_SOURCE_DETAIL__C                    as account_source_detail,\n        ACCOUNT_STATUS__C                           as account_status,\n        ACTIVE_CONTRACTS__C                         as active_contracts,\n        ACTIVE_SUBSCRIPTION_CONTRACTS__C            as active_subscription_contracts,\n        ANNUALREVENUE                               as annual_revenue,\n        ASSIGNED_ACCOUNT__C                         as assigned_account,\n        BILLINGCITY                                 as billing_city,\n        BILLINGCOUNTRY                              as billing_country,\n        BILLINGPOSTALCODE                           as billing_postal_code,\n        BILLINGSTATE                                as billing_state,\n        BILLINGSTREET                               as billing_street,\n        BOOKED_OPPORTUNITIES__C                     as booked_opportunities,\n        BYPASS_NEW_OWNER_ALERT__C                   as bypass_new_owner_alert,\n        CLOUDFACTORY_LEAD_CHK__C                    as cloudfactory_lead_chk,\n        COMPANY_CAREERS_PAGE__C                     as company_careers_page,\n        CONTENT_OFFER__C                            as content_offer,\n        CREATEDBYID                                 as created_by_id,\n        CREATEDDATE                                 as created_at,\n        CRUNCHBASE_CATEGORY__C                      as crunchbase_category,\n        CRUNCHBASE_URL__C                           as crunchbase_url,\n        CSM_CLIENT_SCORE__C                         as csm_client_score,\n        DELIGHTEDINC__DETRACTORS__C                 as delighted_inc_detractors,\n        DELIGHTEDINC__NPS__C                        as delighted_inc_nps,\n        DELIGHTEDINC__PASSIVES__C                   as delighted_inc_passives,\n        DELIGHTEDINC__PROMOTERS__C                  as delighted_inc_promoters,\n        DELIVERY_MANAGER__C                         as delivery_manager,\n        DELIVERY_OWNER__C                           as delivery_owner,\n        DESCRIPTION                                 as account_description,\n        FAX                                         as fax,\n        FIRST_BOOKED_OPPORTUNITY__C                 as first_booked_opportunity,\n        FORTUNE_1000__C                             as fortune_1000,\n        HUBSPOT_ACCOUNT_CAMPAIGN__C                 as hubspot_account_campaign,\n        ID                                          as account_id,\n        IDEAL_CLIENT_PROFILE_SCORE__C               as ideal_client_profile_score,\n        INDUSTRY                                    as industry,\n        ISDELETED                                   as is_deleted,\n        LASTACTIVITYDATE                            as last_activity_at,\n        LASTMODIFIEDBYID                            as last_modifiedby_id,\n        LASTMODIFIEDDATE                            as last_modified_at,\n        LAST_DQ_ACCOUNT_REASON__C                   as last_dq_account_reason,\n        LAST_ROUND_AMOUNT__C                        as last_round_amount,\n        LAST_ROUND_DATE__C                          as last_round_date,\n        LAST_ROUND_TYPE__C                          as last_round_type,\n        LAST_SALES_ACTIVITY__C                      as last_sales_activity,\n        LEAD_CHANNEL__C                             as lead_channel,\n        LEAD_SOURCE__C                              as lead_source,\n        LEGAL_NAME__C                               as legal_name,\n        LINKEDIN__C                                 as linkedin,\n        MASTERRECORDID                              as master_record_id,\n        MICROMARKET__C                              as micromarket,\n        MOST_RECENT_ACQUISITION_MEDIUM__C           as most_recent_acquisition_medium,\n        MOST_RECENT_REFERRING_SOURCE__C             as most_recent_referring_source,\n        NAME                                        as account_name,\n        NAME__C                                     as account_name_alt,\n        NEW_OWNER_MESSAGE__C                        as new_owner_message,\n        NO_OF_LOGOS__C                              as no_of_logos,\n        NUMBEROFEMPLOYEES                           as number_of_employees,\n        NUMBER_OF_LOCATIONS__C                      as number_of_locations,\n        OWNERID                                     as owner_id,\n        PARENTID                                    as parent_id,\n        PARTNER_PROFILE__C                          as partner_profile,\n        PHONE                                       as account_phone,\n        PHOTOURL                                    as photo_url,\n        POD_EFFORT_SCORE__C                         as pod_effort_score,\n        POD__C                                      as pod,\n        PRIMARY_FOCUS__C                            as primary_focus,\n        PRIORITY_REASON_DETAIL__C                   as priority_reason_detail,\n        PRIORITY_REASON__C                          as priority_reason,\n        PRIORITY_TYPE__C                            as priority_type,\n        QBDIALER__DIALS__C                          as qb_dialer_dials,\n        RATING                                      as account_rating,\n        RECORDTYPEID                                as record_type_id,\n        REGION__C                                   as region,\n        SEGMENT__C                                  as segment,\n        SHIPPINGCITY                                as shipping_city,\n        SHIPPINGCOUNTRY                             as shipping_country,\n        SHIPPINGPOSTALCODE                          as shipping_postalcode,\n        SHIPPINGSTATE                               as shipping_state,\n        SHIPPINGSTREET                              as shipping_street,\n        SOLUTIONS_ARCHITECT__C                      as solutions_architect,\n        SOURCED_PARTNER__C                          as sourced_partner,\n        SPEAKERTEXT_LEAD_CHK__C                     as speakertext_lead_chk,\n        SYSTEMMODSTAMP                              as system_mod_stamp,\n        TECH_APPLICATION__C                         as tech_application,\n        TOTAL_FUNDING__C                            as total_funding,\n        TWITTER__C                                  as twitter,\n        TYPE                                        as account_type,\n        USE_CASE__C                                 as use_case,\n        VAT__C                                      as vat,\n        WEBSITE                                     as website,\n        WEIGHTED_CLIENT_SCORE__C                    as weighted_client_score,\n        WEIGHTED_POD_EFFORT_SCORE__C                as weighted_pod_effort_score,\n        ZISF__ZOOMINFO_INDUSTRY__C                  as zisf_zoom_info_industry,\n        ZISF__ZOOM_ID__C                            as zisf_zoom_id,\n        ZISF__ZOOM_LASTUPDATED__C                   as zisf_zoom_last_up_atd,\n        LASTREFERENCEDDATE                          as last_referenced_at,\n        IDEAL_CLIENT_PROFILE__C                     as ideal_client_profile,\n        QBDIALER__LASTCALLTIME__C                   as qb_dialer_last_calltime,\n        LASTVIEWEDDATE                              as last_viewed_at,\n        ZOOMINFO_DESCRIPTION__C                     as zoom_info_description,\n        ZOOMINFO_STREET__C                          as zoom_info_street,\n        ZOOMINFO_CITY__C                            as zoom_info_city,\n        ZOOMINFO_FAX__C                             as zoom_info_fax,\n        ZOOMINFO_ACCOUNT_SOURCE__C                  as zoom_info_account_source,\n        ZOOMINFO__C                                 as zoom_info,\n        ZOOMINFO_PHONE__C                           as zoom_info_phone,\n        ZOOMINFO_STATE__C                           as zoom_info_state,\n        ZOOMINFO_COUNTRY__C                         as zoom_info_country,\n        ZOOMINFO_REVENUE__C                         as zoom_info_revenue,\n        ZOOMINFO_EMPLOYEE_COUNT__C                  as zoom_info_employee_count,\n        ZOOMINFO_WEBSITE__C                         as zoom_info_website,\n        REGION_DEFINITION__C                        as region_definition,\n        REGION_DEFINITION_NAME__C                   as region_definition_name,\n        REGION_DEFINITION_NAME_FORM__C              as region_definition_name_form,\n        GET_REGION_DEFINITION__C                    as get_region_definition,\n        IDEAL_CLIENT_PROFILE_DETAIL__C              as ideal_client_profile_detail,\n        DOZISF__ZOOMINFO_LAST_UPDATED__C            as dozisf_zoom_info_last_updated,\n        DOZISF__ZOOMINFO_FIRST_UPDATED__C           as dozisf_zoom_info_first_updated,\n        ZOOMINFO_ENRICHED_STATUS__C                 as zoom_info_enriched_status,\n        DOZISF__ZOOMINFO_ID__C                      as dozisf_zoom_info_id,\n        ZOOMINFO_TOTAL_FUNDING__C                   as zoom_info_total_funding,\n        ZOOMINFO_PARENT_COMPANY_ZOOMINFO_ID__C      as zoom_info_parent_company_zoom_info_id,\n        ZOOMINFO_FUNDING_ROUNDS__C                  as zoom_info_funding_rounds,\n        ZOOMINFO_INDUSTRY__C                        as zoom_info_industry,\n        ZOOMINFO_EMPLOYEE_RANGE__C                  as zoom_info_employee_range,\n        ZOOMINFO_PARENT_COMPANY_NAME__C             as zoom_info_parent_company_name,\n        ZOOMINFO_TOTAL_FUNDING__C__ST               as zoom_info_total_funding_st,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_ZOOMINF__C as zoom_info_ultimate_parent_company_zoominf,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_NAME__C    as zoom_info_ultimate_parent_company_name,\n        PROGRAM_MANAGER__C                          as program_manager,\n        ACCOUNT_MINIMUM_MONTHLY_COMMITMENT__C       as account_minimum_monthly_commitment,\n        TIER__C                                     as tier,\n        PRIORITY__C                                 as priority,\n        _SDC_BATCHED_AT                             as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                           as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                            as _sdc_received_at,\n        _SDC_SEQUENCE                               as _sdc_sequence,\n        _SDC_TABLE_VERSION                          as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["snapshot.edw.account"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_hist_salesforce_account"], "unique_id": "model.edw.base_hist_salesforce_account", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_hist_salesforce_account.sql", "original_file_path": "models/psa/salesforce/base/base_hist_salesforce_account.sql", "name": "base_hist_salesforce_account", "alias": "base_hist_salesforce_account", "checksum": {"name": "sha256", "checksum": "a5d36e52f823ec20c9ec598b4a6a94f547e8b1bcb801821f7f8488ca661fbc8f"}, "tags": [], "refs": [["account"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_hist_salesforce_account.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.salesforce.account\n),\nrenamed as (\n    select \n        ACCOUNTSOURCE                               as account_source,\n        ACCOUNTS__C                                 as accounts,\n        ACCOUNT_18_DIGIT_ID__C                      as account_18_digit_id,\n        ACCOUNT_MONTHLY_COMMITMENT__C               as account_monthly_commitment,\n        ACCOUNT_MRR__C                              as account_mrr,\n        ACCOUNT_NUMBER__C                           as account_number,\n        ACCOUNT_SOURCE_DETAIL__C                    as account_source_detail,\n        ACCOUNT_STATUS__C                           as account_status,\n        ACTIVE_CONTRACTS__C                         as active_contracts,\n        ACTIVE_SUBSCRIPTION_CONTRACTS__C            as active_subscription_contracts,\n        ANNUALREVENUE                               as annual_revenue,\n        ASSIGNED_ACCOUNT__C                         as assigned_account,\n        BILLINGCITY                                 as billing_city,\n        BILLINGCOUNTRY                              as billing_country,\n        BILLINGPOSTALCODE                           as billing_postal_code,\n        BILLINGSTATE                                as billing_state,\n        BILLINGSTREET                               as billing_street,\n        BOOKED_OPPORTUNITIES__C                     as booked_opportunities,\n        BYPASS_NEW_OWNER_ALERT__C                   as bypass_new_owner_alert,\n        CLOUDFACTORY_LEAD_CHK__C                    as cloudfactory_lead_chk,\n        COMPANY_CAREERS_PAGE__C                     as company_careers_page,\n        CONTENT_OFFER__C                            as content_offer,\n        CREATEDBYID                                 as created_by_id,\n        CREATEDDATE                                 as created_at,\n        CRUNCHBASE_CATEGORY__C                      as crunchbase_category,\n        CRUNCHBASE_URL__C                           as crunchbase_url,\n        CSM_CLIENT_SCORE__C                         as csm_client_score,\n        DELIGHTEDINC__DETRACTORS__C                 as delighted_inc_detractors,\n        DELIGHTEDINC__NPS__C                        as delighted_inc_nps,\n        DELIGHTEDINC__PASSIVES__C                   as delighted_inc_passives,\n        DELIGHTEDINC__PROMOTERS__C                  as delighted_inc_promoters,\n        DELIVERY_MANAGER__C                         as delivery_manager,\n        DELIVERY_OWNER__C                           as delivery_owner,\n        DESCRIPTION                                 as account_description,\n        FAX                                         as fax,\n        FIRST_BOOKED_OPPORTUNITY__C                 as first_booked_opportunity,\n        FORTUNE_1000__C                             as fortune_1000,\n        HUBSPOT_ACCOUNT_CAMPAIGN__C                 as hubspot_account_campaign,\n        ID                                          as account_id,\n        IDEAL_CLIENT_PROFILE_SCORE__C               as ideal_client_profile_score,\n        INDUSTRY                                    as industry,\n        ISDELETED                                   as is_deleted,\n        LASTACTIVITYDATE                            as last_activity_at,\n        LASTMODIFIEDBYID                            as last_modifiedby_id,\n        LASTMODIFIEDDATE                            as last_modified_at,\n        LAST_DQ_ACCOUNT_REASON__C                   as last_dq_account_reason,\n        LAST_ROUND_AMOUNT__C                        as last_round_amount,\n        LAST_ROUND_DATE__C                          as last_round_date,\n        LAST_ROUND_TYPE__C                          as last_round_type,\n        LAST_SALES_ACTIVITY__C                      as last_sales_activity,\n        LEAD_CHANNEL__C                             as lead_channel,\n        LEAD_SOURCE__C                              as lead_source,\n        LEGAL_NAME__C                               as legal_name,\n        LINKEDIN__C                                 as linkedin,\n        MASTERRECORDID                              as master_record_id,\n        MICROMARKET__C                              as micromarket,\n        MOST_RECENT_ACQUISITION_MEDIUM__C           as most_recent_acquisition_medium,\n        MOST_RECENT_REFERRING_SOURCE__C             as most_recent_referring_source,\n        NAME                                        as account_name,\n        NAME__C                                     as account_name_alt,\n        NEW_OWNER_MESSAGE__C                        as new_owner_message,\n        NO_OF_LOGOS__C                              as no_of_logos,\n        NUMBEROFEMPLOYEES                           as number_of_employees,\n        NUMBER_OF_LOCATIONS__C                      as number_of_locations,\n        OWNERID                                     as owner_id,\n        PARENTID                                    as parent_id,\n        PARTNER_PROFILE__C                          as partner_profile,\n        PHONE                                       as account_phone,\n        PHOTOURL                                    as photo_url,\n        POD_EFFORT_SCORE__C                         as pod_effort_score,\n        POD__C                                      as pod,\n        PRIMARY_FOCUS__C                            as primary_focus,\n        PRIORITY_REASON_DETAIL__C                   as priority_reason_detail,\n        PRIORITY_REASON__C                          as priority_reason,\n        PRIORITY_TYPE__C                            as priority_type,\n        QBDIALER__DIALS__C                          as qb_dialer_dials,\n        RATING                                      as account_rating,\n        RECORDTYPEID                                as record_type_id,\n        REGION__C                                   as region,\n        SEGMENT__C                                  as segment,\n        SHIPPINGCITY                                as shipping_city,\n        SHIPPINGCOUNTRY                             as shipping_country,\n        SHIPPINGPOSTALCODE                          as shipping_postalcode,\n        SHIPPINGSTATE                               as shipping_state,\n        SHIPPINGSTREET                              as shipping_street,\n        SOLUTIONS_ARCHITECT__C                      as solutions_architect,\n        SOURCED_PARTNER__C                          as sourced_partner,\n        SPEAKERTEXT_LEAD_CHK__C                     as speakertext_lead_chk,\n        SYSTEMMODSTAMP                              as system_mod_stamp,\n        TECH_APPLICATION__C                         as tech_application,\n        TOTAL_FUNDING__C                            as total_funding,\n        TWITTER__C                                  as twitter,\n        TYPE                                        as account_type,\n        USE_CASE__C                                 as use_case,\n        VAT__C                                      as vat,\n        WEBSITE                                     as website,\n        WEIGHTED_CLIENT_SCORE__C                    as weighted_client_score,\n        WEIGHTED_POD_EFFORT_SCORE__C                as weighted_pod_effort_score,\n        ZISF__ZOOMINFO_INDUSTRY__C                  as zisf_zoom_info_industry,\n        ZISF__ZOOM_ID__C                            as zisf_zoom_id,\n        ZISF__ZOOM_LASTUPDATED__C                   as zisf_zoom_last_up_atd,\n        LASTREFERENCEDDATE                          as last_referenced_at,\n        IDEAL_CLIENT_PROFILE__C                     as ideal_client_profile,\n        QBDIALER__LASTCALLTIME__C                   as qb_dialer_last_calltime,\n        LASTVIEWEDDATE                              as last_viewed_at,\n        ZOOMINFO_DESCRIPTION__C                     as zoom_info_description,\n        ZOOMINFO_STREET__C                          as zoom_info_street,\n        ZOOMINFO_CITY__C                            as zoom_info_city,\n        ZOOMINFO_FAX__C                             as zoom_info_fax,\n        ZOOMINFO_ACCOUNT_SOURCE__C                  as zoom_info_account_source,\n        ZOOMINFO__C                                 as zoom_info,\n        ZOOMINFO_PHONE__C                           as zoom_info_phone,\n        ZOOMINFO_STATE__C                           as zoom_info_state,\n        ZOOMINFO_COUNTRY__C                         as zoom_info_country,\n        ZOOMINFO_REVENUE__C                         as zoom_info_revenue,\n        ZOOMINFO_EMPLOYEE_COUNT__C                  as zoom_info_employee_count,\n        ZOOMINFO_WEBSITE__C                         as zoom_info_website,\n        REGION_DEFINITION__C                        as region_definition,\n        REGION_DEFINITION_NAME__C                   as region_definition_name,\n        REGION_DEFINITION_NAME_FORM__C              as region_definition_name_form,\n        GET_REGION_DEFINITION__C                    as get_region_definition,\n        IDEAL_CLIENT_PROFILE_DETAIL__C              as ideal_client_profile_detail,\n        DOZISF__ZOOMINFO_LAST_UPDATED__C            as dozisf_zoom_info_last_updated,\n        DOZISF__ZOOMINFO_FIRST_UPDATED__C           as dozisf_zoom_info_first_updated,\n        ZOOMINFO_ENRICHED_STATUS__C                 as zoom_info_enriched_status,\n        DOZISF__ZOOMINFO_ID__C                      as dozisf_zoom_info_id,\n        ZOOMINFO_TOTAL_FUNDING__C                   as zoom_info_total_funding,\n        ZOOMINFO_PARENT_COMPANY_ZOOMINFO_ID__C      as zoom_info_parent_company_zoom_info_id,\n        ZOOMINFO_FUNDING_ROUNDS__C                  as zoom_info_funding_rounds,\n        ZOOMINFO_INDUSTRY__C                        as zoom_info_industry,\n        ZOOMINFO_EMPLOYEE_RANGE__C                  as zoom_info_employee_range,\n        ZOOMINFO_PARENT_COMPANY_NAME__C             as zoom_info_parent_company_name,\n        ZOOMINFO_TOTAL_FUNDING__C__ST               as zoom_info_total_funding_st,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_ZOOMINF__C as zoom_info_ultimate_parent_company_zoominf,\n        ZOOMINFO_ULTIMATE_PARENT_COMPANY_NAME__C    as zoom_info_ultimate_parent_company_name,\n        PROGRAM_MANAGER__C                          as program_manager,\n        ACCOUNT_MINIMUM_MONTHLY_COMMITMENT__C       as account_minimum_monthly_commitment,\n        TIER__C                                     as tier,\n        PRIORITY__C                                 as priority,\n        _SDC_BATCHED_AT                             as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                           as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                            as _sdc_received_at,\n        _SDC_SEQUENCE                               as _sdc_sequence,\n        _SDC_TABLE_VERSION                          as _sdc_table_version,\n        dbt_valid_from,\n        dbt_valid_to,\n        dbt_updated_at\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_salesforce_account"}, "model.edw.base_salesforce_user": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('salesforce','user') }}\n),\nrenamed as (\n    select \n        ABOUTME                                            as about_me,\n        ALIAS                                              as alias,\n        BANNERPHOTOURL                                     as banner_photo_url,\n        BUSINESS_HOURS__C                                  as business_hours,\n        CITY                                               as city,\n        COMMUNITYNICKNAME                                  as community_nickname,\n        COMPANYNAME                                        as company_name,\n        COUNTRY                                            as country,\n        CREATEDBYID                                        as created_by_id,\n        CREATEDDATE                                        as created_date,\n        DEFAULTGROUPNOTIFICATIONFREQUENCY                  as default_group_notification_frequency,\n        DEPARTMENT                                         as department,\n        DIGESTFREQUENCY                                    as digest_frequency,\n        DIVISION                                           as division,\n        EMAIL                                              as email,\n        EMAILENCODINGKEY                                   as email_encoding_key,\n        EMAILPREFERENCESAUTOBCC                            as email_preferences_autobcc,\n        EMAILPREFERENCESAUTOBCCSTAYINTOUCH                 as email_preferences_autobccstayintouch,\n        EMAILPREFERENCESSTAYINTOUCHREMINDER                as email_preferences_stayintouchreminder,\n        EMPLOYEENUMBER                                     as employee_number,\n        FIRSTNAME                                          as first_name,\n        FORECASTENABLED                                    as forecast_enabled,\n        FULLPHOTOURL                                       as full_photo_url,\n        ID                                                 as user_id,\n        ISACTIVE                                           as is_active,\n        ISEXTINDICATORVISIBLE                              as is_extindicator_visible,\n        ISPROFILEPHOTOACTIVE                               as is_profile_photoa_ctive,\n        LANGUAGELOCALEKEY                                  as language_locale_key,\n        LASTLOGINDATE                                      as last_login_at,\n        LASTMODIFIEDBYID                                   as last_modified_by_id,\n        LASTMODIFIEDDATE                                   as last_modified_at,\n        LASTNAME                                           as last_name,\n        LASTREFERENCEDDATE                                 as last_referenced_at,\n        LASTVIEWEDDATE                                     as last_viewed_at,\n        LOCALESIDKEY                                       as locales_id_key,\n        MANAGERID                                          as manager_id,\n        MEDIUMBANNERPHOTOURL                               as medium_banner_photo_url,\n        MEDIUMPHOTOURL                                     as medium_photo_url,\n        MOBILEPHONE                                        as mobile_phone,\n        NAME                                               as user_name,\n        PHONE                                              as phone,\n        POSTALCODE                                         as postal_code,\n        PROFILEID                                          as profile_id,\n        PROFILE_NAME__C                                    as profile_name,\n        QBDIALER__INSIDESALES_ADMIN__C                     as qbdialer_insidesales_admin_c,\n        QBDIALER__IS_SUBDOMAIN__C                          as qbdialer_is_subdomain,\n        QBDIALER__IS_TOKEN__C                              as qbdialer_is_token,\n        QBDIALER__PERMISSIONS__C                           as qbdialer_permissions,\n        RECEIVESADMININFOEMAILS                            as receives_admin_info_emails,\n        RECEIVESINFOEMAILS                                 as receives_info_emails,\n        SIGNATURE                                          as user_signature,\n        SMALLBANNERPHOTOURL                                as small_banner_photo_url,\n        SMALLPHOTOURL                                      as small_photo_url,\n        STATE                                              as user_state,\n        STREET                                             as street,\n        SYSTEMMODSTAMP                                     as system_mod_stamp,\n        TIMEZONESIDKEY                                     as timezones_id_key,\n        TITLE                                              as title,\n        USERNAME                                           as user_email_name,\n        USERPERMISSIONSAVANTGOUSER                         as user_permissions_avantgo_user,\n        USERPERMISSIONSCALLCENTERAUTOLOGIN                 as user_permissions_callcenter_auto_login,\n        USERPERMISSIONSINTERACTIONUSER                     as user_permissions_interaction_user,\n        USERPERMISSIONSMARKETINGUSER                       as user_permissions_marketing_user,\n        USERPERMISSIONSMOBILEUSER                          as user_permissions_mobile_user,\n        USERPERMISSIONSOFFLINEUSER                         as user_permissions_offline_user,\n        USERPERMISSIONSSFCONTENTUSER                       as user_permissions_sfcontent_user,\n        USERPERMISSIONSSUPPORTUSER                         as user_permissions_support_user,\n        USERPREFERENCESACTIVITYREMINDERSPOPUP              as user_preferences_activity_reminders_popup,\n        USERPREFERENCESAPEXPAGESDEVELOPERMODE              as user_preferences_apex_pages_developervmode,\n        USERPREFERENCESCACHEDIAGNOSTICS                    as user_preferences_cache_diagnostics,\n        USERPREFERENCESCONTENTEMAILASANDWHEN               as user_preferences_content_email_as_and_when,\n        USERPREFERENCESCONTENTNOEMAIL                      as user_preferences_content_no_email,\n        USERPREFERENCESCREATELEXAPPSWTSHOWN                as user_preferences_create_lex_apps_wt_shown,\n        USERPREFERENCESDISABLEALLFEEDSEMAIL                as user_preferences_disable_allfeedsemail,\n        USERPREFERENCESDISABLEBOOKMARKEMAIL                as user_preferences_disable_bookmarkemail,\n        USERPREFERENCESDISABLECHANGECOMMENTEMAIL           as user_preferences_disable_changecommentemail,\n        USERPREFERENCESDISABLEENDORSEMENTEMAIL             as user_preferences_disable_endorsementemail,\n        USERPREFERENCESDISABLEFILESHARENOTIFICATIONSFORAPI as user_preferences_disable_filesharenotificationsforapi,\n        USERPREFERENCESDISABLEFOLLOWERSEMAIL               as user_preferences_disable_followersemail,\n        USERPREFERENCESDISABLELATERCOMMENTEMAIL            as user_preferences_disable_latercommentemail,\n        USERPREFERENCESDISABLELIKEEMAIL                    as user_preferences_disable_likeemail,\n        USERPREFERENCESDISABLEMENTIONSPOSTEMAIL            as user_preferences_disable_mentionspostemail,\n        USERPREFERENCESDISABLEMESSAGEEMAIL                 as user_preferences_disable_messageemail,\n        USERPREFERENCESDISABLEPROFILEPOSTEMAIL             as user_preferences_disable_profilepostemail,\n        USERPREFERENCESDISABLESHAREPOSTEMAIL               as user_preferences_disable_sharepostemail,\n        USERPREFERENCESDISCOMMENTAFTERLIKEEMAIL            as user_preferences_dis_comment_after_like_email,\n        USERPREFERENCESDISMENTIONSCOMMENTEMAIL             as user_preferences_dis_mentions_comment_email,\n        USERPREFERENCESDISPROFPOSTCOMMENTEMAIL             as user_preferences_dis_prof_post_comment_email,\n        USERPREFERENCESENABLEAUTOSUBFORFEEDS               as user_preferences_enable_auto_sub_for_feeds,\n        USERPREFERENCESEVENTREMINDERSCHECKBOXDEFAULT       as user_preferences_event_reminders_checkbox_default,\n        USERPREFERENCESEXCLUDEMAILAPPATTACHMENTS           as user_preferences_exclude_mail_app_attachments,\n        USERPREFERENCESFAVORITESSHOWTOPFAVORITES           as user_preferences_favorites_show_top_favorites,\n        USERPREFERENCESFAVORITESWTSHOWN                    as user_preferences_favorites_wt_shown,\n        USERPREFERENCESGLOBALNAVBARWTSHOWN                 as user_preferences_global_navbar_wt_shown,\n        USERPREFERENCESGLOBALNAVGRIDMENUWTSHOWN            as user_preferences_global_navgrid_menu_wt_shown,\n        USERPREFERENCESHIDEBIGGERPHOTOCALLOUT              as user_preferences_hide_bigger_photo_callout,\n        USERPREFERENCESHIDECHATTERONBOARDINGSPLASH         as user_preferences_hide_chatter_onboarding_splash,\n        USERPREFERENCESHIDECSNDESKTOPTASK                  as user_preferences_hide_csn_desktop_task,\n        USERPREFERENCESHIDECSNGETCHATTERMOBILETASK         as user_preferences_hide_csn_get_chatter_mobile_task,\n        USERPREFERENCESHIDEENDUSERONBOARDINGASSISTANTMODAL as user_preferences_hide_enduser_onboarding_assistant_modal,\n        USERPREFERENCESHIDELIGHTNINGMIGRATIONMODAL         as user_preferences_hide_lightning_migration_modal,\n        USERPREFERENCESHIDES1BROWSERUI                     as user_preferences_hides1_browser_ui,\n        USERPREFERENCESHIDESECONDCHATTERONBOARDINGSPLASH   as user_preferences_hide_second_chatter_onboarding_splash,\n        USERPREFERENCESHIDESFXWELCOMEMAT                   as user_preferences_hide_sfx_welcome_mat,\n        USERPREFERENCESLIGHTNINGEXPERIENCEPREFERRED        as user_preferences_lightning_experience_preferred,\n        USERPREFERENCESPATHASSISTANTCOLLAPSED              as user_preferences_path_assistant_collapsed,\n        USERPREFERENCESRECORDHOMERESERVEDWTSHOWN           as user_preferences_record_home_reserved_wt_shown,\n        USERPREFERENCESRECORDHOMESECTIONCOLLAPSEWTSHOWN    as user_preferences_record_home_section_collapse_wt_shown,\n        USERPREFERENCESREMINDERSOUNDOFF                    as user_preferences_reminder_sound_off,\n        USERPREFERENCESSHOWCITYTOEXTERNALUSERS             as user_preferences_show_city_to_external_users,\n        USERPREFERENCESSHOWCITYTOGUESTUSERS                as user_preferences_show_city_to_guest_users,\n        USERPREFERENCESSHOWCOUNTRYTOEXTERNALUSERS          as user_preferences_show_country_to_external_users,\n        USERPREFERENCESSHOWCOUNTRYTOGUESTUSERS             as user_preferences_show_country_to_guest_users,\n        USERPREFERENCESSHOWEMAILTOEXTERNALUSERS            as user_preferences_show_email_to_external_users,\n        USERPREFERENCESSHOWEMAILTOGUESTUSERS               as user_preferences_show_email_to_guest_users,\n        USERPREFERENCESSHOWFAXTOEXTERNALUSERS              as user_preferences_show_fax_to_external_users,\n        USERPREFERENCESSHOWFAXTOGUESTUSERS                 as user_preferences_show_fax_to_guest_users,\n        USERPREFERENCESSHOWMANAGERTOEXTERNALUSERS          as user_preferences_show_manager_to_external_users,\n        USERPREFERENCESSHOWMANAGERTOGUESTUSERS             as user_preferences_show_manager_to_guest_users,\n        USERPREFERENCESSHOWMOBILEPHONETOEXTERNALUSERS      as user_preferences_show_mobile_phone_to_external_users,\n        USERPREFERENCESSHOWMOBILEPHONETOGUESTUSERS         as user_preferences_show_mobile_phone_to_guest_users,\n        USERPREFERENCESSHOWPOSTALCODETOEXTERNALUSERS       as user_preferences_show_postal_code_to_external_users,\n        USERPREFERENCESSHOWPOSTALCODETOGUESTUSERS          as user_preferences_show_postal_code_to_guest_users,\n        USERPREFERENCESSHOWPROFILEPICTOGUESTUSERS          as user_preferences_show_profile_pic_to_guest_users,\n        USERPREFERENCESSHOWSTATETOEXTERNALUSERS            as user_preferences_show_state_to_external_users,\n        USERPREFERENCESSHOWSTATETOGUESTUSERS               as user_preferences_show_state_to_guest_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOEXTERNALUSERS    as user_preferences_show_street_address_to_external_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOGUESTUSERS       as user_preferences_show_street_address_to_guest_users,\n        USERPREFERENCESSHOWTITLETOEXTERNALUSERS            as user_preferences_show_title_to_external_users,\n        USERPREFERENCESSHOWTITLETOGUESTUSERS               as user_preferences_show_title_to_guest_users,\n        USERPREFERENCESSHOWWORKPHONETOEXTERNALUSERS        as user_preferences_show_work_phone_to_external_users,\n        USERPREFERENCESSHOWWORKPHONETOGUESTUSERS           as user_preferences_show_work_phone_to_guest_users,\n        USERPREFERENCESSORTFEEDBYCOMMENT                   as user_preferences_sort_feed_by_comment,\n        USERPREFERENCESTASKREMINDERSCHECKBOXDEFAULT        as user_preferences_task_reminders_checkbox_default,\n        USERROLEID                                         as user_role_id,\n        USERTYPE                                           as user_type,\n        _SDC_BATCHED_AT                                    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                                  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                                   as _sdc_received_at,\n        _SDC_SEQUENCE                                      as _sdc_sequence,\n        _SDC_TABLE_VERSION                                 as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.user"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "salesforce", "base", "base_salesforce_user"], "unique_id": "model.edw.base_salesforce_user", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/salesforce/base/base_salesforce_user.sql", "original_file_path": "models/psa/salesforce/base/base_salesforce_user.sql", "name": "base_salesforce_user", "alias": "base_salesforce_user", "checksum": {"name": "sha256", "checksum": "626c177fe5653f86d36e972ab130ec0232072997300b5c9e7fd9011c64a70b5a"}, "tags": [], "refs": [], "sources": [["salesforce", "user"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/salesforce/schema.yml", "build_path": "target/compiled/edw/models/psa/salesforce/base/base_salesforce_user.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "salesforce"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.salesforce_stitch.user\n),\nrenamed as (\n    select \n        ABOUTME                                            as about_me,\n        ALIAS                                              as alias,\n        BANNERPHOTOURL                                     as banner_photo_url,\n        BUSINESS_HOURS__C                                  as business_hours,\n        CITY                                               as city,\n        COMMUNITYNICKNAME                                  as community_nickname,\n        COMPANYNAME                                        as company_name,\n        COUNTRY                                            as country,\n        CREATEDBYID                                        as created_by_id,\n        CREATEDDATE                                        as created_date,\n        DEFAULTGROUPNOTIFICATIONFREQUENCY                  as default_group_notification_frequency,\n        DEPARTMENT                                         as department,\n        DIGESTFREQUENCY                                    as digest_frequency,\n        DIVISION                                           as division,\n        EMAIL                                              as email,\n        EMAILENCODINGKEY                                   as email_encoding_key,\n        EMAILPREFERENCESAUTOBCC                            as email_preferences_autobcc,\n        EMAILPREFERENCESAUTOBCCSTAYINTOUCH                 as email_preferences_autobccstayintouch,\n        EMAILPREFERENCESSTAYINTOUCHREMINDER                as email_preferences_stayintouchreminder,\n        EMPLOYEENUMBER                                     as employee_number,\n        FIRSTNAME                                          as first_name,\n        FORECASTENABLED                                    as forecast_enabled,\n        FULLPHOTOURL                                       as full_photo_url,\n        ID                                                 as user_id,\n        ISACTIVE                                           as is_active,\n        ISEXTINDICATORVISIBLE                              as is_extindicator_visible,\n        ISPROFILEPHOTOACTIVE                               as is_profile_photoa_ctive,\n        LANGUAGELOCALEKEY                                  as language_locale_key,\n        LASTLOGINDATE                                      as last_login_at,\n        LASTMODIFIEDBYID                                   as last_modified_by_id,\n        LASTMODIFIEDDATE                                   as last_modified_at,\n        LASTNAME                                           as last_name,\n        LASTREFERENCEDDATE                                 as last_referenced_at,\n        LASTVIEWEDDATE                                     as last_viewed_at,\n        LOCALESIDKEY                                       as locales_id_key,\n        MANAGERID                                          as manager_id,\n        MEDIUMBANNERPHOTOURL                               as medium_banner_photo_url,\n        MEDIUMPHOTOURL                                     as medium_photo_url,\n        MOBILEPHONE                                        as mobile_phone,\n        NAME                                               as user_name,\n        PHONE                                              as phone,\n        POSTALCODE                                         as postal_code,\n        PROFILEID                                          as profile_id,\n        PROFILE_NAME__C                                    as profile_name,\n        QBDIALER__INSIDESALES_ADMIN__C                     as qbdialer_insidesales_admin_c,\n        QBDIALER__IS_SUBDOMAIN__C                          as qbdialer_is_subdomain,\n        QBDIALER__IS_TOKEN__C                              as qbdialer_is_token,\n        QBDIALER__PERMISSIONS__C                           as qbdialer_permissions,\n        RECEIVESADMININFOEMAILS                            as receives_admin_info_emails,\n        RECEIVESINFOEMAILS                                 as receives_info_emails,\n        SIGNATURE                                          as user_signature,\n        SMALLBANNERPHOTOURL                                as small_banner_photo_url,\n        SMALLPHOTOURL                                      as small_photo_url,\n        STATE                                              as user_state,\n        STREET                                             as street,\n        SYSTEMMODSTAMP                                     as system_mod_stamp,\n        TIMEZONESIDKEY                                     as timezones_id_key,\n        TITLE                                              as title,\n        USERNAME                                           as user_email_name,\n        USERPERMISSIONSAVANTGOUSER                         as user_permissions_avantgo_user,\n        USERPERMISSIONSCALLCENTERAUTOLOGIN                 as user_permissions_callcenter_auto_login,\n        USERPERMISSIONSINTERACTIONUSER                     as user_permissions_interaction_user,\n        USERPERMISSIONSMARKETINGUSER                       as user_permissions_marketing_user,\n        USERPERMISSIONSMOBILEUSER                          as user_permissions_mobile_user,\n        USERPERMISSIONSOFFLINEUSER                         as user_permissions_offline_user,\n        USERPERMISSIONSSFCONTENTUSER                       as user_permissions_sfcontent_user,\n        USERPERMISSIONSSUPPORTUSER                         as user_permissions_support_user,\n        USERPREFERENCESACTIVITYREMINDERSPOPUP              as user_preferences_activity_reminders_popup,\n        USERPREFERENCESAPEXPAGESDEVELOPERMODE              as user_preferences_apex_pages_developervmode,\n        USERPREFERENCESCACHEDIAGNOSTICS                    as user_preferences_cache_diagnostics,\n        USERPREFERENCESCONTENTEMAILASANDWHEN               as user_preferences_content_email_as_and_when,\n        USERPREFERENCESCONTENTNOEMAIL                      as user_preferences_content_no_email,\n        USERPREFERENCESCREATELEXAPPSWTSHOWN                as user_preferences_create_lex_apps_wt_shown,\n        USERPREFERENCESDISABLEALLFEEDSEMAIL                as user_preferences_disable_allfeedsemail,\n        USERPREFERENCESDISABLEBOOKMARKEMAIL                as user_preferences_disable_bookmarkemail,\n        USERPREFERENCESDISABLECHANGECOMMENTEMAIL           as user_preferences_disable_changecommentemail,\n        USERPREFERENCESDISABLEENDORSEMENTEMAIL             as user_preferences_disable_endorsementemail,\n        USERPREFERENCESDISABLEFILESHARENOTIFICATIONSFORAPI as user_preferences_disable_filesharenotificationsforapi,\n        USERPREFERENCESDISABLEFOLLOWERSEMAIL               as user_preferences_disable_followersemail,\n        USERPREFERENCESDISABLELATERCOMMENTEMAIL            as user_preferences_disable_latercommentemail,\n        USERPREFERENCESDISABLELIKEEMAIL                    as user_preferences_disable_likeemail,\n        USERPREFERENCESDISABLEMENTIONSPOSTEMAIL            as user_preferences_disable_mentionspostemail,\n        USERPREFERENCESDISABLEMESSAGEEMAIL                 as user_preferences_disable_messageemail,\n        USERPREFERENCESDISABLEPROFILEPOSTEMAIL             as user_preferences_disable_profilepostemail,\n        USERPREFERENCESDISABLESHAREPOSTEMAIL               as user_preferences_disable_sharepostemail,\n        USERPREFERENCESDISCOMMENTAFTERLIKEEMAIL            as user_preferences_dis_comment_after_like_email,\n        USERPREFERENCESDISMENTIONSCOMMENTEMAIL             as user_preferences_dis_mentions_comment_email,\n        USERPREFERENCESDISPROFPOSTCOMMENTEMAIL             as user_preferences_dis_prof_post_comment_email,\n        USERPREFERENCESENABLEAUTOSUBFORFEEDS               as user_preferences_enable_auto_sub_for_feeds,\n        USERPREFERENCESEVENTREMINDERSCHECKBOXDEFAULT       as user_preferences_event_reminders_checkbox_default,\n        USERPREFERENCESEXCLUDEMAILAPPATTACHMENTS           as user_preferences_exclude_mail_app_attachments,\n        USERPREFERENCESFAVORITESSHOWTOPFAVORITES           as user_preferences_favorites_show_top_favorites,\n        USERPREFERENCESFAVORITESWTSHOWN                    as user_preferences_favorites_wt_shown,\n        USERPREFERENCESGLOBALNAVBARWTSHOWN                 as user_preferences_global_navbar_wt_shown,\n        USERPREFERENCESGLOBALNAVGRIDMENUWTSHOWN            as user_preferences_global_navgrid_menu_wt_shown,\n        USERPREFERENCESHIDEBIGGERPHOTOCALLOUT              as user_preferences_hide_bigger_photo_callout,\n        USERPREFERENCESHIDECHATTERONBOARDINGSPLASH         as user_preferences_hide_chatter_onboarding_splash,\n        USERPREFERENCESHIDECSNDESKTOPTASK                  as user_preferences_hide_csn_desktop_task,\n        USERPREFERENCESHIDECSNGETCHATTERMOBILETASK         as user_preferences_hide_csn_get_chatter_mobile_task,\n        USERPREFERENCESHIDEENDUSERONBOARDINGASSISTANTMODAL as user_preferences_hide_enduser_onboarding_assistant_modal,\n        USERPREFERENCESHIDELIGHTNINGMIGRATIONMODAL         as user_preferences_hide_lightning_migration_modal,\n        USERPREFERENCESHIDES1BROWSERUI                     as user_preferences_hides1_browser_ui,\n        USERPREFERENCESHIDESECONDCHATTERONBOARDINGSPLASH   as user_preferences_hide_second_chatter_onboarding_splash,\n        USERPREFERENCESHIDESFXWELCOMEMAT                   as user_preferences_hide_sfx_welcome_mat,\n        USERPREFERENCESLIGHTNINGEXPERIENCEPREFERRED        as user_preferences_lightning_experience_preferred,\n        USERPREFERENCESPATHASSISTANTCOLLAPSED              as user_preferences_path_assistant_collapsed,\n        USERPREFERENCESRECORDHOMERESERVEDWTSHOWN           as user_preferences_record_home_reserved_wt_shown,\n        USERPREFERENCESRECORDHOMESECTIONCOLLAPSEWTSHOWN    as user_preferences_record_home_section_collapse_wt_shown,\n        USERPREFERENCESREMINDERSOUNDOFF                    as user_preferences_reminder_sound_off,\n        USERPREFERENCESSHOWCITYTOEXTERNALUSERS             as user_preferences_show_city_to_external_users,\n        USERPREFERENCESSHOWCITYTOGUESTUSERS                as user_preferences_show_city_to_guest_users,\n        USERPREFERENCESSHOWCOUNTRYTOEXTERNALUSERS          as user_preferences_show_country_to_external_users,\n        USERPREFERENCESSHOWCOUNTRYTOGUESTUSERS             as user_preferences_show_country_to_guest_users,\n        USERPREFERENCESSHOWEMAILTOEXTERNALUSERS            as user_preferences_show_email_to_external_users,\n        USERPREFERENCESSHOWEMAILTOGUESTUSERS               as user_preferences_show_email_to_guest_users,\n        USERPREFERENCESSHOWFAXTOEXTERNALUSERS              as user_preferences_show_fax_to_external_users,\n        USERPREFERENCESSHOWFAXTOGUESTUSERS                 as user_preferences_show_fax_to_guest_users,\n        USERPREFERENCESSHOWMANAGERTOEXTERNALUSERS          as user_preferences_show_manager_to_external_users,\n        USERPREFERENCESSHOWMANAGERTOGUESTUSERS             as user_preferences_show_manager_to_guest_users,\n        USERPREFERENCESSHOWMOBILEPHONETOEXTERNALUSERS      as user_preferences_show_mobile_phone_to_external_users,\n        USERPREFERENCESSHOWMOBILEPHONETOGUESTUSERS         as user_preferences_show_mobile_phone_to_guest_users,\n        USERPREFERENCESSHOWPOSTALCODETOEXTERNALUSERS       as user_preferences_show_postal_code_to_external_users,\n        USERPREFERENCESSHOWPOSTALCODETOGUESTUSERS          as user_preferences_show_postal_code_to_guest_users,\n        USERPREFERENCESSHOWPROFILEPICTOGUESTUSERS          as user_preferences_show_profile_pic_to_guest_users,\n        USERPREFERENCESSHOWSTATETOEXTERNALUSERS            as user_preferences_show_state_to_external_users,\n        USERPREFERENCESSHOWSTATETOGUESTUSERS               as user_preferences_show_state_to_guest_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOEXTERNALUSERS    as user_preferences_show_street_address_to_external_users,\n        USERPREFERENCESSHOWSTREETADDRESSTOGUESTUSERS       as user_preferences_show_street_address_to_guest_users,\n        USERPREFERENCESSHOWTITLETOEXTERNALUSERS            as user_preferences_show_title_to_external_users,\n        USERPREFERENCESSHOWTITLETOGUESTUSERS               as user_preferences_show_title_to_guest_users,\n        USERPREFERENCESSHOWWORKPHONETOEXTERNALUSERS        as user_preferences_show_work_phone_to_external_users,\n        USERPREFERENCESSHOWWORKPHONETOGUESTUSERS           as user_preferences_show_work_phone_to_guest_users,\n        USERPREFERENCESSORTFEEDBYCOMMENT                   as user_preferences_sort_feed_by_comment,\n        USERPREFERENCESTASKREMINDERSCHECKBOXDEFAULT        as user_preferences_task_reminders_checkbox_default,\n        USERROLEID                                         as user_role_id,\n        USERTYPE                                           as user_type,\n        _SDC_BATCHED_AT                                    as _sdc_batched_at,\n        _SDC_EXTRACTED_AT                                  as _sdc_extracted_at,\n        _SDC_RECEIVED_AT                                   as _sdc_received_at,\n        _SDC_SEQUENCE                                      as _sdc_sequence,\n        _SDC_TABLE_VERSION                                 as _sdc_table_version\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_salesforce_user"}, "model.edw.stg_cpu_model_summary": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_passmark_cpu') }}\n\n)\n, split as (\n\n    select \n        s.cpu_name,\n        s.rating,\n        s.rank,\n        ntile(3) over (order by rank asc) as ntile_3,\n        case ntile_3\n            when 1 then 'L'\n            when 2 then 'M'\n            when 3 then 'S'\n        end as size,\n        s.num_thread_execution_units,\n        s.avg_speed,\n        s.stock_speed,\n        s.samples,\n        s.single_thread,\n        s.maxtdp,\n        s.turbospeed,\n        s.cores_per_cpu,\n        s.logicals_per_core,\n        s.cpu_first_seen_in_charts,\n        case \n            when contains(s.cpu_name, '[Dual CPU]') > 0 then\n                '[Dual CPU]' || value\n            else value\n        end as alt_name,\n        replace(alt_name, ' ') as alt_name_no_space\n\n    from source s, lateral split_to_table(s.other_names, ',')\n\n)\nselect * from split", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_passmark_cpu"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "passmark", "stg_cpu_model_summary"], "unique_id": "model.edw.stg_cpu_model_summary", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/passmark/stg_cpu_model_summary.sql", "original_file_path": "models/psa/passmark/stg_cpu_model_summary.sql", "name": "stg_cpu_model_summary", "alias": "stg_cpu_model_summary", "checksum": {"name": "sha256", "checksum": "9e1403834ba5c0633ee0d07e55a064db98ce04af23d6ae03f84243ad7f1e94b8"}, "tags": [], "refs": [["base_passmark_cpu"]], "sources": [], "description": "cpu ranking data from passmark", "columns": {"avg_speed": {"name": "avg_speed", "description": "cpu speed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cores_per_cpu": {"name": "cores_per_cpu", "description": "number of cores per cpu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpu_first_seen_in_charts": {"name": "cpu_first_seen_in_charts", "description": "date cpu was first seen", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpu_name": {"name": "cpu_name", "description": "canonical name of cpu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logicals_per_core": {"name": "logicals_per_core", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maxtdp": {"name": "maxtdp", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_thread_execution_units": {"name": "num_thread_execution_units", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "other_names": {"name": "other_names", "description": "list of other names for the cpu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rank": {"name": "rank", "description": "performance rank amongst all known cpus", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rating": {"name": "rating", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "samples": {"name": "samples", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "single_thread": {"name": "single_thread", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stock_speed": {"name": "stock_speed", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turbospeed": {"name": "turbospeed", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/passmark/schema.yml", "build_path": "target/compiled/edw/models/psa/passmark/stg_cpu_model_summary.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_passmark_cpu\n\n)\n, split as (\n\n    select \n        s.cpu_name,\n        s.rating,\n        s.rank,\n        ntile(3) over (order by rank asc) as ntile_3,\n        case ntile_3\n            when 1 then 'L'\n            when 2 then 'M'\n            when 3 then 'S'\n        end as size,\n        s.num_thread_execution_units,\n        s.avg_speed,\n        s.stock_speed,\n        s.samples,\n        s.single_thread,\n        s.maxtdp,\n        s.turbospeed,\n        s.cores_per_cpu,\n        s.logicals_per_core,\n        s.cpu_first_seen_in_charts,\n        case \n            when contains(s.cpu_name, '[Dual CPU]') > 0 then\n                '[Dual CPU]' || value\n            else value\n        end as alt_name,\n        replace(alt_name, ' ') as alt_name_no_space\n\n    from source s, lateral split_to_table(s.other_names, ',')\n\n)\nselect * from split", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_cpu_model_summary"}, "model.edw.base_passmark_cpu": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('passmark', 'cpu_model_summary') }}\n)\n, renamed as (\n\n    select\n        avg_speed,\n        cores_per_cpu,\n        cpu_first_seen_in_charts,\n        cpu_name,\n        logicals_per_core,\n        maxtdp,\n        num_thread_execution_units,\n        other_names,\n        rank,\n        rating,\n        samples,\n        single_thread,\n        stock_speed,\n        turbospeed\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.passmark.cpu_model_summary"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "passmark", "base", "base_passmark_cpu"], "unique_id": "model.edw.base_passmark_cpu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/passmark/base/base_passmark_cpu.sql", "original_file_path": "models/psa/passmark/base/base_passmark_cpu.sql", "name": "base_passmark_cpu", "alias": "base_passmark_cpu", "checksum": {"name": "sha256", "checksum": "eea5cd66be52fb3bc2187394a29d3019a004f67d7fc11474ce40dcccd98acf96"}, "tags": [], "refs": [], "sources": [["passmark", "cpu_model_summary"]], "description": "cpu ranking data from passmark", "columns": {"avg_speed": {"name": "avg_speed", "description": "cpu speed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cores_per_cpu": {"name": "cores_per_cpu", "description": "number of cores per cpu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpu_first_seen_in_charts": {"name": "cpu_first_seen_in_charts", "description": "date cpu was first seen", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpu_name": {"name": "cpu_name", "description": "canonical name of cpu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logicals_per_core": {"name": "logicals_per_core", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maxtdp": {"name": "maxtdp", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_thread_execution_units": {"name": "num_thread_execution_units", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "other_names": {"name": "other_names", "description": "list of other names for the cpu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rank": {"name": "rank", "description": "performance rank amongst all known cpus", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rating": {"name": "rating", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "samples": {"name": "samples", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "single_thread": {"name": "single_thread", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stock_speed": {"name": "stock_speed", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turbospeed": {"name": "turbospeed", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/passmark/schema.yml", "build_path": "target/compiled/edw/models/psa/passmark/base/base_passmark_cpu.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.passmark_ppw.cpu_model_summary\n)\n, renamed as (\n\n    select\n        avg_speed,\n        cores_per_cpu,\n        cpu_first_seen_in_charts,\n        cpu_name,\n        logicals_per_core,\n        maxtdp,\n        num_thread_execution_units,\n        other_names,\n        rank,\n        rating,\n        samples,\n        single_thread,\n        stock_speed,\n        turbospeed\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_passmark_cpu"}, "model.edw.stg_avid_raw_qc_data": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_avid_raw_qc_data') }}\n\n)\n, user_profiles as (\n\n    select * from {{ ref('base_users_profiles') }}\n\n)\n, users as (\n\n    select * from {{ ref('base_users_users') }}\n)\n, user_info as (\n    select\n        parse_json(user_profiles.user_address):country::varchar as reviewer_country,\n        users.email_address as reviewer_email_address,\n        user_profiles.avid_email_address,\n        user_profiles.avid_cohort as reviewer_team\n    from user_profiles\n    left join users\n        on user_profiles.user_uid = users.user_uid\n    where avid_email_address is not null\n)\n, quality as (\n\n    select\n        quality_control_id,\n        'Avidxchange' as reviewer_company,\n        user_info.reviewer_country,\n        email_address as avid_email_address,\n        user_info.reviewer_team,\n        organization_name,\n        user_info.reviewer_email_address,\n        work_type,\n        iff(lower(work_type) = 'indexing', 'Indexer', 'QA Reviewer') as worker_role,\n        is_single_pass,\n        iff(is_single_pass, 'Single Pass', 'Double Pass') as pass_type,\n        quality_control_at,\n        quality_control_date,\n        invoice_id,\n        invoice_url,\n        -- this is a binary/boolean value, but *100 makes things simpler in the BI tool\n        invoice_result * 100 as task_level_accuracy_percent, \n        accurate_customer_account_number_count,\n        accurate_invoice_amount_count,\n        accurate_invoice_date_count,\n        accurate_invoice_number_count,\n        accurate_invoice_type_count,\n        accurate_location_count,\n        accurate_po_number_count,\n        accurate_previous_unpaid_count,\n        accurate_service_end_count,\n        accurate_service_start_count,\n        accurate_supplier_count,\n        accurate_work_order_number_count,\n        correct_count,\n        opportunity_count,\n        quality_score * 100 as quality_score_percent,\n        error_count,\n        error_rate\n\n    from source\n    left join user_info\n        on source.email_address = user_info.avid_email_address\n)\n\nselect * from quality", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_avid_raw_qc_data", "model.edw.base_users_profiles", "model.edw.base_users_users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfclient", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cfclient", "stg_avid_raw_qc_data"], "unique_id": "model.edw.stg_avid_raw_qc_data", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cfclient/stg_avid_raw_qc_data.sql", "original_file_path": "models/psa/cfclient/stg_avid_raw_qc_data.sql", "name": "stg_avid_raw_qc_data", "alias": "stg_avid_raw_qc_data", "checksum": {"name": "sha256", "checksum": "3ca4f68321b69bd9bb38a869b1e9b14210381b95571d358f02750f4316df7ac7"}, "tags": [], "refs": [["base_avid_raw_qc_data"], ["base_users_profiles"], ["base_users_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cfclient/stg_avid_raw_qc_data.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cfclient"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_avid_raw_qc_data\n\n)\n, user_profiles as (\n\n    select * from psa_dev.scratch_brana.base_users_profiles\n\n)\n, users as (\n\n    select * from psa_dev.scratch_brana.base_users_users\n)\n, user_info as (\n    select\n        parse_json(user_profiles.user_address):country::varchar as reviewer_country,\n        users.email_address as reviewer_email_address,\n        user_profiles.avid_email_address,\n        user_profiles.avid_cohort as reviewer_team\n    from user_profiles\n    left join users\n        on user_profiles.user_uid = users.user_uid\n    where avid_email_address is not null\n)\n, quality as (\n\n    select\n        quality_control_id,\n        'Avidxchange' as reviewer_company,\n        user_info.reviewer_country,\n        email_address as avid_email_address,\n        user_info.reviewer_team,\n        organization_name,\n        user_info.reviewer_email_address,\n        work_type,\n        iff(lower(work_type) = 'indexing', 'Indexer', 'QA Reviewer') as worker_role,\n        is_single_pass,\n        iff(is_single_pass, 'Single Pass', 'Double Pass') as pass_type,\n        quality_control_at,\n        quality_control_date,\n        invoice_id,\n        invoice_url,\n        -- this is a binary/boolean value, but *100 makes things simpler in the BI tool\n        invoice_result * 100 as task_level_accuracy_percent, \n        accurate_customer_account_number_count,\n        accurate_invoice_amount_count,\n        accurate_invoice_date_count,\n        accurate_invoice_number_count,\n        accurate_invoice_type_count,\n        accurate_location_count,\n        accurate_po_number_count,\n        accurate_previous_unpaid_count,\n        accurate_service_end_count,\n        accurate_service_start_count,\n        accurate_supplier_count,\n        accurate_work_order_number_count,\n        correct_count,\n        opportunity_count,\n        quality_score * 100 as quality_score_percent,\n        error_count,\n        error_rate\n\n    from source\n    left join user_info\n        on source.email_address = user_info.avid_email_address\n)\n\nselect * from quality", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_avid_raw_qc_data"}, "model.edw.stg_avid_accuracy_stats": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_avid_accuracy_stats') }}\n\n)\n, task_meta as (\n\n    select * from {{ ref('base_avid_raw_stats') }}\n)\n, user_profiles as (\n\n    select * from {{ ref('base_users_profiles') }}\n)\n, dedup_raw as (\n\n    select distinct\n        invoice_id,\n        worker_id,\n        reviewer_id,\n        task_indexed_at,\n        task_processed_at,\n        last_value(task_meta.organization_name) over(partition by task_meta.invoice_id order by task_meta.task_id) as organization_name\n    from task_meta\n\n)\n, pass_info as (\n\n    select\n        invoice_id,\n        count(distinct work_type) as pass_count\n    from source\n    group by 1\n\n)\n, quality as (\n\n    select\n        quality_control_id,\n        'Cloudfactory' as reviewer_company,\n        parse_json(user_profiles.user_address):country::varchar as reviewer_country,\n        user_profiles.avid_email_address,\n        user_profiles.avid_cohort as reviewer_team,\n        dedup_raw.organization_name,\n        reviewer_email_address,\n        work_type,\n        iff(lower(work_type) = 'indexing', 'Indexer', 'QA Reviewer') as worker_role,\n        iff(\n            dedup_raw.worker_id = dedup_raw.reviewer_id and dedup_raw.task_indexed_at = dedup_raw.task_processed_at, \n            true, \n            false\n        ) as is_single_pass,\n        iff(is_single_pass, 'Single Pass', 'Double Pass') pass_type,\n        NULL as quality_control_at,\n        quality_control_date,\n        source.invoice_id,\n        source.invoice_url,\n        task_level_accuracy * 100 as task_level_accuracy_percent,\n        accurate_customer_account_number_count,\n        accurate_invoice_amount_count,\n        accurate_invoice_date_count,\n        accurate_invoice_number_count,\n        accurate_invoice_type_count,\n        accurate_location_count,\n        accurate_po_number_count,\n        accurate_previous_unpaid_count,\n        accurate_service_end_count,\n        accurate_service_start_count,\n        accurate_supplier_count,\n        accurate_work_order_number_count,\n        correct_count,\n        opportunity_count,\n        quality_score * 100 as quality_score_percent,\n        error_count,\n        error_rate\n    from source\n    {# this join produces inaccurate results #}\n    --inner join task_meta\n    --    on source.invoice_id = task_meta.invoice_id\n    left join user_profiles \n        on source.worker_id = user_profiles.user_uid\n    left join dedup_raw\n        on source.invoice_id = dedup_raw.invoice_id\n        {# and source.worker_id = dedup_raw.worker_id #}\n    left join pass_info\n        on source.invoice_id = pass_info.invoice_id\n\n)   \n\nselect * from quality", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_avid_accuracy_stats", "model.edw.base_avid_raw_stats", "model.edw.base_users_profiles"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfclient", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cfclient", "stg_avid_accuracy_stats"], "unique_id": "model.edw.stg_avid_accuracy_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cfclient/stg_avid_accuracy_stats.sql", "original_file_path": "models/psa/cfclient/stg_avid_accuracy_stats.sql", "name": "stg_avid_accuracy_stats", "alias": "stg_avid_accuracy_stats", "checksum": {"name": "sha256", "checksum": "42dfd38a455e9de3a5f91727583180c85f7b3c10cb7f61b01b872d63c61e681a"}, "tags": [], "refs": [["base_avid_accuracy_stats"], ["base_avid_raw_stats"], ["base_users_profiles"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cfclient/stg_avid_accuracy_stats.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cfclient"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_avid_accuracy_stats\n\n)\n, task_meta as (\n\n    select * from psa_dev.scratch_brana.base_avid_raw_stats\n)\n, user_profiles as (\n\n    select * from psa_dev.scratch_brana.base_users_profiles\n)\n, dedup_raw as (\n\n    select distinct\n        invoice_id,\n        worker_id,\n        reviewer_id,\n        task_indexed_at,\n        task_processed_at,\n        last_value(task_meta.organization_name) over(partition by task_meta.invoice_id order by task_meta.task_id) as organization_name\n    from task_meta\n\n)\n, pass_info as (\n\n    select\n        invoice_id,\n        count(distinct work_type) as pass_count\n    from source\n    group by 1\n\n)\n, quality as (\n\n    select\n        quality_control_id,\n        'Cloudfactory' as reviewer_company,\n        parse_json(user_profiles.user_address):country::varchar as reviewer_country,\n        user_profiles.avid_email_address,\n        user_profiles.avid_cohort as reviewer_team,\n        dedup_raw.organization_name,\n        reviewer_email_address,\n        work_type,\n        iff(lower(work_type) = 'indexing', 'Indexer', 'QA Reviewer') as worker_role,\n        iff(\n            dedup_raw.worker_id = dedup_raw.reviewer_id and dedup_raw.task_indexed_at = dedup_raw.task_processed_at, \n            true, \n            false\n        ) as is_single_pass,\n        iff(is_single_pass, 'Single Pass', 'Double Pass') pass_type,\n        NULL as quality_control_at,\n        quality_control_date,\n        source.invoice_id,\n        source.invoice_url,\n        task_level_accuracy * 100 as task_level_accuracy_percent,\n        accurate_customer_account_number_count,\n        accurate_invoice_amount_count,\n        accurate_invoice_date_count,\n        accurate_invoice_number_count,\n        accurate_invoice_type_count,\n        accurate_location_count,\n        accurate_po_number_count,\n        accurate_previous_unpaid_count,\n        accurate_service_end_count,\n        accurate_service_start_count,\n        accurate_supplier_count,\n        accurate_work_order_number_count,\n        correct_count,\n        opportunity_count,\n        quality_score * 100 as quality_score_percent,\n        error_count,\n        error_rate\n    from source\n    \n    --inner join task_meta\n    --    on source.invoice_id = task_meta.invoice_id\n    left join user_profiles \n        on source.worker_id = user_profiles.user_uid\n    left join dedup_raw\n        on source.invoice_id = dedup_raw.invoice_id\n        \n    left join pass_info\n        on source.invoice_id = pass_info.invoice_id\n\n)   \n\nselect * from quality", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_avid_accuracy_stats"}, "model.edw.base_avid_raw_stats": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('cfclient', 'avid_raw_stats') }}\n\n)\n, renamed as (\n\n    select\n        id                  as task_id,\n        invoice_id,\n        worker_id,\n        invoice_url,\n        reviewer_id,\n        organization_name,\n        changed_fields,\n        indexer_values,\n        qa_values,\n        submitted,\n        indexed_count,\n        total_qa_edits,\n        duration            as task_duration,\n        date                as task_date,\n        created_timestamp   as task_created_at,\n        indexed_timestamp   as task_indexed_at,\n        processed_timestamp as task_processed_at,\n        created_at          as record_created_at,\n        updated_at          as record_updated_at,\n        queue_type,\n        _sdc_extracted_at,\n        _sdc_batched_at,\n        _sdc_deleted_at\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cfclient.avid_raw_stats"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfclient", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cfclient", "base", "base_avid_raw_stats"], "unique_id": "model.edw.base_avid_raw_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cfclient/base/base_avid_raw_stats.sql", "original_file_path": "models/psa/cfclient/base/base_avid_raw_stats.sql", "name": "base_avid_raw_stats", "alias": "base_avid_raw_stats", "checksum": {"name": "sha256", "checksum": "62ec0755df365a2924b85ce60e1616a3ddbcdc33cb06840b0acb2c5eead676dd"}, "tags": [], "refs": [], "sources": [["cfclient", "avid_raw_stats"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cfclient/base/base_avid_raw_stats.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cfclient"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.cfclient_ppw.avid_raw_stats\n\n)\n, renamed as (\n\n    select\n        id                  as task_id,\n        invoice_id,\n        worker_id,\n        invoice_url,\n        reviewer_id,\n        organization_name,\n        changed_fields,\n        indexer_values,\n        qa_values,\n        submitted,\n        indexed_count,\n        total_qa_edits,\n        duration            as task_duration,\n        date                as task_date,\n        created_timestamp   as task_created_at,\n        indexed_timestamp   as task_indexed_at,\n        processed_timestamp as task_processed_at,\n        created_at          as record_created_at,\n        updated_at          as record_updated_at,\n        queue_type,\n        _sdc_extracted_at,\n        _sdc_batched_at,\n        _sdc_deleted_at\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_avid_raw_stats"}, "model.edw.base_avid_raw_qc_data": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('cfclient','avid_raw_qc_data') }}\n)\n,renamed as (\n    select\n        id as quality_control_id,\n        invoice_id,\n        role as avid_worker_type,\n        work_type,\n        iff(single_pass=1, true, false) as is_single_pass,\n        lower(worker_email) as email_address,\n        organization_name,\n        qc_timestamp as quality_control_at,\n        to_date(quality_control_at) as quality_control_date,\n        invoice_url,\n        invoice_result, \n        field_level_result as field_level_results,\n        indexer_input_value,\n        created_at,\n        updated_at,\n        _sdc_extracted_at,\n        _sdc_batched_at,\n        _sdc_deleted_at\n    from source\n)\n,score_components as (\n\n    select\n        renamed.*,\n        renamed.field_level_results:customer_account_number::number as accurate_customer_account_number_count,\n        renamed.field_level_results:invoice_amount::number as accurate_invoice_amount_count,\n        renamed.field_level_results:invoice_date::number as accurate_invoice_date_count,\n        renamed.field_level_results:invoice_number::number as accurate_invoice_number_count,\n        renamed.field_level_results:invoice_type::number as accurate_invoice_type_count,\n        renamed.field_level_results:location::number as accurate_location_count,\n        renamed.field_level_results:po_number::number as accurate_po_number_count,\n        renamed.field_level_results:previous_unpaid::number as accurate_previous_unpaid_count,\n        renamed.field_level_results:service_end::number as accurate_service_end_count,\n        renamed.field_level_results:service_start::number as accurate_service_start_count,\n        renamed.field_level_results:supplier::number as accurate_supplier_count,\n        renamed.field_level_results:work_order_number::number as accurate_work_order_number_count\n    from renamed\n)\n,scores as (\n    select\n        quality_control_id,\n        sum(value) as correct_count,\n        count(value) as opportunity_count,\n        opportunity_count - correct_count as error_count,\n        correct_count/opportunity_count as quality_score,\n        error_count/opportunity_count as error_rate\n    from renamed,\n        lateral flatten(input => renamed.field_level_results)\n    group by 1\n)\n,quality as (\n    select\n        score_components.quality_control_id,\n        score_components.invoice_id,\n        score_components.avid_worker_type,\n        score_components.work_type,\n        score_components.is_single_pass,\n        score_components.organization_name,\n        score_components.email_address,\n        score_components.quality_control_at,\n        score_components.quality_control_date,\n        score_components.invoice_url,\n        score_components.invoice_result, \n        score_components.accurate_customer_account_number_count,\n        score_components.accurate_invoice_amount_count,\n        score_components.accurate_invoice_date_count,\n        score_components.accurate_invoice_number_count,\n        score_components.accurate_invoice_type_count,\n        score_components.accurate_location_count,\n        score_components.accurate_po_number_count,\n        score_components.accurate_previous_unpaid_count,\n        score_components.accurate_service_end_count,\n        score_components.accurate_service_start_count,\n        score_components.accurate_supplier_count,\n        score_components.accurate_work_order_number_count,\n        scores.correct_count,\n        scores.opportunity_count,\n        scores.quality_score,\n        scores.error_count,\n        scores.error_rate\n    from score_components\n    left join scores\n        on score_components.quality_control_id = scores.quality_control_id\n)\nselect * from quality", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cfclient.avid_raw_qc_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfclient", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cfclient", "base", "base_avid_raw_qc_data"], "unique_id": "model.edw.base_avid_raw_qc_data", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cfclient/base/base_avid_raw_qc_data.sql", "original_file_path": "models/psa/cfclient/base/base_avid_raw_qc_data.sql", "name": "base_avid_raw_qc_data", "alias": "base_avid_raw_qc_data", "checksum": {"name": "sha256", "checksum": "f9b27861361c5fec63df5d0636c1f3b18207158b8ee692715a01fb0f2790f672"}, "tags": [], "refs": [], "sources": [["cfclient", "avid_raw_qc_data"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/cfclient/schema.yml", "build_path": "target/compiled/edw/models/psa/cfclient/base/base_avid_raw_qc_data.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cfclient"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.cfclient_ppw.avid_raw_qc_data\n)\n,renamed as (\n    select\n        id as quality_control_id,\n        invoice_id,\n        role as avid_worker_type,\n        work_type,\n        iff(single_pass=1, true, false) as is_single_pass,\n        lower(worker_email) as email_address,\n        organization_name,\n        qc_timestamp as quality_control_at,\n        to_date(quality_control_at) as quality_control_date,\n        invoice_url,\n        invoice_result, \n        field_level_result as field_level_results,\n        indexer_input_value,\n        created_at,\n        updated_at,\n        _sdc_extracted_at,\n        _sdc_batched_at,\n        _sdc_deleted_at\n    from source\n)\n,score_components as (\n\n    select\n        renamed.*,\n        renamed.field_level_results:customer_account_number::number as accurate_customer_account_number_count,\n        renamed.field_level_results:invoice_amount::number as accurate_invoice_amount_count,\n        renamed.field_level_results:invoice_date::number as accurate_invoice_date_count,\n        renamed.field_level_results:invoice_number::number as accurate_invoice_number_count,\n        renamed.field_level_results:invoice_type::number as accurate_invoice_type_count,\n        renamed.field_level_results:location::number as accurate_location_count,\n        renamed.field_level_results:po_number::number as accurate_po_number_count,\n        renamed.field_level_results:previous_unpaid::number as accurate_previous_unpaid_count,\n        renamed.field_level_results:service_end::number as accurate_service_end_count,\n        renamed.field_level_results:service_start::number as accurate_service_start_count,\n        renamed.field_level_results:supplier::number as accurate_supplier_count,\n        renamed.field_level_results:work_order_number::number as accurate_work_order_number_count\n    from renamed\n)\n,scores as (\n    select\n        quality_control_id,\n        sum(value) as correct_count,\n        count(value) as opportunity_count,\n        opportunity_count - correct_count as error_count,\n        correct_count/opportunity_count as quality_score,\n        error_count/opportunity_count as error_rate\n    from renamed,\n        lateral flatten(input => renamed.field_level_results)\n    group by 1\n)\n,quality as (\n    select\n        score_components.quality_control_id,\n        score_components.invoice_id,\n        score_components.avid_worker_type,\n        score_components.work_type,\n        score_components.is_single_pass,\n        score_components.organization_name,\n        score_components.email_address,\n        score_components.quality_control_at,\n        score_components.quality_control_date,\n        score_components.invoice_url,\n        score_components.invoice_result, \n        score_components.accurate_customer_account_number_count,\n        score_components.accurate_invoice_amount_count,\n        score_components.accurate_invoice_date_count,\n        score_components.accurate_invoice_number_count,\n        score_components.accurate_invoice_type_count,\n        score_components.accurate_location_count,\n        score_components.accurate_po_number_count,\n        score_components.accurate_previous_unpaid_count,\n        score_components.accurate_service_end_count,\n        score_components.accurate_service_start_count,\n        score_components.accurate_supplier_count,\n        score_components.accurate_work_order_number_count,\n        scores.correct_count,\n        scores.opportunity_count,\n        scores.quality_score,\n        scores.error_count,\n        scores.error_rate\n    from score_components\n    left join scores\n        on score_components.quality_control_id = scores.quality_control_id\n)\nselect * from quality", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_avid_raw_qc_data"}, "model.edw.base_avid_accuracy_stats": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('cfclient', 'avid_accuracy_stats') }}\n\n)\n, renamed as (\n\n    select\n        id as quality_control_id,\n        invoice_id,\n        run_id,\n        work_type,\n        worker_id,\n        email as reviewer_email_address,\n        date as quality_control_date,\n        invoice_url,\n        task_level_accuracy,\n        field_level_accuracy as field_level_results,\n        decode(status, 1, 'skipped', 2, 'flagged', 3, 'completed') as quality_control_status,\n        created_at as record_created_at,\n        updated_at as record_updated_at,\n        _sdc_extracted_at,\n        _sdc_batched_at,\n        _sdc_deleted_at\n    from source\n)\n,score_components as (\n\n    select\n        renamed.*,\n        renamed.field_level_results:customer_account_number::number as accurate_customer_account_number_count,\n        renamed.field_level_results:invoice_amount::number as accurate_invoice_amount_count,\n        renamed.field_level_results:invoice_date::number as accurate_invoice_date_count,\n        renamed.field_level_results:invoice_number::number as accurate_invoice_number_count,\n        renamed.field_level_results:invoice_type::number as accurate_invoice_type_count,\n        renamed.field_level_results:location::number as accurate_location_count,\n        renamed.field_level_results:po_number::number as accurate_po_number_count,\n        renamed.field_level_results:previous_unpaid::number as accurate_previous_unpaid_count,\n        renamed.field_level_results:service_end::number as accurate_service_end_count,\n        renamed.field_level_results:service_start::number as accurate_service_start_count,\n        renamed.field_level_results:supplier::number as accurate_supplier_count,\n        renamed.field_level_results:work_order_number::number as accurate_work_order_number_count\n    from renamed\n\n)\n,scores as (\n\n    select\n        quality_control_id,\n        sum(value) as correct_count,\n        count(value) as opportunity_count,\n        opportunity_count - correct_count as error_count,\n        correct_count/opportunity_count as quality_score,\n        error_count/opportunity_count as error_rate\n    from renamed,\n        lateral flatten(input => renamed.field_level_results)\n    group by 1\n\n)\n,quality as (\n\n    select\n        score_components.quality_control_id,\n        score_components.invoice_id,\n        score_components.run_id,\n        score_components.work_type,\n        score_components.worker_id,\n        score_components.reviewer_email_address,\n        score_components.quality_control_date,\n        score_components.invoice_url,\n        score_components.task_level_accuracy, \n        score_components.accurate_customer_account_number_count,\n        score_components.accurate_invoice_amount_count,\n        score_components.accurate_invoice_date_count,\n        score_components.accurate_invoice_number_count,\n        score_components.accurate_invoice_type_count,\n        score_components.accurate_location_count,\n        score_components.accurate_po_number_count,\n        score_components.accurate_previous_unpaid_count,\n        score_components.accurate_service_end_count,\n        score_components.accurate_service_start_count,\n        score_components.accurate_supplier_count,\n        score_components.accurate_work_order_number_count,\n        scores.correct_count,\n        scores.opportunity_count,\n        scores.quality_score,\n        scores.error_count,\n        scores.error_rate\n    from score_components\n    left join scores\n        on score_components.quality_control_id = scores.quality_control_id\n\n)\nselect * from quality", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cfclient.avid_accuracy_stats"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cfclient", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cfclient", "base", "base_avid_accuracy_stats"], "unique_id": "model.edw.base_avid_accuracy_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cfclient/base/base_avid_accuracy_stats.sql", "original_file_path": "models/psa/cfclient/base/base_avid_accuracy_stats.sql", "name": "base_avid_accuracy_stats", "alias": "base_avid_accuracy_stats", "checksum": {"name": "sha256", "checksum": "264d6d4410e27548ef0f21e2a7ac0967a64fd68eb807f41e8ff60441c0cdce29"}, "tags": [], "refs": [], "sources": [["cfclient", "avid_accuracy_stats"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cfclient/base/base_avid_accuracy_stats.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cfclient"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.cfclient_ppw.avid_accuracy_stats\n\n)\n, renamed as (\n\n    select\n        id as quality_control_id,\n        invoice_id,\n        run_id,\n        work_type,\n        worker_id,\n        email as reviewer_email_address,\n        date as quality_control_date,\n        invoice_url,\n        task_level_accuracy,\n        field_level_accuracy as field_level_results,\n        decode(status, 1, 'skipped', 2, 'flagged', 3, 'completed') as quality_control_status,\n        created_at as record_created_at,\n        updated_at as record_updated_at,\n        _sdc_extracted_at,\n        _sdc_batched_at,\n        _sdc_deleted_at\n    from source\n)\n,score_components as (\n\n    select\n        renamed.*,\n        renamed.field_level_results:customer_account_number::number as accurate_customer_account_number_count,\n        renamed.field_level_results:invoice_amount::number as accurate_invoice_amount_count,\n        renamed.field_level_results:invoice_date::number as accurate_invoice_date_count,\n        renamed.field_level_results:invoice_number::number as accurate_invoice_number_count,\n        renamed.field_level_results:invoice_type::number as accurate_invoice_type_count,\n        renamed.field_level_results:location::number as accurate_location_count,\n        renamed.field_level_results:po_number::number as accurate_po_number_count,\n        renamed.field_level_results:previous_unpaid::number as accurate_previous_unpaid_count,\n        renamed.field_level_results:service_end::number as accurate_service_end_count,\n        renamed.field_level_results:service_start::number as accurate_service_start_count,\n        renamed.field_level_results:supplier::number as accurate_supplier_count,\n        renamed.field_level_results:work_order_number::number as accurate_work_order_number_count\n    from renamed\n\n)\n,scores as (\n\n    select\n        quality_control_id,\n        sum(value) as correct_count,\n        count(value) as opportunity_count,\n        opportunity_count - correct_count as error_count,\n        correct_count/opportunity_count as quality_score,\n        error_count/opportunity_count as error_rate\n    from renamed,\n        lateral flatten(input => renamed.field_level_results)\n    group by 1\n\n)\n,quality as (\n\n    select\n        score_components.quality_control_id,\n        score_components.invoice_id,\n        score_components.run_id,\n        score_components.work_type,\n        score_components.worker_id,\n        score_components.reviewer_email_address,\n        score_components.quality_control_date,\n        score_components.invoice_url,\n        score_components.task_level_accuracy, \n        score_components.accurate_customer_account_number_count,\n        score_components.accurate_invoice_amount_count,\n        score_components.accurate_invoice_date_count,\n        score_components.accurate_invoice_number_count,\n        score_components.accurate_invoice_type_count,\n        score_components.accurate_location_count,\n        score_components.accurate_po_number_count,\n        score_components.accurate_previous_unpaid_count,\n        score_components.accurate_service_end_count,\n        score_components.accurate_service_start_count,\n        score_components.accurate_supplier_count,\n        score_components.accurate_work_order_number_count,\n        scores.correct_count,\n        scores.opportunity_count,\n        scores.quality_score,\n        scores.error_count,\n        scores.error_rate\n    from score_components\n    left join scores\n        on score_components.quality_control_id = scores.quality_control_id\n\n)\nselect * from quality", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_avid_accuracy_stats"}, "model.edw.stg_cis_workstreams_current": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_cis_workstreams') }} \n\n)\n, max_ids as (\n\n    select \n        record_id,\n        max(updated_at) as updated_at\n    from source\n    group by 1\n    \n)\n, current_records as (\n\n    select\n        source.*\n    from source \n    inner join max_ids\n        on source.record_id = max_ids.record_id\n        and source.updated_at = max_ids.updated_at\n)\nselect * from current_records", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_cis_workstreams"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cis", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cis", "stg_cis_workstreams_current"], "unique_id": "model.edw.stg_cis_workstreams_current", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cis/stg_cis_workstreams_current.sql", "original_file_path": "models/psa/cis/stg_cis_workstreams_current.sql", "name": "stg_cis_workstreams_current", "alias": "stg_cis_workstreams_current", "checksum": {"name": "sha256", "checksum": "be8d8116a5178121960998d75edba060dfb39d8644c7caa2ca4e12bf8b03493c"}, "tags": [], "refs": [["base_cis_workstreams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cis/stg_cis_workstreams_current.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cis"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_cis_workstreams \n\n)\n, max_ids as (\n\n    select \n        record_id,\n        max(updated_at) as updated_at\n    from source\n    group by 1\n    \n)\n, current_records as (\n\n    select\n        source.*\n    from source \n    inner join max_ids\n        on source.record_id = max_ids.record_id\n        and source.updated_at = max_ids.updated_at\n)\nselect * from current_records", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_cis_workstreams_current"}, "model.edw.stg_cis_workers_current": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_cis_people') }} where person_type = 'worker'\n\n)\n, max_ids as (\n\n    select \n        record_id,\n        max(updated_at) as updated_at\n    from source\n    group by 1\n    \n)\n, current_records as (\n\n    select\n        source.*\n    from source \n    inner join max_ids\n        on source.record_id = max_ids.record_id\n        and source.updated_at = max_ids.updated_at\n)\n, max_join as (\n\n    select \n        email,\n        max(joined_date) as joined_date\n    from source\n    group by 1\n)\n, dedup_emails as (\n\n    select\n        current_records.*\n    from current_records \n    inner join max_join\n        on current_records.email = max_join.email\n        and current_records.joined_date = max_join.joined_date\n)\nselect * from dedup_emails", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_cis_people"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cis", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cis", "stg_cis_workers_current"], "unique_id": "model.edw.stg_cis_workers_current", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cis/stg_cis_workers_current.sql", "original_file_path": "models/psa/cis/stg_cis_workers_current.sql", "name": "stg_cis_workers_current", "alias": "stg_cis_workers_current", "checksum": {"name": "sha256", "checksum": "96b6e1cc5c6bd8d7e2745b88623cdbad06387f74c9d4b1aa200d9a33dfa0cecd"}, "tags": [], "refs": [["base_cis_people"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cis/stg_cis_workers_current.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cis"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_cis_people where person_type = 'worker'\n\n)\n, max_ids as (\n\n    select \n        record_id,\n        max(updated_at) as updated_at\n    from source\n    group by 1\n    \n)\n, current_records as (\n\n    select\n        source.*\n    from source \n    inner join max_ids\n        on source.record_id = max_ids.record_id\n        and source.updated_at = max_ids.updated_at\n)\n, max_join as (\n\n    select \n        email,\n        max(joined_date) as joined_date\n    from source\n    group by 1\n)\n, dedup_emails as (\n\n    select\n        current_records.*\n    from current_records \n    inner join max_join\n        on current_records.email = max_join.email\n        and current_records.joined_date = max_join.joined_date\n)\nselect * from dedup_emails", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_cis_workers_current"}, "model.edw.base_cis_people": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('cis_snowpipe', 'people') }}\n\n)\n, renamed as (\n\n    select\n        data:id::varchar                       as record_id,\n        data:val:cf_browser::varchar           as cf_browser,\n        data:val:cpu::varchar                  as cpu,\n        data:val:cpu_architecture::varchar     as cpu_architecture,\n        data:val:created_at::timestamp_tz      as created_at,\n        data:val:current_address::varchar      as current_address,\n        data:val:current_city::varchar         as current_city,\n        data:val:current_country::varchar      as current_country,\n        data:val:date_of_birth::date           as birth_date,\n        data:val:document_number::varchar      as document_number,\n        data:val:document_type::varchar        as document_type,\n        data:val:email::varchar                as email,\n        data:val:full_name::varchar            as full_name,\n        data:val:gender::varchar               as gender,\n        data:val:internal_storage::varchar     as internal_storage,\n        data:val:joined_date::date             as joined_date,\n        data:val:last_logged_in::date          as last_logged_in_date,\n        data:val:last_worked_on::date          as last_worked_on_date,\n        data:val:latitude::varchar             as latitude,\n        data:val:longitude::varchar            as longitude,\n        data:val:memory::varchar               as memory,\n        data:val:number_of_processors::integer as number_of_processors,\n        data:val:omaha_client_uid::varchar     as omaha_client_uid,\n        data:val:operating_system::varchar     as operating_system,\n        data:val:other_display::varchar        as other_display,\n        data:val:pan_number::varchar           as pan_number,\n        data:val:permanent_address::varchar    as permanent_address,\n        data:val:permanent_city::varchar       as permanent_city,\n        data:val:permanent_country::varchar    as permanent_country,\n        data:val:personal_email::varchar       as personal_email,\n        data:val:primary_display::varchar      as primary_display,\n        data:val:role_id::varchar              as role_id,\n        data:val:source_system                 as source_system,\n        data:val:status::varchar               as person_status,\n        data:val:type::varchar                 as person_type,\n        data:val:updated_at::timestamp_tz      as updated_at,\n        case \n            when contains(lower(data:val:webcam), 'yes') then True\n            when contains(lower(data:val:webcam), 'true') then True\n            when contains(lower(data:val:webcam), 'false') then False\n            else null\n        end                                     as has_webcam,\n        data:val:workstream_ids                 as workstream_ids\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cis_snowpipe.people"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cis", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cis", "base", "base_cis_people"], "unique_id": "model.edw.base_cis_people", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cis/base/base_cis_people.sql", "original_file_path": "models/psa/cis/base/base_cis_people.sql", "name": "base_cis_people", "alias": "base_cis_people", "checksum": {"name": "sha256", "checksum": "3994b6387938c2afb4b13ba944ad3fc2fb2b468c70317edb25792fc843fdbb76"}, "tags": [], "refs": [], "sources": [["cis_snowpipe", "people"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cis/base/base_cis_people.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cis"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.cis_snowpipe.people\n\n)\n, renamed as (\n\n    select\n        data:id::varchar                       as record_id,\n        data:val:cf_browser::varchar           as cf_browser,\n        data:val:cpu::varchar                  as cpu,\n        data:val:cpu_architecture::varchar     as cpu_architecture,\n        data:val:created_at::timestamp_tz      as created_at,\n        data:val:current_address::varchar      as current_address,\n        data:val:current_city::varchar         as current_city,\n        data:val:current_country::varchar      as current_country,\n        data:val:date_of_birth::date           as birth_date,\n        data:val:document_number::varchar      as document_number,\n        data:val:document_type::varchar        as document_type,\n        data:val:email::varchar                as email,\n        data:val:full_name::varchar            as full_name,\n        data:val:gender::varchar               as gender,\n        data:val:internal_storage::varchar     as internal_storage,\n        data:val:joined_date::date             as joined_date,\n        data:val:last_logged_in::date          as last_logged_in_date,\n        data:val:last_worked_on::date          as last_worked_on_date,\n        data:val:latitude::varchar             as latitude,\n        data:val:longitude::varchar            as longitude,\n        data:val:memory::varchar               as memory,\n        data:val:number_of_processors::integer as number_of_processors,\n        data:val:omaha_client_uid::varchar     as omaha_client_uid,\n        data:val:operating_system::varchar     as operating_system,\n        data:val:other_display::varchar        as other_display,\n        data:val:pan_number::varchar           as pan_number,\n        data:val:permanent_address::varchar    as permanent_address,\n        data:val:permanent_city::varchar       as permanent_city,\n        data:val:permanent_country::varchar    as permanent_country,\n        data:val:personal_email::varchar       as personal_email,\n        data:val:primary_display::varchar      as primary_display,\n        data:val:role_id::varchar              as role_id,\n        data:val:source_system                 as source_system,\n        data:val:status::varchar               as person_status,\n        data:val:type::varchar                 as person_type,\n        data:val:updated_at::timestamp_tz      as updated_at,\n        case \n            when contains(lower(data:val:webcam), 'yes') then True\n            when contains(lower(data:val:webcam), 'true') then True\n            when contains(lower(data:val:webcam), 'false') then False\n            else null\n        end                                     as has_webcam,\n        data:val:workstream_ids                 as workstream_ids\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_cis_people"}, "model.edw.base_cis_workstreams": {"raw_sql": "{{\n    config(\n        materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('cis_snowpipe', 'workstreams') }}\n\n),\nrenamed as (\n\n    select\n        data:id::varchar                                as record_id,\n        data:val:salesforce_account_id::varchar         as client_id,\n        md5(ifnull(data:val:salesforce_account_id::varchar, 'Unknown'))\n                                                        as client_key,\n        data:val:legacy_id::varchar                     as project_key,\n        data:val:name::varchar                          as project_name,\n        data:val:client_success::varchar                as client_success_manager_email,\n        data:val:commitment::varchar                    as commitment,\n        data:val:package_type::varchar                  as package_type,\n        data:val:package_version::varchar               as package_version,\n        data:val:salesforce_contract_id::varchar        as contract_id,\n        data:val:contract_mrr::float                    as contract_mrr,\n        data:val:status::varchar                        as status,\n        data:val:billable_unit::varchar                 as billable_unit,\n        data:val:units::float                           as units,\n        data:val:created_at::timestamp_tz               as created_at,\n        data:val:updated_at::timestamp_tz               as updated_at,\n\n        data:val:access_to_tool::varchar                as access_to_tool,\n        data:val:account_description::varchar           as account_description,\n        data:val:account_name::varchar                  as account_name,\n        data:val:account_primary_focus::varchar         as account_primary_focus,\n        data:val:account_segment::varchar               as account_segment,\n        data:val:accuracy_source::varchar               as accuracy_source,\n        data:val:connectivity::varchar                  as connectivity,\n        data:val:contract_start::varchar                as contract_start,\n\n        data:val:task_description::varchar              as task_description,\n        data:val:task_duration::varchar                 as task_duration,\n        data:val:task_duration_maximum::varchar         as task_duration_maximum,\n        data:val:team_lead::varchar                     as team_lead_email,\n        data:val:tool_name::varchar                     as tool_name,\n        data:val:training_hours::varchar                as training_hours,\n        data:val:type::varchar                          as type\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.cis_snowpipe.workstreams"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "cis", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "cis", "base", "base_cis_workstreams"], "unique_id": "model.edw.base_cis_workstreams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/cis/base/base_cis_workstreams.sql", "original_file_path": "models/psa/cis/base/base_cis_workstreams.sql", "name": "base_cis_workstreams", "alias": "base_cis_workstreams", "checksum": {"name": "sha256", "checksum": "829c9c3dc27a836efa1186724889beaed01f69c62136b00827349d2f8332866a"}, "tags": [], "refs": [], "sources": [["cis_snowpipe", "workstreams"]], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_id": {"name": "client_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_key": {"name": "client_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_key": {"name": "project_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_success": {"name": "client_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commitment": {"name": "commitment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_type": {"name": "package_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_version": {"name": "package_version", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_id": {"name": "contract_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_mrr": {"name": "contract_mrr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billable_unit": {"name": "billable_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "units": {"name": "units", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "access_to_tool": {"name": "access_to_tool", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_description": {"name": "account_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_primary_focus": {"name": "account_primary_focus", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_segment": {"name": "account_segment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accuracy_source": {"name": "accuracy_source", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connectivity": {"name": "connectivity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_start": {"name": "contract_start", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_description": {"name": "task_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_duration": {"name": "task_duration", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_duration_maximum": {"name": "task_duration_maximum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_lead": {"name": "team_lead", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tool_name": {"name": "tool_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "training_hours": {"name": "training_hours", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/cis/schema/base_cis_workstreams.yml", "build_path": "target/compiled/edw/models/psa/cis/base/base_cis_workstreams.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "cis"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.cis_snowpipe.workstreams\n\n),\nrenamed as (\n\n    select\n        data:id::varchar                                as record_id,\n        data:val:salesforce_account_id::varchar         as client_id,\n        md5(ifnull(data:val:salesforce_account_id::varchar, 'Unknown'))\n                                                        as client_key,\n        data:val:legacy_id::varchar                     as project_key,\n        data:val:name::varchar                          as project_name,\n        data:val:client_success::varchar                as client_success_manager_email,\n        data:val:commitment::varchar                    as commitment,\n        data:val:package_type::varchar                  as package_type,\n        data:val:package_version::varchar               as package_version,\n        data:val:salesforce_contract_id::varchar        as contract_id,\n        data:val:contract_mrr::float                    as contract_mrr,\n        data:val:status::varchar                        as status,\n        data:val:billable_unit::varchar                 as billable_unit,\n        data:val:units::float                           as units,\n        data:val:created_at::timestamp_tz               as created_at,\n        data:val:updated_at::timestamp_tz               as updated_at,\n\n        data:val:access_to_tool::varchar                as access_to_tool,\n        data:val:account_description::varchar           as account_description,\n        data:val:account_name::varchar                  as account_name,\n        data:val:account_primary_focus::varchar         as account_primary_focus,\n        data:val:account_segment::varchar               as account_segment,\n        data:val:accuracy_source::varchar               as accuracy_source,\n        data:val:connectivity::varchar                  as connectivity,\n        data:val:contract_start::varchar                as contract_start,\n\n        data:val:task_description::varchar              as task_description,\n        data:val:task_duration::varchar                 as task_duration,\n        data:val:task_duration_maximum::varchar         as task_duration_maximum,\n        data:val:team_lead::varchar                     as team_lead_email,\n        data:val:tool_name::varchar                     as tool_name,\n        data:val:training_hours::varchar                as training_hours,\n        data:val:type::varchar                          as type\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_cis_workstreams"}, "model.edw.stg_tlms_user_activity": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_tlms_course_users') }}\n\n)\n, users as (\n\n    select * from {{ ref('base_tlms_users') }}\n\n)\n, renamed as (\n\n    select \n        source.course_user_key,\n        source.course_id,\n        source.user_id,\n        source.enrolled_at,\n        to_date(source.enrolled_at) as enrolled_date,\n        source.completed_at,\n        to_date(source.completed_at) as completed_date,\n        source.expired_at,\n        to_date(source.expired_at) as expired_date,\n        source.completed_percent,\n        source.course_time,\n        users.first_name || ' ' || users.last_name as user_name,\n        iff(enrolled_date is not null, 1, 0) as enrolled_count,\n        iff(completed_date is not null, 1, 0) as completed_count\n    from  source\n    inner join users\n        on source.user_id = users.user_id\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_tlms_course_users", "model.edw.base_tlms_users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "stg_tlms_user_activity"], "unique_id": "model.edw.stg_tlms_user_activity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/stg_tlms_user_activity.sql", "original_file_path": "models/psa/talentlms/stg_tlms_user_activity.sql", "name": "stg_tlms_user_activity", "alias": "stg_tlms_user_activity", "checksum": {"name": "sha256", "checksum": "cb5b91545473865b03adaf121d132a38ee74be01067350571355e6db70b48e5a"}, "tags": ["tlms"], "refs": [["base_tlms_course_users"], ["base_tlms_users"]], "sources": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_user_key": {"name": "course_user_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null", "unique"]}, "course_id": {"name": "course_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/stg_tlms_user_activity.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_tlms_course_users\n\n)\n, users as (\n\n    select * from psa_dev.scratch_brana.base_tlms_users\n\n)\n, renamed as (\n\n    select \n        source.course_user_key,\n        source.course_id,\n        source.user_id,\n        source.enrolled_at,\n        to_date(source.enrolled_at) as enrolled_date,\n        source.completed_at,\n        to_date(source.completed_at) as completed_date,\n        source.expired_at,\n        to_date(source.expired_at) as expired_date,\n        source.completed_percent,\n        source.course_time,\n        users.first_name || ' ' || users.last_name as user_name,\n        iff(enrolled_date is not null, 1, 0) as enrolled_count,\n        iff(completed_date is not null, 1, 0) as completed_count\n    from  source\n    inner join users\n        on source.user_id = users.user_id\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_tlms_user_activity"}, "model.edw.base_tlms_categories": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'categories') }}\n\n),\n\nrenamed as (\n\n    select\n        courses,\n        id as category_id,\n        name as category_name,\n        parent_category_id,\n        price\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.talentlms.categories"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_categories"], "unique_id": "model.edw.base_tlms_categories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_categories.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_categories.sql", "name": "base_tlms_categories", "alias": "base_tlms_categories", "checksum": {"name": "sha256", "checksum": "1f998de7b627793eb15167f8f2e78fabe04d5f913b4dedf25e4473b7c7b91e88"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "categories"]], "description": "", "columns": {"category_id": {"name": "category_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_categories.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.categories\n\n),\n\nrenamed as (\n\n    select\n        courses,\n        id as category_id,\n        name as category_name,\n        parent_category_id,\n        price\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_categories"}, "model.edw.base_hist_tlms_course_users": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('courses_snapshot') }}\n\n)\n, renamed as (\n\n    select \n        {{ dbt_utils.surrogate_key(['source.id', 'users.value:id']) }} as course_user_key,\n        source.id as course_id,\n        users.value:id::integer as user_id,\n        iff(\n            users.value:completed_on='', \n            NULL, \n            to_timestamp(users.value:completed_on_timestamp)) as completed_at,\n        users.value:completion_percentage::number as completed_percent,\n        iff(\n            users.value:enrolled_on='', \n            NULL, \n            to_timestamp(users.value:enrolled_on_timestamp)) as enrolled_at,\n        iff(\n            users.value:expired_on='', \n            NULL, \n            to_timestamp(users.value:expired_on_timestamp)) as expired_at,\n        users.value:total_time_seconds::integer as course_time,\n        users.value:role as user_role,\n        dbt_valid_from,\n        dbt_valid_to\n        \n\n    from source,\n        lateral flatten(input=>source.users) users\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["snapshot.edw.courses_snapshot"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_hist_tlms_course_users"], "unique_id": "model.edw.base_hist_tlms_course_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_hist_tlms_course_users.sql", "original_file_path": "models/psa/talentlms/base/base_hist_tlms_course_users.sql", "name": "base_hist_tlms_course_users", "alias": "base_hist_tlms_course_users", "checksum": {"name": "sha256", "checksum": "695310e9728cfb9365cae3e71ffe43263be30b31ad4ffaa57308a3f5f16ddd0c"}, "tags": ["tlms"], "refs": [["courses_snapshot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/base/base_hist_tlms_course_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa.talentlms.courses_snapshot\n\n)\n, renamed as (\n\n    select \n        md5(cast(\n    \n    coalesce(cast(source.id as \n    varchar\n), '') || '-' || coalesce(cast(users.value:id as \n    varchar\n), '')\n\n as \n    varchar\n)) as course_user_key,\n        source.id as course_id,\n        users.value:id::integer as user_id,\n        iff(\n            users.value:completed_on='', \n            NULL, \n            to_timestamp(users.value:completed_on_timestamp)) as completed_at,\n        users.value:completion_percentage::number as completed_percent,\n        iff(\n            users.value:enrolled_on='', \n            NULL, \n            to_timestamp(users.value:enrolled_on_timestamp)) as enrolled_at,\n        iff(\n            users.value:expired_on='', \n            NULL, \n            to_timestamp(users.value:expired_on_timestamp)) as expired_at,\n        users.value:total_time_seconds::integer as course_time,\n        users.value:role as user_role,\n        dbt_valid_from,\n        dbt_valid_to\n        \n\n    from source,\n        lateral flatten(input=>source.users) users\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_hist_tlms_course_users"}, "model.edw.base_tlms_group_courses": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'groups') }}\n\n)\n, renamed as (\n\n    select \n        source.id as group_id,\n        courses.value:id::integer as course_id,\n        {{ dbt_utils.surrogate_key(['group_id', 'course_id']) }} as group_course_key\n    from source,\n        lateral flatten(input=>source.courses) courses\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.edw.talentlms.groups"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_group_courses"], "unique_id": "model.edw.base_tlms_group_courses", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_group_courses.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_group_courses.sql", "name": "base_tlms_group_courses", "alias": "base_tlms_group_courses", "checksum": {"name": "sha256", "checksum": "6df554595e84acf8399d5a5ce87cc8feda3dc2d0e27a278d5d59433164c5d0d2"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "groups"]], "description": "", "columns": {"course_id": {"name": "course_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_course_key": {"name": "group_course_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_group_courses.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.groups\n\n)\n, renamed as (\n\n    select \n        source.id as group_id,\n        courses.value:id::integer as course_id,\n        md5(cast(\n    \n    coalesce(cast(group_id as \n    varchar\n), '') || '-' || coalesce(cast(course_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as group_course_key\n    from source,\n        lateral flatten(input=>source.courses) courses\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_group_courses"}, "model.edw.base_tlms_group_users": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'groups') }}\n\n)\n, renamed as (\n\n    select \n        source.id as group_id,\n        users.value:id::integer as user_id,\n        {{ dbt_utils.surrogate_key(['group_id', 'user_id']) }} as group_user_key\n    from source,\n        lateral flatten(input=>source.users) users\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.edw.talentlms.groups"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_group_users"], "unique_id": "model.edw.base_tlms_group_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_group_users.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_group_users.sql", "name": "base_tlms_group_users", "alias": "base_tlms_group_users", "checksum": {"name": "sha256", "checksum": "0aee3fd1f47375fcf887cc2e2efe77d1ca891b47f2b477dd531cfbdc1592e91f"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "groups"]], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_group_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.groups\n\n)\n, renamed as (\n\n    select \n        source.id as group_id,\n        users.value:id::integer as user_id,\n        md5(cast(\n    \n    coalesce(cast(group_id as \n    varchar\n), '') || '-' || coalesce(cast(user_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as group_user_key\n    from source,\n        lateral flatten(input=>source.users) users\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_group_users"}, "model.edw.base_tlms_groups": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'groups') }}\n\n),\n\nrenamed as (\n\n    select\n        belongs_to_branch,\n        courses,\n        description        as group_description,\n        id                 as group_id,\n        key                as group_key,\n        max_redemptions,\n        name               as group_name,\n        owner_id,\n        price,\n        redemptions_sofar,\n        users\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.talentlms.groups"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_groups"], "unique_id": "model.edw.base_tlms_groups", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_groups.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_groups.sql", "name": "base_tlms_groups", "alias": "base_tlms_groups", "checksum": {"name": "sha256", "checksum": "46a8d13204fd6998025559f1b585007ec8c371e1678cc80923f2c78332ef416c"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "groups"]], "description": "", "columns": {"group_id": {"name": "group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_groups.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.groups\n\n),\n\nrenamed as (\n\n    select\n        belongs_to_branch,\n        courses,\n        description        as group_description,\n        id                 as group_id,\n        key                as group_key,\n        max_redemptions,\n        name               as group_name,\n        owner_id,\n        price,\n        redemptions_sofar,\n        users\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_groups"}, "model.edw.base_tlms_branches": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'branches') }}\n\n),\n\nrenamed as (\n\n    select\n        avatar,\n        badge_set_id,\n        courses,\n        currency,\n        description,\n        iff(disallow_global_login=1,true,false) as is_global_login_allowed,\n        ecommerce_credits,\n        ecommerce_subscription,\n        ecommerce_subscription_interval,\n        ecommerce_subscription_price,\n        ecommerce_subscription_trial_period,\n        external_announcement,\n        group_id,\n        id                                      as branch_id,\n        internal_announcement,\n        language,\n        name                                    as branch_name,\n        payment_processor,\n        paypal_email,\n        registration_email_restriction,\n        signup_method,\n        theme,\n        timezone,\n        user_type,\n        user_type_id,\n        users,\n        users_limit\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.talentlms.branches"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_branches"], "unique_id": "model.edw.base_tlms_branches", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_branches.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_branches.sql", "name": "base_tlms_branches", "alias": "base_tlms_branches", "checksum": {"name": "sha256", "checksum": "8d374380eb42a0ad4a4dc4ea255fb7b56fba91ec59a0d67e76f1d815f5bcd192"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "branches"]], "description": "", "columns": {"branch_id": {"name": "branch_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_branches.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.branches\n\n),\n\nrenamed as (\n\n    select\n        avatar,\n        badge_set_id,\n        courses,\n        currency,\n        description,\n        iff(disallow_global_login=1,true,false) as is_global_login_allowed,\n        ecommerce_credits,\n        ecommerce_subscription,\n        ecommerce_subscription_interval,\n        ecommerce_subscription_price,\n        ecommerce_subscription_trial_period,\n        external_announcement,\n        group_id,\n        id                                      as branch_id,\n        internal_announcement,\n        language,\n        name                                    as branch_name,\n        payment_processor,\n        paypal_email,\n        registration_email_restriction,\n        signup_method,\n        theme,\n        timezone,\n        user_type,\n        user_type_id,\n        users,\n        users_limit\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_branches"}, "model.edw.base_tlms_users": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'users') }}\n\n),\n\nrenamed as (\n\n    select\n        avatar,\n        badges,\n        bio,\n        branches,\n        certifications,\n        courses,\n        created_on as created_at,\n        deactivation_date as deactivation_at,\n        email,\n        first_name,\n        groups,\n        id as user_id,\n        language,\n        last_name,\n        last_updated as last_updated_at,\n        level as user_level,\n        login_key,\n        points,\n        restrict_email,\n        status as user_status,\n        timezone,\n        user_type,\n        custom_field_1 as breezy_candidate_id,\n        custom_field_2 as breezy_position_id,\n        custom_field_3 as personal_email\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.talentlms.users"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_users"], "unique_id": "model.edw.base_tlms_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_users.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_users.sql", "name": "base_tlms_users", "alias": "base_tlms_users", "checksum": {"name": "sha256", "checksum": "785a989382e97249cbe97e5567dd50e3079470bf4a2279aa5a52ffd19383dbed"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "users"]], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.users\n\n),\n\nrenamed as (\n\n    select\n        avatar,\n        badges,\n        bio,\n        branches,\n        certifications,\n        courses,\n        created_on as created_at,\n        deactivation_date as deactivation_at,\n        email,\n        first_name,\n        groups,\n        id as user_id,\n        language,\n        last_name,\n        last_updated as last_updated_at,\n        level as user_level,\n        login_key,\n        points,\n        restrict_email,\n        status as user_status,\n        timezone,\n        user_type,\n        custom_field_1 as breezy_candidate_id,\n        custom_field_2 as breezy_position_id,\n        custom_field_3 as personal_email\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_users"}, "model.edw.base_tlms_courses": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'courses') }}\n\n),\n\nrenamed as (\n\n    select\n        avatar,\n        big_avatar,\n        category_id,\n        certification,\n        certification_duration,\n        code,\n        creation_date                           as created_at,\n        creator_id,\n        description                             as course_description,\n        iff(hide_from_catalog = 1, true, false) as is_hidden_from_catalog,\n        id                                      as course_id,\n        last_update_on                          as last_update_at,\n        level                                   as course_level,\n        name                                    as course_name,\n        price,\n        iff(shared = 1, true, false)            as is_shared,\n        shared_url,\n        status                                  as course_status,\n        time_limit,\n        prerequisite_rule_sets,\n        prerequisites,\n        rules,\n        units,\n        users\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.talentlms.courses"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_courses"], "unique_id": "model.edw.base_tlms_courses", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_courses.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_courses.sql", "name": "base_tlms_courses", "alias": "base_tlms_courses", "checksum": {"name": "sha256", "checksum": "260e9496c46ca0be2e966e04af225907f5dabde287b56462ed9ecb93fc7d5dfd"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "courses"]], "description": "", "columns": {"course_id": {"name": "course_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_courses.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.courses\n\n),\n\nrenamed as (\n\n    select\n        avatar,\n        big_avatar,\n        category_id,\n        certification,\n        certification_duration,\n        code,\n        creation_date                           as created_at,\n        creator_id,\n        description                             as course_description,\n        iff(hide_from_catalog = 1, true, false) as is_hidden_from_catalog,\n        id                                      as course_id,\n        last_update_on                          as last_update_at,\n        level                                   as course_level,\n        name                                    as course_name,\n        price,\n        iff(shared = 1, true, false)            as is_shared,\n        shared_url,\n        status                                  as course_status,\n        time_limit,\n        prerequisite_rule_sets,\n        prerequisites,\n        rules,\n        units,\n        users\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_courses"}, "model.edw.base_tlms_course_users": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('talentlms', 'courses') }}\n\n)\n, renamed as (\n\n    select \n        source.id as course_id,\n        users.value:id::integer as user_id,\n        iff(\n            users.value:completed_on='', \n            NULL, \n            to_timestamp(users.value:completed_on_timestamp)) as completed_at,\n        users.value:completion_percentage::number as completed_percent,\n        iff(\n            users.value:enrolled_on='', \n            NULL, \n            to_timestamp(users.value:enrolled_on_timestamp)) as enrolled_at,\n        iff(\n            users.value:expired_on='', \n            NULL, \n            to_timestamp(users.value:expired_on_timestamp)) as expired_at,\n        users.value:total_time_seconds::integer as course_time,\n        users.value:role as user_role,\n        {{ dbt_utils.surrogate_key(['course_id', 'user_id']) }} as course_user_key\n    from source,\n        lateral flatten(input=>source.users) users\n\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.edw.talentlms.courses"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "talentlms", "database": "psa", "tags": ["tlms"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "talentlms", "base", "base_tlms_course_users"], "unique_id": "model.edw.base_tlms_course_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/talentlms/base/base_tlms_course_users.sql", "original_file_path": "models/psa/talentlms/base/base_tlms_course_users.sql", "name": "base_tlms_course_users", "alias": "base_tlms_course_users", "checksum": {"name": "sha256", "checksum": "6a1f7ba40f26b05062a523d55bb94d861c184787cc6764a0f90bf2a8e9b9cf93"}, "tags": ["tlms"], "refs": [], "sources": [["talentlms", "courses"]], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "course_user_key": {"name": "course_user_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null", "unique"]}, "course_id": {"name": "course_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/talentlms/schema.yml", "build_path": "target/compiled/edw/models/psa/talentlms/base/base_tlms_course_users.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "talentlms", "tags": "tlms"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.talentlms_singer.courses\n\n)\n, renamed as (\n\n    select \n        source.id as course_id,\n        users.value:id::integer as user_id,\n        iff(\n            users.value:completed_on='', \n            NULL, \n            to_timestamp(users.value:completed_on_timestamp)) as completed_at,\n        users.value:completion_percentage::number as completed_percent,\n        iff(\n            users.value:enrolled_on='', \n            NULL, \n            to_timestamp(users.value:enrolled_on_timestamp)) as enrolled_at,\n        iff(\n            users.value:expired_on='', \n            NULL, \n            to_timestamp(users.value:expired_on_timestamp)) as expired_at,\n        users.value:total_time_seconds::integer as course_time,\n        users.value:role as user_role,\n        md5(cast(\n    \n    coalesce(cast(course_id as \n    varchar\n), '') || '-' || coalesce(cast(user_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as course_user_key\n    from source,\n        lateral flatten(input=>source.users) users\n\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_tlms_course_users"}, "model.edw.stg_pulseviz_task_event_stats": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_pulseviz_task_event_stats') }}\n    \n),\ntransformation as (\n\n    select\n        task_event_stats_record_id,\n        task_event_id,\n        event_type,\n        worker_email,\n        project_id,\n        task_id,\n        task_type,\n        task_started_at,\n        task_completed_at,\n        date(task_started_at)                                as task_started_date,\n        date(task_completed_at)                              as task_completed_date,\n        datediff(second, task_started_at, task_completed_at) as task_duration,\n        annotation_id,\n        annotator_id,\n        asset_lablels,\n        asset_name,\n        annotation_count,\n        dataset_id,\n        first_sample_source,\n        item_id,\n        latest_sample_source,\n        bug_count,\n        error_count,\n        project_name,\n        vendor,\n        review_score,\n        error_categories,\n        error_fields,\n        review_explanation,\n        reviewer_confidence_score,\n        reviewer_id,\n        url,\n        created_at,\n        updated_at,\n        parent_task_id\n    from source\n\n)\nselect * from transformation", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "pulseviz", "database": "psa", "tags": ["pulseviz"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "pulseviz", "stg_pulseviz_task_event_stats"], "unique_id": "model.edw.stg_pulseviz_task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/pulseviz/stg_pulseviz_task_event_stats.sql", "original_file_path": "models/psa/pulseviz/stg_pulseviz_task_event_stats.sql", "name": "stg_pulseviz_task_event_stats", "alias": "stg_pulseviz_task_event_stats", "checksum": {"name": "sha256", "checksum": "47bd2c0bacadadb38f039e091eb4004db58d9c907d605f016ccf70ee84e707e6"}, "tags": ["pulseviz"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "holds tasks submitted to the Pulseviz API", "columns": {"task_event_stats_record_id": {"name": "task_event_stats_record_id", "description": "unique record id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_event_id": {"name": "task_event_id", "description": "unique id of the task event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Identifies whether the record is a (1) work task or a (2) review task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_email": {"name": "worker_email", "description": "email of the worker who performed the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": " uid from projects database (raw.projects_ppw.projects.uid)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "identifies the task in work system.  For review tasks, this is the id of the task being reviewed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "In general odentifies the category of the task.  Exact usage varies by workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "timestamp of task start", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed_at": {"name": "task_completed_at", "description": "timestamp of task completion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date": {"name": "task_started_date", "description": "date of task start", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed_date": {"name": "task_completed_date", "description": "date of task completion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_duration": {"name": "task_duration", "description": "duration of task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation_id": {"name": "annotation_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotator_id": {"name": "annotator_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_lablels": {"name": "asset_lablels", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_name": {"name": "asset_name", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation_count": {"name": "annotation_count", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_id": {"name": "dataset_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_sample_source": {"name": "first_sample_source", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_sample_source": {"name": "latest_sample_source", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bug_count": {"name": "bug_count", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_count": {"name": "error_count", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_score": {"name": "review_score", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_categories": {"name": "error_categories", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_fields": {"name": "error_fields", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_explanation": {"name": "review_explanation", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reviewer_confidence_score": {"name": "reviewer_confidence_score", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reviewer_id": {"name": "reviewer_id", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "record created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "last updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/pulseviz/schema.yml", "build_path": "target/compiled/edw/models/psa/pulseviz/stg_pulseviz_task_event_stats.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "pulseviz", "tags": "pulseviz"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_pulseviz_task_event_stats\n    \n),\ntransformation as (\n\n    select\n        task_event_stats_record_id,\n        task_event_id,\n        event_type,\n        worker_email,\n        project_id,\n        task_id,\n        task_type,\n        task_started_at,\n        task_completed_at,\n        date(task_started_at)                                as task_started_date,\n        date(task_completed_at)                              as task_completed_date,\n        datediff(second, task_started_at, task_completed_at) as task_duration,\n        annotation_id,\n        annotator_id,\n        asset_lablels,\n        asset_name,\n        annotation_count,\n        dataset_id,\n        first_sample_source,\n        item_id,\n        latest_sample_source,\n        bug_count,\n        error_count,\n        project_name,\n        vendor,\n        review_score,\n        error_categories,\n        error_fields,\n        review_explanation,\n        reviewer_confidence_score,\n        reviewer_id,\n        url,\n        created_at,\n        updated_at,\n        parent_task_id\n    from source\n\n)\nselect * from transformation", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_pulseviz_task_event_stats"}, "model.edw.stg_pulseviz_subtasks": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith source as (\n\n    select * from {{ ref('base_pulseviz_task_event_stats') }}\n\n)\n, dataloop_subtasks as (\n\n    select \n        task_event_stats_record_id,\n        task_event_id,\n        event_type,\n        worker_email,\n        project_id,\n        item_id,\n        task_id                                              as subtask_id,\n        task_data                                            as subtask_data,\n        task_type                                            as subtask_type,\n        task_started_at                                      as subtask_started_at,\n        task_completed_at                                    as subtask_completed_at,\n        to_date(subtask_started_at)                          as subtask_started_date,\n        to_date(subtask_completed_at)                        as subtask_completed_date,\n        datediff(second, task_started_at, task_completed_at) as subtask_duration,\n        created_at,\n        updated_at,\n        parent_task_id\n    from source \n    where project_id in (\n                -- manually provided\n                '8vZNQwGe4bwvO4MJZrD4',   -- Adasky\n                '1XM37LypWRP87qE9dnXy',   -- Dishcraft\n                'NukEBkpujY2dh5J6JC15',   -- Enertive\n                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI\n                'drLs8iasIz7dPEOkxeHk',   -- Green Atlas\n                'Brm2qeGFYp0HJV2mEkFC',   -- Headroom\n                'K072jEKdalPN9sb5TV2P',   -- Hummingbird\n                'YRFXNUH6ly4tNI1JD8Kc',   -- Iterative Scopes\n                'MglscoM0BtzQfXA47MOC',   -- Lucid Motors\n                'f3Y10DvsMVh96bzfrZjl',   -- Thread Robotics\n                'ekApIutASJhmoVdi5w0e',   -- Tricentis\n                'kHZEHp4PMwRAUrQS6IKI',   -- Magpie\n\n                -- dataloop matches in CIS\n                'CMEsiwMWJpQqz3OxzifD',   -- Dataloop\n                'mE4Vv4xtAKKgIE2QWQCa',   -- Matterport\n                'RVrFZ2BPZ9AHvay66Qpv',   -- Activ Surgical\n                'RVrFZ2BPZ9AHvay66Qpv',   -- Activ Surgical\n                'Ok2IdzbN7R3WgAThOZPh',   -- Descartes Labs\n                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion - Ranking\n                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI Internal\n                '9HVIKGBXbiwTh8b789rL',   -- IFiveO_internal\n                'VpFyJK686DZGwOyl7e4E',   -- Inokyo\n                '17P9uCak6gUvYGd7aHwL',   -- Nyris\n                'y3M7VPDH6JDwKFRZRoZG',   -- Standard Cognition\n                'tWDQxwv8sgTGRp5ejA4K',   -- StandardCyborg\n                'XZwpGr1IG2r7eXu8kv1S'    -- VergeSense - Image Annotation\n            )\n        and event_type = 1\n        and (\n            contains(task_type, '.')\n            and contains(task_type, 'annotation') = 0\n            and contains(task_type, 'review') = 0\n            ) \n)\nselect * from dataloop_subtasks", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "pulseviz", "database": "psa", "tags": ["pulseviz"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "pulseviz", "stg_pulseviz_subtasks"], "unique_id": "model.edw.stg_pulseviz_subtasks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/pulseviz/stg_pulseviz_subtasks.sql", "original_file_path": "models/psa/pulseviz/stg_pulseviz_subtasks.sql", "name": "stg_pulseviz_subtasks", "alias": "stg_pulseviz_subtasks", "checksum": {"name": "sha256", "checksum": "c81368149efe852a9d5dcd701d7e30899f641bac78f8c464a8d9e636651a78ab"}, "tags": ["pulseviz"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "identifies tasks that are known to be subtasks", "columns": {"task_event_stats_record_id": {"name": "task_event_stats_record_id", "description": "unique record id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_event_id": {"name": "task_event_id", "description": "unique id of the task event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Identifies whether the record is a (1) work task or a (2) review task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_email": {"name": "worker_email", "description": "email of the worker who performed the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": " uid from projects database (raw.projects_ppw.projects.uid)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "identifies the task in work system.  For review tasks, this is the id of the task being reviewed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "JSON field holding subtask metadata", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "In general odentifies the category of the task.  Exact usage varies by workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "timestamp of task start", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed_at": {"name": "task_completed_at", "description": "timestamp of task completion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_date": {"name": "task_started_date", "description": "date of task start", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed_date": {"name": "task_completed_date", "description": "date of task completion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_duration": {"name": "task_duration", "description": "duration of task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "record created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "last updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/pulseviz/schema.yml", "build_path": "target/compiled/edw/models/psa/pulseviz/stg_pulseviz_subtasks.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "pulseviz", "tags": "pulseviz"}, "compiled_sql": "\n\nwith source as (\n\n    select * from psa_dev.scratch_brana.base_pulseviz_task_event_stats\n\n)\n, dataloop_subtasks as (\n\n    select \n        task_event_stats_record_id,\n        task_event_id,\n        event_type,\n        worker_email,\n        project_id,\n        item_id,\n        task_id                                              as subtask_id,\n        task_data                                            as subtask_data,\n        task_type                                            as subtask_type,\n        task_started_at                                      as subtask_started_at,\n        task_completed_at                                    as subtask_completed_at,\n        to_date(subtask_started_at)                          as subtask_started_date,\n        to_date(subtask_completed_at)                        as subtask_completed_date,\n        datediff(second, task_started_at, task_completed_at) as subtask_duration,\n        created_at,\n        updated_at,\n        parent_task_id\n    from source \n    where project_id in (\n                -- manually provided\n                '8vZNQwGe4bwvO4MJZrD4',   -- Adasky\n                '1XM37LypWRP87qE9dnXy',   -- Dishcraft\n                'NukEBkpujY2dh5J6JC15',   -- Enertive\n                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI\n                'drLs8iasIz7dPEOkxeHk',   -- Green Atlas\n                'Brm2qeGFYp0HJV2mEkFC',   -- Headroom\n                'K072jEKdalPN9sb5TV2P',   -- Hummingbird\n                'YRFXNUH6ly4tNI1JD8Kc',   -- Iterative Scopes\n                'MglscoM0BtzQfXA47MOC',   -- Lucid Motors\n                'f3Y10DvsMVh96bzfrZjl',   -- Thread Robotics\n                'ekApIutASJhmoVdi5w0e',   -- Tricentis\n                'kHZEHp4PMwRAUrQS6IKI',   -- Magpie\n\n                -- dataloop matches in CIS\n                'CMEsiwMWJpQqz3OxzifD',   -- Dataloop\n                'mE4Vv4xtAKKgIE2QWQCa',   -- Matterport\n                'RVrFZ2BPZ9AHvay66Qpv',   -- Activ Surgical\n                'RVrFZ2BPZ9AHvay66Qpv',   -- Activ Surgical\n                'Ok2IdzbN7R3WgAThOZPh',   -- Descartes Labs\n                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion\n                '0qIjlsJzneg3pjKBEiVh',   -- Fyusion - Ranking\n                'Myb1OS41jvsV3axeB0Zk',   -- Gather AI Internal\n                '9HVIKGBXbiwTh8b789rL',   -- IFiveO_internal\n                'VpFyJK686DZGwOyl7e4E',   -- Inokyo\n                '17P9uCak6gUvYGd7aHwL',   -- Nyris\n                'y3M7VPDH6JDwKFRZRoZG',   -- Standard Cognition\n                'tWDQxwv8sgTGRp5ejA4K',   -- StandardCyborg\n                'XZwpGr1IG2r7eXu8kv1S'    -- VergeSense - Image Annotation\n            )\n        and event_type = 1\n        and (\n            contains(task_type, '.')\n            and contains(task_type, 'annotation') = 0\n            and contains(task_type, 'review') = 0\n            ) \n)\nselect * from dataloop_subtasks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_pulseviz_subtasks"}, "model.edw.base_pulseviz_task_event_stats": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n    select * from {{ source('pulseviz','task_event_stats') }}\n),\nrenamed as (\n    select\n        id as task_event_stats_record_id,\n        task_event_id,\n        event_type,\n        worker_id                           as worker_email,\n        project_id,\n        task_id,\n        task_type,\n        task_started_at,\n        task_completed_at,\n        data::variant                       as task_data,\n        data:annotation_id::string          as annotation_id,\n        data:annotator_id::string           as annotator_id,\n        data:asset_labels::variant          as asset_lablels,\n        data:asset_name::string             as asset_name,\n        data:number_of_annotations::integer as annotation_count,\n        data:dataset_id::string             as dataset_id,\n        data:first_sample_source::string    as first_sample_source,\n        data:item_id::string                as item_id,\n        data:latest_sample_source::string   as latest_sample_source,\n        data:number_of_bugs::integer        as bug_count,\n        data:number_of_errors::integer      as error_count,\n        data:project_name::string           as project_name,\n        data:vendor::string                 as vendor,\n        review::variant                     as task_review_data,\n        review:review_score::number(38,10)  as review_score,\n        iff(\n            review:error_categories::varchar = 'null',\n            null,\n            review:error_categories)                            as error_categories,\n        iff(\n            review:error_fields::varchar = 'null',\n            null,\n            review:error_fields)                                as error_fields,\n        iff(\n            review:review_explanation::varchar = 'null',\n            null,\n            review:review_explanation)                          as review_explanation,\n        iff(\n            review:reviewer_confidence_score::varchar = 'null',\n            null,\n            review:reviewer_confidence_score)                   as reviewer_confidence_score,\n        iff(\n            review:reviewer_id::varchar = 'null',\n            null,\n            review:reviewer_id)                                 as reviewer_id,\n        url,\n        created_at,\n        updated_at,\n        parent_task_id\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.pulseviz.task_event_stats"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "pulseviz", "database": "psa", "tags": ["pulseviz"], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "pulseviz", "base", "base_pulseviz_task_event_stats"], "unique_id": "model.edw.base_pulseviz_task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/pulseviz/base/base_pulseviz_task_event_stats.sql", "original_file_path": "models/psa/pulseviz/base/base_pulseviz_task_event_stats.sql", "name": "base_pulseviz_task_event_stats", "alias": "base_pulseviz_task_event_stats", "checksum": {"name": "sha256", "checksum": "f8d7519146156ce07ec151674e58cf027121dd5f1eb6b6a5eeeb0c37c5f2a7ea"}, "tags": ["pulseviz"], "refs": [], "sources": [["pulseviz", "task_event_stats"]], "description": "holds tasks submitted to the Pulseviz API", "columns": {"task_event_stats_record_id": {"name": "task_event_stats_record_id", "description": "unique record id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_event_id": {"name": "task_event_id", "description": "unique id of the task event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Identifies whether the record is a (1) work task or a (2) review task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_email": {"name": "worker_email", "description": "email of the worker who performed the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": " uid from projects database (raw.projects_ppw.projects.uid)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "identifies the task in work system.  For review tasks, this is the id of the task being reviewed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "In general odentifies the category of the task.  Exact usage varies by workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_started_at": {"name": "task_started_at", "description": "timestamp of task start", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed_at": {"name": "task_completed_at", "description": "timestamp of task completion", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "JSON field holding review metadata", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation_id": {"name": "annotation_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotator_id": {"name": "annotator_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_lablels": {"name": "asset_lablels", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_name": {"name": "asset_name", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation_count": {"name": "annotation_count", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dataset_id": {"name": "dataset_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_sample_source": {"name": "first_sample_source", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_sample_source": {"name": "latest_sample_source", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bug_count": {"name": "bug_count", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_count": {"name": "error_count", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Surfaced from source `data` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_score": {"name": "review_score", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_categories": {"name": "error_categories", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_fields": {"name": "error_fields", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "review_explanation": {"name": "review_explanation", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reviewer_confidence_score": {"name": "reviewer_confidence_score", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reviewer_id": {"name": "reviewer_id", "description": "Surfaced from source `review` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "record created at timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "last updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/pulseviz/schema.yml", "build_path": "target/compiled/edw/models/psa/pulseviz/base/base_pulseviz_task_event_stats.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "pulseviz", "tags": "pulseviz"}, "compiled_sql": "\n\nwith source as (\n    select * from raw.pulseviz_ppw.task_event_stats\n),\nrenamed as (\n    select\n        id as task_event_stats_record_id,\n        task_event_id,\n        event_type,\n        worker_id                           as worker_email,\n        project_id,\n        task_id,\n        task_type,\n        task_started_at,\n        task_completed_at,\n        data::variant                       as task_data,\n        data:annotation_id::string          as annotation_id,\n        data:annotator_id::string           as annotator_id,\n        data:asset_labels::variant          as asset_lablels,\n        data:asset_name::string             as asset_name,\n        data:number_of_annotations::integer as annotation_count,\n        data:dataset_id::string             as dataset_id,\n        data:first_sample_source::string    as first_sample_source,\n        data:item_id::string                as item_id,\n        data:latest_sample_source::string   as latest_sample_source,\n        data:number_of_bugs::integer        as bug_count,\n        data:number_of_errors::integer      as error_count,\n        data:project_name::string           as project_name,\n        data:vendor::string                 as vendor,\n        review::variant                     as task_review_data,\n        review:review_score::number(38,10)  as review_score,\n        iff(\n            review:error_categories::varchar = 'null',\n            null,\n            review:error_categories)                            as error_categories,\n        iff(\n            review:error_fields::varchar = 'null',\n            null,\n            review:error_fields)                                as error_fields,\n        iff(\n            review:review_explanation::varchar = 'null',\n            null,\n            review:review_explanation)                          as review_explanation,\n        iff(\n            review:reviewer_confidence_score::varchar = 'null',\n            null,\n            review:reviewer_confidence_score)                   as reviewer_confidence_score,\n        iff(\n            review:reviewer_id::varchar = 'null',\n            null,\n            review:reviewer_id)                                 as reviewer_id,\n        url,\n        created_at,\n        updated_at,\n        parent_task_id\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_pulseviz_task_event_stats"}, "model.edw.dates": {"raw_sql": "{{\n    config(\n        pre_hook=\"alter session set week_of_year_policy=1\"\n    )\n}}\n\nwith date_spine as (\n  {{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"to_date('01/01/2000', 'mm/dd/yyyy')\",\n    end_date=\"to_date(concat(year(current_date) + 40,'-12-31'))\"\n    )\n  }}\n)\nselect\n    date_day::date                                          as date_key,\n    dayofyear(date_key)::int                                as day_of_year,\n    decode(\n        right(\n            extract(dayofmonth from date_key),\n        1),\n        1, 'st',\n        2, 'nd',\n        3, 'rd',\n        'th'\n    )::varchar(2)                                           as day_suffix, \n    year(date_key) || right('0' || week(date_key), 2)       as week_key,\n    dayofweek(date_key)::int                                as day_of_week,\n    dayofweekiso(date_key)::int                             as day_of_week_iso,\n    dayname(date_key)::varchar                              as week_day_short_desc,\n    decode(\n        extract(dayofweek from date_key),\n        7 , 'Sunday',\n        1 , 'Monday',\n        2 , 'Tuesday',\n        3 , 'Wednesday',\n        4 , 'Thursday',\n        5 , 'Friday',\n        6 , 'Saturday'\n    )::varchar                                              as week_day_desc,\n    trunc(date_key, 'Week')::date                           as first_day_of_week,\n    last_day(date_key, 'Week')::date                        as last_day_of_week,\n    monthname(first_day_of_week) || ' ' || \n        day(first_day_of_week) || ' - ' || \n        monthname(last_day_of_week) || ' ' || \n        day(last_day_of_week)                               as full_week_desc,\n    year(date_key) || right('0' || month(date_key), 2)      as month_key,\n    month(date_key)::int                                    as month_of_year,\n    dayofmonth(date_key)::int                               as day_of_month,\n    weekofyear(date_key)::int                               as week_of_year,\n    weekiso(date_key)::int                                  as week_of_year_iso,\n    monthname(date_key)::varchar(5)                         as month_short_desc,\n    to_char(date_key, 'MMMM')::varchar(50)                  as month_desc,\n    trunc(date_key, 'Month')::date                          as first_day_of_month,\n    last_day(date_key, 'Month')::date                       as last_day_of_month,\n    year(date_key) || quarter(date_key)                     as quarter_key,\n    quarter(date_key)::int                                  as quarter_of_year,\n    date_key - trunc(date_key,'Quarter') + 1::int           as day_of_quarter,\n    'Q' || quarter_of_year::varchar(5)                      as quarter_short_desc,\n    'Quarter ' || quarter_of_year::varchar(50)              as quarter_desc,\n    trunc(date_key, 'Quarter')::date                        as first_day_of_quarter,\n    last_day(date_key, 'Quarter')::date                     as last_day_of_quarter,\n    year(date_key)::int                                     as year_key,\n    trunc(date_key, 'Year')::date                           as first_day_of_year,\n    last_day(date_key, 'Year')::date                        as last_day_of_year,\n    row_number() over ( partition by \n                            year(date_key), \n                            month(date_key), \n                            dayofweek(date_key) \n                        order by date_key)::int             as ordinal_weekday_of_month,\n    case\n        when month(date_key) = 1 and dayofmonth(date_key) = 1\n            then 'New Year''s Day'\n        when MONTH(date_key) = 1 and dayofmonth(date_key) = 20 and ((YEAR(date_key) - 1) % 4) = 0\n            then 'Inauguration Day'\n        when MONTH(date_key) = 1 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 3\n            then 'Martin Luther King Jr Day'\n        when MONTH(date_key) = 2 and dayofmonth(date_key) = 14\n            then 'Valentine''s Day'\n        when MONTH(date_key) = 2 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 3\n            then 'President''s Day'\n        when MONTH(date_key) = 3 and dayofmonth(date_key) = 17\n            then 'Saint Patrick''s Day'\n        when MONTH(date_key) = 5 and dayofweek(date_key) = 1 and ordinal_weekday_of_month = 2\n            then 'Mother''s Day'\n        when MONTH(date_key) = 5 and dayofweek(date_key) = 2\n            and last_value(dayofmonth(date_key)) over ( partition by month_key\n                                                        order by to_date(date_key)) - 7 <= dayofmonth(date_key)\n        then 'Memorial Day'\n        when MONTH(date_key) = 6 and dayofweek(date_key) = 1 and ordinal_weekday_of_month = 3\n        \tthen 'Father''s Day'\n        when MONTH(date_key) = 7 and dayofmonth(date_key) = 4\n        \tthen 'Independence Day'\n        when MONTH(date_key) = 9 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 1\n        \tthen 'Labor Day'\n        when MONTH(date_key) = 10 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 2\n        \tthen 'Columbus Day'\n        when MONTH(date_key) = 10 and dayofweek(date_key) = 31\n        \tthen 'Halloween'\n        when MONTH(date_key) = 11 and dayofweek(date_key) = 5 and ordinal_weekday_of_month = 4\n        \tthen 'Thanksgiving Day'\n        when MONTH(date_key) = 12 and dayofmonth(date_key) = 25\n        \tthen 'Christmas Day'\n        when MONTH(date_key) = 12 and dayofmonth(date_key) = 26\n        \tthen 'Boxing Day'\n        else null\n    end::varchar(50)                                        as holiday_desc,\n    case\n        when holiday_desc is null\n            then 0\n        else 1\n    end::boolean                                            as is_holiday\nfrom date_spine", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": [{"sql": "alter session set week_of_year_policy=1", "transaction": true, "index": null}]}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "utility", "dates"], "unique_id": "model.edw.dates", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/utility/dates.sql", "original_file_path": "models/psa/utility/dates.sql", "name": "dates", "alias": "dates", "checksum": {"name": "sha256", "checksum": "3c886a97542196c73db7ad9a89fae6eb4fca39a1fccbccc2f05281061a00bcc4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/utility/schema.yml", "build_path": "target/compiled/edw/models/psa/utility/dates.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "pre-hook": "alter session set week_of_year_policy=1"}, "compiled_sql": "\n\nwith date_spine as (\n  \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n     + \n    \n    p12.generated_number * pow(2, 12)\n     + \n    \n    p13.generated_number * pow(2, 13)\n     + \n    \n    p14.generated_number * pow(2, 14)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n     cross join \n    \n    p as p14\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 22645\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2000', 'mm/dd/yyyy')\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date(concat(year(current_date) + 40,'-12-31'))\n\n)\n\nselect * from filtered\n\n\n)\nselect\n    date_day::date                                          as date_key,\n    dayofyear(date_key)::int                                as day_of_year,\n    decode(\n        right(\n            extract(dayofmonth from date_key),\n        1),\n        1, 'st',\n        2, 'nd',\n        3, 'rd',\n        'th'\n    )::varchar(2)                                           as day_suffix, \n    year(date_key) || right('0' || week(date_key), 2)       as week_key,\n    dayofweek(date_key)::int                                as day_of_week,\n    dayofweekiso(date_key)::int                             as day_of_week_iso,\n    dayname(date_key)::varchar                              as week_day_short_desc,\n    decode(\n        extract(dayofweek from date_key),\n        7 , 'Sunday',\n        1 , 'Monday',\n        2 , 'Tuesday',\n        3 , 'Wednesday',\n        4 , 'Thursday',\n        5 , 'Friday',\n        6 , 'Saturday'\n    )::varchar                                              as week_day_desc,\n    trunc(date_key, 'Week')::date                           as first_day_of_week,\n    last_day(date_key, 'Week')::date                        as last_day_of_week,\n    monthname(first_day_of_week) || ' ' || \n        day(first_day_of_week) || ' - ' || \n        monthname(last_day_of_week) || ' ' || \n        day(last_day_of_week)                               as full_week_desc,\n    year(date_key) || right('0' || month(date_key), 2)      as month_key,\n    month(date_key)::int                                    as month_of_year,\n    dayofmonth(date_key)::int                               as day_of_month,\n    weekofyear(date_key)::int                               as week_of_year,\n    weekiso(date_key)::int                                  as week_of_year_iso,\n    monthname(date_key)::varchar(5)                         as month_short_desc,\n    to_char(date_key, 'MMMM')::varchar(50)                  as month_desc,\n    trunc(date_key, 'Month')::date                          as first_day_of_month,\n    last_day(date_key, 'Month')::date                       as last_day_of_month,\n    year(date_key) || quarter(date_key)                     as quarter_key,\n    quarter(date_key)::int                                  as quarter_of_year,\n    date_key - trunc(date_key,'Quarter') + 1::int           as day_of_quarter,\n    'Q' || quarter_of_year::varchar(5)                      as quarter_short_desc,\n    'Quarter ' || quarter_of_year::varchar(50)              as quarter_desc,\n    trunc(date_key, 'Quarter')::date                        as first_day_of_quarter,\n    last_day(date_key, 'Quarter')::date                     as last_day_of_quarter,\n    year(date_key)::int                                     as year_key,\n    trunc(date_key, 'Year')::date                           as first_day_of_year,\n    last_day(date_key, 'Year')::date                        as last_day_of_year,\n    row_number() over ( partition by \n                            year(date_key), \n                            month(date_key), \n                            dayofweek(date_key) \n                        order by date_key)::int             as ordinal_weekday_of_month,\n    case\n        when month(date_key) = 1 and dayofmonth(date_key) = 1\n            then 'New Year''s Day'\n        when MONTH(date_key) = 1 and dayofmonth(date_key) = 20 and ((YEAR(date_key) - 1) % 4) = 0\n            then 'Inauguration Day'\n        when MONTH(date_key) = 1 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 3\n            then 'Martin Luther King Jr Day'\n        when MONTH(date_key) = 2 and dayofmonth(date_key) = 14\n            then 'Valentine''s Day'\n        when MONTH(date_key) = 2 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 3\n            then 'President''s Day'\n        when MONTH(date_key) = 3 and dayofmonth(date_key) = 17\n            then 'Saint Patrick''s Day'\n        when MONTH(date_key) = 5 and dayofweek(date_key) = 1 and ordinal_weekday_of_month = 2\n            then 'Mother''s Day'\n        when MONTH(date_key) = 5 and dayofweek(date_key) = 2\n            and last_value(dayofmonth(date_key)) over ( partition by month_key\n                                                        order by to_date(date_key)) - 7 <= dayofmonth(date_key)\n        then 'Memorial Day'\n        when MONTH(date_key) = 6 and dayofweek(date_key) = 1 and ordinal_weekday_of_month = 3\n        \tthen 'Father''s Day'\n        when MONTH(date_key) = 7 and dayofmonth(date_key) = 4\n        \tthen 'Independence Day'\n        when MONTH(date_key) = 9 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 1\n        \tthen 'Labor Day'\n        when MONTH(date_key) = 10 and dayofweek(date_key) = 2 and ordinal_weekday_of_month = 2\n        \tthen 'Columbus Day'\n        when MONTH(date_key) = 10 and dayofweek(date_key) = 31\n        \tthen 'Halloween'\n        when MONTH(date_key) = 11 and dayofweek(date_key) = 5 and ordinal_weekday_of_month = 4\n        \tthen 'Thanksgiving Day'\n        when MONTH(date_key) = 12 and dayofmonth(date_key) = 25\n        \tthen 'Christmas Day'\n        when MONTH(date_key) = 12 and dayofmonth(date_key) = 26\n        \tthen 'Boxing Day'\n        else null\n    end::varchar(50)                                        as holiday_desc,\n    case\n        when holiday_desc is null\n            then 0\n        else 1\n    end::boolean                                            as is_holiday\nfrom date_spine", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.dates"}, "model.edw.stg_system_checker_hardware": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\nwith syscheck as (\n\n    select * from {{ ref('base_system_checker_hardware') }}\n\n)\n, cwdata as (\n\n    select * from {{ ref('base_system_checker_cw_data') }}\n\n)\n, unioned as (\n\n    select\n        email_address,\n        created_at,\n        processor_type as cpu_type,\n        memory,\n        case\n            when operating_system = 'win 10.0'                  then 'Windows 10'\n            when operating_system = 'win 6.3'                   then 'Windows 8.1'\n            when operating_system = 'win 6.2'                   then 'Windows 8'\n            when operating_system = 'win 6.1'                   then 'Windows 7'\n            when contains(lower(operating_system), 'linux') > 0 then 'Linux'\n            when contains(lower(operating_system), 'mac') > 0   then 'Mac'\n            when operating_system is null                       then 'Unknown'\n            else operating_system\n        end as operating_system,\n        primary_resolution,\n        processor_cores,\n        internet_speed\n    from syscheck\n\n    union\n\n    select\n        email_address,\n        created_at,\n        cpu as cpu_type,\n        try_to_number(split(memory, ' ')[0]::varchar, 10,1) as memory,\n        case\n            when os_vendor = 'Microsoft' and contains(operating_system, '10.0') then 'Windows 10'\n            when os_vendor = 'Microsoft' and contains(operating_system, '6.3') then 'Windows 8.1'\n            when os_vendor = 'Microsoft' and contains(operating_system, '6.2') then 'Windows 8'\n            when os_vendor = 'Microsoft' and contains(operating_system, '6.1') then 'Windows 7'\n            when os_vendor = 'Apple' then 'Mac'\n            when operating_system is null then 'Unknown'\n            when lower(operating_system) = 'none' then null\n            else operating_system\n        end as operating_system,\n        iff(lower(primary_resolution) = 'none', null, primary_resolution) as primary_resolution,\n        null as processor_cores,\n        try_to_number(internet_speed,10,1) as internet_speed\n    from cwdata\n)\n, max_sys as (\n\n    select\n        email_address,\n        max(created_at) as created_at\n    from unioned\n    group by 1\n\n)\n, alt_cpu as (\n\n    select\n        unioned.*,\n        replace(unioned.cpu_type, ' ') as cpu_type_no_space\n    from unioned \n    inner join max_sys\n        on unioned.email_address = max_sys.email_address\n        and unioned.created_at = max_sys.created_at\n    where lower(unioned.email_address) <> 'none'\n\n)\nselect * from alt_cpu", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.edw.base_system_checker_hardware", "model.edw.base_system_checker_cw_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "system_checker", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "system_checker", "stg_system_checker_hardware"], "unique_id": "model.edw.stg_system_checker_hardware", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/system_checker/stg_system_checker_hardware.sql", "original_file_path": "models/psa/system_checker/stg_system_checker_hardware.sql", "name": "stg_system_checker_hardware", "alias": "stg_system_checker_hardware", "checksum": {"name": "sha256", "checksum": "a424556310379fb23efa3ddc96f8a153b3862694c4a79afeb5cdac72021a42a3"}, "tags": [], "refs": [["base_system_checker_hardware"], ["base_system_checker_cw_data"]], "sources": [], "description": "union of system checker version one and two", "columns": {"email_address": {"name": "email_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpu_type": {"name": "cpu_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "operating_system": {"name": "operating_system", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/system_checker/schema.yml", "build_path": "target/compiled/edw/models/psa/system_checker/stg_system_checker_hardware.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "system_checker"}, "compiled_sql": "\n\nwith syscheck as (\n\n    select * from psa_dev.scratch_brana.base_system_checker_hardware\n\n)\n, cwdata as (\n\n    select * from psa_dev.scratch_brana.base_system_checker_cw_data\n\n)\n, unioned as (\n\n    select\n        email_address,\n        created_at,\n        processor_type as cpu_type,\n        memory,\n        case\n            when operating_system = 'win 10.0'                  then 'Windows 10'\n            when operating_system = 'win 6.3'                   then 'Windows 8.1'\n            when operating_system = 'win 6.2'                   then 'Windows 8'\n            when operating_system = 'win 6.1'                   then 'Windows 7'\n            when contains(lower(operating_system), 'linux') > 0 then 'Linux'\n            when contains(lower(operating_system), 'mac') > 0   then 'Mac'\n            when operating_system is null                       then 'Unknown'\n            else operating_system\n        end as operating_system,\n        primary_resolution,\n        processor_cores,\n        internet_speed\n    from syscheck\n\n    union\n\n    select\n        email_address,\n        created_at,\n        cpu as cpu_type,\n        try_to_number(split(memory, ' ')[0]::varchar, 10,1) as memory,\n        case\n            when os_vendor = 'Microsoft' and contains(operating_system, '10.0') then 'Windows 10'\n            when os_vendor = 'Microsoft' and contains(operating_system, '6.3') then 'Windows 8.1'\n            when os_vendor = 'Microsoft' and contains(operating_system, '6.2') then 'Windows 8'\n            when os_vendor = 'Microsoft' and contains(operating_system, '6.1') then 'Windows 7'\n            when os_vendor = 'Apple' then 'Mac'\n            when operating_system is null then 'Unknown'\n            when lower(operating_system) = 'none' then null\n            else operating_system\n        end as operating_system,\n        iff(lower(primary_resolution) = 'none', null, primary_resolution) as primary_resolution,\n        null as processor_cores,\n        try_to_number(internet_speed,10,1) as internet_speed\n    from cwdata\n)\n, max_sys as (\n\n    select\n        email_address,\n        max(created_at) as created_at\n    from unioned\n    group by 1\n\n)\n, alt_cpu as (\n\n    select\n        unioned.*,\n        replace(unioned.cpu_type, ' ') as cpu_type_no_space\n    from unioned \n    inner join max_sys\n        on unioned.email_address = max_sys.email_address\n        and unioned.created_at = max_sys.created_at\n    where lower(unioned.email_address) <> 'none'\n\n)\nselect * from alt_cpu", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stg_system_checker_hardware"}, "model.edw.base_system_checker_cw_data": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    )\n}}\n\n\nwith source as (\n\n    select * from {{ source('system_checker','cw_data') }}\n\n)\n,\n renamed as (\n\n    select  \n        country,\n        cpu,\n        created_datetime      as created_at,\n        disk1model            as disk_model,\n        disk1size             as disk_size,\n        disk2model            as disk_2_model,\n        disk2size             as disk_2_size,\n        emailaddress          as email_address,\n        graphicscard1model    as graphics_card_model,\n        graphicscard1videoram as graphics_card_ram,\n        graphicscard2model    as graphics_card_2_model,\n        graphicscard2videoram as graphics_card_2_ram,\n        id                    as worker_hardware_id,\n        manufacturer,\n        memory,\n        model,\n        monitor1resolution    as primary_resolution,\n        monitor2resolution    as monitor_2_resolution,\n        name,\n        networkdescription    as network_description,\n        networkdownloadspeed  as internet_speed,\n        networkuploadspeed    as internet_upload_speed,\n        osbuild               as operating_system,\n        osvendor              as os_vendor,\n        serialnumber          as serial_number\n    from source\n)\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.system_checker.cw_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "system_checker", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "system_checker", "base", "base_system_checker_cw_data"], "unique_id": "model.edw.base_system_checker_cw_data", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/system_checker/base/base_system_checker_cw_data.sql", "original_file_path": "models/psa/system_checker/base/base_system_checker_cw_data.sql", "name": "base_system_checker_cw_data", "alias": "base_system_checker_cw_data", "checksum": {"name": "sha256", "checksum": "d5c7e4cb459ec019ff5028687c040f6deaa1fb2d18317abe64e0a51e6f4ba634"}, "tags": [], "refs": [], "sources": [["system_checker", "cw_data"]], "description": "version two of the system checker, as of 4/8/2021, soon to be deprecated", "columns": {"email_address": {"name": "email_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpu": {"name": "cpu", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "operating_system": {"name": "operating_system", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memory": {"name": "memory", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/system_checker/schema.yml", "build_path": "target/compiled/edw/models/psa/system_checker/base/base_system_checker_cw_data.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "system_checker"}, "compiled_sql": "\n\n\nwith source as (\n\n    select * from raw.systemchecker_singer.cw_data\n\n)\n,\n renamed as (\n\n    select  \n        country,\n        cpu,\n        created_datetime      as created_at,\n        disk1model            as disk_model,\n        disk1size             as disk_size,\n        disk2model            as disk_2_model,\n        disk2size             as disk_2_size,\n        emailaddress          as email_address,\n        graphicscard1model    as graphics_card_model,\n        graphicscard1videoram as graphics_card_ram,\n        graphicscard2model    as graphics_card_2_model,\n        graphicscard2videoram as graphics_card_2_ram,\n        id                    as worker_hardware_id,\n        manufacturer,\n        memory,\n        model,\n        monitor1resolution    as primary_resolution,\n        monitor2resolution    as monitor_2_resolution,\n        name,\n        networkdescription    as network_description,\n        networkdownloadspeed  as internet_speed,\n        networkuploadspeed    as internet_upload_speed,\n        osbuild               as operating_system,\n        osvendor              as os_vendor,\n        serialnumber          as serial_number\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_system_checker_cw_data"}, "model.edw.base_system_checker_hardware": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nwith source as (\n\n    select * from {{ source('system_checker', 'system_checker') }}\n),\nrenamed as (\n    select \n        hash_id,\n        browser,\n        created_at,\n        email as email_address,\n        memory,\n        netspeed as internet_speed,\n        os as operating_system,\n        primary_resolution,\n        processor as processor_type,\n        processor_cores\n    from source\n)\nselect\n*\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.edw.system_checker.system_checker"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "system_checker", "database": "psa", "tags": [], "full_refresh": null, "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}, {"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "psa", "system_checker", "base", "base_system_checker_hardware"], "unique_id": "model.edw.base_system_checker_hardware", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "psa/system_checker/base/base_system_checker_hardware.sql", "original_file_path": "models/psa/system_checker/base/base_system_checker_hardware.sql", "name": "base_system_checker_hardware", "alias": "base_system_checker_hardware", "checksum": {"name": "sha256", "checksum": "64b14b9766de1e0b739d0f087790ac20b73e22516088a3969079530afcf8e9ea"}, "tags": [], "refs": [], "sources": [["system_checker", "system_checker"]], "description": "version one of the system checker, now deprecated", "columns": {"email_address": {"name": "email_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processor_type": {"name": "processor_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "operating_system": {"name": "operating_system", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memory": {"name": "memory", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/psa/system_checker/schema.yml", "build_path": "target/compiled/edw/models/psa/system_checker/base/base_system_checker_hardware.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "enabled": true, "materialized": "view", "schema": "system_checker"}, "compiled_sql": "\n\nwith source as (\n\n    select * from raw.systemchecker_singer.system_checker\n),\nrenamed as (\n    select \n        hash_id,\n        browser,\n        created_at,\n        email as email_address,\n        memory,\n        netspeed as internet_speed,\n        os as operating_system,\n        primary_resolution,\n        processor as processor_type,\n        processor_cores\n    from source\n)\nselect\n*\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.base_system_checker_hardware"}, "snapshot.edw.departments": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='solarwinds',\n        unique_key='id',\n        strategy='check',\n        check_cols=[\n            'default_assignee_id',\n            'description',\n            'name']\n    )\n}}\n\nselect * from {{ source('solarwinds', 'departments') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.departments"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "check", "unique_key": "id", "target_schema": "solarwinds", "target_database": "psa", "check_cols": ["default_assignee_id", "description", "name"], "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "solarwinds", "fqn": ["edw", "solarwinds", "departments", "departments"], "unique_id": "snapshot.edw.departments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "solarwinds/departments.sql", "original_file_path": "snapshots/solarwinds/departments.sql", "name": "departments", "alias": "departments", "checksum": {"name": "sha256", "checksum": "fa04e2b09f2765d4ca562d94e7f656277a85db040a63880ad2438b1ad1e1e937"}, "tags": [], "refs": [], "sources": [["solarwinds", "departments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "solarwinds", "unique_key": "id", "strategy": "check", "check_cols": ["default_assignee_id", "description", "name"]}, "compiled_sql": "\n\n\n\nselect * from raw.solarwinds_stitch.departments\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.solarwinds.departments"}, "snapshot.edw.categories": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='solarwinds',\n        unique_key='id',\n        strategy='check',\n        check_cols=[\n            'children',\n            'default_assignee_id',\n            'default_tags',\n            'name',\n            'parent_id']\n    )\n}}\n\nselect * from {{ source('solarwinds', 'categories') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.categories"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "check", "unique_key": "id", "target_schema": "solarwinds", "target_database": "psa", "check_cols": ["children", "default_assignee_id", "default_tags", "name", "parent_id"], "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "solarwinds", "fqn": ["edw", "solarwinds", "categories", "categories"], "unique_id": "snapshot.edw.categories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "solarwinds/categories.sql", "original_file_path": "snapshots/solarwinds/categories.sql", "name": "categories", "alias": "categories", "checksum": {"name": "sha256", "checksum": "7999ba6da69448c532c641607eb06a1a54dbd8f800cb694c67e49556e03ac1f1"}, "tags": [], "refs": [], "sources": [["solarwinds", "categories"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "solarwinds", "unique_key": "id", "strategy": "check", "check_cols": ["children", "default_assignee_id", "default_tags", "name", "parent_id"]}, "compiled_sql": "\n\n\n\nselect * from raw.solarwinds_stitch.categories\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.solarwinds.categories"}, "snapshot.edw.sites": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='solarwinds',\n        unique_key='id',\n        strategy='check',\n        check_cols=[\n            'business_record',\n            'description',\n            'language',\n            'location',\n            'name',\n            'time_zone']\n    )\n}}\n\nselect * from {{ source('solarwinds', 'sites') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.sites"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "check", "unique_key": "id", "target_schema": "solarwinds", "target_database": "psa", "check_cols": ["business_record", "description", "language", "location", "name", "time_zone"], "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "solarwinds", "fqn": ["edw", "solarwinds", "sites", "sites"], "unique_id": "snapshot.edw.sites", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "solarwinds/sites.sql", "original_file_path": "snapshots/solarwinds/sites.sql", "name": "sites", "alias": "sites", "checksum": {"name": "sha256", "checksum": "c86098e37e637203b171da21e58164d767e619ab46a649f2d47043128c06905b"}, "tags": [], "refs": [], "sources": [["solarwinds", "sites"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "solarwinds", "unique_key": "id", "strategy": "check", "check_cols": ["business_record", "description", "language", "location", "name", "time_zone"]}, "compiled_sql": "\n\n\n\nselect * from raw.solarwinds_stitch.sites\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.solarwinds.sites"}, "snapshot.edw.incidents": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='solarwinds',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('solarwinds', 'incidents') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.incidents"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "solarwinds", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "solarwinds", "fqn": ["edw", "solarwinds", "incidents", "incidents"], "unique_id": "snapshot.edw.incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "solarwinds/incidents.sql", "original_file_path": "snapshots/solarwinds/incidents.sql", "name": "incidents", "alias": "incidents", "checksum": {"name": "sha256", "checksum": "a183d50599151cb6cbfd70c11ba2ed8004689c49e7c1b8d2788e15aaedae9c15"}, "tags": [], "refs": [], "sources": [["solarwinds", "incidents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "solarwinds", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.solarwinds_stitch.incidents\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.solarwinds.incidents"}, "snapshot.edw.roles": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='solarwinds',\n        unique_key='id',\n        strategy='check',\n        check_cols=[\n            'description',\n            'portal',\n            'show_my_tasks',\n            'name']\n    )\n}}\n\nselect * from {{ source('solarwinds', 'roles') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.roles"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "check", "unique_key": "id", "target_schema": "solarwinds", "target_database": "psa", "check_cols": ["description", "portal", "show_my_tasks", "name"], "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "solarwinds", "fqn": ["edw", "solarwinds", "roles", "roles"], "unique_id": "snapshot.edw.roles", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "solarwinds/roles.sql", "original_file_path": "snapshots/solarwinds/roles.sql", "name": "roles", "alias": "roles", "checksum": {"name": "sha256", "checksum": "02ba865301a2ae821e468d378c6d109b6bdb411511c03d438e13f37a8e3b574e"}, "tags": [], "refs": [], "sources": [["solarwinds", "roles"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "solarwinds", "unique_key": "id", "strategy": "check", "check_cols": ["description", "portal", "show_my_tasks", "name"]}, "compiled_sql": "\n\n\n\nselect * from raw.solarwinds_stitch.roles\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.solarwinds.roles"}, "snapshot.edw.solarwinds_users": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='solarwinds',\n        unique_key='id',\n        \n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('solarwinds', 'users') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.solarwinds.users"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "solarwinds", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "solarwinds", "fqn": ["edw", "solarwinds", "solarwinds_users", "solarwinds_users"], "unique_id": "snapshot.edw.solarwinds_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "solarwinds/solarwinds_users.sql", "original_file_path": "snapshots/solarwinds/solarwinds_users.sql", "name": "solarwinds_users", "alias": "solarwinds_users", "checksum": {"name": "sha256", "checksum": "78193a15640053dadaa6670e3c1b243a6c1f775eca6151dab40d15eabe73cf75"}, "tags": [], "refs": [], "sources": [["solarwinds", "users"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "solarwinds", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.solarwinds_stitch.users\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.solarwinds.solarwinds_users"}, "snapshot.edw.companies": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='freshdesk',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('freshdesk', 'companies') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.companies"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "freshdesk", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "freshdesk", "fqn": ["edw", "freshdesk", "companies", "companies"], "unique_id": "snapshot.edw.companies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/companies.sql", "original_file_path": "snapshots/freshdesk/companies.sql", "name": "companies", "alias": "companies", "checksum": {"name": "sha256", "checksum": "938ff029dc702da3b992aafa9acdec67c06eac1b873033ec07e985af5d2c9d55"}, "tags": [], "refs": [], "sources": [["freshdesk", "companies"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "freshdesk", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.freshdesk_stitch.companies\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.freshdesk.companies"}, "snapshot.edw.satisfaction_ratings": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='freshdesk',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('freshdesk', 'satisfaction_ratings') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.satisfaction_ratings"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "freshdesk", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "freshdesk", "fqn": ["edw", "freshdesk", "satisfaction_ratings", "satisfaction_ratings"], "unique_id": "snapshot.edw.satisfaction_ratings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/satisfaction_ratings.sql", "original_file_path": "snapshots/freshdesk/satisfaction_ratings.sql", "name": "satisfaction_ratings", "alias": "satisfaction_ratings", "checksum": {"name": "sha256", "checksum": "8055398304591964f48d17a72a8193a5457e63783163b0351cfeb0a8d991c526"}, "tags": [], "refs": [], "sources": [["freshdesk", "satisfaction_ratings"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "freshdesk", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.freshdesk_stitch.satisfaction_ratings\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.freshdesk.satisfaction_ratings"}, "snapshot.edw.tickets": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='freshdesk',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('freshdesk', 'tickets') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.tickets"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "freshdesk", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "freshdesk", "fqn": ["edw", "freshdesk", "tickets", "tickets"], "unique_id": "snapshot.edw.tickets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/tickets.sql", "original_file_path": "snapshots/freshdesk/tickets.sql", "name": "tickets", "alias": "tickets", "checksum": {"name": "sha256", "checksum": "ef4c12ae09d0dadf63a8f5ddb91e3bd5a9c0262f5846e4b755971ae49a307890"}, "tags": [], "refs": [], "sources": [["freshdesk", "tickets"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "freshdesk", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.freshdesk_stitch.tickets\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.freshdesk.tickets"}, "snapshot.edw.agents": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='freshdesk',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('freshdesk', 'agents') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.freshdesk.agents"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "freshdesk", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "freshdesk", "fqn": ["edw", "freshdesk", "agents", "agents"], "unique_id": "snapshot.edw.agents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/agents.sql", "original_file_path": "snapshots/freshdesk/agents.sql", "name": "agents", "alias": "agents", "checksum": {"name": "sha256", "checksum": "6011f0915c4056f51463e2598d5c8a1e561aefdc1d3409c690f01decadd422ae"}, "tags": [], "refs": [], "sources": [["freshdesk", "agents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "freshdesk", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.freshdesk_stitch.agents\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.freshdesk.agents"}, "snapshot.edw.schedules": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='calendar',\n        unique_key='id',\n\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('calendar', 'schedules') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.calendar.schedules"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "calendar", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "calendar", "fqn": ["edw", "calendar", "schedules", "schedules"], "unique_id": "snapshot.edw.schedules", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "calendar/schedules.sql", "original_file_path": "snapshots/calendar/schedules.sql", "name": "schedules", "alias": "schedules", "checksum": {"name": "sha256", "checksum": "502fa5ce341cc57e215fbd2da58735b322bb8497b51105e9cdefa36d90c23753"}, "tags": [], "refs": [], "sources": [["calendar", "schedules"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "calendar", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.calendar_ppw.schedules\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.calendar.schedules"}, "snapshot.edw.projects": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='projects',\n        unique_key='id',\n\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('projects', 'projects') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.projects.projects"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "projects", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "projects", "fqn": ["edw", "projects", "projects", "projects"], "unique_id": "snapshot.edw.projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "projects/projects.sql", "original_file_path": "snapshots/projects/projects.sql", "name": "projects", "alias": "projects", "checksum": {"name": "sha256", "checksum": "d70a2b931cad0d464b48dd3d9561e50b8d9b1f297c0a76e241773e8054ac1ae7"}, "tags": [], "refs": [], "sources": [["projects", "projects"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "projects", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.projects_ppw.projects\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.projects.projects"}, "snapshot.edw.users": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='users',\n        unique_key='id',\n\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('users', 'users') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.users.users"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "users", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "users", "fqn": ["edw", "users", "users", "users"], "unique_id": "snapshot.edw.users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "users/users.sql", "original_file_path": "snapshots/users/users.sql", "name": "users", "alias": "users", "checksum": {"name": "sha256", "checksum": "eb45fc679eb4effb40ffabf9ae610777d173f56f9288ccfe3112bf4894831a42"}, "tags": [], "refs": [], "sources": [["users", "users"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "users", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.users_ppw.users\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.users.users"}, "snapshot.edw.delivery_hubs": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='users',\n        unique_key='id',\n\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('users', 'delivery_hubs') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.users.delivery_hubs"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "users", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "users", "fqn": ["edw", "users", "delivery_hubs", "delivery_hubs"], "unique_id": "snapshot.edw.delivery_hubs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "users/delivery_hubs.sql", "original_file_path": "snapshots/users/delivery_hubs.sql", "name": "delivery_hubs", "alias": "delivery_hubs", "checksum": {"name": "sha256", "checksum": "103771227db828c5df742b9a1aa2dceda8f552d15c2e95189e9d3c2713b3003d"}, "tags": [], "refs": [], "sources": [["users", "delivery_hubs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "users", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.users_ppw.delivery_hubs\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.users.delivery_hubs"}, "snapshot.edw.slots": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='users',\n        unique_key='id',\n\n        strategy='timestamp',\n        updated_at='updated_at'\n    )\n}}\n\nselect * from {{ source('users', 'slots') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.users.slots"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "users", "target_database": "psa", "updated_at": "updated_at", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "users", "fqn": ["edw", "users", "slots", "slots"], "unique_id": "snapshot.edw.slots", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "users/slots.sql", "original_file_path": "snapshots/users/slots.sql", "name": "slots", "alias": "slots", "checksum": {"name": "sha256", "checksum": "9a53a40a1433df323739ccaed8e90edff08e3a10a3a0147d61f533a0477c07b6"}, "tags": [], "refs": [], "sources": [["users", "slots"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "users", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "compiled_sql": "\n\n\n\nselect * from raw.users_ppw.slots\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.users.slots"}, "snapshot.edw.recordtype": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='lastmodifieddate'\n    )\n}}\n\nselect * from {{ source('salesforce', 'recordtype') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.recordtype"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "lastmodifieddate", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "recordtype", "recordtype"], "unique_id": "snapshot.edw.recordtype", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/recordtype.sql", "original_file_path": "snapshots/salesforce/recordtype.sql", "name": "recordtype", "alias": "recordtype", "checksum": {"name": "sha256", "checksum": "6ffa1985b0db400208be994ddb07d6074ca8d46b13640769173a5deadba609c4"}, "tags": [], "refs": [], "sources": [["salesforce", "recordtype"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "lastmodifieddate"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.recordtype\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.recordtype"}, "snapshot.edw.opportunityhistory": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='systemmodstamp'\n    )\n}}\n\nselect * from {{ source('salesforce', 'opportunityhistory') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.opportunityhistory"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "systemmodstamp", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "opportunityhistory", "opportunityhistory"], "unique_id": "snapshot.edw.opportunityhistory", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/opportunityhistory.sql", "original_file_path": "snapshots/salesforce/opportunityhistory.sql", "name": "opportunityhistory", "alias": "opportunityhistory", "checksum": {"name": "sha256", "checksum": "e27386e3ca22fbc39b9f2f957af2b7fa0ce3e247407ed1b16dd7c8a59e46bf4b"}, "tags": [], "refs": [], "sources": [["salesforce", "opportunityhistory"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "systemmodstamp"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.opportunityhistory\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.opportunityhistory"}, "snapshot.edw.userrole": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='lastmodifieddate'\n    )\n}}\n\nselect * from {{ source('salesforce', 'userrole') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.userrole"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "lastmodifieddate", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "userrole", "userrole"], "unique_id": "snapshot.edw.userrole", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/userrole.sql", "original_file_path": "snapshots/salesforce/userrole.sql", "name": "userrole", "alias": "userrole", "checksum": {"name": "sha256", "checksum": "7d866a2a8c4a090499899ece45a20353350bc1056898b8c892cce622d24ee632"}, "tags": [], "refs": [], "sources": [["salesforce", "userrole"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "lastmodifieddate"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.userrole\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.userrole"}, "snapshot.edw.contract": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='lastmodifieddate'\n    )\n}}\n\nselect * from {{ source('salesforce', 'contract__c') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.contract__c"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "lastmodifieddate", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "contract", "contract"], "unique_id": "snapshot.edw.contract", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/contract.sql", "original_file_path": "snapshots/salesforce/contract.sql", "name": "contract", "alias": "contract", "checksum": {"name": "sha256", "checksum": "e167497f80a95bc1ce0e2f04866eb9564b24e87266f9e1458864b4a9ea0543f6"}, "tags": [], "refs": [], "sources": [["salesforce", "contract__c"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "lastmodifieddate"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.contract__c\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.contract"}, "snapshot.edw.opportunity": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='lastmodifieddate'\n    )\n}}\n\nselect * from {{ source('salesforce', 'opportunity') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.opportunity"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "lastmodifieddate", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "opportunity", "opportunity"], "unique_id": "snapshot.edw.opportunity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/opportunity.sql", "original_file_path": "snapshots/salesforce/opportunity.sql", "name": "opportunity", "alias": "opportunity", "checksum": {"name": "sha256", "checksum": "3bbdd7cd94f9b74c11040db930e692253ef4b11c9c87f6159c1f81301232c153"}, "tags": [], "refs": [], "sources": [["salesforce", "opportunity"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "lastmodifieddate"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.opportunity\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.opportunity"}, "snapshot.edw.account": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='lastmodifieddate'\n    )\n}}\n\nselect * from {{ source('salesforce', 'account') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.account"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "lastmodifieddate", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "account", "account"], "unique_id": "snapshot.edw.account", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/account.sql", "original_file_path": "snapshots/salesforce/account.sql", "name": "account", "alias": "account", "checksum": {"name": "sha256", "checksum": "7d6191f22bf639a63a9d09645806eba42c9f13e3cb1a5889303d175f70504d72"}, "tags": [], "refs": [], "sources": [["salesforce", "account"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "lastmodifieddate"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.account\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.account"}, "snapshot.edw.user": {"raw_sql": "\n\n{{\n    config(\n        target_database='psa',\n        target_schema='salesforce',\n        unique_key='id',\n        strategy='timestamp',\n        updated_at='lastmodifieddate'\n    )\n}}\n\nselect * from {{ source('salesforce', 'user') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.salesforce.user"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "salesforce", "target_database": "psa", "updated_at": "lastmodifieddate", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "salesforce", "fqn": ["edw", "salesforce", "user", "user"], "unique_id": "snapshot.edw.user", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/user.sql", "original_file_path": "snapshots/salesforce/user.sql", "name": "user", "alias": "user", "checksum": {"name": "sha256", "checksum": "cf0852b4ecafa08eea29b56db9da125698e31dfed8822e82c8583f50a00e0431"}, "tags": [], "refs": [], "sources": [["salesforce", "user"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "salesforce", "unique_key": "id", "strategy": "timestamp", "updated_at": "lastmodifieddate"}, "compiled_sql": "\n\n\n\nselect * from raw.salesforce_stitch.user\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.salesforce.user"}, "snapshot.edw.courses_snapshot": {"raw_sql": "\n\n    {{\n        config(\n            target_database='psa',\n            target_schema='talentlms',\n            unique_key='id',\n            strategy='check',\n            check_cols='all'\n        )\n    }}\n\n    select * from {{ source('talentlms', 'courses') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.edw.talentlms.courses"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "check", "unique_key": "id", "target_schema": "talentlms", "target_database": "psa", "check_cols": "all", "transient": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa", "schema": "talentlms", "fqn": ["edw", "talentlms", "courses_snapshot", "courses_snapshot"], "unique_id": "snapshot.edw.courses_snapshot", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "talentlms/courses_snapshot.sql", "original_file_path": "snapshots/talentlms/courses_snapshot.sql", "name": "courses_snapshot", "alias": "courses_snapshot", "checksum": {"name": "sha256", "checksum": "1172132051fb8d840a8e7bd53aea314d038d76b88c9ab358acc983bf343c6284"}, "tags": [], "refs": [], "sources": [["talentlms", "courses"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "transient": false, "post-hook": ["grant select on {{ this }} to role transformer"], "target_database": "psa", "target_schema": "talentlms", "unique_key": "id", "strategy": "check", "check_cols": "all"}, "compiled_sql": "\n\n    \n\n    select * from raw.talentlms_singer.courses\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa.talentlms.courses_snapshot"}, "test.edw.test_fixture_salesforce_contract_20210405": {"raw_sql": "with data as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version\n\n    from\n        {{ ref('stg_hist_salesforce_contract') }}\n\n    where 1=1\n        and dbt_valid_from < '2021-04-05'\n        and (dbt_valid_to is null or dbt_valid_to > '2021-04-05')\n\n),\nfixture as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version\n\n    from\n        {{ ref('base_fixture_salesforce_contract_20210405') }}\n\n),\nvalidation_errors as (\n\n    select * from data\n\n    except\n\n    select * from fixture\n\n)\n\nselect * from validation_errors", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.edw.stg_hist_salesforce_contract", "model.edw.base_fixture_salesforce_contract_20210405"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "models", "psa", "salesforce", "stg_hist_salesforce_contract", "data_test", "test_fixture_salesforce_contract_20210405"], "unique_id": "test.edw.test_fixture_salesforce_contract_20210405", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/stg_hist_salesforce_contract/data_test/test_fixture_salesforce_contract_20210405.sql", "original_file_path": "tests/models/psa/salesforce/stg_hist_salesforce_contract/test_fixture_salesforce_contract_20210405.sql", "name": "test_fixture_salesforce_contract_20210405", "alias": "test_fixture_salesforce_contract_20210405", "checksum": {"name": "sha256", "checksum": "9f7a60977c17f741272b536f834f840ffefcbd097538eaf2aff2317f80a360fb"}, "tags": ["data"], "refs": [["stg_hist_salesforce_contract"], ["base_fixture_salesforce_contract_20210405"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/tests/models/psa/salesforce/stg_hist_salesforce_contract/test_fixture_salesforce_contract_20210405.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"]}, "compiled_sql": "\nwith dbt__CTE__INTERNAL_test as (\nwith data as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version\n\n    from\n        psa_dev.scratch_brana.stg_hist_salesforce_contract\n\n    where 1=1\n        and dbt_valid_from < '2021-04-05'\n        and (dbt_valid_to is null or dbt_valid_to > '2021-04-05')\n\n),\nfixture as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version\n\n    from\n        psa_dev.scratch_brana.base_fixture_salesforce_contract_20210405\n\n),\nvalidation_errors as (\n\n    select * from data\n\n    except\n\n    select * from fixture\n\n)\n\nselect * from validation_errors\n)select count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\nwith data as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version\n\n    from\n        psa_dev.scratch_brana.stg_hist_salesforce_contract\n\n    where 1=1\n        and dbt_valid_from < '2021-04-05'\n        and (dbt_valid_to is null or dbt_valid_to > '2021-04-05')\n\n),\nfixture as (\n\n    select\n        client_id,\n        client_key,\n        contract_price,\n        contract_units,\n        contract_id,\n        monthly_units,\n        contract_name,\n        package_type,\n        package_version\n\n    from\n        psa_dev.scratch_brana.base_fixture_salesforce_contract_20210405\n\n),\nvalidation_errors as (\n\n    select * from data\n\n    except\n\n    select * from fixture\n\n)\n\nselect * from validation_errors\n)"}], "relation_name": null}, "test.edw.test_package_version_not_null": {"raw_sql": "with validation_errors as (\n\n    select\n        *\n\n    from\n        {{ ref('base_hist_salesforce_contract') }}\n\n    where 1=1\n        and package_version is null\n        and system_mod_stamp > '2020-11-20 19:39:19'\n\n),\nexceptions as (\n    select\n        *\n\n    from\n        {{ ref('base_hist_salesforce_contract') }}\n\n    where 1=1\n        and contract_id in (\n            'a0i1J00000BJPkyQAH',\n            'a0i1J00000Anlx9QAB',\n            'a0i1J000009eoutQAA',\n            'a0i1J00000AoPLEQA3'\n        )\n)\n\nselect * from validation_errors\n\nexcept\n\nselect * from exceptions", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_contract", "model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "models", "psa", "salesforce", "base", "base_hist_salesforce_contract", "data_test", "test_package_version_not_null"], "unique_id": "test.edw.test_package_version_not_null", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/base/base_hist_salesforce_contract/data_test/test_package_version_not_null.sql", "original_file_path": "tests/models/psa/salesforce/base/base_hist_salesforce_contract/test_package_version_not_null.sql", "name": "test_package_version_not_null", "alias": "test_package_version_not_null", "checksum": {"name": "sha256", "checksum": "e6f30ffa66c9fd9e4dca4f6323a50f07f11c035441bc1b1a3e6a8d056402e785"}, "tags": ["data"], "refs": [["base_hist_salesforce_contract"], ["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/tests/models/psa/salesforce/base/base_hist_salesforce_contract/test_package_version_not_null.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"]}, "compiled_sql": "\nwith dbt__CTE__INTERNAL_test as (\nwith validation_errors as (\n\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and package_version is null\n        and system_mod_stamp > '2020-11-20 19:39:19'\n\n),\nexceptions as (\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and contract_id in (\n            'a0i1J00000BJPkyQAH',\n            'a0i1J00000Anlx9QAB',\n            'a0i1J000009eoutQAA',\n            'a0i1J00000AoPLEQA3'\n        )\n)\n\nselect * from validation_errors\n\nexcept\n\nselect * from exceptions\n)select count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\nwith validation_errors as (\n\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and package_version is null\n        and system_mod_stamp > '2020-11-20 19:39:19'\n\n),\nexceptions as (\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and contract_id in (\n            'a0i1J00000BJPkyQAH',\n            'a0i1J00000Anlx9QAB',\n            'a0i1J000009eoutQAA',\n            'a0i1J00000AoPLEQA3'\n        )\n)\n\nselect * from validation_errors\n\nexcept\n\nselect * from exceptions\n)"}], "relation_name": null}, "test.edw.test_package_type_not_null": {"raw_sql": "with validation_errors as (\n\n    select\n        *\n\n    from\n        {{ ref('base_hist_salesforce_contract') }}\n\n    where 1=1\n        and package_type is null\n        and system_mod_stamp > '2020-11-20 19:39:19'\n\n),\nexceptions as (\n    select\n        *\n\n    from\n        {{ ref('base_hist_salesforce_contract') }}\n\n    where 1=1\n        and contract_id in (\n            'a0i1J00000Anlx9QAB',\n            'a0i1J000009eoutQAA',\n            'a0i4o000002Pg7PAAS'\n        )\n)\n\nselect * from validation_errors\n\nexcept\n\nselect * from exceptions", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.edw.base_hist_salesforce_contract", "model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "models", "psa", "salesforce", "base", "base_hist_salesforce_contract", "data_test", "test_package_type_not_null"], "unique_id": "test.edw.test_package_type_not_null", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/base/base_hist_salesforce_contract/data_test/test_package_type_not_null.sql", "original_file_path": "tests/models/psa/salesforce/base/base_hist_salesforce_contract/test_package_type_not_null.sql", "name": "test_package_type_not_null", "alias": "test_package_type_not_null", "checksum": {"name": "sha256", "checksum": "59354d6da8288340506565953ace90936dc7922176df485b68d8e8ca83f8197e"}, "tags": ["data"], "refs": [["base_hist_salesforce_contract"], ["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/tests/models/psa/salesforce/base/base_hist_salesforce_contract/test_package_type_not_null.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"]}, "compiled_sql": "\nwith dbt__CTE__INTERNAL_test as (\nwith validation_errors as (\n\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and package_type is null\n        and system_mod_stamp > '2020-11-20 19:39:19'\n\n),\nexceptions as (\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and contract_id in (\n            'a0i1J00000Anlx9QAB',\n            'a0i1J000009eoutQAA',\n            'a0i4o000002Pg7PAAS'\n        )\n)\n\nselect * from validation_errors\n\nexcept\n\nselect * from exceptions\n)select count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\nwith validation_errors as (\n\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and package_type is null\n        and system_mod_stamp > '2020-11-20 19:39:19'\n\n),\nexceptions as (\n    select\n        *\n\n    from\n        psa_dev.scratch_brana.base_hist_salesforce_contract\n\n    where 1=1\n        and contract_id in (\n            'a0i1J00000Anlx9QAB',\n            'a0i1J000009eoutQAA',\n            'a0i4o000002Pg7PAAS'\n        )\n)\n\nselect * from validation_errors\n\nexcept\n\nselect * from exceptions\n)"}], "relation_name": null}, "seed.edw.source_lu": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "freshdesk", "source_lu"], "unique_id": "seed.edw.source_lu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/source_lu.csv", "original_file_path": "data/freshdesk/source_lu.csv", "name": "source_lu", "alias": "source_lu", "checksum": {"name": "sha256", "checksum": "713720b7b7748bf73fa1b3ec59a05a42dc7b5c8a9f87a983c93bf34a73fbf061"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "freshdesk", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.source_lu"}, "seed.edw.priority_lu": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "freshdesk", "priority_lu"], "unique_id": "seed.edw.priority_lu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/priority_lu.csv", "original_file_path": "data/freshdesk/priority_lu.csv", "name": "priority_lu", "alias": "priority_lu", "checksum": {"name": "sha256", "checksum": "aec007ac415c5b09d600e243f06773af1083a19cfb9f233a9fd4a344317dfa94"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "freshdesk", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.priority_lu"}, "seed.edw.status_lu": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "freshdesk", "status_lu"], "unique_id": "seed.edw.status_lu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/status_lu.csv", "original_file_path": "data/freshdesk/status_lu.csv", "name": "status_lu", "alias": "status_lu", "checksum": {"name": "sha256", "checksum": "666841b46258bb2dae4d531fdd6d1b3415b46323eb376bf757f2f3556f57fd11"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "freshdesk", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.status_lu"}, "seed.edw.association_type_lu": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "freshdesk", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "freshdesk", "association_type_lu"], "unique_id": "seed.edw.association_type_lu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "freshdesk/association_type_lu.csv", "original_file_path": "data/freshdesk/association_type_lu.csv", "name": "association_type_lu", "alias": "association_type_lu", "checksum": {"name": "sha256", "checksum": "8d0d8a690bd6ac8a7c32f582895f562118b4da505a51fec15b28e479e31c1d31"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "freshdesk", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.association_type_lu"}, "seed.edw.billing_invoice_20210228": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "billing", "database": "analytics", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "analytics_dev", "schema": "scratch_brana", "fqn": ["edw", "marts", "billing", "fixtures", "billing_invoice_20210228"], "unique_id": "seed.edw.billing_invoice_20210228", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "marts/billing/fixtures/billing_invoice_20210228.csv", "original_file_path": "data/marts/billing/fixtures/billing_invoice_20210228.csv", "name": "billing_invoice_20210228", "alias": "billing_invoice_20210228", "checksum": {"name": "sha256", "checksum": "f818b34347ad2e8b4eae2e411ed5be4c039a56b6d896139f421ee57b693ec291"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "analytics", "schema": "billing", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics_dev.scratch_brana.billing_invoice_20210228"}, "seed.edw.hudl_new_workers": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "hudl", "hudl_new_workers"], "unique_id": "seed.edw.hudl_new_workers", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "hudl/hudl_new_workers.csv", "original_file_path": "data/hudl/hudl_new_workers.csv", "name": "hudl_new_workers", "alias": "hudl_new_workers", "checksum": {"name": "sha256", "checksum": "1917c61456b5b5952f87237c561d64a57a728ed1c75245f5830bce6c62cc8d84"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "hudl", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.hudl_new_workers"}, "seed.edw.hudl_soccer_quality_modifiers": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "hudl", "hudl_soccer_quality_modifiers"], "unique_id": "seed.edw.hudl_soccer_quality_modifiers", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "hudl/hudl_soccer_quality_modifiers.csv", "original_file_path": "data/hudl/hudl_soccer_quality_modifiers.csv", "name": "hudl_soccer_quality_modifiers", "alias": "hudl_soccer_quality_modifiers", "checksum": {"name": "sha256", "checksum": "e4a5404c653b7a4ef8066e78170f46b3468f3e5280212738cbd410818d84a573"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "hudl", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.hudl_soccer_quality_modifiers"}, "seed.edw.hudl_grid_formation_shifts": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "hudl", "hudl_grid_formation_shifts"], "unique_id": "seed.edw.hudl_grid_formation_shifts", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "hudl/hudl_grid_formation_shifts.csv", "original_file_path": "data/hudl/hudl_grid_formation_shifts.csv", "name": "hudl_grid_formation_shifts", "alias": "hudl_grid_formation_shifts", "checksum": {"name": "sha256", "checksum": "b2499873c2f7f5bf74f628a2dd10ed868262355bc958ed3b4574b8a3d43509f5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "hudl", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.hudl_grid_formation_shifts"}, "seed.edw.hudl_t_values": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "hudl", "hudl_t_values"], "unique_id": "seed.edw.hudl_t_values", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "hudl/hudl_t_values.csv", "original_file_path": "data/hudl/hudl_t_values.csv", "name": "hudl_t_values", "alias": "hudl_t_values", "checksum": {"name": "sha256", "checksum": "28de51ef96e78e7e1e0a86389f280cfe0fc862eff26973bcdae6d368e1ba58d6"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "hudl", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.hudl_t_values"}, "seed.edw.hudl_quality_tier_payouts": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "hudl", "hudl_quality_tier_payouts"], "unique_id": "seed.edw.hudl_quality_tier_payouts", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "hudl/hudl_quality_tier_payouts.csv", "original_file_path": "data/hudl/hudl_quality_tier_payouts.csv", "name": "hudl_quality_tier_payouts", "alias": "hudl_quality_tier_payouts", "checksum": {"name": "sha256", "checksum": "449f11b9dffef2c75bdb1cc3ebe19622687379b6f3e90291e6c17c7779ee92a1"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "hudl", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.hudl_quality_tier_payouts"}, "seed.edw.hudl_soccer_shifts": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "hudl", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "hudl", "hudl_soccer_shifts"], "unique_id": "seed.edw.hudl_soccer_shifts", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "hudl/hudl_soccer_shifts.csv", "original_file_path": "data/hudl/hudl_soccer_shifts.csv", "name": "hudl_soccer_shifts", "alias": "hudl_soccer_shifts", "checksum": {"name": "sha256", "checksum": "389f35c16f4b3a4380b0a94e7f2b6d1899d61955cec046af092b970f1da2797e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "hudl", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.hudl_soccer_shifts"}, "seed.edw.fixture_contracts_extracted_20210405": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "salesforce", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "salesforce", "fixture_contracts_extracted_20210405"], "unique_id": "seed.edw.fixture_contracts_extracted_20210405", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "salesforce/fixture_contracts_extracted_20210405.csv", "original_file_path": "data/salesforce/fixture_contracts_extracted_20210405.csv", "name": "fixture_contracts_extracted_20210405", "alias": "fixture_contracts_extracted_20210405", "checksum": {"name": "sha256", "checksum": "b7839dae506f033c6339edafba6ee8925312845576ef9e8a0ae50ea106998936"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "salesforce", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.fixture_contracts_extracted_20210405"}, "seed.edw.available_hours_tags": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "onboarding", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "onboarding", "available_hours_tags"], "unique_id": "seed.edw.available_hours_tags", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "onboarding/available_hours_tags.csv", "original_file_path": "data/onboarding/available_hours_tags.csv", "name": "available_hours_tags", "alias": "available_hours_tags", "checksum": {"name": "sha256", "checksum": "ffbcc6d6aa8b907a51cff14d42b5bd07cf224a9b7924be074036ba7004e6684b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "onboarding", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.available_hours_tags"}, "seed.edw.stages_lookup": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "onboarding", "database": "psa", "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [{"sql": "grant select on {{ this }} to role transformer", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "onboarding", "stages_lookup"], "unique_id": "seed.edw.stages_lookup", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "onboarding/stages_lookup.csv", "original_file_path": "data/onboarding/stages_lookup.csv", "name": "stages_lookup", "alias": "stages_lookup", "checksum": {"name": "sha256", "checksum": "f351b43324b224aeb895ad7cf86857b59cca919a2918db31973f6a9bb3f71a3e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "post-hook": ["grant select on {{ this }} to role transformer"], "database": "psa", "schema": "onboarding", "enabled": true}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "psa_dev.scratch_brana.stages_lookup"}, "test.edw.not_null_dataloop_asset_stages_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('dataloop_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dataloop_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dataloop_asset_stages_email"], "unique_id": "test.edw.not_null_dataloop_asset_stages_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dataloop_asset_stages_email.sql", "original_file_path": "models/marts/clients/dataloop/schema.yml", "name": "not_null_dataloop_asset_stages_email", "alias": "not_null_dataloop_asset_stages_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dataloop_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/dataloop/schema.yml/schema_test/not_null_dataloop_asset_stages_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dataloop_asset_stages\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.not_null_agt_asset_stages_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_dataset_id"], "unique_id": "test.edw.not_null_agt_asset_stages_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_dataset_id.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_dataset_id", "alias": "not_null_agt_asset_stages_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere dataset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('agt_datasets')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.agt_datasets", "model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_"], "unique_id": "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_agt_asset_stages_e010a40eb5be7aab2280ce0c5b6a536b.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_", "alias": "relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"], ["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/relationships_agt_asset_stages_e010a40eb5be7aab2280ce0c5b6a536b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_asset_stages\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_datasets\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_v7_agt')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_v7_agt", "model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_"], "unique_id": "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_agt_asset_stages_5eca4456e3f316f393c9f3463e62d5d6.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_", "alias": "relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"], ["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/relationships_agt_asset_stages_5eca4456e3f316f393c9f3463e62d5d6.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_asset_stages\n) as child\nleft join (\n    select dataset_id as id from psa_dev.scratch_brana.base_v7_agt\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.not_null_agt_asset_stages_cw_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cw_email", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_cw_email"], "unique_id": "test.edw.not_null_agt_asset_stages_cw_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_cw_email.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_cw_email", "alias": "not_null_agt_asset_stages_cw_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_cw_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere cw_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cw_email"}, "test.edw.not_null_agt_asset_stages_task_submitted_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_submitted_at", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_task_submitted_at"], "unique_id": "test.edw.not_null_agt_asset_stages_task_submitted_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_task_submitted_at.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_task_submitted_at", "alias": "not_null_agt_asset_stages_task_submitted_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_task_submitted_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere task_submitted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_submitted_at"}, "test.edw.not_null_agt_asset_stages_task_submitted_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_submitted_date", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_task_submitted_date"], "unique_id": "test.edw.not_null_agt_asset_stages_task_submitted_date", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_task_submitted_date.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_task_submitted_date", "alias": "not_null_agt_asset_stages_task_submitted_date", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_task_submitted_date.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere task_submitted_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_submitted_date"}, "test.edw.not_null_agt_asset_stages_asset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_id", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_asset_id"], "unique_id": "test.edw.not_null_agt_asset_stages_asset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_asset_id.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_asset_id", "alias": "not_null_agt_asset_stages_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_asset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_id"}, "test.edw.not_null_agt_asset_stages_from_stage_number": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_stage_number", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_from_stage_number"], "unique_id": "test.edw.not_null_agt_asset_stages_from_stage_number", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_from_stage_number.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_from_stage_number", "alias": "not_null_agt_asset_stages_from_stage_number", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_from_stage_number.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere from_stage_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_stage_number"}, "test.edw.not_null_agt_asset_stages_to_stage_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_stage_name", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_to_stage_name"], "unique_id": "test.edw.not_null_agt_asset_stages_to_stage_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_to_stage_name.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_to_stage_name", "alias": "not_null_agt_asset_stages_to_stage_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_to_stage_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere to_stage_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_stage_name"}, "test.edw.not_null_agt_asset_stages_stage_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stage_duration", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_stage_duration"], "unique_id": "test.edw.not_null_agt_asset_stages_stage_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_stage_duration.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_stage_duration", "alias": "not_null_agt_asset_stages_stage_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_stage_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere stage_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stage_duration"}, "test.edw.not_null_agt_asset_stages_asset_annotation_running_total": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_annotation_running_total", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_asset_annotation_running_total"], "unique_id": "test.edw.not_null_agt_asset_stages_asset_annotation_running_total", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_asset_annotation_running_total.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_asset_annotation_running_total", "alias": "not_null_agt_asset_stages_asset_annotation_running_total", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_asset_annotation_running_total.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere asset_annotation_running_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_annotation_running_total"}, "test.edw.not_null_agt_asset_stages_annotation_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "annotation_count", "model": "{{ ref('agt_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_asset_stages_annotation_count"], "unique_id": "test.edw.not_null_agt_asset_stages_annotation_count", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_asset_stages_annotation_count.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_asset_stages_annotation_count", "alias": "not_null_agt_asset_stages_annotation_count", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_asset_stages_annotation_count.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_asset_stages\nwhere annotation_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "annotation_count"}, "test.edw.not_null_agt_datasets_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_id"], "unique_id": "test.edw.not_null_agt_datasets_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_id.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_id", "alias": "not_null_agt_datasets_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.unique_agt_datasets_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_agt_datasets_dataset_id"], "unique_id": "test.edw.unique_agt_datasets_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_agt_datasets_dataset_id.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "unique_agt_datasets_dataset_id", "alias": "unique_agt_datasets_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/unique_agt_datasets_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        dataset_id\n\n    from analytics_dev.scratch_brana.agt_datasets\n    where dataset_id is not null\n    group by dataset_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('agt_asset_stages')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.agt_asset_stages", "model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_"], "unique_id": "test.edw.relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_agt_datasets_21bec7b892db89d0314401e5e76ad77b.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_", "alias": "relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"], ["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/relationships_agt_datasets_21bec7b892db89d0314401e5e76ad77b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_datasets\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_asset_stages\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.not_null_agt_datasets_dataset_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_name", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_name"], "unique_id": "test.edw.not_null_agt_datasets_dataset_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_name.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_name", "alias": "not_null_agt_datasets_dataset_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_name"}, "test.edw.not_null_agt_datasets_dataset_owner_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_owner_id", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_owner_id"], "unique_id": "test.edw.not_null_agt_datasets_dataset_owner_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_owner_id.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_owner_id", "alias": "not_null_agt_datasets_dataset_owner_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_owner_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_owner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_owner_id"}, "test.edw.not_null_agt_datasets_cloudfactory_workstream_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cloudfactory_workstream_id", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_cloudfactory_workstream_id"], "unique_id": "test.edw.not_null_agt_datasets_cloudfactory_workstream_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_cloudfactory_workstream_id.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_cloudfactory_workstream_id", "alias": "not_null_agt_datasets_cloudfactory_workstream_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_cloudfactory_workstream_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere cloudfactory_workstream_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cloudfactory_workstream_id"}, "test.edw.not_null_agt_datasets_dataset_inserted_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_inserted_at", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_inserted_at"], "unique_id": "test.edw.not_null_agt_datasets_dataset_inserted_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_inserted_at.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_inserted_at", "alias": "not_null_agt_datasets_dataset_inserted_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_inserted_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_inserted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_inserted_at"}, "test.edw.not_null_agt_datasets_dataset_inserted_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_inserted_date", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_inserted_date"], "unique_id": "test.edw.not_null_agt_datasets_dataset_inserted_date", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_inserted_date.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_inserted_date", "alias": "not_null_agt_datasets_dataset_inserted_date", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_inserted_date.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_inserted_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_inserted_date"}, "test.edw.not_null_agt_datasets_dataset_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_updated_at", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_updated_at"], "unique_id": "test.edw.not_null_agt_datasets_dataset_updated_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_updated_at.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_updated_at", "alias": "not_null_agt_datasets_dataset_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_updated_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_updated_at"}, "test.edw.not_null_agt_datasets_dataset_updated_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_updated_date", "model": "{{ ref('agt_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.agt_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_agt_datasets_dataset_updated_date"], "unique_id": "test.edw.not_null_agt_datasets_dataset_updated_date", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_agt_datasets_dataset_updated_date.sql", "original_file_path": "models/marts/clients/agt/schema.yml", "name": "not_null_agt_datasets_dataset_updated_date", "alias": "not_null_agt_datasets_dataset_updated_date", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/agt/schema.yml/schema_test/not_null_agt_datasets_dataset_updated_date.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.agt_datasets\nwhere dataset_updated_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_updated_date"}, "test.edw.not_null_ibotta_asset_stages_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('ibotta_asset_stages') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_ibotta_asset_stages_email"], "unique_id": "test.edw.not_null_ibotta_asset_stages_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_ibotta_asset_stages_email.sql", "original_file_path": "models/marts/clients/ibotta/schema.yml", "name": "not_null_ibotta_asset_stages_email", "alias": "not_null_ibotta_asset_stages_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["ibotta_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "column_name": "email"}, "test.edw.not_null_abyss_asset_stages_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_dataset_id"], "unique_id": "test.edw.not_null_abyss_asset_stages_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_dataset_id.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_dataset_id", "alias": "not_null_abyss_asset_stages_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere dataset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('abyss_datasets')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.abyss_datasets", "model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_"], "unique_id": "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_abyss_asset_stages_ff9c4852cbfa712a539c56e14515e76b.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_", "alias": "relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_datasets"], ["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/relationships_abyss_asset_stages_ff9c4852cbfa712a539c56e14515e76b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from analytics_dev.scratch_brana.abyss_asset_stages\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.abyss_datasets\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_v7_abyss')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": false, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_"], "unique_id": "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_abyss_asset_stages_ebf8d45f857d8c7f0b84ae54591056c3.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_", "alias": "relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_abyss"], ["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "column_name": "dataset_id"}, "test.edw.not_null_abyss_asset_stages_cw_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cw_email", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_cw_email"], "unique_id": "test.edw.not_null_abyss_asset_stages_cw_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_cw_email.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_cw_email", "alias": "not_null_abyss_asset_stages_cw_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_cw_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere cw_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cw_email"}, "test.edw.not_null_abyss_asset_stages_task_submitted_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_submitted_at", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_task_submitted_at"], "unique_id": "test.edw.not_null_abyss_asset_stages_task_submitted_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_task_submitted_at.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_task_submitted_at", "alias": "not_null_abyss_asset_stages_task_submitted_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_task_submitted_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere task_submitted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_submitted_at"}, "test.edw.not_null_abyss_asset_stages_task_submitted_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_submitted_date", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_task_submitted_date"], "unique_id": "test.edw.not_null_abyss_asset_stages_task_submitted_date", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_task_submitted_date.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_task_submitted_date", "alias": "not_null_abyss_asset_stages_task_submitted_date", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_task_submitted_date.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere task_submitted_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_submitted_date"}, "test.edw.not_null_abyss_asset_stages_asset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_id", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_asset_id"], "unique_id": "test.edw.not_null_abyss_asset_stages_asset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_asset_id.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_asset_id", "alias": "not_null_abyss_asset_stages_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_asset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_id"}, "test.edw.not_null_abyss_asset_stages_from_stage_number": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_stage_number", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_from_stage_number"], "unique_id": "test.edw.not_null_abyss_asset_stages_from_stage_number", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_from_stage_number.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_from_stage_number", "alias": "not_null_abyss_asset_stages_from_stage_number", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_from_stage_number.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere from_stage_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_stage_number"}, "test.edw.not_null_abyss_asset_stages_to_stage_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_stage_name", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_to_stage_name"], "unique_id": "test.edw.not_null_abyss_asset_stages_to_stage_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_to_stage_name.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_to_stage_name", "alias": "not_null_abyss_asset_stages_to_stage_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_to_stage_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere to_stage_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_stage_name"}, "test.edw.not_null_abyss_asset_stages_stage_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stage_duration", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_stage_duration"], "unique_id": "test.edw.not_null_abyss_asset_stages_stage_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_stage_duration.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_stage_duration", "alias": "not_null_abyss_asset_stages_stage_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_stage_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere stage_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stage_duration"}, "test.edw.not_null_abyss_asset_stages_asset_annotation_running_total": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_annotation_running_total", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_asset_annotation_running_total"], "unique_id": "test.edw.not_null_abyss_asset_stages_asset_annotation_running_total", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_asset_annotation_running_total.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_asset_annotation_running_total", "alias": "not_null_abyss_asset_stages_asset_annotation_running_total", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_asset_annotation_running_total.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere asset_annotation_running_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_annotation_running_total"}, "test.edw.not_null_abyss_asset_stages_annotation_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "annotation_count", "model": "{{ ref('abyss_asset_stages') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_asset_stages"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_asset_stages_annotation_count"], "unique_id": "test.edw.not_null_abyss_asset_stages_annotation_count", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_asset_stages_annotation_count.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_asset_stages_annotation_count", "alias": "not_null_abyss_asset_stages_annotation_count", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_asset_stages_annotation_count.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_asset_stages\nwhere annotation_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "annotation_count"}, "test.edw.not_null_abyss_datasets_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('abyss_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_datasets_dataset_id"], "unique_id": "test.edw.not_null_abyss_datasets_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_datasets_dataset_id.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_datasets_dataset_id", "alias": "not_null_abyss_datasets_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_datasets_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_datasets\nwhere dataset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.unique_abyss_datasets_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('abyss_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.abyss_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_abyss_datasets_dataset_id"], "unique_id": "test.edw.unique_abyss_datasets_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_abyss_datasets_dataset_id.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "unique_abyss_datasets_dataset_id", "alias": "unique_abyss_datasets_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/unique_abyss_datasets_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        dataset_id\n\n    from analytics_dev.scratch_brana.abyss_datasets\n    where dataset_id is not null\n    group by dataset_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('abyss_asset_stages')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('abyss_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.abyss_asset_stages", "model.edw.abyss_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_"], "unique_id": "test.edw.relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_abyss_datasets_5e9b323e41ad049b49239744b7d315aa.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_", "alias": "relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"], ["abyss_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/relationships_abyss_datasets_5e9b323e41ad049b49239744b7d315aa.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from analytics_dev.scratch_brana.abyss_datasets\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.abyss_asset_stages\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.not_null_abyss_datasets_dataset_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_name", "model": "{{ ref('abyss_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_datasets_dataset_name"], "unique_id": "test.edw.not_null_abyss_datasets_dataset_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_datasets_dataset_name.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_datasets_dataset_name", "alias": "not_null_abyss_datasets_dataset_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_datasets_dataset_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_datasets\nwhere dataset_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_name"}, "test.edw.not_null_abyss_datasets_cloudfactory_workstream_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cloudfactory_workstream_id", "model": "{{ ref('abyss_datasets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.abyss_datasets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_abyss_datasets_cloudfactory_workstream_id"], "unique_id": "test.edw.not_null_abyss_datasets_cloudfactory_workstream_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_abyss_datasets_cloudfactory_workstream_id.sql", "original_file_path": "models/marts/clients/abyss/schema.yml", "name": "not_null_abyss_datasets_cloudfactory_workstream_id", "alias": "not_null_abyss_datasets_cloudfactory_workstream_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_datasets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/clients/abyss/schema.yml/schema_test/not_null_abyss_datasets_cloudfactory_workstream_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.abyss_datasets\nwhere cloudfactory_workstream_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cloudfactory_workstream_id"}, "test.edw.unique_dim_course_course_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "course_key", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_dim_course_course_key"], "unique_id": "test.edw.unique_dim_course_course_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_dim_course_course_key.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "unique_dim_course_course_key", "alias": "unique_dim_course_course_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/unique_dim_course_course_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        course_key\n\n    from analytics_dev.scratch_brana.dim_course\n    where course_key is not null\n    group by course_key\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_key"}, "test.edw.not_null_dim_course_course_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_key", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_course_course_key"], "unique_id": "test.edw.not_null_dim_course_course_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_course_course_key.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_course_course_key", "alias": "not_null_dim_course_course_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_course_course_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_course\nwhere course_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_key"}, "test.edw.not_null_dim_course_course_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_name", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_course_course_name"], "unique_id": "test.edw.not_null_dim_course_course_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_course_course_name.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_course_course_name", "alias": "not_null_dim_course_course_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_course_course_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_course\nwhere course_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_name"}, "test.edw.not_null_dim_course_category_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_name", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_course_category_name"], "unique_id": "test.edw.not_null_dim_course_category_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_course_category_name.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_course_category_name", "alias": "not_null_dim_course_category_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_course_category_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_course\nwhere category_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "category_name"}, "test.edw.not_null_dim_course_course_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_status", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_course_course_status"], "unique_id": "test.edw.not_null_dim_course_course_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_course_course_status.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_course_course_status", "alias": "not_null_dim_course_course_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_course_course_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_course\nwhere course_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_status"}, "test.edw.not_null_dim_course_is_shared": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_shared", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_course_is_shared"], "unique_id": "test.edw.not_null_dim_course_is_shared", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_course_is_shared.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_course_is_shared", "alias": "not_null_dim_course_is_shared", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_course_is_shared.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_course\nwhere is_shared is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_shared"}, "test.edw.not_null_dim_course_course_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_id", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_course_course_id"], "unique_id": "test.edw.not_null_dim_course_course_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_course_course_id.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_course_course_id", "alias": "not_null_dim_course_course_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_course_course_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_course\nwhere course_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.relationships_dim_course_course_id__course_id__ref_base_tlms_courses_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_courses')", "field": "course_id", "column_name": "course_id", "model": "{{ ref('dim_course') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_courses", "model.edw.dim_course"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_dim_course_course_id__course_id__ref_base_tlms_courses_"], "unique_id": "test.edw.relationships_dim_course_course_id__course_id__ref_base_tlms_courses_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_dim_course_1c940e676e6d35504788d30ccdc1fffc.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "relationships_dim_course_course_id__course_id__ref_base_tlms_courses_", "alias": "relationships_dim_course_course_id__course_id__ref_base_tlms_courses_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_courses"], ["dim_course"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/relationships_dim_course_1c940e676e6d35504788d30ccdc1fffc.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select course_id as id from analytics_dev.scratch_brana.dim_course\n) as child\nleft join (\n    select course_id as id from psa_dev.scratch_brana.base_tlms_courses\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.not_null_dim_learner_learner_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "learner_key", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_learner_learner_key"], "unique_id": "test.edw.not_null_dim_learner_learner_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_learner_learner_key.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_learner_learner_key", "alias": "not_null_dim_learner_learner_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_learner_learner_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_learner\nwhere learner_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_key"}, "test.edw.unique_dim_learner_learner_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "learner_key", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_dim_learner_learner_key"], "unique_id": "test.edw.unique_dim_learner_learner_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_dim_learner_learner_key.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "unique_dim_learner_learner_key", "alias": "unique_dim_learner_learner_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/unique_dim_learner_learner_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        learner_key\n\n    from analytics_dev.scratch_brana.dim_learner\n    where learner_key is not null\n    group by learner_key\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_key"}, "test.edw.not_null_dim_learner_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_learner_email"], "unique_id": "test.edw.not_null_dim_learner_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_learner_email.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_learner_email", "alias": "not_null_dim_learner_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_learner_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_learner\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.not_null_dim_learner_country": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_learner_country"], "unique_id": "test.edw.not_null_dim_learner_country", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_learner_country.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_learner_country", "alias": "not_null_dim_learner_country", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_learner_country.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_learner\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country"}, "test.edw.not_null_dim_learner_worker_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_status", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_learner_worker_status"], "unique_id": "test.edw.not_null_dim_learner_worker_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_learner_worker_status.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_learner_worker_status", "alias": "not_null_dim_learner_worker_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_learner_worker_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_learner\nwhere worker_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_status"}, "test.edw.accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Applying", "Disqualified", "Active", "Inactive", "Screened", "Onboarded", "Unknown"], "column_name": "worker_status", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown"], "unique_id": "test.edw.accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_dim_learner_2864ef0dcb34c711964820c4262d9045.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown", "alias": "accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/accepted_values_dim_learner_2864ef0dcb34c711964820c4262d9045.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        worker_status as value_field\n\n    from analytics_dev.scratch_brana.dim_learner\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'Applying','Disqualified','Active','Inactive','Screened','Onboarded','Unknown'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_status"}, "test.edw.not_null_dim_learner_learner_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "learner_id", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_learner_learner_id"], "unique_id": "test.edw.not_null_dim_learner_learner_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_learner_learner_id.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_dim_learner_learner_id", "alias": "not_null_dim_learner_learner_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_dim_learner_learner_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_learner\nwhere learner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_id"}, "test.edw.relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_users')", "field": "user_id", "column_name": "learner_id", "model": "{{ ref('dim_learner') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_users", "model.edw.dim_learner"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_"], "unique_id": "test.edw.relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_dim_learner_1302880ed944299cbc3aede51fe0afc5.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_", "alias": "relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_users"], ["dim_learner"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/relationships_dim_learner_1302880ed944299cbc3aede51fe0afc5.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select learner_id as id from analytics_dev.scratch_brana.dim_learner\n) as child\nleft join (\n    select user_id as id from psa_dev.scratch_brana.base_tlms_users\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_id"}, "test.edw.not_null_fact_learning_learner_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "learner_key", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_learning_learner_key"], "unique_id": "test.edw.not_null_fact_learning_learner_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_learning_learner_key.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_fact_learning_learner_key", "alias": "not_null_fact_learning_learner_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_fact_learning_learner_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_learning\nwhere learner_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_key"}, "test.edw.relationships_fact_learning_learner_key__learner_key__ref_dim_learner_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_learner')", "field": "learner_key", "column_name": "learner_key", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_learner", "model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_learning_learner_key__learner_key__ref_dim_learner_"], "unique_id": "test.edw.relationships_fact_learning_learner_key__learner_key__ref_dim_learner_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_learning_d45635fdd49e137bd39005ba62d97398.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "relationships_fact_learning_learner_key__learner_key__ref_dim_learner_", "alias": "relationships_fact_learning_learner_key__learner_key__ref_dim_learner_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_learner"], ["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/relationships_fact_learning_d45635fdd49e137bd39005ba62d97398.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select learner_key as id from analytics_dev.scratch_brana.fact_learning\n) as child\nleft join (\n    select learner_key as id from analytics_dev.scratch_brana.dim_learner\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_key"}, "test.edw.not_null_fact_learning_course_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_key", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_learning_course_key"], "unique_id": "test.edw.not_null_fact_learning_course_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_learning_course_key.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_fact_learning_course_key", "alias": "not_null_fact_learning_course_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_fact_learning_course_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_learning\nwhere course_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_key"}, "test.edw.relationships_fact_learning_course_key__course_key__ref_dim_course_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_course')", "field": "course_key", "column_name": "course_key", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_course", "model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_learning_course_key__course_key__ref_dim_course_"], "unique_id": "test.edw.relationships_fact_learning_course_key__course_key__ref_dim_course_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_learning_07d149d561bea06038f509e9e627a979.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "relationships_fact_learning_course_key__course_key__ref_dim_course_", "alias": "relationships_fact_learning_course_key__course_key__ref_dim_course_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_course"], ["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/relationships_fact_learning_07d149d561bea06038f509e9e627a979.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select course_key as id from analytics_dev.scratch_brana.fact_learning\n) as child\nleft join (\n    select course_key as id from analytics_dev.scratch_brana.dim_course\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_key"}, "test.edw.not_null_fact_learning_completed_percent": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "completed_percent", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_learning_completed_percent"], "unique_id": "test.edw.not_null_fact_learning_completed_percent", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_learning_completed_percent.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_fact_learning_completed_percent", "alias": "not_null_fact_learning_completed_percent", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_fact_learning_completed_percent.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_learning\nwhere completed_percent is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "completed_percent"}, "test.edw.not_null_fact_learning_learning_total_time_seconds": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "learning_total_time_seconds", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_learning_learning_total_time_seconds"], "unique_id": "test.edw.not_null_fact_learning_learning_total_time_seconds", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_learning_learning_total_time_seconds.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_fact_learning_learning_total_time_seconds", "alias": "not_null_fact_learning_learning_total_time_seconds", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_fact_learning_learning_total_time_seconds.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_learning\nwhere learning_total_time_seconds is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learning_total_time_seconds"}, "test.edw.not_null_fact_learning_learner_course_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "learner_course_count", "model": "{{ ref('fact_learning') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_learning"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_learning_learner_course_count"], "unique_id": "test.edw.not_null_fact_learning_learner_course_count", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_learning_learner_course_count.sql", "original_file_path": "models/marts/cfa/schema.yml", "name": "not_null_fact_learning_learner_course_count", "alias": "not_null_fact_learning_learner_course_count", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_learning"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/cfa/schema.yml/schema_test/not_null_fact_learning_learner_course_count.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_learning\nwhere learner_course_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "learner_course_count"}, "test.edw.not_null_time_entries_time_entry_date_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_entry_date_key", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_time_entry_date_key"], "unique_id": "test.edw.not_null_time_entries_time_entry_date_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_time_entry_date_key.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_time_entry_date_key", "alias": "not_null_time_entries_time_entry_date_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_time_entry_date_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere time_entry_date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "time_entry_date_key"}, "test.edw.not_null_time_entries_client_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_key", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_client_key"], "unique_id": "test.edw.not_null_time_entries_client_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_client_key.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_client_key", "alias": "not_null_time_entries_client_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_client_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere client_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.not_null_time_entries_client_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_name", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_client_name"], "unique_id": "test.edw.not_null_time_entries_client_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_client_name.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_client_name", "alias": "not_null_time_entries_client_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_client_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere client_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_name"}, "test.edw.not_null_time_entries_project_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_key", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_project_key"], "unique_id": "test.edw.not_null_time_entries_project_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_project_key.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_project_key", "alias": "not_null_time_entries_project_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_project_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere project_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_key"}, "test.edw.not_null_time_entries_project_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_name", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_project_name"], "unique_id": "test.edw.not_null_time_entries_project_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_project_name.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_project_name", "alias": "not_null_time_entries_project_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_project_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere project_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_name"}, "test.edw.not_null_time_entries_workstream_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workstream_name", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_workstream_name"], "unique_id": "test.edw.not_null_time_entries_workstream_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_workstream_name.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_workstream_name", "alias": "not_null_time_entries_workstream_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_workstream_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere workstream_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_name"}, "test.edw.not_null_time_entries_worker_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_worker_id"], "unique_id": "test.edw.not_null_time_entries_worker_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_worker_id.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_worker_id", "alias": "not_null_time_entries_worker_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_worker_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_id"}, "test.edw.not_null_time_entries_worker_email_address": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_email_address", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_worker_email_address"], "unique_id": "test.edw.not_null_time_entries_worker_email_address", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_worker_email_address.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_worker_email_address", "alias": "not_null_time_entries_worker_email_address", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_worker_email_address.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere worker_email_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_email_address"}, "test.edw.not_null_time_entries_task_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_key", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_task_key"], "unique_id": "test.edw.not_null_time_entries_task_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_task_key.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_task_key", "alias": "not_null_time_entries_task_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_task_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere task_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_key"}, "test.edw.not_null_time_entries_is_billable": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_billable", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_is_billable"], "unique_id": "test.edw.not_null_time_entries_is_billable", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_is_billable.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_is_billable", "alias": "not_null_time_entries_is_billable", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_is_billable.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere is_billable is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_billable"}, "test.edw.not_null_time_entries_schedule_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "schedule_id", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_schedule_id"], "unique_id": "test.edw.not_null_time_entries_schedule_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_schedule_id.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_schedule_id", "alias": "not_null_time_entries_schedule_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_schedule_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere schedule_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "schedule_id"}, "test.edw.not_null_time_entries_schedule_start_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "schedule_start_at", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_schedule_start_at"], "unique_id": "test.edw.not_null_time_entries_schedule_start_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_schedule_start_at.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_schedule_start_at", "alias": "not_null_time_entries_schedule_start_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_schedule_start_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere schedule_start_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "schedule_start_at"}, "test.edw.not_null_time_entries_time_entry_start_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_entry_start_at", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_time_entry_start_at"], "unique_id": "test.edw.not_null_time_entries_time_entry_start_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_time_entry_start_at.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_time_entry_start_at", "alias": "not_null_time_entries_time_entry_start_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_time_entry_start_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere time_entry_start_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "time_entry_start_at"}, "test.edw.not_null_time_entries_time_entry_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_entry_type", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_time_entry_type"], "unique_id": "test.edw.not_null_time_entries_time_entry_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_time_entry_type.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_time_entry_type", "alias": "not_null_time_entries_time_entry_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_time_entry_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere time_entry_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "time_entry_type"}, "test.edw.accepted_values_time_entries_time_entry_type__training__production": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["training", "production"], "column_name": "time_entry_type", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_time_entries_time_entry_type__training__production"], "unique_id": "test.edw.accepted_values_time_entries_time_entry_type__training__production", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_time_entries_56dc09d896ac0c7d7288636197946cf9.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "accepted_values_time_entries_time_entry_type__training__production", "alias": "accepted_values_time_entries_time_entry_type__training__production", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/accepted_values_time_entries_56dc09d896ac0c7d7288636197946cf9.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        time_entry_type as value_field\n\n    from analytics_dev.scratch_brana.time_entries\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'training','production'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "time_entry_type"}, "test.edw.not_null_time_entries_time_entry_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_entry_duration", "model": "{{ ref('time_entries') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.time_entries"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_time_entries_time_entry_duration"], "unique_id": "test.edw.not_null_time_entries_time_entry_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_time_entries_time_entry_duration.sql", "original_file_path": "models/marts/schedules/schema/time_entries.yml", "name": "not_null_time_entries_time_entry_duration", "alias": "not_null_time_entries_time_entry_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["time_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/schedules/schema/time_entries.yml/schema_test/not_null_time_entries_time_entry_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.time_entries\nwhere time_entry_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "time_entry_duration"}, "test.edw.not_null_dim_client_client_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_key", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_key"], "unique_id": "test.edw.not_null_dim_client_client_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_key.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_key", "alias": "not_null_dim_client_client_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.unique_dim_client_client_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "client_key", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_dim_client_client_key"], "unique_id": "test.edw.unique_dim_client_client_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_dim_client_client_key.sql", "original_file_path": "models/marts/common/schema.yml", "name": "unique_dim_client_client_key", "alias": "unique_dim_client_client_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/unique_dim_client_client_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        client_key\n\n    from analytics_dev.scratch_brana.dim_client\n    where client_key is not null\n    group by client_key\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.not_null_dim_client_client_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_id"], "unique_id": "test.edw.not_null_dim_client_client_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_id.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_id", "alias": "not_null_dim_client_client_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_id"}, "test.edw.unique_dim_client_client_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "client_id", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_dim_client_client_id"], "unique_id": "test.edw.unique_dim_client_client_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_dim_client_client_id.sql", "original_file_path": "models/marts/common/schema.yml", "name": "unique_dim_client_client_id", "alias": "unique_dim_client_client_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/unique_dim_client_client_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        client_id\n\n    from analytics_dev.scratch_brana.dim_client\n    where client_id is not null\n    group by client_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_id"}, "test.edw.not_null_dim_client_client_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_name", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_name"], "unique_id": "test.edw.not_null_dim_client_client_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_name.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_name", "alias": "not_null_dim_client_client_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_name"}, "test.edw.not_null_dim_client_delivery_manager": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_manager", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_delivery_manager"], "unique_id": "test.edw.not_null_dim_client_delivery_manager", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_delivery_manager.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_delivery_manager", "alias": "not_null_dim_client_delivery_manager", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_delivery_manager.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere delivery_manager is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "delivery_manager"}, "test.edw.not_null_dim_client_delivery_owner": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "delivery_owner", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_delivery_owner"], "unique_id": "test.edw.not_null_dim_client_delivery_owner", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_delivery_owner.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_delivery_owner", "alias": "not_null_dim_client_delivery_owner", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_delivery_owner.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere delivery_owner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "delivery_owner"}, "test.edw.not_null_dim_client_lead_channel": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lead_channel", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_lead_channel"], "unique_id": "test.edw.not_null_dim_client_lead_channel", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_lead_channel.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_lead_channel", "alias": "not_null_dim_client_lead_channel", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_lead_channel.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere lead_channel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lead_channel"}, "test.edw.not_null_dim_client_lead_source": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lead_source", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_lead_source"], "unique_id": "test.edw.not_null_dim_client_lead_source", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_lead_source.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_lead_source", "alias": "not_null_dim_client_lead_source", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_lead_source.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere lead_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lead_source"}, "test.edw.not_null_dim_client_last_round_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_round_type", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_last_round_type"], "unique_id": "test.edw.not_null_dim_client_last_round_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_last_round_type.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_last_round_type", "alias": "not_null_dim_client_last_round_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_last_round_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere last_round_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "last_round_type"}, "test.edw.not_null_dim_client_client_industry": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_industry", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_industry"], "unique_id": "test.edw.not_null_dim_client_client_industry", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_industry.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_industry", "alias": "not_null_dim_client_client_industry", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_industry.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_industry is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_industry"}, "test.edw.not_null_dim_client_ideal_client_profile_score": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ideal_client_profile_score", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_ideal_client_profile_score"], "unique_id": "test.edw.not_null_dim_client_ideal_client_profile_score", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_ideal_client_profile_score.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_ideal_client_profile_score", "alias": "not_null_dim_client_ideal_client_profile_score", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_ideal_client_profile_score.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere ideal_client_profile_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ideal_client_profile_score"}, "test.edw.not_null_dim_client_crunchbase_category": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "crunchbase_category", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_crunchbase_category"], "unique_id": "test.edw.not_null_dim_client_crunchbase_category", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_crunchbase_category.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_crunchbase_category", "alias": "not_null_dim_client_crunchbase_category", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_crunchbase_category.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere crunchbase_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "crunchbase_category"}, "test.edw.not_null_dim_client_client_country": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_country", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_country"], "unique_id": "test.edw.not_null_dim_client_client_country", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_country.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_country", "alias": "not_null_dim_client_client_country", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_country.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_country"}, "test.edw.not_null_dim_client_client_state": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_state", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_state"], "unique_id": "test.edw.not_null_dim_client_client_state", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_state.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_state", "alias": "not_null_dim_client_client_state", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_state.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_state is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_state"}, "test.edw.not_null_dim_client_client_city": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_city", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_city"], "unique_id": "test.edw.not_null_dim_client_client_city", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_city.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_city", "alias": "not_null_dim_client_client_city", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_city.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_city"}, "test.edw.not_null_dim_client_client_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_status", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_status"], "unique_id": "test.edw.not_null_dim_client_client_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_status.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_status", "alias": "not_null_dim_client_client_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_status"}, "test.edw.not_null_dim_client_annual_revenue": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "annual_revenue", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_annual_revenue"], "unique_id": "test.edw.not_null_dim_client_annual_revenue", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_annual_revenue.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_annual_revenue", "alias": "not_null_dim_client_annual_revenue", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_annual_revenue.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere annual_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "annual_revenue"}, "test.edw.not_null_dim_client_employee_range": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_range", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_employee_range"], "unique_id": "test.edw.not_null_dim_client_employee_range", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_employee_range.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_employee_range", "alias": "not_null_dim_client_employee_range", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_employee_range.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere employee_range is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "employee_range"}, "test.edw.not_null_dim_client_client_phone": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_phone", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_phone"], "unique_id": "test.edw.not_null_dim_client_client_phone", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_phone.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_phone", "alias": "not_null_dim_client_client_phone", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_phone.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_phone is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_phone"}, "test.edw.not_null_dim_client_primary_focus": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "primary_focus", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_primary_focus"], "unique_id": "test.edw.not_null_dim_client_primary_focus", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_primary_focus.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_primary_focus", "alias": "not_null_dim_client_primary_focus", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_primary_focus.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere primary_focus is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "primary_focus"}, "test.edw.not_null_dim_client_client_region": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_region", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_region"], "unique_id": "test.edw.not_null_dim_client_client_region", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_region.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_region", "alias": "not_null_dim_client_client_region", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_region.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_region is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_region"}, "test.edw.not_null_dim_client_client_segment": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_segment", "model": "{{ ref('dim_client') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_client"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_client_client_segment"], "unique_id": "test.edw.not_null_dim_client_client_segment", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_client_client_segment.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_client_client_segment", "alias": "not_null_dim_client_client_segment", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_client_client_segment.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_client\nwhere client_segment is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_segment"}, "test.edw.not_null_dim_workstream_workstream_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workstream_key", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_workstream_key"], "unique_id": "test.edw.not_null_dim_workstream_workstream_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_workstream_key.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_workstream_key", "alias": "not_null_dim_workstream_workstream_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_workstream_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere workstream_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_key"}, "test.edw.not_null_dim_workstream_workstream_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workstream_name", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_workstream_name"], "unique_id": "test.edw.not_null_dim_workstream_workstream_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_workstream_name.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_workstream_name", "alias": "not_null_dim_workstream_workstream_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_workstream_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere workstream_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_name"}, "test.edw.not_null_dim_workstream_commitment": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "commitment", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_commitment"], "unique_id": "test.edw.not_null_dim_workstream_commitment", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_commitment.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_commitment", "alias": "not_null_dim_workstream_commitment", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_commitment.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere commitment is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "commitment"}, "test.edw.not_null_dim_workstream_package_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "package_type", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_package_type"], "unique_id": "test.edw.not_null_dim_workstream_package_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_package_type.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_package_type", "alias": "not_null_dim_workstream_package_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_package_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere package_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "package_type"}, "test.edw.not_null_dim_workstream_package_version": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "package_version", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_package_version"], "unique_id": "test.edw.not_null_dim_workstream_package_version", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_package_version.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_package_version", "alias": "not_null_dim_workstream_package_version", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_package_version.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere package_version is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "package_version"}, "test.edw.not_null_dim_workstream_workstream_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workstream_status", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_workstream_status"], "unique_id": "test.edw.not_null_dim_workstream_workstream_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_workstream_status.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_workstream_status", "alias": "not_null_dim_workstream_workstream_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_workstream_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere workstream_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_status"}, "test.edw.not_null_dim_workstream_billing_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "billing_type", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_billing_type"], "unique_id": "test.edw.not_null_dim_workstream_billing_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_billing_type.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_billing_type", "alias": "not_null_dim_workstream_billing_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_billing_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere billing_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "billing_type"}, "test.edw.not_null_dim_workstream_tool_access": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tool_access", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_tool_access"], "unique_id": "test.edw.not_null_dim_workstream_tool_access", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_tool_access.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_tool_access", "alias": "not_null_dim_workstream_tool_access", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_tool_access.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere tool_access is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tool_access"}, "test.edw.not_null_dim_workstream_connectivity": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "connectivity", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_connectivity"], "unique_id": "test.edw.not_null_dim_workstream_connectivity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_connectivity.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_connectivity", "alias": "not_null_dim_workstream_connectivity", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_connectivity.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere connectivity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "connectivity"}, "test.edw.not_null_dim_workstream_team_lead_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_lead_email", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_team_lead_email"], "unique_id": "test.edw.not_null_dim_workstream_team_lead_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_team_lead_email.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_team_lead_email", "alias": "not_null_dim_workstream_team_lead_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_team_lead_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere team_lead_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_lead_email"}, "test.edw.not_null_dim_workstream_tool_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tool_name", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_tool_name"], "unique_id": "test.edw.not_null_dim_workstream_tool_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_tool_name.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_tool_name", "alias": "not_null_dim_workstream_tool_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_tool_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere tool_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tool_name"}, "test.edw.not_null_dim_workstream_has_required_training": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_required_training", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_has_required_training"], "unique_id": "test.edw.not_null_dim_workstream_has_required_training", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_has_required_training.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_has_required_training", "alias": "not_null_dim_workstream_has_required_training", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_has_required_training.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere has_required_training is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "has_required_training"}, "test.edw.not_null_dim_workstream_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ ref('dim_workstream') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_workstream"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_workstream_type"], "unique_id": "test.edw.not_null_dim_workstream_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_workstream_type.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_workstream_type", "alias": "not_null_dim_workstream_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_workstream_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_workstream\nwhere type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "type"}, "test.edw.not_null_dim_worker_worker_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_key", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_worker_key"], "unique_id": "test.edw.not_null_dim_worker_worker_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_worker_key.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_worker_key", "alias": "not_null_dim_worker_worker_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_worker_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere worker_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_key"}, "test.edw.not_null_dim_worker_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_email"], "unique_id": "test.edw.not_null_dim_worker_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_email.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_email", "alias": "not_null_dim_worker_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.not_null_dim_worker_full_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "full_name", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_full_name"], "unique_id": "test.edw.not_null_dim_worker_full_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_full_name.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_full_name", "alias": "not_null_dim_worker_full_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_full_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere full_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "full_name"}, "test.edw.not_null_dim_worker_country": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_country"], "unique_id": "test.edw.not_null_dim_worker_country", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_country.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_country", "alias": "not_null_dim_worker_country", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_country.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country"}, "test.edw.not_null_dim_worker_city": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_city"], "unique_id": "test.edw.not_null_dim_worker_city", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_city.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_city", "alias": "not_null_dim_worker_city", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_city.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "city"}, "test.edw.not_null_dim_worker_gender": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gender", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_gender"], "unique_id": "test.edw.not_null_dim_worker_gender", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_gender.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_gender", "alias": "not_null_dim_worker_gender", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_gender.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere gender is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gender"}, "test.edw.not_null_dim_worker_worker_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_type", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_worker_type"], "unique_id": "test.edw.not_null_dim_worker_worker_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_worker_type.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_worker_type", "alias": "not_null_dim_worker_worker_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_worker_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere worker_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_type"}, "test.edw.not_null_dim_worker_worker_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_status", "model": "{{ ref('dim_worker') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_worker"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_worker_worker_status"], "unique_id": "test.edw.not_null_dim_worker_worker_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_worker_worker_status.sql", "original_file_path": "models/marts/common/schema.yml", "name": "not_null_dim_worker_worker_status", "alias": "not_null_dim_worker_worker_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/common/schema.yml/schema_test/not_null_dim_worker_worker_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_worker\nwhere worker_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_status"}, "test.edw.not_null_dim_task_task_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_key", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_task_key"], "unique_id": "test.edw.not_null_dim_task_task_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_task_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_task_key", "alias": "not_null_dim_task_task_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_task_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task\nwhere task_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_key"}, "test.edw.not_null_dim_task_task_category": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_category", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_task_category"], "unique_id": "test.edw.not_null_dim_task_task_category", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_task_category.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_task_category", "alias": "not_null_dim_task_task_category", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_task_category.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task\nwhere task_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_category"}, "test.edw.accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Review Task", "Work Task", "Unknown", "No Match"], "column_name": "task_category", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match"], "unique_id": "test.edw.accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_dim_task_520a1bcc305c5a312d81bd2f2b01a669.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match", "alias": "accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/accepted_values_dim_task_520a1bcc305c5a312d81bd2f2b01a669.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        task_category as value_field\n\n    from analytics_dev.scratch_brana.dim_task\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'Review Task','Work Task','Unknown','No Match'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_category"}, "test.edw.not_null_dim_task_task_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_type", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_task_type"], "unique_id": "test.edw.not_null_dim_task_task_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_task_type.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_task_type", "alias": "not_null_dim_task_task_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_task_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task\nwhere task_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_type"}, "test.edw.not_null_dim_task_lvl1": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lvl1", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_lvl1"], "unique_id": "test.edw.not_null_dim_task_lvl1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_lvl1.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_lvl1", "alias": "not_null_dim_task_lvl1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_lvl1.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task\nwhere lvl1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lvl1"}, "test.edw.not_null_dim_task_lvl2": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lvl2", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_lvl2"], "unique_id": "test.edw.not_null_dim_task_lvl2", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_lvl2.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_lvl2", "alias": "not_null_dim_task_lvl2", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_lvl2.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task\nwhere lvl2 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "lvl2"}, "test.edw.not_null_dim_task_task_full_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_full_name", "model": "{{ ref('dim_task') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_task_full_name"], "unique_id": "test.edw.not_null_dim_task_task_full_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_task_full_name.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_task_full_name", "alias": "not_null_dim_task_task_full_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_task_full_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task\nwhere task_full_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_full_name"}, "test.edw.not_null_fact_reviews_workstream_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workstream_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_workstream_key"], "unique_id": "test.edw.not_null_fact_reviews_workstream_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_workstream_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_workstream_key", "alias": "not_null_fact_reviews_workstream_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_workstream_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere workstream_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_key"}, "test.edw.relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_workstream')", "field": "workstream_key", "column_name": "workstream_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_workstream", "model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_"], "unique_id": "test.edw.relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_reviews_b470cf7400287930f1de1f4db1b9a230.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_", "alias": "relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"], ["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_reviews_b470cf7400287930f1de1f4db1b9a230.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select workstream_key as id from analytics_dev.scratch_brana.fact_reviews\n) as child\nleft join (\n    select workstream_key as id from analytics_dev.scratch_brana.dim_workstream\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_key"}, "test.edw.not_null_fact_reviews_worker_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_worker_key"], "unique_id": "test.edw.not_null_fact_reviews_worker_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_worker_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_worker_key", "alias": "not_null_fact_reviews_worker_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_worker_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere worker_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_key"}, "test.edw.relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_worker')", "field": "worker_key", "column_name": "worker_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_worker", "model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_"], "unique_id": "test.edw.relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_reviews_711b6c506cbe7b4828c8c26b69abaa5c.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_", "alias": "relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"], ["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_reviews_711b6c506cbe7b4828c8c26b69abaa5c.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select worker_key as id from analytics_dev.scratch_brana.fact_reviews\n) as child\nleft join (\n    select worker_key as id from analytics_dev.scratch_brana.dim_worker\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_key"}, "test.edw.not_null_fact_reviews_task_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_task_key"], "unique_id": "test.edw.not_null_fact_reviews_task_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_task_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_task_key", "alias": "not_null_fact_reviews_task_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_task_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere task_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_key"}, "test.edw.relationships_fact_reviews_task_key__task_key__ref_dim_task_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_task')", "field": "task_key", "column_name": "task_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_task", "model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_reviews_task_key__task_key__ref_dim_task_"], "unique_id": "test.edw.relationships_fact_reviews_task_key__task_key__ref_dim_task_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_reviews_b858a18ee3439b700d01a1f83a3d2d1d.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_reviews_task_key__task_key__ref_dim_task_", "alias": "relationships_fact_reviews_task_key__task_key__ref_dim_task_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"], ["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_reviews_b858a18ee3439b700d01a1f83a3d2d1d.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select task_key as id from analytics_dev.scratch_brana.fact_reviews\n) as child\nleft join (\n    select task_key as id from analytics_dev.scratch_brana.dim_task\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_key"}, "test.edw.not_null_fact_reviews_reviewer_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "reviewer_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_reviewer_key"], "unique_id": "test.edw.not_null_fact_reviews_reviewer_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_reviewer_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_reviewer_key", "alias": "not_null_fact_reviews_reviewer_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_reviewer_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere reviewer_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "reviewer_key"}, "test.edw.not_null_fact_reviews_review_start_date_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "review_start_date_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_review_start_date_key"], "unique_id": "test.edw.not_null_fact_reviews_review_start_date_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_review_start_date_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_review_start_date_key", "alias": "not_null_fact_reviews_review_start_date_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_review_start_date_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere review_start_date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_start_date_key"}, "test.edw.relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "review_start_date_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_date", "model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_"], "unique_id": "test.edw.relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_reviews_6393b3bfc4c0327546d106587ad54a4b.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_", "alias": "relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_date"], ["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_reviews_6393b3bfc4c0327546d106587ad54a4b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select review_start_date_key as id from analytics_dev.scratch_brana.fact_reviews\n) as child\nleft join (\n    select date_key as id from analytics_dev.scratch_brana.dim_date\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_start_date_key"}, "test.edw.not_null_fact_reviews_review_complete_date_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "review_complete_date_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_review_complete_date_key"], "unique_id": "test.edw.not_null_fact_reviews_review_complete_date_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_review_complete_date_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_review_complete_date_key", "alias": "not_null_fact_reviews_review_complete_date_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_review_complete_date_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere review_complete_date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_complete_date_key"}, "test.edw.relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "review_complete_date_key", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_date", "model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_"], "unique_id": "test.edw.relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_reviews_c05339f16d4de2b14a3b8c29bbdb2581.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_", "alias": "relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_date"], ["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_reviews_c05339f16d4de2b14a3b8c29bbdb2581.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select review_complete_date_key as id from analytics_dev.scratch_brana.fact_reviews\n) as child\nleft join (\n    select date_key as id from analytics_dev.scratch_brana.dim_date\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_complete_date_key"}, "test.edw.not_null_fact_reviews_review_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "review_count", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_review_count"], "unique_id": "test.edw.not_null_fact_reviews_review_count", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_review_count.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_review_count", "alias": "not_null_fact_reviews_review_count", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_review_count.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere review_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_count"}, "test.edw.not_null_fact_reviews_review_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "review_duration", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_review_duration"], "unique_id": "test.edw.not_null_fact_reviews_review_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_review_duration.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_review_duration", "alias": "not_null_fact_reviews_review_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_review_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere review_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_duration"}, "test.edw.not_null_fact_reviews_review_score": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "review_score", "model": "{{ ref('fact_reviews') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_reviews"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_reviews_review_score"], "unique_id": "test.edw.not_null_fact_reviews_review_score", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_reviews_review_score.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_reviews_review_score", "alias": "not_null_fact_reviews_review_score", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_reviews_review_score.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_reviews\nwhere review_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_score"}, "test.edw.not_null_fact_tasks_client_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_client_key"], "unique_id": "test.edw.not_null_fact_tasks_client_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_client_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_client_key", "alias": "not_null_fact_tasks_client_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_client_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere client_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.relationships_fact_tasks_client_key__client_key__ref_dim_client_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_client')", "field": "client_key", "column_name": "client_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_client", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_client_key__client_key__ref_dim_client_"], "unique_id": "test.edw.relationships_fact_tasks_client_key__client_key__ref_dim_client_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_2633d153ef595f6ff5377b9e40cec80b.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_client_key__client_key__ref_dim_client_", "alias": "relationships_fact_tasks_client_key__client_key__ref_dim_client_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_client"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_2633d153ef595f6ff5377b9e40cec80b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select client_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select client_key as id from analytics_dev.scratch_brana.dim_client\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.not_null_fact_tasks_workstream_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workstream_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_workstream_key"], "unique_id": "test.edw.not_null_fact_tasks_workstream_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_workstream_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_workstream_key", "alias": "not_null_fact_tasks_workstream_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_workstream_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere workstream_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_key"}, "test.edw.relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_workstream')", "field": "workstream_key", "column_name": "workstream_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_workstream", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_"], "unique_id": "test.edw.relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_b470cf7400287930f1de1f4db1b9a230.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_", "alias": "relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_workstream"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_b470cf7400287930f1de1f4db1b9a230.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select workstream_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select workstream_key as id from analytics_dev.scratch_brana.dim_workstream\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "workstream_key"}, "test.edw.not_null_fact_tasks_worker_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_worker_key"], "unique_id": "test.edw.not_null_fact_tasks_worker_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_worker_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_worker_key", "alias": "not_null_fact_tasks_worker_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_worker_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere worker_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_key"}, "test.edw.relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_worker')", "field": "worker_key", "column_name": "worker_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_worker", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_"], "unique_id": "test.edw.relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_711b6c506cbe7b4828c8c26b69abaa5c.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_", "alias": "relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_worker"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_711b6c506cbe7b4828c8c26b69abaa5c.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select worker_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select worker_key as id from analytics_dev.scratch_brana.dim_worker\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "worker_key"}, "test.edw.not_null_fact_tasks_task_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_task_key"], "unique_id": "test.edw.not_null_fact_tasks_task_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_task_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_task_key", "alias": "not_null_fact_tasks_task_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_task_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere task_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_key"}, "test.edw.relationships_fact_tasks_task_key__task_key__ref_dim_task_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_task')", "field": "task_key", "column_name": "task_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_task", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_task_key__task_key__ref_dim_task_"], "unique_id": "test.edw.relationships_fact_tasks_task_key__task_key__ref_dim_task_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_b858a18ee3439b700d01a1f83a3d2d1d.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_task_key__task_key__ref_dim_task_", "alias": "relationships_fact_tasks_task_key__task_key__ref_dim_task_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_b858a18ee3439b700d01a1f83a3d2d1d.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select task_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select task_key as id from analytics_dev.scratch_brana.dim_task\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_key"}, "test.edw.not_null_fact_tasks_task_started_date_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_started_date_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_task_started_date_key"], "unique_id": "test.edw.not_null_fact_tasks_task_started_date_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_task_started_date_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_task_started_date_key", "alias": "not_null_fact_tasks_task_started_date_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_task_started_date_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere task_started_date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_started_date_key"}, "test.edw.relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "task_started_date_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_date", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_"], "unique_id": "test.edw.relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_bd995183528705c7c29231f73c4bacde.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_", "alias": "relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_date"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_bd995183528705c7c29231f73c4bacde.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select task_started_date_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select date_key as id from analytics_dev.scratch_brana.dim_date\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_started_date_key"}, "test.edw.not_null_fact_tasks_task_completed_date_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_completed_date_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_task_completed_date_key"], "unique_id": "test.edw.not_null_fact_tasks_task_completed_date_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_task_completed_date_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_task_completed_date_key", "alias": "not_null_fact_tasks_task_completed_date_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_task_completed_date_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere task_completed_date_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_completed_date_key"}, "test.edw.relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_date')", "field": "date_key", "column_name": "task_completed_date_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_date", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_"], "unique_id": "test.edw.relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_976739090a835060b038ebaff620f40a.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_", "alias": "relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_date"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_976739090a835060b038ebaff620f40a.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select task_completed_date_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select date_key as id from analytics_dev.scratch_brana.dim_date\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_completed_date_key"}, "test.edw.not_null_fact_tasks_task_asset_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_asset_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_task_asset_key"], "unique_id": "test.edw.not_null_fact_tasks_task_asset_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_task_asset_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_task_asset_key", "alias": "not_null_fact_tasks_task_asset_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_task_asset_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere task_asset_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_asset_key"}, "test.edw.relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_task_asset')", "field": "task_asset_key", "column_name": "task_asset_key", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.dim_task_asset", "model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_"], "unique_id": "test.edw.relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_fact_tasks_20107343a533189380309bb7e12517e6.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_", "alias": "relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task_asset"], ["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/relationships_fact_tasks_20107343a533189380309bb7e12517e6.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select task_asset_key as id from analytics_dev.scratch_brana.fact_tasks\n) as child\nleft join (\n    select task_asset_key as id from analytics_dev.scratch_brana.dim_task_asset\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_asset_key"}, "test.edw.not_null_fact_tasks_task_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_count", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_task_count"], "unique_id": "test.edw.not_null_fact_tasks_task_count", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_task_count.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_task_count", "alias": "not_null_fact_tasks_task_count", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_task_count.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere task_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_count"}, "test.edw.not_null_fact_tasks_task_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_duration", "model": "{{ ref('fact_tasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.fact_tasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_fact_tasks_task_duration"], "unique_id": "test.edw.not_null_fact_tasks_task_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_fact_tasks_task_duration.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_fact_tasks_task_duration", "alias": "not_null_fact_tasks_task_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_tasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_fact_tasks_task_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.fact_tasks\nwhere task_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_duration"}, "test.edw.not_null_dim_task_asset_task_asset_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_asset_key", "model": "{{ ref('dim_task_asset') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task_asset"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_asset_task_asset_key"], "unique_id": "test.edw.not_null_dim_task_asset_task_asset_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_asset_task_asset_key.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_asset_task_asset_key", "alias": "not_null_dim_task_asset_task_asset_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task_asset"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_asset_task_asset_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task_asset\nwhere task_asset_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_asset_key"}, "test.edw.not_null_dim_task_asset_dataset_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_name", "model": "{{ ref('dim_task_asset') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task_asset"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_asset_dataset_name"], "unique_id": "test.edw.not_null_dim_task_asset_dataset_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_asset_dataset_name.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_asset_dataset_name", "alias": "not_null_dim_task_asset_dataset_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task_asset"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_asset_dataset_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task_asset\nwhere dataset_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_name"}, "test.edw.not_null_dim_task_asset_asset_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_name", "model": "{{ ref('dim_task_asset') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task_asset"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_asset_asset_name"], "unique_id": "test.edw.not_null_dim_task_asset_asset_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_asset_asset_name.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_asset_asset_name", "alias": "not_null_dim_task_asset_asset_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task_asset"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_asset_asset_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task_asset\nwhere asset_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_name"}, "test.edw.not_null_dim_task_asset_tool_project_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tool_project_name", "model": "{{ ref('dim_task_asset') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task_asset"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_asset_tool_project_name"], "unique_id": "test.edw.not_null_dim_task_asset_tool_project_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_asset_tool_project_name.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_asset_tool_project_name", "alias": "not_null_dim_task_asset_tool_project_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task_asset"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_asset_tool_project_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task_asset\nwhere tool_project_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tool_project_name"}, "test.edw.not_null_dim_task_asset_sample_source": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_source", "model": "{{ ref('dim_task_asset') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.dim_task_asset"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_dim_task_asset_sample_source"], "unique_id": "test.edw.not_null_dim_task_asset_sample_source", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_dim_task_asset_sample_source.sql", "original_file_path": "models/marts/performance/schema.yml", "name": "not_null_dim_task_asset_sample_source", "alias": "not_null_dim_task_asset_sample_source", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_task_asset"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/performance/schema.yml/schema_test/not_null_dim_task_asset_sample_source.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.dim_task_asset\nwhere sample_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sample_source"}, "test.edw.not_null_worker_hardware_person_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_key", "model": "{{ ref('worker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.worker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_worker_hardware_person_key"], "unique_id": "test.edw.not_null_worker_hardware_person_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_worker_hardware_person_key.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "not_null_worker_hardware_person_key", "alias": "not_null_worker_hardware_person_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/not_null_worker_hardware_person_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.worker_hardware\nwhere person_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_key"}, "test.edw.unique_worker_hardware_person_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "person_key", "model": "{{ ref('worker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.worker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_worker_hardware_person_key"], "unique_id": "test.edw.unique_worker_hardware_person_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_worker_hardware_person_key.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "unique_worker_hardware_person_key", "alias": "unique_worker_hardware_person_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/unique_worker_hardware_person_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        person_key\n\n    from analytics_dev.scratch_brana.worker_hardware\n    where person_key is not null\n    group by person_key\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_key"}, "test.edw.not_null_worker_hardware_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('worker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.worker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_worker_hardware_email"], "unique_id": "test.edw.not_null_worker_hardware_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_worker_hardware_email.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "not_null_worker_hardware_email", "alias": "not_null_worker_hardware_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/not_null_worker_hardware_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.worker_hardware\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.unique_worker_hardware_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ ref('worker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.worker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_worker_hardware_email"], "unique_id": "test.edw.unique_worker_hardware_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_worker_hardware_email.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "unique_worker_hardware_email", "alias": "unique_worker_hardware_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/unique_worker_hardware_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        email\n\n    from analytics_dev.scratch_brana.worker_hardware\n    where email is not null\n    group by email\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.not_null_worker_pool_person_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_key", "model": "{{ ref('worker_pool') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.worker_pool"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_worker_pool_person_key"], "unique_id": "test.edw.not_null_worker_pool_person_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_worker_pool_person_key.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "not_null_worker_pool_person_key", "alias": "not_null_worker_pool_person_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_pool"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/not_null_worker_pool_person_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.worker_pool\nwhere person_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_key"}, "test.edw.not_null_worker_pool_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('worker_pool') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.worker_pool"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_worker_pool_email"], "unique_id": "test.edw.not_null_worker_pool_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_worker_pool_email.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "not_null_worker_pool_email", "alias": "not_null_worker_pool_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_pool"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/not_null_worker_pool_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.worker_pool\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.not_null_worker_workstreams_person_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_key", "model": "{{ ref('worker_workstreams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.worker_workstreams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_worker_workstreams_person_key"], "unique_id": "test.edw.not_null_worker_workstreams_person_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_worker_workstreams_person_key.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "not_null_worker_workstreams_person_key", "alias": "not_null_worker_workstreams_person_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_workstreams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/not_null_worker_workstreams_person_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics_dev.scratch_brana.worker_workstreams\nwhere person_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_key"}, "test.edw.relationships_worker_workstreams_person_key__person_key__ref_worker_pool_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('worker_pool')", "field": "person_key", "column_name": "person_key", "model": "{{ ref('worker_workstreams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.worker_pool", "model.edw.worker_workstreams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_worker_workstreams_person_key__person_key__ref_worker_pool_"], "unique_id": "test.edw.relationships_worker_workstreams_person_key__person_key__ref_worker_pool_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_worker_workstreams_5234b02e313347439e4eb2d8fae1455a.sql", "original_file_path": "models/marts/onboarding/schema.yml", "name": "relationships_worker_workstreams_person_key__person_key__ref_worker_pool_", "alias": "relationships_worker_workstreams_person_key__person_key__ref_worker_pool_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["worker_pool"], ["worker_workstreams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/marts/onboarding/schema.yml/schema_test/relationships_worker_workstreams_5234b02e313347439e4eb2d8fae1455a.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select person_key as id from analytics_dev.scratch_brana.worker_workstreams\n) as child\nleft join (\n    select person_key as id from analytics_dev.scratch_brana.worker_pool\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_key"}, "test.edw.not_null_base_hist_freshdesk_tickets_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_tickets_created_at"], "unique_id": "test.edw.not_null_base_hist_freshdesk_tickets_created_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_tickets_created_at.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_tickets_created_at", "alias": "not_null_base_hist_freshdesk_tickets_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_tickets_created_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_tickets\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.edw.not_null_base_hist_freshdesk_tickets_priority": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "priority", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_tickets_priority"], "unique_id": "test.edw.not_null_base_hist_freshdesk_tickets_priority", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_tickets_priority.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_tickets_priority", "alias": "not_null_base_hist_freshdesk_tickets_priority", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_tickets_priority.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_tickets\nwhere priority is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority"}, "test.edw.accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 4], "column_name": "priority", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4"], "unique_id": "test.edw.accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4", "alias": "accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        priority as value_field\n\n    from psa_dev.scratch_brana.base_hist_freshdesk_tickets\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '1','2','3','4'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority"}, "test.edw.not_null_base_hist_freshdesk_tickets_source": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "source", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_tickets_source"], "unique_id": "test.edw.not_null_base_hist_freshdesk_tickets_source", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_tickets_source.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_tickets_source", "alias": "not_null_base_hist_freshdesk_tickets_source", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_tickets_source.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_tickets\nwhere source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source"}, "test.edw.accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 7, 8, 9, 10, 12], "column_name": "source", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12"], "unique_id": "test.edw.accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "alias": "accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        source as value_field\n\n    from psa_dev.scratch_brana.base_hist_freshdesk_tickets\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '1','2','3','7','8','9','10','12'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source"}, "test.edw.not_null_base_hist_freshdesk_tickets_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_tickets_status"], "unique_id": "test.edw.not_null_base_hist_freshdesk_tickets_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_tickets_status.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_tickets_status", "alias": "not_null_base_hist_freshdesk_tickets_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_tickets_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_tickets\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status"}, "test.edw.accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [2, 3, 4, 5, 6, 7, 9], "column_name": "status", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9"], "unique_id": "test.edw.accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9", "alias": "accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        status as value_field\n\n    from psa_dev.scratch_brana.base_hist_freshdesk_tickets\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '2','3','4','5','6','7','9'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status"}, "test.edw.not_null_base_hist_freshdesk_tickets_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_tickets_ticket_id"], "unique_id": "test.edw.not_null_base_hist_freshdesk_tickets_ticket_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_tickets_ticket_id.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_tickets_ticket_id", "alias": "not_null_base_hist_freshdesk_tickets_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_tickets_ticket_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_tickets\nwhere ticket_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ticket_id"}, "test.edw.not_null_base_hist_freshdesk_tickets_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('base_hist_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_tickets_updated_at"], "unique_id": "test.edw.not_null_base_hist_freshdesk_tickets_updated_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_tickets_updated_at.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_tickets_updated_at", "alias": "not_null_base_hist_freshdesk_tickets_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_tickets_updated_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_tickets\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.edw.not_null_base_hist_freshdesk_agents_is_available": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_available", "model": "{{ ref('base_hist_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_agents_is_available"], "unique_id": "test.edw.not_null_base_hist_freshdesk_agents_is_available", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_agents_is_available.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_agents_is_available", "alias": "not_null_base_hist_freshdesk_agents_is_available", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_agents_is_available.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_agents\nwhere is_available is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_available"}, "test.edw.not_null_base_hist_freshdesk_agents_is_active": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_active", "model": "{{ ref('base_hist_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_agents_is_active"], "unique_id": "test.edw.not_null_base_hist_freshdesk_agents_is_active", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_agents_is_active.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_agents_is_active", "alias": "not_null_base_hist_freshdesk_agents_is_active", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_agents_is_active.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_agents\nwhere is_active is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_active"}, "test.edw.not_null_base_hist_freshdesk_agents_agent_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_name", "model": "{{ ref('base_hist_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_agents_agent_name"], "unique_id": "test.edw.not_null_base_hist_freshdesk_agents_agent_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_agents_agent_name.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_agents_agent_name", "alias": "not_null_base_hist_freshdesk_agents_agent_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_agents_agent_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_agents\nwhere agent_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_name"}, "test.edw.not_null_base_hist_freshdesk_agents_agent_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_id", "model": "{{ ref('base_hist_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_agents_agent_id"], "unique_id": "test.edw.not_null_base_hist_freshdesk_agents_agent_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_agents_agent_id.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_agents_agent_id", "alias": "not_null_base_hist_freshdesk_agents_agent_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_agents_agent_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_agents\nwhere agent_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_id"}, "test.edw.not_null_base_hist_freshdesk_agents_agent_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_type", "model": "{{ ref('base_hist_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_agents_agent_type"], "unique_id": "test.edw.not_null_base_hist_freshdesk_agents_agent_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_agents_agent_type.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_agents_agent_type", "alias": "not_null_base_hist_freshdesk_agents_agent_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_agents_agent_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_agents\nwhere agent_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_type"}, "test.edw.not_null_base_hist_freshdesk_agents_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('base_hist_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_freshdesk_agents_updated_at"], "unique_id": "test.edw.not_null_base_hist_freshdesk_agents_updated_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_freshdesk_agents_updated_at.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_hist_freshdesk_agents_updated_at", "alias": "not_null_base_hist_freshdesk_agents_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_hist_freshdesk_agents_updated_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_freshdesk_agents\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.edw.not_null_base_freshdesk_tickets_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_tickets_created_at"], "unique_id": "test.edw.not_null_base_freshdesk_tickets_created_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_tickets_created_at.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_tickets_created_at", "alias": "not_null_base_freshdesk_tickets_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_tickets_created_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_tickets\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.edw.not_null_base_freshdesk_tickets_priority": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "priority", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_tickets_priority"], "unique_id": "test.edw.not_null_base_freshdesk_tickets_priority", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_tickets_priority.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_tickets_priority", "alias": "not_null_base_freshdesk_tickets_priority", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_tickets_priority.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_tickets\nwhere priority is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority"}, "test.edw.accepted_values_base_freshdesk_tickets_priority__1__2__3__4": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 4], "column_name": "priority", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_freshdesk_tickets_priority__1__2__3__4"], "unique_id": "test.edw.accepted_values_base_freshdesk_tickets_priority__1__2__3__4", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_freshdesk_tickets_priority__1__2__3__4.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "accepted_values_base_freshdesk_tickets_priority__1__2__3__4", "alias": "accepted_values_base_freshdesk_tickets_priority__1__2__3__4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/accepted_values_base_freshdesk_tickets_priority__1__2__3__4.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        priority as value_field\n\n    from psa_dev.scratch_brana.base_freshdesk_tickets\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '1','2','3','4'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority"}, "test.edw.not_null_base_freshdesk_tickets_source": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "source", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_tickets_source"], "unique_id": "test.edw.not_null_base_freshdesk_tickets_source", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_tickets_source.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_tickets_source", "alias": "not_null_base_freshdesk_tickets_source", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_tickets_source.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_tickets\nwhere source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source"}, "test.edw.accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 7, 8, 9, 10, 12], "column_name": "source", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12"], "unique_id": "test.edw.accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "alias": "accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        source as value_field\n\n    from psa_dev.scratch_brana.base_freshdesk_tickets\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '1','2','3','7','8','9','10','12'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source"}, "test.edw.not_null_base_freshdesk_tickets_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_tickets_status"], "unique_id": "test.edw.not_null_base_freshdesk_tickets_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_tickets_status.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_tickets_status", "alias": "not_null_base_freshdesk_tickets_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_tickets_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_tickets\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status"}, "test.edw.accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [2, 3, 4, 5, 6, 7, 9], "column_name": "status", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9"], "unique_id": "test.edw.accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9", "alias": "accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        status as value_field\n\n    from psa_dev.scratch_brana.base_freshdesk_tickets\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '2','3','4','5','6','7','9'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status"}, "test.edw.not_null_base_freshdesk_tickets_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('base_freshdesk_tickets') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_tickets"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_tickets_updated_at"], "unique_id": "test.edw.not_null_base_freshdesk_tickets_updated_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_tickets_updated_at.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_tickets_updated_at", "alias": "not_null_base_freshdesk_tickets_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_tickets_updated_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_tickets\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.edw.not_null_base_freshdesk_agents_is_available": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_available", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_agents_is_available"], "unique_id": "test.edw.not_null_base_freshdesk_agents_is_available", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_agents_is_available.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_agents_is_available", "alias": "not_null_base_freshdesk_agents_is_available", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_agents_is_available.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_agents\nwhere is_available is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_available"}, "test.edw.not_null_base_freshdesk_agents_is_active": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_active", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_agents_is_active"], "unique_id": "test.edw.not_null_base_freshdesk_agents_is_active", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_agents_is_active.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_agents_is_active", "alias": "not_null_base_freshdesk_agents_is_active", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_agents_is_active.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_agents\nwhere is_active is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_active"}, "test.edw.not_null_base_freshdesk_agents_agent_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_name", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_agents_agent_name"], "unique_id": "test.edw.not_null_base_freshdesk_agents_agent_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_agents_agent_name.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_agents_agent_name", "alias": "not_null_base_freshdesk_agents_agent_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_agents_agent_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_agents\nwhere agent_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_name"}, "test.edw.not_null_base_freshdesk_agents_agent_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_id", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_agents_agent_id"], "unique_id": "test.edw.not_null_base_freshdesk_agents_agent_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_agents_agent_id.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_agents_agent_id", "alias": "not_null_base_freshdesk_agents_agent_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_agents_agent_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_agents\nwhere agent_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_id"}, "test.edw.unique_base_freshdesk_agents_agent_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "agent_id", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_freshdesk_agents_agent_id"], "unique_id": "test.edw.unique_base_freshdesk_agents_agent_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_freshdesk_agents_agent_id.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "unique_base_freshdesk_agents_agent_id", "alias": "unique_base_freshdesk_agents_agent_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/unique_base_freshdesk_agents_agent_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        agent_id\n\n    from psa_dev.scratch_brana.base_freshdesk_agents\n    where agent_id is not null\n    group by agent_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_id"}, "test.edw.not_null_base_freshdesk_agents_agent_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_type", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_agents_agent_type"], "unique_id": "test.edw.not_null_base_freshdesk_agents_agent_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_agents_agent_type.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_agents_agent_type", "alias": "not_null_base_freshdesk_agents_agent_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_agents_agent_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_agents\nwhere agent_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "agent_type"}, "test.edw.not_null_base_freshdesk_agents_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('base_freshdesk_agents') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_freshdesk_agents"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_freshdesk_agents_updated_at"], "unique_id": "test.edw.not_null_base_freshdesk_agents_updated_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_freshdesk_agents_updated_at.sql", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "not_null_base_freshdesk_agents_updated_at", "alias": "not_null_base_freshdesk_agents_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_freshdesk_agents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/freshdesk/schema.yml/schema_test/not_null_base_freshdesk_agents_updated_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_freshdesk_agents\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.edw.not_null_base_v7_agt_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_dataset_id"], "unique_id": "test.edw.not_null_base_v7_agt_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_dataset_id.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_dataset_id", "alias": "not_null_base_v7_agt_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere dataset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('agt_datasets')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.agt_datasets", "model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_"], "unique_id": "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_v7_agt_e010a40eb5be7aab2280ce0c5b6a536b.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_", "alias": "relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_datasets"], ["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/relationships_base_v7_agt_e010a40eb5be7aab2280ce0c5b6a536b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from psa_dev.scratch_brana.base_v7_agt\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_datasets\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('agt_asset_stages')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.agt_asset_stages", "model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_"], "unique_id": "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_v7_agt_21bec7b892db89d0314401e5e76ad77b.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_", "alias": "relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agt_asset_stages"], ["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/relationships_base_v7_agt_21bec7b892db89d0314401e5e76ad77b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from psa_dev.scratch_brana.base_v7_agt\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.agt_asset_stages\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.not_null_base_v7_agt_cw_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cw_email", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_cw_email"], "unique_id": "test.edw.not_null_base_v7_agt_cw_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_cw_email.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_cw_email", "alias": "not_null_base_v7_agt_cw_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_cw_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere cw_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cw_email"}, "test.edw.not_null_base_v7_agt_task_submitted_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_submitted_at", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_task_submitted_at"], "unique_id": "test.edw.not_null_base_v7_agt_task_submitted_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_task_submitted_at.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_task_submitted_at", "alias": "not_null_base_v7_agt_task_submitted_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_task_submitted_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere task_submitted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_submitted_at"}, "test.edw.not_null_base_v7_agt_asset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_id", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_asset_id"], "unique_id": "test.edw.not_null_base_v7_agt_asset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_asset_id.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_asset_id", "alias": "not_null_base_v7_agt_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_asset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_id"}, "test.edw.not_null_base_v7_agt_from_stage_number": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_stage_number", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_from_stage_number"], "unique_id": "test.edw.not_null_base_v7_agt_from_stage_number", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_from_stage_number.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_from_stage_number", "alias": "not_null_base_v7_agt_from_stage_number", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_from_stage_number.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere from_stage_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_stage_number"}, "test.edw.not_null_base_v7_agt_to_stage_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_stage_name", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_to_stage_name"], "unique_id": "test.edw.not_null_base_v7_agt_to_stage_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_to_stage_name.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_to_stage_name", "alias": "not_null_base_v7_agt_to_stage_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_to_stage_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere to_stage_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_stage_name"}, "test.edw.not_null_base_v7_agt_stage_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stage_duration", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_stage_duration"], "unique_id": "test.edw.not_null_base_v7_agt_stage_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_stage_duration.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_stage_duration", "alias": "not_null_base_v7_agt_stage_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_stage_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere stage_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stage_duration"}, "test.edw.not_null_base_v7_agt_asset_annotation_running_total": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_annotation_running_total", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_asset_annotation_running_total"], "unique_id": "test.edw.not_null_base_v7_agt_asset_annotation_running_total", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_asset_annotation_running_total.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_asset_annotation_running_total", "alias": "not_null_base_v7_agt_asset_annotation_running_total", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_asset_annotation_running_total.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere asset_annotation_running_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_annotation_running_total"}, "test.edw.not_null_base_v7_agt_dataset_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_name", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_dataset_name"], "unique_id": "test.edw.not_null_base_v7_agt_dataset_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_dataset_name.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_dataset_name", "alias": "not_null_base_v7_agt_dataset_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_dataset_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere dataset_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_name"}, "test.edw.not_null_base_v7_agt_dataset_owner_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_owner_id", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_dataset_owner_id"], "unique_id": "test.edw.not_null_base_v7_agt_dataset_owner_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_dataset_owner_id.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_dataset_owner_id", "alias": "not_null_base_v7_agt_dataset_owner_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_dataset_owner_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere dataset_owner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_owner_id"}, "test.edw.not_null_base_v7_agt_cloudfactory_workstream_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cloudfactory_workstream_id", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_cloudfactory_workstream_id"], "unique_id": "test.edw.not_null_base_v7_agt_cloudfactory_workstream_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_cloudfactory_workstream_id.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_cloudfactory_workstream_id", "alias": "not_null_base_v7_agt_cloudfactory_workstream_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_cloudfactory_workstream_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere cloudfactory_workstream_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cloudfactory_workstream_id"}, "test.edw.not_null_base_v7_agt_dataset_inserted_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_inserted_at", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_dataset_inserted_at"], "unique_id": "test.edw.not_null_base_v7_agt_dataset_inserted_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_dataset_inserted_at.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_dataset_inserted_at", "alias": "not_null_base_v7_agt_dataset_inserted_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_dataset_inserted_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere dataset_inserted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_inserted_at"}, "test.edw.not_null_base_v7_agt_dataset_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_updated_at", "model": "{{ ref('base_v7_agt') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_v7_agt"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_v7_agt_dataset_updated_at"], "unique_id": "test.edw.not_null_base_v7_agt_dataset_updated_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_v7_agt_dataset_updated_at.sql", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "not_null_base_v7_agt_dataset_updated_at", "alias": "not_null_base_v7_agt_dataset_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_v7_agt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/agt/schema.yml/schema_test/not_null_base_v7_agt_dataset_updated_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_v7_agt\nwhere dataset_updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_updated_at"}, "test.edw.not_null_base_abyss_solutions_v7_dataset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_id", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_dataset_id"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_dataset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_dataset_id.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_dataset_id", "alias": "not_null_base_abyss_solutions_v7_dataset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_dataset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere dataset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('abyss_datasets')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.abyss_datasets", "model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_"], "unique_id": "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_abyss_solutions_v7_ff9c4852cbfa712a539c56e14515e76b.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_", "alias": "relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_datasets"], ["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/relationships_base_abyss_solutions_v7_ff9c4852cbfa712a539c56e14515e76b.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from psa_dev.scratch_brana.base_abyss_solutions_v7\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.abyss_datasets\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('abyss_asset_stages')", "field": "dataset_id", "column_name": "dataset_id", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.abyss_asset_stages", "model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_"], "unique_id": "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_abyss_solutions_v7_5e9b323e41ad049b49239744b7d315aa.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_", "alias": "relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["abyss_asset_stages"], ["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/relationships_base_abyss_solutions_v7_5e9b323e41ad049b49239744b7d315aa.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select dataset_id as id from psa_dev.scratch_brana.base_abyss_solutions_v7\n) as child\nleft join (\n    select dataset_id as id from analytics_dev.scratch_brana.abyss_asset_stages\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_id"}, "test.edw.not_null_base_abyss_solutions_v7_cw_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cw_email", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_cw_email"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_cw_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_cw_email.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_cw_email", "alias": "not_null_base_abyss_solutions_v7_cw_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_cw_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere cw_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cw_email"}, "test.edw.not_null_base_abyss_solutions_v7_task_submitted_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_submitted_at", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_task_submitted_at"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_task_submitted_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_task_submitted_at.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_task_submitted_at", "alias": "not_null_base_abyss_solutions_v7_task_submitted_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_task_submitted_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere task_submitted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_submitted_at"}, "test.edw.not_null_base_abyss_solutions_v7_asset_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_id", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_asset_id"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_asset_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_asset_id.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_asset_id", "alias": "not_null_base_abyss_solutions_v7_asset_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_asset_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere asset_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_id"}, "test.edw.not_null_base_abyss_solutions_v7_from_stage_number": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_stage_number", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_from_stage_number"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_from_stage_number", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_from_stage_number.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_from_stage_number", "alias": "not_null_base_abyss_solutions_v7_from_stage_number", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_from_stage_number.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere from_stage_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "from_stage_number"}, "test.edw.not_null_base_abyss_solutions_v7_to_stage_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_stage_name", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_to_stage_name"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_to_stage_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_to_stage_name.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_to_stage_name", "alias": "not_null_base_abyss_solutions_v7_to_stage_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_to_stage_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere to_stage_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "to_stage_name"}, "test.edw.not_null_base_abyss_solutions_v7_stage_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stage_duration", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_stage_duration"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_stage_duration", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_stage_duration.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_stage_duration", "alias": "not_null_base_abyss_solutions_v7_stage_duration", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_stage_duration.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere stage_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stage_duration"}, "test.edw.not_null_base_abyss_solutions_v7_asset_annotation_running_total": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "asset_annotation_running_total", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_asset_annotation_running_total"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_asset_annotation_running_total", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_asset_annotation_running_total.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_asset_annotation_running_total", "alias": "not_null_base_abyss_solutions_v7_asset_annotation_running_total", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_asset_annotation_running_total.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere asset_annotation_running_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "asset_annotation_running_total"}, "test.edw.not_null_base_abyss_solutions_v7_dataset_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dataset_name", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_dataset_name"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_dataset_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_dataset_name.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_dataset_name", "alias": "not_null_base_abyss_solutions_v7_dataset_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_dataset_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere dataset_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "dataset_name"}, "test.edw.not_null_base_abyss_solutions_v7_cloudfactory_workstream_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cloudfactory_workstream_id", "model": "{{ ref('base_abyss_solutions_v7') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_abyss_solutions_v7"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_abyss_solutions_v7_cloudfactory_workstream_id"], "unique_id": "test.edw.not_null_base_abyss_solutions_v7_cloudfactory_workstream_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_abyss_solutions_v7_cloudfactory_workstream_id.sql", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "not_null_base_abyss_solutions_v7_cloudfactory_workstream_id", "alias": "not_null_base_abyss_solutions_v7_cloudfactory_workstream_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_abyss_solutions_v7"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/clients/abyss/schema.yml/schema_test/not_null_base_abyss_solutions_v7_cloudfactory_workstream_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_abyss_solutions_v7\nwhere cloudfactory_workstream_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cloudfactory_workstream_id"}, "test.edw.not_null_base_projects_projects_project_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_key", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_project_key"], "unique_id": "test.edw.not_null_base_projects_projects_project_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_project_key.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_project_key", "alias": "not_null_base_projects_projects_project_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_project_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere project_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_key"}, "test.edw.not_null_base_projects_projects_project_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_name", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_project_name"], "unique_id": "test.edw.not_null_base_projects_projects_project_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_project_name.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_project_name", "alias": "not_null_base_projects_projects_project_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_project_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere project_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_name"}, "test.edw.not_null_base_projects_projects_project_uid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_uid", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_project_uid"], "unique_id": "test.edw.not_null_base_projects_projects_project_uid", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_project_uid.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_project_uid", "alias": "not_null_base_projects_projects_project_uid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_project_uid.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere project_uid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_uid"}, "test.edw.not_null_base_projects_projects_client_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_key", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_client_key"], "unique_id": "test.edw.not_null_base_projects_projects_client_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_client_key.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_client_key", "alias": "not_null_base_projects_projects_client_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_client_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere client_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.not_null_base_projects_projects_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_project_id"], "unique_id": "test.edw.not_null_base_projects_projects_project_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_project_id.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_project_id", "alias": "not_null_base_projects_projects_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_project_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id"}, "test.edw.not_null_base_projects_projects_project_status": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_status", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_project_status"], "unique_id": "test.edw.not_null_base_projects_projects_project_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_project_status.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_project_status", "alias": "not_null_base_projects_projects_project_status", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_project_status.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere project_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_status"}, "test.edw.accepted_values_base_projects_projects_project_status__0__1": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "project_status", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_projects_projects_project_status__0__1"], "unique_id": "test.edw.accepted_values_base_projects_projects_project_status__0__1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_projects_projects_project_status__0__1.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "accepted_values_base_projects_projects_project_status__0__1", "alias": "accepted_values_base_projects_projects_project_status__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/accepted_values_base_projects_projects_project_status__0__1.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        project_status as value_field\n\n    from psa_dev.scratch_brana.base_projects_projects\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '0','1'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_status"}, "test.edw.not_null_base_projects_projects_subscription_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_type", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_subscription_type"], "unique_id": "test.edw.not_null_base_projects_projects_subscription_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_subscription_type.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_subscription_type", "alias": "not_null_base_projects_projects_subscription_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_subscription_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere subscription_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_type"}, "test.edw.accepted_values_base_projects_projects_subscription_type__0__1": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "subscription_type", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_projects_projects_subscription_type__0__1"], "unique_id": "test.edw.accepted_values_base_projects_projects_subscription_type__0__1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_projects_projects_subscription_type__0__1.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "accepted_values_base_projects_projects_subscription_type__0__1", "alias": "accepted_values_base_projects_projects_subscription_type__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/accepted_values_base_projects_projects_subscription_type__0__1.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        subscription_type as value_field\n\n    from psa_dev.scratch_brana.base_projects_projects\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '0','1'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_type"}, "test.edw.accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["legacy_workstream_1.0", "NLP Managed Workforce", "Efficient Managed Workforce", "CV Managed Workforce", "Elastic Managed Workforce", "Agile Managed Workforce", "Data Annotation Solution"], "column_name": "package_type", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution"], "unique_id": "test.edw.accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_projects_projects_02a7bbe5dad22e06e3968405820599e8.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution", "alias": "accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/accepted_values_base_projects_projects_02a7bbe5dad22e06e3968405820599e8.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        package_type as value_field\n\n    from psa_dev.scratch_brana.base_projects_projects\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'legacy_workstream_1.0','NLP Managed Workforce','Efficient Managed Workforce','CV Managed Workforce','Elastic Managed Workforce','Agile Managed Workforce','Data Annotation Solution'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "package_type"}, "test.edw.not_null_base_projects_projects_billable_unit_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "billable_unit_code", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_billable_unit_code"], "unique_id": "test.edw.not_null_base_projects_projects_billable_unit_code", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_billable_unit_code.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_billable_unit_code", "alias": "not_null_base_projects_projects_billable_unit_code", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_billable_unit_code.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere billable_unit_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "billable_unit_code"}, "test.edw.accepted_values_base_projects_projects_billable_unit_code__0__1": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "billable_unit_code", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_projects_projects_billable_unit_code__0__1"], "unique_id": "test.edw.accepted_values_base_projects_projects_billable_unit_code__0__1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_projects_projects_billable_unit_code__0__1.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "accepted_values_base_projects_projects_billable_unit_code__0__1", "alias": "accepted_values_base_projects_projects_billable_unit_code__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/accepted_values_base_projects_projects_billable_unit_code__0__1.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        billable_unit_code as value_field\n\n    from psa_dev.scratch_brana.base_projects_projects\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        '0','1'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "billable_unit_code"}, "test.edw.not_null_base_projects_projects_billable_unit": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "billable_unit", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_billable_unit"], "unique_id": "test.edw.not_null_base_projects_projects_billable_unit", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_billable_unit.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_billable_unit", "alias": "not_null_base_projects_projects_billable_unit", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_billable_unit.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere billable_unit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "billable_unit"}, "test.edw.accepted_values_base_projects_projects_billable_unit__Hourly__Unit": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Hourly", "Unit"], "column_name": "billable_unit", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_projects_projects_billable_unit__Hourly__Unit"], "unique_id": "test.edw.accepted_values_base_projects_projects_billable_unit__Hourly__Unit", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_projects_projects_billable_unit__Hourly__Unit.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "accepted_values_base_projects_projects_billable_unit__Hourly__Unit", "alias": "accepted_values_base_projects_projects_billable_unit__Hourly__Unit", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/accepted_values_base_projects_projects_billable_unit__Hourly__Unit.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        billable_unit as value_field\n\n    from psa_dev.scratch_brana.base_projects_projects\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'Hourly','Unit'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "billable_unit"}, "test.edw.not_null_base_projects_projects_ws_shield_enabled": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ws_shield_enabled", "model": "{{ ref('base_projects_projects') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_projects_projects"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_projects_projects_ws_shield_enabled"], "unique_id": "test.edw.not_null_base_projects_projects_ws_shield_enabled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_projects_projects_ws_shield_enabled.sql", "original_file_path": "models/psa/projects/schema/base_projects_projects.yml", "name": "not_null_base_projects_projects_ws_shield_enabled", "alias": "not_null_base_projects_projects_ws_shield_enabled", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/projects/schema/base_projects_projects.yml/schema_test/not_null_base_projects_projects_ws_shield_enabled.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_projects_projects\nwhere ws_shield_enabled is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ws_shield_enabled"}, "test.edw.unique_stg_breezyhr_candidates_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('stg_breezyhr_candidates') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.stg_breezyhr_candidates"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_stg_breezyhr_candidates_candidate_id"], "unique_id": "test.edw.unique_stg_breezyhr_candidates_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_stg_breezyhr_candidates_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "unique_stg_breezyhr_candidates_candidate_id", "alias": "unique_stg_breezyhr_candidates_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_breezyhr_candidates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/unique_stg_breezyhr_candidates_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        candidate_id\n\n    from psa_dev.scratch_brana.stg_breezyhr_candidates\n    where candidate_id is not null\n    group by candidate_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.not_null_stg_breezyhr_candidates_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('stg_breezyhr_candidates') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_breezyhr_candidates"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_breezyhr_candidates_candidate_id"], "unique_id": "test.edw.not_null_stg_breezyhr_candidates_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_breezyhr_candidates_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "not_null_stg_breezyhr_candidates_candidate_id", "alias": "not_null_stg_breezyhr_candidates_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_breezyhr_candidates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/not_null_stg_breezyhr_candidates_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_breezyhr_candidates\nwhere candidate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.unique_base_breezyhr_candidate_meta_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('base_breezyhr_candidate_meta') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_breezyhr_candidate_meta"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_breezyhr_candidate_meta_candidate_id"], "unique_id": "test.edw.unique_base_breezyhr_candidate_meta_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_breezyhr_candidate_meta_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "unique_base_breezyhr_candidate_meta_candidate_id", "alias": "unique_base_breezyhr_candidate_meta_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_breezyhr_candidate_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/unique_base_breezyhr_candidate_meta_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        candidate_id\n\n    from psa_dev.scratch_brana.base_breezyhr_candidate_meta\n    where candidate_id is not null\n    group by candidate_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.not_null_base_breezyhr_candidate_streams_stream_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stream_type", "model": "{{ ref('base_breezyhr_candidate_streams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_breezyhr_candidate_streams_stream_type"], "unique_id": "test.edw.not_null_base_breezyhr_candidate_streams_stream_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_breezyhr_candidate_streams_stream_type.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "not_null_base_breezyhr_candidate_streams_stream_type", "alias": "not_null_base_breezyhr_candidate_streams_stream_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/not_null_base_breezyhr_candidate_streams_stream_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_breezyhr_candidate_streams\nwhere stream_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stream_type"}, "test.edw.accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["candidateAdded", "candidateAssignedPosted", "candidateDocumentAdded", "candidateDocumentDeleted", "candidateStatusUpdated", "companyNotePosted", "questionnaireResponsePosted", "questionnaireToCandidatePosted"], "column_name": "stream_type", "model": "{{ ref('base_breezyhr_candidate_streams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted"], "unique_id": "test.edw.accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_breezyhr_candidate_streams_94e24b1e58aa36ea3343b2b12ac50cde.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted", "alias": "accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/accepted_values_base_breezyhr_candidate_streams_94e24b1e58aa36ea3343b2b12ac50cde.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        stream_type as value_field\n\n    from psa_dev.scratch_brana.base_breezyhr_candidate_streams\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'candidateAdded','candidateAssignedPosted','candidateDocumentAdded','candidateDocumentDeleted','candidateStatusUpdated','companyNotePosted','questionnaireResponsePosted','questionnaireToCandidatePosted'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stream_type"}, "test.edw.dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["candidate_id", "stream_each_id"], "model": "{{ ref('base_breezyhr_candidate_streams') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.edw.base_breezyhr_candidate_streams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id"], "unique_id": "test.edw.dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id", "alias": "dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_breezyhr_candidate_streams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        candidate_id, stream_each_id\n    from psa_dev.scratch_brana.base_breezyhr_candidate_streams\n\n    group by candidate_id, stream_each_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.edw.unique_stg_breezyhr_positions_position_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "position_id", "model": "{{ ref('stg_breezyhr_positions') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.stg_breezyhr_positions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_stg_breezyhr_positions_position_id"], "unique_id": "test.edw.unique_stg_breezyhr_positions_position_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_stg_breezyhr_positions_position_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "unique_stg_breezyhr_positions_position_id", "alias": "unique_stg_breezyhr_positions_position_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_breezyhr_positions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/unique_stg_breezyhr_positions_position_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        position_id\n\n    from psa_dev.scratch_brana.stg_breezyhr_positions\n    where position_id is not null\n    group by position_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "position_id"}, "test.edw.unique_stg_worker_conversion_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('stg_worker_conversion') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.stg_worker_conversion"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_stg_worker_conversion_candidate_id"], "unique_id": "test.edw.unique_stg_worker_conversion_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_stg_worker_conversion_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "unique_stg_worker_conversion_candidate_id", "alias": "unique_stg_worker_conversion_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_worker_conversion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/unique_stg_worker_conversion_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        candidate_id\n\n    from psa_dev.scratch_brana.stg_worker_conversion\n    where candidate_id is not null\n    group by candidate_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.not_null_stg_worker_conversion_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('stg_worker_conversion') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_worker_conversion"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_worker_conversion_candidate_id"], "unique_id": "test.edw.not_null_stg_worker_conversion_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_worker_conversion_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "not_null_stg_worker_conversion_candidate_id", "alias": "not_null_stg_worker_conversion_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_worker_conversion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/not_null_stg_worker_conversion_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_worker_conversion\nwhere candidate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.not_null_stg_breezy_worker_pool_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('stg_breezy_worker_pool') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_breezy_worker_pool"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_breezy_worker_pool_candidate_id"], "unique_id": "test.edw.not_null_stg_breezy_worker_pool_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_breezy_worker_pool_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "not_null_stg_breezy_worker_pool_candidate_id", "alias": "not_null_stg_breezy_worker_pool_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_breezy_worker_pool"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/not_null_stg_breezy_worker_pool_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_breezy_worker_pool\nwhere candidate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.not_null_stg_breezy_worker_pool_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('stg_breezy_worker_pool') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_breezy_worker_pool"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_breezy_worker_pool_email"], "unique_id": "test.edw.not_null_stg_breezy_worker_pool_email", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_breezy_worker_pool_email.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "not_null_stg_breezy_worker_pool_email", "alias": "not_null_stg_breezy_worker_pool_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_breezy_worker_pool"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/not_null_stg_breezy_worker_pool_email.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_breezy_worker_pool\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.edw.not_null_stg_worker_lifecycle_candidate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "candidate_id", "model": "{{ ref('stg_worker_lifecycle') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_worker_lifecycle"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_worker_lifecycle_candidate_id"], "unique_id": "test.edw.not_null_stg_worker_lifecycle_candidate_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_worker_lifecycle_candidate_id.sql", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "not_null_stg_worker_lifecycle_candidate_id", "alias": "not_null_stg_worker_lifecycle_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_worker_lifecycle"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/breezyhr/schema.yml/schema_test/not_null_stg_worker_lifecycle_candidate_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_worker_lifecycle\nwhere candidate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id"}, "test.edw.not_null_base_hist_salesforce_contract_contract_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ ref('base_hist_salesforce_contract') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_salesforce_contract_contract_id"], "unique_id": "test.edw.not_null_base_hist_salesforce_contract_contract_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_salesforce_contract_contract_id.sql", "original_file_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "name": "not_null_base_hist_salesforce_contract_contract_id", "alias": "not_null_base_hist_salesforce_contract_contract_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/schema/base_hist_salesforce_contract.yml/schema_test/not_null_base_hist_salesforce_contract_contract_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_salesforce_contract\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_id"}, "test.edw.not_null_base_hist_salesforce_contract_client_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ ref('base_hist_salesforce_contract') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_salesforce_contract_client_id"], "unique_id": "test.edw.not_null_base_hist_salesforce_contract_client_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_salesforce_contract_client_id.sql", "original_file_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "name": "not_null_base_hist_salesforce_contract_client_id", "alias": "not_null_base_hist_salesforce_contract_client_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/schema/base_hist_salesforce_contract.yml/schema_test/not_null_base_hist_salesforce_contract_client_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_salesforce_contract\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_id"}, "test.edw.dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_expression_is_true(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "is_deleted = False", "column_name": "is_deleted", "model": "{{ ref('base_hist_salesforce_contract') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true"], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False"], "unique_id": "test.edw.dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False.sql", "original_file_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "name": "dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False", "alias": "dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/schema/base_hist_salesforce_contract.yml/schema_test/dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n\n\n\nwith meet_condition as (\n\n    select * from psa_dev.scratch_brana.base_hist_salesforce_contract where 1=1\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not(is_deleted = False)\n\n)\n\nselect count(*)\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "is_deleted"}, "test.edw.not_null_base_hist_salesforce_contract_last_modified_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_modified_at", "model": "{{ ref('base_hist_salesforce_contract') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_salesforce_contract_last_modified_at"], "unique_id": "test.edw.not_null_base_hist_salesforce_contract_last_modified_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_salesforce_contract_last_modified_at.sql", "original_file_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "name": "not_null_base_hist_salesforce_contract_last_modified_at", "alias": "not_null_base_hist_salesforce_contract_last_modified_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/schema/base_hist_salesforce_contract.yml/schema_test/not_null_base_hist_salesforce_contract_last_modified_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_salesforce_contract\nwhere last_modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "last_modified_at"}, "test.edw.not_null_base_hist_salesforce_contract_contract_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_name", "model": "{{ ref('base_hist_salesforce_contract') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_salesforce_contract_contract_name"], "unique_id": "test.edw.not_null_base_hist_salesforce_contract_contract_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_salesforce_contract_contract_name.sql", "original_file_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "name": "not_null_base_hist_salesforce_contract_contract_name", "alias": "not_null_base_hist_salesforce_contract_contract_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/schema/base_hist_salesforce_contract.yml/schema_test/not_null_base_hist_salesforce_contract_contract_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_salesforce_contract\nwhere contract_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_name"}, "test.edw.not_null_base_hist_salesforce_contract_system_mod_stamp": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "system_mod_stamp", "model": "{{ ref('base_hist_salesforce_contract') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_hist_salesforce_contract"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_hist_salesforce_contract_system_mod_stamp"], "unique_id": "test.edw.not_null_base_hist_salesforce_contract_system_mod_stamp", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_hist_salesforce_contract_system_mod_stamp.sql", "original_file_path": "models/psa/salesforce/schema/base_hist_salesforce_contract.yml", "name": "not_null_base_hist_salesforce_contract_system_mod_stamp", "alias": "not_null_base_hist_salesforce_contract_system_mod_stamp", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_hist_salesforce_contract"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/salesforce/schema/base_hist_salesforce_contract.yml/schema_test/not_null_base_hist_salesforce_contract_system_mod_stamp.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_hist_salesforce_contract\nwhere system_mod_stamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "system_mod_stamp"}, "test.edw.not_null_base_passmark_cpu_cores_per_cpu": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cores_per_cpu", "model": "{{ ref('base_passmark_cpu') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_passmark_cpu"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_passmark_cpu_cores_per_cpu"], "unique_id": "test.edw.not_null_base_passmark_cpu_cores_per_cpu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_passmark_cpu_cores_per_cpu.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "not_null_base_passmark_cpu_cores_per_cpu", "alias": "not_null_base_passmark_cpu_cores_per_cpu", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_passmark_cpu"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/not_null_base_passmark_cpu_cores_per_cpu.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_passmark_cpu\nwhere cores_per_cpu is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cores_per_cpu"}, "test.edw.not_null_base_passmark_cpu_cpu_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cpu_name", "model": "{{ ref('base_passmark_cpu') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_passmark_cpu"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_passmark_cpu_cpu_name"], "unique_id": "test.edw.not_null_base_passmark_cpu_cpu_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_passmark_cpu_cpu_name.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "not_null_base_passmark_cpu_cpu_name", "alias": "not_null_base_passmark_cpu_cpu_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_passmark_cpu"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/not_null_base_passmark_cpu_cpu_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_passmark_cpu\nwhere cpu_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cpu_name"}, "test.edw.unique_base_passmark_cpu_cpu_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cpu_name", "model": "{{ ref('base_passmark_cpu') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_passmark_cpu"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_passmark_cpu_cpu_name"], "unique_id": "test.edw.unique_base_passmark_cpu_cpu_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_passmark_cpu_cpu_name.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "unique_base_passmark_cpu_cpu_name", "alias": "unique_base_passmark_cpu_cpu_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_passmark_cpu"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/unique_base_passmark_cpu_cpu_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        cpu_name\n\n    from psa_dev.scratch_brana.base_passmark_cpu\n    where cpu_name is not null\n    group by cpu_name\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cpu_name"}, "test.edw.not_null_base_passmark_cpu_rank": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rank", "model": "{{ ref('base_passmark_cpu') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_passmark_cpu"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_passmark_cpu_rank"], "unique_id": "test.edw.not_null_base_passmark_cpu_rank", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_passmark_cpu_rank.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "not_null_base_passmark_cpu_rank", "alias": "not_null_base_passmark_cpu_rank", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_passmark_cpu"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/not_null_base_passmark_cpu_rank.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_passmark_cpu\nwhere rank is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "rank"}, "test.edw.not_null_stg_cpu_model_summary_cores_per_cpu": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cores_per_cpu", "model": "{{ ref('stg_cpu_model_summary') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_cpu_model_summary"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_cpu_model_summary_cores_per_cpu"], "unique_id": "test.edw.not_null_stg_cpu_model_summary_cores_per_cpu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_cpu_model_summary_cores_per_cpu.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "not_null_stg_cpu_model_summary_cores_per_cpu", "alias": "not_null_stg_cpu_model_summary_cores_per_cpu", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_cpu_model_summary"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/not_null_stg_cpu_model_summary_cores_per_cpu.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_cpu_model_summary\nwhere cores_per_cpu is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cores_per_cpu"}, "test.edw.not_null_stg_cpu_model_summary_cpu_name": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cpu_name", "model": "{{ ref('stg_cpu_model_summary') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_cpu_model_summary"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_cpu_model_summary_cpu_name"], "unique_id": "test.edw.not_null_stg_cpu_model_summary_cpu_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_cpu_model_summary_cpu_name.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "not_null_stg_cpu_model_summary_cpu_name", "alias": "not_null_stg_cpu_model_summary_cpu_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_cpu_model_summary"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/not_null_stg_cpu_model_summary_cpu_name.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_cpu_model_summary\nwhere cpu_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cpu_name"}, "test.edw.not_null_stg_cpu_model_summary_rank": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rank", "model": "{{ ref('stg_cpu_model_summary') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_cpu_model_summary"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_cpu_model_summary_rank"], "unique_id": "test.edw.not_null_stg_cpu_model_summary_rank", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_cpu_model_summary_rank.sql", "original_file_path": "models/psa/passmark/schema.yml", "name": "not_null_stg_cpu_model_summary_rank", "alias": "not_null_stg_cpu_model_summary_rank", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_cpu_model_summary"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/passmark/schema.yml/schema_test/not_null_stg_cpu_model_summary_rank.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_cpu_model_summary\nwhere rank is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "rank"}, "test.edw.not_null_base_cis_workstreams_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('base_cis_workstreams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_cis_workstreams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_cis_workstreams_id"], "unique_id": "test.edw.not_null_base_cis_workstreams_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_cis_workstreams_id.sql", "original_file_path": "models/psa/cis/schema/base_cis_workstreams.yml", "name": "not_null_base_cis_workstreams_id", "alias": "not_null_base_cis_workstreams_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_cis_workstreams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cis/schema/base_cis_workstreams.yml/schema_test/not_null_base_cis_workstreams_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_cis_workstreams\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.edw.not_null_base_cis_workstreams_client_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_key", "model": "{{ ref('base_cis_workstreams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_cis_workstreams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_cis_workstreams_client_key"], "unique_id": "test.edw.not_null_base_cis_workstreams_client_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_cis_workstreams_client_key.sql", "original_file_path": "models/psa/cis/schema/base_cis_workstreams.yml", "name": "not_null_base_cis_workstreams_client_key", "alias": "not_null_base_cis_workstreams_client_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_cis_workstreams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cis/schema/base_cis_workstreams.yml/schema_test/not_null_base_cis_workstreams_client_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_cis_workstreams\nwhere client_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "client_key"}, "test.edw.not_null_base_cis_workstreams_project_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_key", "model": "{{ ref('base_cis_workstreams') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_cis_workstreams"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_cis_workstreams_project_key"], "unique_id": "test.edw.not_null_base_cis_workstreams_project_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_cis_workstreams_project_key.sql", "original_file_path": "models/psa/cis/schema/base_cis_workstreams.yml", "name": "not_null_base_cis_workstreams_project_key", "alias": "not_null_base_cis_workstreams_project_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_cis_workstreams"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/cis/schema/base_cis_workstreams.yml/schema_test/not_null_base_cis_workstreams_project_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_cis_workstreams\nwhere project_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_key"}, "test.edw.not_null_base_tlms_users_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('base_tlms_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_users_user_id"], "unique_id": "test.edw.not_null_base_tlms_users_user_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_users_user_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_users_user_id", "alias": "not_null_base_tlms_users_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_users_user_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_users\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.unique_base_tlms_users_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('base_tlms_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_tlms_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_tlms_users_user_id"], "unique_id": "test.edw.unique_base_tlms_users_user_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_tlms_users_user_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "unique_base_tlms_users_user_id", "alias": "unique_base_tlms_users_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/unique_base_tlms_users_user_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from psa_dev.scratch_brana.base_tlms_users\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.not_null_base_tlms_courses_course_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_id", "model": "{{ ref('base_tlms_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_courses_course_id"], "unique_id": "test.edw.not_null_base_tlms_courses_course_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_courses_course_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_courses_course_id", "alias": "not_null_base_tlms_courses_course_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_courses_course_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_courses\nwhere course_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.unique_base_tlms_courses_course_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "course_id", "model": "{{ ref('base_tlms_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_tlms_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_tlms_courses_course_id"], "unique_id": "test.edw.unique_base_tlms_courses_course_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_tlms_courses_course_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "unique_base_tlms_courses_course_id", "alias": "unique_base_tlms_courses_course_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/unique_base_tlms_courses_course_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        course_id\n\n    from psa_dev.scratch_brana.base_tlms_courses\n    where course_id is not null\n    group by course_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.not_null_base_tlms_categories_category_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ ref('base_tlms_categories') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_categories"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_categories_category_id"], "unique_id": "test.edw.not_null_base_tlms_categories_category_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_categories_category_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_categories_category_id", "alias": "not_null_base_tlms_categories_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_categories_category_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_categories\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "category_id"}, "test.edw.unique_base_tlms_categories_category_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "category_id", "model": "{{ ref('base_tlms_categories') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_tlms_categories"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_tlms_categories_category_id"], "unique_id": "test.edw.unique_base_tlms_categories_category_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_tlms_categories_category_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "unique_base_tlms_categories_category_id", "alias": "unique_base_tlms_categories_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/unique_base_tlms_categories_category_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        category_id\n\n    from psa_dev.scratch_brana.base_tlms_categories\n    where category_id is not null\n    group by category_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "category_id"}, "test.edw.not_null_base_tlms_branches_branch_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "branch_id", "model": "{{ ref('base_tlms_branches') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_branches"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_branches_branch_id"], "unique_id": "test.edw.not_null_base_tlms_branches_branch_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_branches_branch_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_branches_branch_id", "alias": "not_null_base_tlms_branches_branch_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_branches"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_branches_branch_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_branches\nwhere branch_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "branch_id"}, "test.edw.unique_base_tlms_branches_branch_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "branch_id", "model": "{{ ref('base_tlms_branches') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_tlms_branches"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_tlms_branches_branch_id"], "unique_id": "test.edw.unique_base_tlms_branches_branch_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_tlms_branches_branch_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "unique_base_tlms_branches_branch_id", "alias": "unique_base_tlms_branches_branch_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_branches"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/unique_base_tlms_branches_branch_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        branch_id\n\n    from psa_dev.scratch_brana.base_tlms_branches\n    where branch_id is not null\n    group by branch_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "branch_id"}, "test.edw.not_null_base_tlms_group_users_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('base_tlms_group_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_group_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_group_users_user_id"], "unique_id": "test.edw.not_null_base_tlms_group_users_user_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_group_users_user_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_group_users_user_id", "alias": "not_null_base_tlms_group_users_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_group_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_group_users_user_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_group_users\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_users')", "field": "user_id", "column_name": "user_id", "model": "{{ ref('base_tlms_group_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_users", "model.edw.base_tlms_group_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_"], "unique_id": "test.edw.relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_tlms_group_users_6717919265aa96bc9bdf70d15f94605e.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_", "alias": "relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_users"], ["base_tlms_group_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/relationships_base_tlms_group_users_6717919265aa96bc9bdf70d15f94605e.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select user_id as id from psa_dev.scratch_brana.base_tlms_group_users\n) as child\nleft join (\n    select user_id as id from psa_dev.scratch_brana.base_tlms_users\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.not_null_base_tlms_group_courses_course_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_id", "model": "{{ ref('base_tlms_group_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_group_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_group_courses_course_id"], "unique_id": "test.edw.not_null_base_tlms_group_courses_course_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_group_courses_course_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_group_courses_course_id", "alias": "not_null_base_tlms_group_courses_course_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_group_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_group_courses_course_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_group_courses\nwhere course_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_courses')", "field": "course_id", "column_name": "course_id", "model": "{{ ref('base_tlms_group_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_courses", "model.edw.base_tlms_group_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_"], "unique_id": "test.edw.relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_tlms_group_courses_1c940e676e6d35504788d30ccdc1fffc.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_", "alias": "relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_courses"], ["base_tlms_group_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/relationships_base_tlms_group_courses_1c940e676e6d35504788d30ccdc1fffc.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select course_id as id from psa_dev.scratch_brana.base_tlms_group_courses\n) as child\nleft join (\n    select course_id as id from psa_dev.scratch_brana.base_tlms_courses\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.not_null_base_tlms_group_courses_group_course_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "group_course_key", "model": "{{ ref('base_tlms_group_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_group_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_group_courses_group_course_key"], "unique_id": "test.edw.not_null_base_tlms_group_courses_group_course_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_group_courses_group_course_key.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_group_courses_group_course_key", "alias": "not_null_base_tlms_group_courses_group_course_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_group_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_group_courses_group_course_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_group_courses\nwhere group_course_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "group_course_key"}, "test.edw.unique_base_tlms_group_courses_group_course_key": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "group_course_key", "model": "{{ ref('base_tlms_group_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_tlms_group_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_tlms_group_courses_group_course_key"], "unique_id": "test.edw.unique_base_tlms_group_courses_group_course_key", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_tlms_group_courses_group_course_key.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "unique_base_tlms_group_courses_group_course_key", "alias": "unique_base_tlms_group_courses_group_course_key", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_group_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/unique_base_tlms_group_courses_group_course_key.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        group_course_key\n\n    from psa_dev.scratch_brana.base_tlms_group_courses\n    where group_course_key is not null\n    group by group_course_key\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "group_course_key"}, "test.edw.not_null_base_tlms_group_courses_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "group_id", "model": "{{ ref('base_tlms_group_courses') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_group_courses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_group_courses_group_id"], "unique_id": "test.edw.not_null_base_tlms_group_courses_group_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_group_courses_group_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_group_courses_group_id", "alias": "not_null_base_tlms_group_courses_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_group_courses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_group_courses_group_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_group_courses\nwhere group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "group_id"}, "test.edw.not_null_base_tlms_course_users_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('base_tlms_course_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_course_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_course_users_user_id"], "unique_id": "test.edw.not_null_base_tlms_course_users_user_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_course_users_user_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_course_users_user_id", "alias": "not_null_base_tlms_course_users_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_course_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_course_users_user_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_course_users\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_users')", "field": "user_id", "column_name": "user_id", "model": "{{ ref('base_tlms_course_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_users", "model.edw.base_tlms_course_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_"], "unique_id": "test.edw.relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_tlms_course_users_6717919265aa96bc9bdf70d15f94605e.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_", "alias": "relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_users"], ["base_tlms_course_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/relationships_base_tlms_course_users_6717919265aa96bc9bdf70d15f94605e.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select user_id as id from psa_dev.scratch_brana.base_tlms_course_users\n) as child\nleft join (\n    select user_id as id from psa_dev.scratch_brana.base_tlms_users\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.not_null_base_tlms_course_users_course_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_id", "model": "{{ ref('base_tlms_course_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_course_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_course_users_course_id"], "unique_id": "test.edw.not_null_base_tlms_course_users_course_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_course_users_course_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_course_users_course_id", "alias": "not_null_base_tlms_course_users_course_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_course_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_course_users_course_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_course_users\nwhere course_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_courses')", "field": "course_id", "column_name": "course_id", "model": "{{ ref('base_tlms_course_users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_courses", "model.edw.base_tlms_course_users"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_"], "unique_id": "test.edw.relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_tlms_course_users_1c940e676e6d35504788d30ccdc1fffc.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_", "alias": "relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_courses"], ["base_tlms_course_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/relationships_base_tlms_course_users_1c940e676e6d35504788d30ccdc1fffc.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select course_id as id from psa_dev.scratch_brana.base_tlms_course_users\n) as child\nleft join (\n    select course_id as id from psa_dev.scratch_brana.base_tlms_courses\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.unique_base_tlms_groups_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "group_id", "model": "{{ ref('base_tlms_groups') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_tlms_groups"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_tlms_groups_group_id"], "unique_id": "test.edw.unique_base_tlms_groups_group_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_tlms_groups_group_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "unique_base_tlms_groups_group_id", "alias": "unique_base_tlms_groups_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_groups"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/unique_base_tlms_groups_group_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        group_id\n\n    from psa_dev.scratch_brana.base_tlms_groups\n    where group_id is not null\n    group by group_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "group_id"}, "test.edw.not_null_base_tlms_groups_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "group_id", "model": "{{ ref('base_tlms_groups') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_tlms_groups"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_tlms_groups_group_id"], "unique_id": "test.edw.not_null_base_tlms_groups_group_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_tlms_groups_group_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_base_tlms_groups_group_id", "alias": "not_null_base_tlms_groups_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_groups"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_base_tlms_groups_group_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_tlms_groups\nwhere group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "group_id"}, "test.edw.not_null_stg_tlms_user_activity_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_tlms_user_activity') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_tlms_user_activity"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_tlms_user_activity_user_id"], "unique_id": "test.edw.not_null_stg_tlms_user_activity_user_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_tlms_user_activity_user_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_stg_tlms_user_activity_user_id", "alias": "not_null_stg_tlms_user_activity_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tlms_user_activity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_stg_tlms_user_activity_user_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_tlms_user_activity\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_users')", "field": "user_id", "column_name": "user_id", "model": "{{ ref('stg_tlms_user_activity') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_users", "model.edw.stg_tlms_user_activity"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_"], "unique_id": "test.edw.relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_stg_tlms_user_activity_6717919265aa96bc9bdf70d15f94605e.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_", "alias": "relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_users"], ["stg_tlms_user_activity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/relationships_stg_tlms_user_activity_6717919265aa96bc9bdf70d15f94605e.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select user_id as id from psa_dev.scratch_brana.stg_tlms_user_activity\n) as child\nleft join (\n    select user_id as id from psa_dev.scratch_brana.base_tlms_users\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.edw.not_null_stg_tlms_user_activity_course_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "course_id", "model": "{{ ref('stg_tlms_user_activity') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_tlms_user_activity"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_tlms_user_activity_course_id"], "unique_id": "test.edw.not_null_stg_tlms_user_activity_course_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_tlms_user_activity_course_id.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "not_null_stg_tlms_user_activity_course_id", "alias": "not_null_stg_tlms_user_activity_course_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tlms_user_activity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/not_null_stg_tlms_user_activity_course_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_tlms_user_activity\nwhere course_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_tlms_courses')", "field": "course_id", "column_name": "course_id", "model": "{{ ref('stg_tlms_user_activity') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_tlms_courses", "model.edw.stg_tlms_user_activity"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_"], "unique_id": "test.edw.relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_stg_tlms_user_activity_1c940e676e6d35504788d30ccdc1fffc.sql", "original_file_path": "models/psa/talentlms/schema.yml", "name": "relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_", "alias": "relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_tlms_courses"], ["stg_tlms_user_activity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/talentlms/schema.yml/schema_test/relationships_stg_tlms_user_activity_1c940e676e6d35504788d30ccdc1fffc.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select course_id as id from psa_dev.scratch_brana.stg_tlms_user_activity\n) as child\nleft join (\n    select course_id as id from psa_dev.scratch_brana.base_tlms_courses\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "course_id"}, "test.edw.not_null_base_pulseviz_task_event_stats_task_event_stats_record_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_event_stats_record_id", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_task_event_stats_record_id"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_task_event_stats_record_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_task_event_stats_record_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_task_event_stats_record_id", "alias": "not_null_base_pulseviz_task_event_stats_task_event_stats_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_task_event_stats_record_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere task_event_stats_record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_stats_record_id"}, "test.edw.unique_base_pulseviz_task_event_stats_task_event_stats_record_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_event_stats_record_id", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_base_pulseviz_task_event_stats_task_event_stats_record_id"], "unique_id": "test.edw.unique_base_pulseviz_task_event_stats_task_event_stats_record_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_base_pulseviz_task_event_stats_task_event_stats_record_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "unique_base_pulseviz_task_event_stats_task_event_stats_record_id", "alias": "unique_base_pulseviz_task_event_stats_task_event_stats_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/unique_base_pulseviz_task_event_stats_task_event_stats_record_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_event_stats_record_id\n\n    from psa_dev.scratch_brana.base_pulseviz_task_event_stats\n    where task_event_stats_record_id is not null\n    group by task_event_stats_record_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_stats_record_id"}, "test.edw.not_null_base_pulseviz_task_event_stats_task_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_event_id", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_task_event_id"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_task_event_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_task_event_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_task_event_id", "alias": "not_null_base_pulseviz_task_event_stats_task_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_task_event_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere task_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_id"}, "test.edw.not_null_base_pulseviz_task_event_stats_event_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_event_type"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_event_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_event_type.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_event_type", "alias": "not_null_base_pulseviz_task_event_stats_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_event_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere event_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type"}, "test.edw.accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2], "quote": false, "column_name": "event_type", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2"], "unique_id": "test.edw.accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2", "alias": "accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        event_type as value_field\n\n    from psa_dev.scratch_brana.base_pulseviz_task_event_stats\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        1,2\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type"}, "test.edw.relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_projects_projects')", "field": "project_uid", "column_name": "project_id", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_projects_projects", "model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_"], "unique_id": "test.edw.relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_base_pulseviz_task_event_stats_b1a53044c866b70d0a6fbc1679f46f06.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "alias": "relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"], ["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/relationships_base_pulseviz_task_event_stats_b1a53044c866b70d0a6fbc1679f46f06.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select project_id as id from psa_dev.scratch_brana.base_pulseviz_task_event_stats\n) as child\nleft join (\n    select project_uid as id from psa_dev.scratch_brana.base_projects_projects\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id"}, "test.edw.not_null_base_pulseviz_task_event_stats_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_task_id"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_task_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_task_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_task_id", "alias": "not_null_base_pulseviz_task_event_stats_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_task_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id"}, "test.edw.not_null_base_pulseviz_task_event_stats_task_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_type", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_task_type"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_task_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_task_type.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_task_type", "alias": "not_null_base_pulseviz_task_event_stats_task_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_task_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere task_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_type"}, "test.edw.not_null_base_pulseviz_task_event_stats_task_started_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_started_at", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_task_started_at"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_task_started_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_task_started_at.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_task_started_at", "alias": "not_null_base_pulseviz_task_event_stats_task_started_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_task_started_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere task_started_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_started_at"}, "test.edw.not_null_base_pulseviz_task_event_stats_task_completed_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_completed_at", "model": "{{ ref('base_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_pulseviz_task_event_stats_task_completed_at"], "unique_id": "test.edw.not_null_base_pulseviz_task_event_stats_task_completed_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_pulseviz_task_event_stats_task_completed_at.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_base_pulseviz_task_event_stats_task_completed_at", "alias": "not_null_base_pulseviz_task_event_stats_task_completed_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_base_pulseviz_task_event_stats_task_completed_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_pulseviz_task_event_stats\nwhere task_completed_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_completed_at"}, "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_event_stats_record_id", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id", "alias": "not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere task_event_stats_record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_stats_record_id"}, "test.edw.unique_stg_pulseviz_task_event_stats_task_event_stats_record_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_event_stats_record_id", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_stg_pulseviz_task_event_stats_task_event_stats_record_id"], "unique_id": "test.edw.unique_stg_pulseviz_task_event_stats_task_event_stats_record_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_stg_pulseviz_task_event_stats_task_event_stats_record_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "unique_stg_pulseviz_task_event_stats_task_event_stats_record_id", "alias": "unique_stg_pulseviz_task_event_stats_task_event_stats_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/unique_stg_pulseviz_task_event_stats_task_event_stats_record_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_event_stats_record_id\n\n    from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n    where task_event_stats_record_id is not null\n    group by task_event_stats_record_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_stats_record_id"}, "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_event_id", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_task_event_id"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_task_event_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_task_event_id", "alias": "not_null_stg_pulseviz_task_event_stats_task_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_task_event_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere task_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_id"}, "test.edw.not_null_stg_pulseviz_task_event_stats_event_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_event_type"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_event_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_event_type.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_event_type", "alias": "not_null_stg_pulseviz_task_event_stats_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_event_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere event_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type"}, "test.edw.accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2], "quote": false, "column_name": "event_type", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2"], "unique_id": "test.edw.accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2", "alias": "accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        event_type as value_field\n\n    from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        1,2\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type"}, "test.edw.relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_projects_projects')", "field": "project_uid", "column_name": "project_id", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_projects_projects", "model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_"], "unique_id": "test.edw.relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_stg_pulseviz_task_event_stats_b1a53044c866b70d0a6fbc1679f46f06.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "alias": "relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"], ["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/relationships_stg_pulseviz_task_event_stats_b1a53044c866b70d0a6fbc1679f46f06.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select project_id as id from psa_dev.scratch_brana.stg_pulseviz_task_event_stats\n) as child\nleft join (\n    select project_uid as id from psa_dev.scratch_brana.base_projects_projects\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id"}, "test.edw.not_null_stg_pulseviz_task_event_stats_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_task_id"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_task_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_task_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_task_id", "alias": "not_null_stg_pulseviz_task_event_stats_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_task_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id"}, "test.edw.not_null_stg_pulseviz_task_event_stats_task_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_type", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_task_type"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_task_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_task_type.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_task_type", "alias": "not_null_stg_pulseviz_task_event_stats_task_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_task_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere task_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_type"}, "test.edw.not_null_stg_pulseviz_task_event_stats_task_started_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_started_at", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_task_started_at"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_task_started_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_task_started_at.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_task_started_at", "alias": "not_null_stg_pulseviz_task_event_stats_task_started_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_task_started_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere task_started_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_started_at"}, "test.edw.not_null_stg_pulseviz_task_event_stats_task_completed_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_completed_at", "model": "{{ ref('stg_pulseviz_task_event_stats') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_task_event_stats"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_task_event_stats_task_completed_at"], "unique_id": "test.edw.not_null_stg_pulseviz_task_event_stats_task_completed_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_task_event_stats_task_completed_at.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_task_event_stats_task_completed_at", "alias": "not_null_stg_pulseviz_task_event_stats_task_completed_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_task_event_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_task_event_stats_task_completed_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_task_event_stats\nwhere task_completed_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_completed_at"}, "test.edw.not_null_stg_pulseviz_subtasks_task_event_stats_record_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_event_stats_record_id", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_task_event_stats_record_id"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_task_event_stats_record_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_task_event_stats_record_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_task_event_stats_record_id", "alias": "not_null_stg_pulseviz_subtasks_task_event_stats_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_task_event_stats_record_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere task_event_stats_record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_stats_record_id"}, "test.edw.unique_stg_pulseviz_subtasks_task_event_stats_record_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_event_stats_record_id", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_stg_pulseviz_subtasks_task_event_stats_record_id"], "unique_id": "test.edw.unique_stg_pulseviz_subtasks_task_event_stats_record_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_stg_pulseviz_subtasks_task_event_stats_record_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "unique_stg_pulseviz_subtasks_task_event_stats_record_id", "alias": "unique_stg_pulseviz_subtasks_task_event_stats_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/unique_stg_pulseviz_subtasks_task_event_stats_record_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_event_stats_record_id\n\n    from psa_dev.scratch_brana.stg_pulseviz_subtasks\n    where task_event_stats_record_id is not null\n    group by task_event_stats_record_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_stats_record_id"}, "test.edw.not_null_stg_pulseviz_subtasks_task_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_event_id", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_task_event_id"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_task_event_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_task_event_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_task_event_id", "alias": "not_null_stg_pulseviz_subtasks_task_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_task_event_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere task_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_event_id"}, "test.edw.not_null_stg_pulseviz_subtasks_event_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_event_type"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_event_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_event_type.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_event_type", "alias": "not_null_stg_pulseviz_subtasks_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_event_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere event_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type"}, "test.edw.accepted_values_stg_pulseviz_subtasks_event_type__False__1__2": {"raw_sql": "{{ config(severity='WARN') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2], "quote": false, "column_name": "event_type", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "accepted_values_stg_pulseviz_subtasks_event_type__False__1__2"], "unique_id": "test.edw.accepted_values_stg_pulseviz_subtasks_event_type__False__1__2", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/accepted_values_stg_pulseviz_subtasks_event_type__False__1__2.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "accepted_values_stg_pulseviz_subtasks_event_type__False__1__2", "alias": "accepted_values_stg_pulseviz_subtasks_event_type__False__1__2", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/accepted_values_stg_pulseviz_subtasks_event_type__False__1__2.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "WARN"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        event_type as value_field\n\n    from psa_dev.scratch_brana.stg_pulseviz_subtasks\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        1,2\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_type"}, "test.edw.relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('base_projects_projects')", "field": "project_uid", "column_name": "project_id", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.edw.base_projects_projects", "model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_"], "unique_id": "test.edw.relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/relationships_stg_pulseviz_subtasks_b1a53044c866b70d0a6fbc1679f46f06.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_", "alias": "relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_projects_projects"], ["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/relationships_stg_pulseviz_subtasks_b1a53044c866b70d0a6fbc1679f46f06.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select project_id as id from psa_dev.scratch_brana.stg_pulseviz_subtasks\n) as child\nleft join (\n    select project_uid as id from psa_dev.scratch_brana.base_projects_projects\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id"}, "test.edw.not_null_stg_pulseviz_subtasks_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_task_id"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_task_id", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_task_id.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_task_id", "alias": "not_null_stg_pulseviz_subtasks_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_task_id.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id"}, "test.edw.not_null_stg_pulseviz_subtasks_task_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_type", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_task_type"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_task_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_task_type.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_task_type", "alias": "not_null_stg_pulseviz_subtasks_task_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_task_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere task_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_type"}, "test.edw.not_null_stg_pulseviz_subtasks_task_started_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_started_at", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_task_started_at"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_task_started_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_task_started_at.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_task_started_at", "alias": "not_null_stg_pulseviz_subtasks_task_started_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_task_started_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere task_started_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_started_at"}, "test.edw.not_null_stg_pulseviz_subtasks_task_completed_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_completed_at", "model": "{{ ref('stg_pulseviz_subtasks') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_pulseviz_subtasks"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_pulseviz_subtasks_task_completed_at"], "unique_id": "test.edw.not_null_stg_pulseviz_subtasks_task_completed_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_pulseviz_subtasks_task_completed_at.sql", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "not_null_stg_pulseviz_subtasks_task_completed_at", "alias": "not_null_stg_pulseviz_subtasks_task_completed_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_pulseviz_subtasks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/pulseviz/schema.yml/schema_test/not_null_stg_pulseviz_subtasks_task_completed_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_pulseviz_subtasks\nwhere task_completed_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_completed_at"}, "test.edw.not_null_base_system_checker_hardware_email_address": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_address", "model": "{{ ref('base_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_hardware_email_address"], "unique_id": "test.edw.not_null_base_system_checker_hardware_email_address", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_hardware_email_address.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_hardware_email_address", "alias": "not_null_base_system_checker_hardware_email_address", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_hardware_email_address.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_hardware\nwhere email_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address"}, "test.edw.not_null_base_system_checker_hardware_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('base_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_hardware_created_at"], "unique_id": "test.edw.not_null_base_system_checker_hardware_created_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_hardware_created_at.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_hardware_created_at", "alias": "not_null_base_system_checker_hardware_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_hardware_created_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_hardware\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.edw.not_null_base_system_checker_hardware_processor_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "processor_type", "model": "{{ ref('base_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_hardware_processor_type"], "unique_id": "test.edw.not_null_base_system_checker_hardware_processor_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_hardware_processor_type.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_hardware_processor_type", "alias": "not_null_base_system_checker_hardware_processor_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_hardware_processor_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_hardware\nwhere processor_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "processor_type"}, "test.edw.not_null_base_system_checker_hardware_operating_system": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "operating_system", "model": "{{ ref('base_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_hardware_operating_system"], "unique_id": "test.edw.not_null_base_system_checker_hardware_operating_system", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_hardware_operating_system.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_hardware_operating_system", "alias": "not_null_base_system_checker_hardware_operating_system", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_hardware_operating_system.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_hardware\nwhere operating_system is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "operating_system"}, "test.edw.not_null_base_system_checker_hardware_memory": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "memory", "model": "{{ ref('base_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_hardware_memory"], "unique_id": "test.edw.not_null_base_system_checker_hardware_memory", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_hardware_memory.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_hardware_memory", "alias": "not_null_base_system_checker_hardware_memory", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_hardware_memory.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_hardware\nwhere memory is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "memory"}, "test.edw.not_null_base_system_checker_cw_data_email_address": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_address", "model": "{{ ref('base_system_checker_cw_data') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_cw_data"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_cw_data_email_address"], "unique_id": "test.edw.not_null_base_system_checker_cw_data_email_address", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_cw_data_email_address.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_cw_data_email_address", "alias": "not_null_base_system_checker_cw_data_email_address", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_cw_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_cw_data_email_address.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_cw_data\nwhere email_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address"}, "test.edw.not_null_base_system_checker_cw_data_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('base_system_checker_cw_data') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_cw_data"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_cw_data_created_at"], "unique_id": "test.edw.not_null_base_system_checker_cw_data_created_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_cw_data_created_at.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_cw_data_created_at", "alias": "not_null_base_system_checker_cw_data_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_cw_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_cw_data_created_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_cw_data\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.edw.not_null_base_system_checker_cw_data_cpu": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cpu", "model": "{{ ref('base_system_checker_cw_data') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_cw_data"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_cw_data_cpu"], "unique_id": "test.edw.not_null_base_system_checker_cw_data_cpu", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_cw_data_cpu.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_cw_data_cpu", "alias": "not_null_base_system_checker_cw_data_cpu", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_cw_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_cw_data_cpu.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_cw_data\nwhere cpu is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cpu"}, "test.edw.not_null_base_system_checker_cw_data_operating_system": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "operating_system", "model": "{{ ref('base_system_checker_cw_data') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_cw_data"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_cw_data_operating_system"], "unique_id": "test.edw.not_null_base_system_checker_cw_data_operating_system", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_cw_data_operating_system.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_cw_data_operating_system", "alias": "not_null_base_system_checker_cw_data_operating_system", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_cw_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_cw_data_operating_system.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_cw_data\nwhere operating_system is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "operating_system"}, "test.edw.not_null_base_system_checker_cw_data_memory": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "memory", "model": "{{ ref('base_system_checker_cw_data') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.base_system_checker_cw_data"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_base_system_checker_cw_data_memory"], "unique_id": "test.edw.not_null_base_system_checker_cw_data_memory", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_base_system_checker_cw_data_memory.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_base_system_checker_cw_data_memory", "alias": "not_null_base_system_checker_cw_data_memory", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["base_system_checker_cw_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_base_system_checker_cw_data_memory.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.base_system_checker_cw_data\nwhere memory is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "memory"}, "test.edw.not_null_stg_system_checker_hardware_email_address": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_address", "model": "{{ ref('stg_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_system_checker_hardware_email_address"], "unique_id": "test.edw.not_null_stg_system_checker_hardware_email_address", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_system_checker_hardware_email_address.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_stg_system_checker_hardware_email_address", "alias": "not_null_stg_system_checker_hardware_email_address", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_stg_system_checker_hardware_email_address.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_system_checker_hardware\nwhere email_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address"}, "test.edw.unique_stg_system_checker_hardware_email_address": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email_address", "model": "{{ ref('stg_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.edw.stg_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "unique_stg_system_checker_hardware_email_address"], "unique_id": "test.edw.unique_stg_system_checker_hardware_email_address", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/unique_stg_system_checker_hardware_email_address.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "unique_stg_system_checker_hardware_email_address", "alias": "unique_stg_system_checker_hardware_email_address", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/unique_stg_system_checker_hardware_email_address.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        email_address\n\n    from psa_dev.scratch_brana.stg_system_checker_hardware\n    where email_address is not null\n    group by email_address\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address"}, "test.edw.not_null_stg_system_checker_hardware_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('stg_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_system_checker_hardware_created_at"], "unique_id": "test.edw.not_null_stg_system_checker_hardware_created_at", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_system_checker_hardware_created_at.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_stg_system_checker_hardware_created_at", "alias": "not_null_stg_system_checker_hardware_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_stg_system_checker_hardware_created_at.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_system_checker_hardware\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.edw.not_null_stg_system_checker_hardware_cpu_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cpu_type", "model": "{{ ref('stg_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_system_checker_hardware_cpu_type"], "unique_id": "test.edw.not_null_stg_system_checker_hardware_cpu_type", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_system_checker_hardware_cpu_type.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_stg_system_checker_hardware_cpu_type", "alias": "not_null_stg_system_checker_hardware_cpu_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_stg_system_checker_hardware_cpu_type.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_system_checker_hardware\nwhere cpu_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cpu_type"}, "test.edw.not_null_stg_system_checker_hardware_operating_system": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "operating_system", "model": "{{ ref('stg_system_checker_hardware') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.edw.stg_system_checker_hardware"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [{"sql": "grant select on {{ this }} to role metaplane_role", "transaction": true, "index": null}], "pre-hook": []}, "database": "psa_dev", "schema": "scratch_brana", "fqn": ["edw", "schema_test", "not_null_stg_system_checker_hardware_operating_system"], "unique_id": "test.edw.not_null_stg_system_checker_hardware_operating_system", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "schema_test/not_null_stg_system_checker_hardware_operating_system.sql", "original_file_path": "models/psa/system_checker/schema.yml", "name": "not_null_stg_system_checker_hardware_operating_system", "alias": "not_null_stg_system_checker_hardware_operating_system", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_system_checker_hardware"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/edw/models/psa/system_checker/schema.yml/schema_test/not_null_stg_system_checker_hardware_operating_system.sql", "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to role metaplane_role"], "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom psa_dev.scratch_brana.stg_system_checker_hardware\nwhere operating_system is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "operating_system"}}, "sources": {"source.edw.csp.reports": {"fqn": ["edw", "marts", "cfa", "csp", "reports"], "database": "raw", "schema": "csp_fy20q4", "unique_id": "source.edw.csp.reports", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/marts/cfa/schema.yml", "original_file_path": "models/marts/cfa/schema.yml", "name": "reports", "source_name": "csp", "source_description": "", "loader": "", "identifier": "reports", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.csp_fy20q4.reports"}, "source.edw.struction_site.shr_cf_areas": {"fqn": ["edw", "client_shares", "struction_site", "shr_cf_areas"], "database": "shares_db", "schema": "cloud_factory", "unique_id": "source.edw.struction_site.shr_cf_areas", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/client_shares/schema.yml", "original_file_path": "models/client_shares/schema.yml", "name": "shr_cf_areas", "source_name": "struction_site", "source_description": "", "loader": "", "identifier": "shr_cf_areas", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "shares_db.cloud_factory.shr_cf_areas"}, "source.edw.struction_site.shr_cf_projects": {"fqn": ["edw", "client_shares", "struction_site", "shr_cf_projects"], "database": "shares_db", "schema": "cloud_factory", "unique_id": "source.edw.struction_site.shr_cf_projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/client_shares/schema.yml", "original_file_path": "models/client_shares/schema.yml", "name": "shr_cf_projects", "source_name": "struction_site", "source_description": "", "loader": "", "identifier": "shr_cf_projects", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "shares_db.cloud_factory.shr_cf_projects"}, "source.edw.struction_site.shr_cf_status_changes": {"fqn": ["edw", "client_shares", "struction_site", "shr_cf_status_changes"], "database": "shares_db", "schema": "cloud_factory", "unique_id": "source.edw.struction_site.shr_cf_status_changes", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/client_shares/schema.yml", "original_file_path": "models/client_shares/schema.yml", "name": "shr_cf_status_changes", "source_name": "struction_site", "source_description": "", "loader": "", "identifier": "shr_cf_status_changes", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "shares_db.cloud_factory.shr_cf_status_changes"}, "source.edw.struction_site.shr_st_projects": {"fqn": ["edw", "client_shares", "struction_site", "shr_st_projects"], "database": "shares_db", "schema": "cloud_factory", "unique_id": "source.edw.struction_site.shr_st_projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/client_shares/schema.yml", "original_file_path": "models/client_shares/schema.yml", "name": "shr_st_projects", "source_name": "struction_site", "source_description": "", "loader": "", "identifier": "shr_st_projects", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "shares_db.cloud_factory.shr_st_projects"}, "source.edw.struction_site.shr_video_walks": {"fqn": ["edw", "client_shares", "struction_site", "shr_video_walks"], "database": "shares_db", "schema": "cloud_factory", "unique_id": "source.edw.struction_site.shr_video_walks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/client_shares/schema.yml", "original_file_path": "models/client_shares/schema.yml", "name": "shr_video_walks", "source_name": "struction_site", "source_description": "", "loader": "", "identifier": "shr_video_walks", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "shares_db.cloud_factory.shr_video_walks"}, "source.edw.solarwinds.incidents": {"fqn": ["edw", "psa", "solarwinds", "solarwinds", "incidents"], "database": "raw", "schema": "solarwinds_stitch", "unique_id": "source.edw.solarwinds.incidents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/solarwinds/schema.yml", "original_file_path": "models/psa/solarwinds/schema.yml", "name": "incidents", "source_name": "solarwinds", "source_description": "", "loader": "", "identifier": "incidents", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.solarwinds_stitch.incidents"}, "source.edw.solarwinds.users": {"fqn": ["edw", "psa", "solarwinds", "solarwinds", "users"], "database": "raw", "schema": "solarwinds_stitch", "unique_id": "source.edw.solarwinds.users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/solarwinds/schema.yml", "original_file_path": "models/psa/solarwinds/schema.yml", "name": "users", "source_name": "solarwinds", "source_description": "", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.solarwinds_stitch.users"}, "source.edw.solarwinds.categories": {"fqn": ["edw", "psa", "solarwinds", "solarwinds", "categories"], "database": "raw", "schema": "solarwinds_stitch", "unique_id": "source.edw.solarwinds.categories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/solarwinds/schema.yml", "original_file_path": "models/psa/solarwinds/schema.yml", "name": "categories", "source_name": "solarwinds", "source_description": "", "loader": "", "identifier": "categories", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.solarwinds_stitch.categories"}, "source.edw.solarwinds.departments": {"fqn": ["edw", "psa", "solarwinds", "solarwinds", "departments"], "database": "raw", "schema": "solarwinds_stitch", "unique_id": "source.edw.solarwinds.departments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/solarwinds/schema.yml", "original_file_path": "models/psa/solarwinds/schema.yml", "name": "departments", "source_name": "solarwinds", "source_description": "", "loader": "", "identifier": "departments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.solarwinds_stitch.departments"}, "source.edw.solarwinds.roles": {"fqn": ["edw", "psa", "solarwinds", "solarwinds", "roles"], "database": "raw", "schema": "solarwinds_stitch", "unique_id": "source.edw.solarwinds.roles", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/solarwinds/schema.yml", "original_file_path": "models/psa/solarwinds/schema.yml", "name": "roles", "source_name": "solarwinds", "source_description": "", "loader": "", "identifier": "roles", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.solarwinds_stitch.roles"}, "source.edw.solarwinds.sites": {"fqn": ["edw", "psa", "solarwinds", "solarwinds", "sites"], "database": "raw", "schema": "solarwinds_stitch", "unique_id": "source.edw.solarwinds.sites", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/solarwinds/schema.yml", "original_file_path": "models/psa/solarwinds/schema.yml", "name": "sites", "source_name": "solarwinds", "source_description": "", "loader": "", "identifier": "sites", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.solarwinds_stitch.sites"}, "source.edw.freshdesk.tickets": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "tickets"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.tickets", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "tickets", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "tickets", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"ASSOCIATED_TICKETS_COUNT": {"name": "ASSOCIATED_TICKETS_COUNT", "description": "count of tickets associated with this ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSOCIATION_TYPE": {"name": "ASSOCIATION_TYPE", "description": "identifies the type of the current ticket. Parent = 1, Child = 2, Tracker = 3, Related = 4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CC_EMAILS": {"name": "CC_EMAILS", "description": "Email address added in the 'cc' field of the incoming ticket email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY": {"name": "COMPANY", "description": "json object containing id and name attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_ID": {"name": "COMPANY_ID", "description": "company id. same as company.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "ticket creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOM_FIELDS": {"name": "CUSTOM_FIELDS", "description": "json array that holds custom field objects.  Each object represents a field of information used for the ticket.  typically: \n\n- cf_request - Categorical field holding the reason for the ticket.\n- cf_related_with - categorical field holding the issue of the ticket\n- cf_question - categorical field holding the type of question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELETED": {"name": "DELETED", "description": "Set to true if the ticket has been deleted/trashed. Deleted tickets will not be displayed in any views except the \"deleted\" filter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DUE_BY": {"name": "DUE_BY", "description": "Timestamp that denotes when the ticket is due to be resolved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL_CONFIG_ID": {"name": "EMAIL_CONFIG_ID", "description": "ID of email config which is used for this ticket. (i.e., support@yourcompany.com/sales@yourcompany.com)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FR_DUE_BY": {"name": "FR_DUE_BY", "description": "Timestamp that denotes when the first response is due", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FR_ESCALATED": {"name": "FR_ESCALATED", "description": "Set to true if the ticket has been escalated as the result of first response time being breached", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FWD_EMAILS": {"name": "FWD_EMAILS", "description": "Email address(e)s added while forwarding a ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GROUP_ID": {"name": "GROUP_ID", "description": "ID of the group to which the ticket has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "Unique ID of the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IS_ESCALATED": {"name": "IS_ESCALATED", "description": "Set to true if the ticket has been escalated for any reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NR_ESCALATED": {"name": "NR_ESCALATED", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY": {"name": "PRIORITY", "description": "Enumerator describing the priority of the ticket.\n\n||Priority|Value||\n|Low|1|\n|Medium|2|\n|High|3|\n|Urgent|4|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCT_ID": {"name": "PRODUCT_ID", "description": "ID of the product to which the ticket is associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REPLY_CC_EMAILS": {"name": "REPLY_CC_EMAILS", "description": "Email address added while replying to a ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REQUESTER": {"name": "REQUESTER", "description": "json object containing requester details.  Typically:\n- email - email address of the requester\n- id - freshdesk unique id for the requester\n- mobile - unknown\n- name - Full name of the requester\n- phone - phone number of the requester", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REQUESTER_ID": {"name": "REQUESTER_ID", "description": "User ID of the requester. For existing contacts, the requester_id can be passed instead of the requester's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RESPONDER_ID": {"name": "RESPONDER_ID", "description": "ID of the agent to whom the ticket has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOURCE": {"name": "SOURCE", "description": "Enumerator describing the channel through which the ticket was created.\n\n||Source|Value||\n|Email|1|\n|Portal|2|\n|Phone|3|\n|Chat|7|\n|Mobihelp|8|\n|Feedback Widget|9|\n|Outbound Email|10|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPAM": {"name": "SPAM", "description": "Set to true if the ticket has been marked as spam", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATS": {"name": "STATS", "description": "json object containing timestamps relevant to calculating ticket lifecycle durations.  Typically:\n- agent_responded_at - \n- closed_at - \n- first_responded_at - \n- pending_since_at - \n- reopened_at - \n- requester_responded_at - \n- resolved_at - \n- status_updated_at -", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Enumerator describing the status of the ticket.\n\n||Status|Value||\n|Open|2|\n|Pending|3|\n|Resolvede|4|\n|Closed|5|", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUBJECT": {"name": "SUBJECT", "description": "Subject of the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAGS": {"name": "TAGS", "description": "Tags that have been associated with the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TICKET_CC_EMAILS": {"name": "TICKET_CC_EMAILS", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_EMAILS": {"name": "TO_EMAILS", "description": "Email addresses to which the ticket was originally sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "Helps categorize the ticket according to the different kinds of issues your support team deals with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_AT": {"name": "UPDATED_AT", "description": "Ticket updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.tickets"}, "source.edw.freshdesk.agents": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "agents"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.agents", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "agents", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "agents", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"AGENT_LEVEL_ID": {"name": "AGENT_LEVEL_ID", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVAILABLE": {"name": "AVAILABLE", "description": "If the agent is in a group that has enabled \"Automatic Ticket Assignment\", this attribute will be set to true if the agent is accepting new tickets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVAILABLE_SINCE": {"name": "AVAILABLE_SINCE", "description": "Timestamp that denotes when the agent became available/unavailable (depending on the value of the 'available' attribute)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTACT": {"name": "CONTACT", "description": "json object containing info relevant to contacting an agent.  Typically:\n\n- active - Set to true if the agent is verified\n- created_at - Creation timestamp\n- email - Email address of the agent\n- job_title - Job title of the agent\n- language - Language of the agent. Default language is \"en\"\n- last_login_at - Timestamp of the agent's last successful login\n- mobile - Mobile number of the agent\n- name - Name of the agent\n- phone - Telephone number of the agent\n- time_zone - Time zone of the agent\n- updated_at - Timestamp of the last update", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "Agent creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "User ID of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_ACTIVE_AT": {"name": "LAST_ACTIVE_AT", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OCCASIONAL": {"name": "OCCASIONAL", "description": "Set to true if this is an occasional agent (true => occasional, false => full-time)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNATURE": {"name": "SIGNATURE", "description": "Signature of the agent in HTML format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TICKET_SCOPE": {"name": "TICKET_SCOPE", "description": "Ticket permission of the agent.  (1 -> Global Access, 2 -> Group Access, 3 -> Restricted Access)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "Describes agent type, e.g. 'support_agent'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_AT": {"name": "UPDATED_AT", "description": "Agent updated timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.agents"}, "source.edw.freshdesk.companies": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "companies"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.companies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "companies", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "companies", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"CREATED_AT": {"name": "CREATED_AT", "description": "timestamp of company creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOM_FIELDS": {"name": "CUSTOM_FIELDS", "description": "custom field entries", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "description of company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DOMAINS": {"name": "DOMAINS", "description": "list of applicable web addresses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "unique id of the company record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name identifying the company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_AT": {"name": "UPDATED_AT", "description": "timestamp of most recent record update", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.companies"}, "source.edw.freshdesk.satisfaction_ratings": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "satisfaction_ratings"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.satisfaction_ratings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "satisfaction_ratings", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "satisfaction_ratings", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"AGENT_ID": {"name": "AGENT_ID", "description": "unique id of ticket owner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "timestamp of ticket creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEEDBACK": {"name": "FEEDBACK", "description": "feedback from survey taker (requester) regarding ticket or ticket resolution", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "unique id of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATINGS": {"name": "RATINGS", "description": "array of satisfaction rating objectes (each object is a question)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SURVEY_ID": {"name": "SURVEY_ID", "description": "unique id of the survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TICKET_ID": {"name": "TICKET_ID", "description": "unique id of the ticket to which the satisfaction rating applies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_AT": {"name": "UPDATED_AT", "description": "timestamp of the most recent ticket update", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USER_ID": {"name": "USER_ID", "description": "unique id of the requester responding to the survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "stitch field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GROUP_ID": {"name": "GROUP_ID", "description": "unuiqe id of the group to which the agent belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.satisfaction_ratings"}, "source.edw.freshdesk.conversations": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "conversations"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.conversations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "conversations", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "conversations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.conversations"}, "source.edw.freshdesk.groups": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "groups"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.groups", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "groups", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "groups", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.groups"}, "source.edw.freshdesk.roles": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "roles"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.roles", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "roles", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "roles", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.roles"}, "source.edw.freshdesk.time_entries": {"fqn": ["edw", "psa", "freshdesk", "freshdesk", "time_entries"], "database": "raw", "schema": "freshdesk_stitch", "unique_id": "source.edw.freshdesk.time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/freshdesk/schema.yml", "original_file_path": "models/psa/freshdesk/schema.yml", "name": "time_entries", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "time_entries", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.freshdesk_stitch.time_entries"}, "source.edw.v7.agt": {"fqn": ["edw", "psa", "clients", "agt", "v7", "agt"], "database": "raw", "schema": "v7_xplenty", "unique_id": "source.edw.v7.agt", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clients/agt/schema.yml", "original_file_path": "models/psa/clients/agt/schema.yml", "name": "agt", "source_name": "v7", "source_description": "", "loader": "", "identifier": "agt", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.v7_xplenty.agt"}, "source.edw.hudl.daily_fb_vb_training": {"fqn": ["edw", "psa", "clients", "hudl", "hudl", "daily_fb_vb_training"], "database": "raw", "schema": "hudl_xplenty", "unique_id": "source.edw.hudl.daily_fb_vb_training", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clients/hudl/schema.yml", "original_file_path": "models/psa/clients/hudl/schema.yml", "name": "daily_fb_vb_training", "source_name": "hudl", "source_description": "", "loader": "", "identifier": "daily_fb_vb_training", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "xplenty_loaded_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"analyst_id": {"name": "analyst_id", "description": "Unique id of the analyst", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qcscore": {"name": "qcscore", "description": "Accuracy", "meta": {}, "data_type": null, "quote": null, "tags": []}, "analyst_name": {"name": "analyst_name", "description": "Name of the worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventname": {"name": "eventname", "description": "File Name or Game Number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queue_item_id": {"name": "queue_item_id", "description": "Unique child ID of a game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "mail of the worker. This email is expected to be the same as the email of the worker in the WorkStream app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_completed": {"name": "date_completed", "description": "DateTime for when the game was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tagtime_minutes": {"name": "tagtime_minutes", "description": "Time spent by worker on the task of the game", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sport": {"name": "sport", "description": "Name of the sport", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hudl_xplenty.daily_fb_vb_training"}, "source.edw.hudl.daily_player_tracking": {"fqn": ["edw", "psa", "clients", "hudl", "hudl", "daily_player_tracking"], "database": "raw", "schema": "hudl_xplenty", "unique_id": "source.edw.hudl.daily_player_tracking", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clients/hudl/schema.yml", "original_file_path": "models/psa/clients/hudl/schema.yml", "name": "daily_player_tracking", "source_name": "hudl", "source_description": "", "loader": "", "identifier": "daily_player_tracking", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"analyst_id": {"name": "analyst_id", "description": "Unique id of the analyst", "meta": {}, "data_type": null, "quote": null, "tags": []}, "analyst_name": {"name": "analyst_name", "description": "Name of the worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "child_job_id": {"name": "child_job_id", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "master_job_id": {"name": "master_job_id", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email of the worker. This email is expected to be the same as the email of the worker in the WorkStream app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_completed": {"name": "date_completed", "description": "DateTime for when the task was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tagtime_minutes": {"name": "tagtime_minutes", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_name": {"name": "job_name", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percent_complete": {"name": "percent_complete", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hudl_xplenty.daily_player_tracking"}, "source.edw.hudl.daily_fb_vb_production": {"fqn": ["edw", "psa", "clients", "hudl", "hudl", "daily_fb_vb_production"], "database": "raw", "schema": "hudl_xplenty", "unique_id": "source.edw.hudl.daily_fb_vb_production", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clients/hudl/schema.yml", "original_file_path": "models/psa/clients/hudl/schema.yml", "name": "daily_fb_vb_production", "source_name": "hudl", "source_description": "", "loader": "", "identifier": "daily_fb_vb_production", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"analyst_id": {"name": "analyst_id", "description": "Unique id of the analyst", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queue_item_id": {"name": "queue_item_id", "description": "id of unity of work", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventname": {"name": "eventname", "description": "name of event being reviewed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tagging_view": {"name": "tagging_view", "description": "type of work (FB - Grid, FB - Formation, Volleyball, etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "analyst_name": {"name": "analyst_name", "description": "Name of the worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sets": {"name": "sets", "description": "number of volleyball sets", "meta": {}, "data_type": null, "quote": null, "tags": []}, "matching_level": {"name": "matching_level", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_rating": {"name": "user_rating", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email of the worker. This email is expected to be the same as the email of the worker in the WorkStream app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qc_score": {"name": "qc_score", "description": "Quality Control score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_completed": {"name": "date_completed", "description": "Datetime the task was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tagtime_minutes": {"name": "tagtime_minutes", "description": "duration of work performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percent_complete": {"name": "percent_complete", "description": "final percent complete of game after work session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_completed": {"name": "task_completed", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "xplenty_loaded_at": {"name": "xplenty_loaded_at", "description": "datetime row was loaded to warehouse", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hudl_xplenty.daily_fb_vb_production"}, "source.edw.hudl_qa_scores.sheet1": {"fqn": ["edw", "psa", "clients", "hudl", "hudl_qa_scores", "sheet1"], "database": "raw", "schema": "hudl_review_stitch", "unique_id": "source.edw.hudl_qa_scores.sheet1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clients/hudl/schema.yml", "original_file_path": "models/psa/clients/hudl/schema.yml", "name": "sheet1", "source_name": "hudl_qa_scores", "source_description": "", "loader": "", "identifier": "sheet1", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"analyst_id": {"name": "analyst_id", "description": "Unique id of the analyst", "meta": {}, "data_type": null, "quote": null, "tags": []}, "analyst_name": {"name": "analyst_name", "description": "Name of the worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "child_job_id": {"name": "child_job_id", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "master_job_id": {"name": "master_job_id", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email of the worker. This email is expected to be the same as the email of the worker in the WorkStream app.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_completed": {"name": "date_completed", "description": "DateTime for when the task was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tagtime_minutes": {"name": "tagtime_minutes", "description": "Total minutes spent in this session by this worker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_name": {"name": "job_name", "description": "Type of work.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percent_complete": {"name": "percent_complete", "description": "Point at which this worker stopped reviewing the game.  DOES NOT reflect the percent of game reviewed by this cloudworker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade": {"name": "grade", "description": "Score applied through manual qa process", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hudl_review_stitch.sheet1"}, "source.edw.abyss.abyss_solutions_v7": {"fqn": ["edw", "psa", "clients", "abyss", "abyss", "abyss_solutions_v7"], "database": "raw", "schema": "abyss_xplenty", "unique_id": "source.edw.abyss.abyss_solutions_v7", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clients/abyss/schema.yml", "original_file_path": "models/psa/clients/abyss/schema.yml", "name": "abyss_solutions_v7", "source_name": "abyss", "source_description": "", "loader": "", "identifier": "abyss_solutions_v7", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.abyss_xplenty.abyss_solutions_v7"}, "source.edw.calendar.api_keys": {"fqn": ["edw", "psa", "calendar", "calendar", "api_keys"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.api_keys", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "api_keys", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "api_keys", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.api_keys"}, "source.edw.calendar.ar_internal_metadata": {"fqn": ["edw", "psa", "calendar", "calendar", "ar_internal_metadata"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.ar_internal_metadata", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "ar_internal_metadata", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "ar_internal_metadata", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.ar_internal_metadata"}, "source.edw.calendar.calendars": {"fqn": ["edw", "psa", "calendar", "calendar", "calendars"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.calendars", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "calendars", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "calendars", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.calendars"}, "source.edw.calendar.claims": {"fqn": ["edw", "psa", "calendar", "calendar", "claims"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.claims", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "claims", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "claims", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.claims"}, "source.edw.calendar.delayed_jobs": {"fqn": ["edw", "psa", "calendar", "calendar", "delayed_jobs"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.delayed_jobs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "delayed_jobs", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "delayed_jobs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.delayed_jobs"}, "source.edw.calendar.events": {"fqn": ["edw", "psa", "calendar", "calendar", "events"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.events", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "events", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "events", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.events"}, "source.edw.calendar.event_instances": {"fqn": ["edw", "psa", "calendar", "calendar", "event_instances"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.event_instances", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "event_instances", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "event_instances", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.event_instances"}, "source.edw.calendar.open_shifts": {"fqn": ["edw", "psa", "calendar", "calendar", "open_shifts"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.open_shifts", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "open_shifts", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "open_shifts", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.open_shifts"}, "source.edw.calendar.open_shift_requests": {"fqn": ["edw", "psa", "calendar", "calendar", "open_shift_requests"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.open_shift_requests", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "open_shift_requests", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "open_shift_requests", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.open_shift_requests"}, "source.edw.calendar.reject_schedules": {"fqn": ["edw", "psa", "calendar", "calendar", "reject_schedules"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.reject_schedules", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "reject_schedules", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "reject_schedules", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.reject_schedules"}, "source.edw.calendar.schedules": {"fqn": ["edw", "psa", "calendar", "calendar", "schedules"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.schedules", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "schedules", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "schedules", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.schedules"}, "source.edw.calendar.schema_migrations": {"fqn": ["edw", "psa", "calendar", "calendar", "schema_migrations"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.schema_migrations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "schema_migrations", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "schema_migrations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.schema_migrations"}, "source.edw.calendar.trades": {"fqn": ["edw", "psa", "calendar", "calendar", "trades"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar.trades", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "trades", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "trades", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw.trades"}, "source.edw.calendar._sdc_rejected": {"fqn": ["edw", "psa", "calendar", "calendar", "_sdc_rejected"], "database": "raw", "schema": "calendar_ppw", "unique_id": "source.edw.calendar._sdc_rejected", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/calendar/schema.yml", "original_file_path": "models/psa/calendar/schema.yml", "name": "_sdc_rejected", "source_name": "calendar", "source_description": "", "loader": "", "identifier": "_sdc_rejected", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.calendar_ppw._sdc_rejected"}, "source.edw.clientplatform.accounts": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "accounts"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.accounts", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "accounts", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "accounts", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Client/Workstream account information", "columns": {"created_at": {"name": "created_at", "description": "Datetime when the account was recorded in the system", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Datetime when the client was offboarded from the system", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of an account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of client/workstream", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_id": {"name": "salesforce_id", "description": "Salesforce id to which this client is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "Address information of client", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_no": {"name": "phone_no", "description": "Contact information of client", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "Website information of client", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.accounts"}, "source.edw.clientplatform.job_types": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "job_types"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.job_types", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "job_types", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "job_types", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Station associated with production line", "columns": {"access_hash": {"name": "access_hash", "description": "ID of the station by which it is referred in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignment_duration": {"name": "assignment_duration", "description": "Duration in secs allocated for task that belongs to this station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime when this station was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "difficulty_level": {"name": "difficulty_level", "description": "Difficulty level of the tasks belonging to this station. Don't carry too much meaning in our case as it is always 1.0 in our case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "form_id": {"name": "form_id", "description": "ID of the task form that is associated with this station. A foreign key reference to forms table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Internal id of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_payout": {"name": "max_payout", "description": "Maximum payout paid in cents on task completion. This value is only present if variable payout is enabled in the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_skill_score": {"name": "max_skill_score", "description": "Max skill score required by a worker to do the regular task of this station. It is always 0.93 in our case.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "min_payout": {"name": "min_payout", "description": "Minimum payout paid in cents on task completion. This value is only present if payout is enabled in this station.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "min_skill_score": {"name": "min_skill_score", "description": "Minimun skill score required by a worker to do the regular task of this station. If a worker has a skill score below this threshold then ground truth task would be server to retrain the worker. It is always 0.6 in our case.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reward": {"name": "reward", "description": "Reward paid in cents on task completion if variable payout is not enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skill_id": {"name": "skill_id", "description": "Skill ID that is required by worker to perform task of this station.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status to indicate if a station is put on hold or is active. Possible values 0 -> Active, 1 -> Paused", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the station", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type_id": {"name": "transaction_type_id", "description": "Production line this station belongs to. Reference to transaction_types table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Represents either Human/Robot station type. Possible values include SimpleContentV1, APIContentV1, MarkerV1, RobotStation, SlicerRobot, AccusoftRobot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime this station record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variable_reward": {"name": "variable_reward", "description": "A boolean value that indicates whether variable reward is applicable or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.job_types"}, "source.edw.clientplatform.opt_out_station_details": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "opt_out_station_details"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.opt_out_station_details", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "opt_out_station_details", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "opt_out_station_details", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Stores the details of opted-out stations for certain duration by a worker which is available in workspace", "columns": {"created_at": {"name": "created_at", "description": "Satetime of record creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Associated dispatched job/task to worker that got freed-up due to opt-out action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_type_id": {"name": "job_type_id", "description": "Station id for which worker opted-out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opt_out_at": {"name": "opt_out_at", "description": "Datetime of opt-out action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opt_out_duration": {"name": "opt_out_duration", "description": "Duration in secs the station was opted-out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Task id of the worker platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the recorded was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Worker who performed the opt-out operation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.opt_out_station_details"}, "source.edw.clientplatform.skills": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "skills"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.skills", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "skills", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "skills", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Stores the information about the skills available in the platform.", "columns": {"created_at": {"name": "created_at", "description": "Datetime the skill record was introduced", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Internal id of the skill", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lines_count": {"name": "lines_count", "description": "Number of production lines that are using this skill", "meta": {}, "data_type": null, "quote": null, "tags": []}, "public": {"name": "public", "description": "Boolean to represent if the skill is private or public.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stations_count": {"name": "stations_count", "description": "Number of stations using the skill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of skill. Possible values 0 -> Active, 1 -> Archived", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the skill that is displayed to the users", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uid": {"name": "uid", "description": "Unique ID of the skill", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the skill was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workers_count": {"name": "workers_count", "description": "Number of workers having this skill", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "a Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.skills"}, "source.edw.clientplatform.transaction_types": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "transaction_types"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.transaction_types", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "transaction_types", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "transaction_types", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Production lines which belong to client/workstream", "columns": {"access_hash": {"name": "access_hash", "description": "ID of production line that is used in other table to reference it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account under which this production line is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_complete": {"name": "auto_complete", "description": "Deprecated; no longer in use. A boolean value which allows the production runs belonging to this production line to advance to the final state if it is set to true.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime when the production line was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "developer_id": {"name": "developer_id", "description": "Deprecated; no longer in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engine_code": {"name": "engine_code", "description": "Workflow of the production line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of production line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents different stages of production line. Possible values -1 -> Building, 0 -> In Review, 1 -> Valid and Active, 2 -> Rejected, 3 -> Aborted, 4 -> Archived", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the production line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_class": {"name": "transaction_class", "description": "Transction class that is used by production runs of this production line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turnaround": {"name": "turnaround", "description": "Deprecated and replaced by trunaround_time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turnaround_time": {"name": "turnaround_time", "description": "Value that is used to set the turnaround time in hours to production runs associated with this production line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Represents type of production line. Represent TransactionType or its derived classes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the production line was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "ID of the user who created the production line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_training_id": {"name": "worker_training_id", "description": "Deprecated and no longer used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.transaction_types"}, "source.edw.clientplatform.transactions": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "transactions"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.transactions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "transactions", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Production runs sent by client for CF to work on", "columns": {"access_hash": {"name": "access_hash", "description": "ID of production runs that is used to reference it outside this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annotation": {"name": "annotation", "description": "JSON field that stores additional information that are required to create units of this production run if production run is created via file upload. Information contained in this object are spreadsheet type and url to create units.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "callback_url": {"name": "callback_url", "description": "Callback URL that is used by the workflow to sent result once the prodution run reached final state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Datetime when the production run was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime when production run was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deadline": {"name": "deadline", "description": "Datetime that indicates the sla of production run. Default is 48 hours.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Internal ID of production run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Determines the priority of the production runs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of production run. Possible values  -1 -> Building, 0 -> Processing, 1 -> Processed, 2 -> Timestamping, 3 -> Processed, 4 -> Error, 5 -> Review, 6 -> In Review, 7 -> Trial Limit, 8 -> Boarding, 9 -> Processing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type_id": {"name": "transaction_type_id", "description": "ID of production line it is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of production run. Represent ProductionRun or its derived classes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime this record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.transactions"}, "source.edw.clientplatform.worker_skill_gold_standard_counters": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "worker_skill_gold_standard_counters"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.worker_skill_gold_standard_counters", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "worker_skill_gold_standard_counters", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "worker_skill_gold_standard_counters", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "This table is used to identify all the skills the worker has accquired and whether that worker is still eligible to perform regular task requiring those skills", "columns": {"attempted_gt": {"name": "attempted_gt", "description": "Deprecated, no longer in use", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime when the record was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eligible": {"name": "eligible", "description": "Indicates whether the worker is still elligble for the tasks requiring this skill id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jobs_since_gt": {"name": "jobs_since_gt", "description": "Deprecated, no longer in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skill_id": {"name": "skill_id", "description": "A foreign key that reference to skill in skills table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Worker to which this record is associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.worker_skill_gold_standard_counters"}, "source.edw.clientplatform.worker_skills": {"fqn": ["edw", "psa", "clientplatform", "clientplatform", "worker_skills"], "database": "raw", "schema": "cf2_clientplatform_stitch", "unique_id": "source.edw.clientplatform.worker_skills", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/clientplatform/schema.yml", "original_file_path": "models/psa/clientplatform/schema.yml", "name": "worker_skills", "source_name": "clientplatform", "source_description": "", "loader": "", "identifier": "worker_skills", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Stores worker skills value and its lineage", "columns": {"assignment_id": {"name": "assignment_id", "description": "Assignment due to which the work skill score was changed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime when the record was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eligible": {"name": "eligible", "description": "Represents whether skill score was eligible for a worker to perform regular work", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_gold": {"name": "from_gold", "description": "Indicates whether the skill score fluctuation happens due to spot check or regular task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Id of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level": {"name": "level", "description": "Deprecated, not used and always of value 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Parent id this record is child of. If a worker has accquired a skill for first time, the value would be null indicating it is the root record for this worker for this particular skill", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skill_id": {"name": "skill_id", "description": "Skill id the record is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "Skill score value obtain after the calculation using certain algoirthm. Current skill score based on previous skill score and algorith that is used to obtain the new value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Worker to which this record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_clientplatform_stitch.worker_skills"}, "source.edw.workerplatform.opt_out_details": {"fqn": ["edw", "psa", "workerplatform", "workerplatform", "opt_out_details"], "database": "raw", "schema": "cf2_workerplatform_stitch", "unique_id": "source.edw.workerplatform.opt_out_details", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/workerplatform/schema.yml", "original_file_path": "models/psa/workerplatform/schema.yml", "name": "opt_out_details", "source_name": "workerplatform", "source_description": "", "loader": "", "identifier": "opt_out_details", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"created_at": {"name": "created_at", "description": "Datetime the record was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration": {"name": "duration", "description": "Duration in seconds the station was opted-out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_type_id": {"name": "job_type_id", "description": "Station id of client platform for which worker opted-out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opt_out_at": {"name": "opt_out_at", "description": "Datetime of opt-out action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Task id that were marked for released due to opt-out action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime this record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Worker who performed the opt-out operation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_id": {"name": "_id", "description": "ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_workerplatform_stitch.opt_out_details"}, "source.edw.workerplatform.payments": {"fqn": ["edw", "psa", "workerplatform", "workerplatform", "payments"], "database": "raw", "schema": "cf2_workerplatform_stitch", "unique_id": "source.edw.workerplatform.payments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/workerplatform/schema.yml", "original_file_path": "models/psa/workerplatform/schema.yml", "name": "payments", "source_name": "workerplatform", "source_description": "", "loader": "", "identifier": "payments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Contains worker payment history", "columns": {"cf_office_id": {"name": "cf_office_id", "description": "ID of cf office location and other details this record is associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime of record creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Datetime of record removed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "Exchange rate that was used for worker payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "Exchange rate date which is used for worker payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_on": {"name": "paid_on", "description": "Date on which worker was paid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime when the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_week": {"name": "year_week", "description": "Week of the year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_id": {"name": "_id", "description": "ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_workerplatform_stitch.payments"}, "source.edw.workerplatform.tasks": {"fqn": ["edw", "psa", "workerplatform", "workerplatform", "tasks"], "database": "raw", "schema": "cf2_workerplatform_stitch", "unique_id": "source.edw.workerplatform.tasks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/workerplatform/schema.yml", "original_file_path": "models/psa/workerplatform/schema.yml", "name": "tasks", "source_name": "workerplatform", "source_description": "", "loader": "", "identifier": "tasks", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Tasks those are assigned/dispatched to worker", "columns": {"accuracy_threshold": {"name": "accuracy_threshold", "description": "Accuracy threshold that is required for the spot check to be accepted correctly", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignment_duration": {"name": "assignment_duration", "description": "Time alloted for completing the task in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Datetime the task was submitted by worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cp_id": {"name": "cp_id", "description": "Job id of client platform jobs table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime of task creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "Additional input that could be helpful to render task in workspace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deduct_on_rejection": {"name": "deduct_on_rejection", "description": "Specifies whether the worker earning should be deducted if wrongly completed. If a content task is rejected by reviewer and this flag is set to true then previous awarded earning of content worker would be deducted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Datetime when the task was deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disable_optout": {"name": "disable_optout", "description": "Indicates whether the worker is allowed to skipped task station or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dispatched_at": {"name": "dispatched_at", "description": "Datetime when the task is actually sent to workspace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expected_output": {"name": "expected_output", "description": "Expected output of spot-check againts which it would be compared", "meta": {}, "data_type": null, "quote": null, "tags": []}, "explanation": {"name": "explanation", "description": "Explanation of spot-check if incorrectly submitted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flexible_fields": {"name": "flexible_fields", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "form_access_hash": {"name": "form_access_hash", "description": "Task form id that is used to render form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inputs": {"name": "inputs", "description": "Input that is used to render task in workspace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_review_job_type": {"name": "is_review_job_type", "description": "Indicates if the task is of type review", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_type_id": {"name": "job_type_id", "description": "Production line station id this task belongs to. This id is the id of job_types table in client platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output": {"name": "output", "description": "Task output submitted by worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quality_score": {"name": "quality_score", "description": "Qualtiy score of the task. This is available for spot-check task (aka goldstandard task) and task that is a part of content-review workflow", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rejection_details": {"name": "rejection_details", "description": "Reason behnind the output of the task not accepted as correct", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reward": {"name": "reward", "description": "Reward in cents for completing the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secure_url_settings": {"name": "secure_url_settings", "description": "Setting that determines if Shortly service should be used to generate auto-expire task assets URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Indicates the status of the task. Possible values assigned, completed, rejected, appealed, approved, admin_rejected, skipped, expired, dispatched", "meta": {}, "data_type": null, "quote": null, "tags": []}, "support_secure_url": {"name": "support_secure_url", "description": "Indicates if this task support secure url", "meta": {}, "data_type": null, "quote": null, "tags": []}, "support_special_chars": {"name": "support_special_chars", "description": "Indicates if support for special chars are needed in task forms", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "Task form last updated timestamp. Used to determine invalidate the cached task form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the production line station this task belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transit_at": {"name": "transit_at", "description": "Datetime of last task transition time from one status to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record is last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Worker id to whom the task is assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_id": {"name": "_id", "description": "ID of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_type": {"name": "_type", "description": "Type of the task. Could be GoldTask or RegularTask", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rejected_at": {"name": "rejected_at", "description": "Datetime the task was rejected", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignment_score": {"name": "assignment_score", "description": "Score obtained for the task. Value is present for spot-check task (goldstandard task) and tasks that are the part of content review paradigm", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_comment": {"name": "worker_comment", "description": "Comment provided by the worker if worker thinks the task is wrongly flagged", "meta": {}, "data_type": null, "quote": null, "tags": []}, "moderator_comment": {"name": "moderator_comment", "description": "Comment provided by moderator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "root_output": {"name": "root_output", "description": "Expected output of spot-check task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_deleted_at": {"name": "_sdc_deleted_at", "description": "Timestanmp indicating when Stitch removed the record from warehouse", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_workerplatform_stitch.tasks"}, "source.edw.workerplatform.teams": {"fqn": ["edw", "psa", "workerplatform", "workerplatform", "teams"], "database": "raw", "schema": "cf2_workerplatform_stitch", "unique_id": "source.edw.workerplatform.teams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/workerplatform/schema.yml", "original_file_path": "models/psa/workerplatform/schema.yml", "name": "teams", "source_name": "workerplatform", "source_description": "", "loader": "", "identifier": "teams", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Team/Toli details", "columns": {"category": {"name": "category", "description": "Indicates which type of users are there in this team. Possible values 1 -> cloud worker, 2 -> core, 4 -> provisional worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cf_office_id": {"name": "cf_office_id", "description": "Indicates the location to which this team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloud_seeder_id": {"name": "cloud_seeder_id", "description": "ID of cloud seeder", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime of record creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by": {"name": "created_by", "description": "ID of user who created this team if present", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cs_report_due_date": {"name": "cs_report_due_date", "description": "Community service report due date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Datetime when the record was deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inhouse": {"name": "inhouse", "description": "Indicates whether this team is for inhouse or distributed workers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previous_week_ranking": {"name": "previous_week_ranking", "description": "Team last week ranking", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Indicates status of team. Possible values are active and inactive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sync_hash": {"name": "sync_hash", "description": "Id to used to sync onboarded members", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gold_task_count": {"name": "total_gold_task_count", "description": "Total gold task completed by members of this team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_work_accuracy": {"name": "total_work_accuracy", "description": "Avg. accuracy of members of this team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transit_at": {"name": "transit_at", "description": "Datetime when the team move from one status to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_earning": {"name": "weekly_earning", "description": "Total weekly earning of the members of this team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_quality": {"name": "weekly_quality", "description": "Avg. weekly quality of members of this team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_id": {"name": "_id", "description": "ID of the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_workerplatform_stitch.teams"}, "source.edw.workerplatform.work_histories": {"fqn": ["edw", "psa", "workerplatform", "workerplatform", "work_histories"], "database": "raw", "schema": "cf2_workerplatform_stitch", "unique_id": "source.edw.workerplatform.work_histories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/workerplatform/schema.yml", "original_file_path": "models/psa/workerplatform/schema.yml", "name": "work_histories", "source_name": "workerplatform", "source_description": "", "loader": "", "identifier": "work_histories", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Worker work history. Includes different work information of worker like task completed, earning etc for specified time period", "columns": {"aggregate_log": {"name": "aggregate_log", "description": "Embedded document within work history document. Includes cumulative total earning and goldstandard completed/rejected", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bonuses": {"name": "bonuses", "description": "Embedded bonuses document provided to worker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime of record creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cumulative_total_earning": {"name": "cumulative_total_earning", "description": "Cumulative earning of worker in cents", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Indicates for which month the record is for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_summaries": {"name": "task_summaries", "description": "Embedded task documents within work history document. Contain actual task completed by this worker for specified time range", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Worker to whom the work history record belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "Indicates for which year the record is for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_id": {"name": "_id", "description": "ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_task_summaries": {"name": "new_task_summaries", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_workerplatform_stitch.work_histories"}, "source.edw.workerplatform.workers": {"fqn": ["edw", "psa", "workerplatform", "workerplatform", "workers"], "database": "raw", "schema": "cf2_workerplatform_stitch", "unique_id": "source.edw.workerplatform.workers", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/workerplatform/schema.yml", "original_file_path": "models/psa/workerplatform/schema.yml", "name": "workers", "source_name": "workerplatform", "source_description": "", "loader": "", "identifier": "workers", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Users of the worker platform", "columns": {"admin": {"name": "admin", "description": "Indicates if a user is an admin or regular user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Indicates the category of users. Possible values are 1 -> cloud worker, 2 -> core and 4 -> provisional worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels_handle": {"name": "channels_handle", "description": "Contains workforce channel user handler", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Datetime of record creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cumulative_record": {"name": "cumulative_record", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_sign_in_at": {"name": "current_sign_in_at", "description": "Last logged-in datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_sign_in_ip": {"name": "current_sign_in_ip", "description": "IP address from where user successfully last logged-in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Datetime the record was deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email id of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encrypted_password": {"name": "encrypted_password", "description": "Encrypted password of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entrance_badge_id": {"name": "entrance_badge_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "graduated": {"name": "graduated", "description": "Indicates if a user is a graduated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "graduated_at": {"name": "graduated_at", "description": "Graduated datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inhouse": {"name": "inhouse", "description": "Inhouse or distributed user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invitation_accepted_at": {"name": "invitation_accepted_at", "description": "Datetime when the invitation to join CF workforce was accepted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invitation_created_at": {"name": "invitation_created_at", "description": "Datetime when invitation was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invitation_sent_at": {"name": "invitation_sent_at", "description": "Datetime when invitation was sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invitation_token": {"name": "invitation_token", "description": "Invitation token against which the invitation link would be validated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cloud_seeder": {"name": "is_cloud_seeder", "description": "Indicates if a user is a cloud seeder", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_team_leader": {"name": "is_team_leader", "description": "Indicates if a user is a team leader", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_sign_in_at": {"name": "last_sign_in_at", "description": "Datetime when user successfully logged-in last time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_sign_in_ip": {"name": "last_sign_in_ip", "description": "IP address of last successful logged-in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "middle_name": {"name": "middle_name", "description": "Middle name of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notification_message_ids": {"name": "notification_message_ids", "description": "Notification user is yet to view", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onboarded_by": {"name": "onboarded_by", "description": "User who onboarded this user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previous_sub_status": {"name": "previous_sub_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previous_week_ranking": {"name": "previous_week_ranking", "description": "User previous week ranking", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider": {"name": "provider", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quality_score": {"name": "quality_score", "description": "Qualtiy score of the suer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "read_notification_ids": {"name": "read_notification_ids", "description": "Read notification list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remember_created_at": {"name": "remember_created_at", "description": "Datetime when remember me is enable", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reset_password_sent_at": {"name": "reset_password_sent_at", "description": "Datetime the reset password was sent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reset_password_token": {"name": "reset_password_token", "description": "Reset token send to user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reward_limit": {"name": "reward_limit", "description": "Weekly reward limit of user. After reaching a weekly limit worker would not be able to work anymore that week.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "Role of user. Possible values are 0 -> cloud worker, 1 -> team leader, 2 -> cloud seeder, 3 -> cloud seeder leader, 4 -> delivery squad member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_index": {"name": "session_index", "description": "Used for session management.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sign_in_count": {"name": "sign_in_count", "description": "Times the user has logged-in successfully", "meta": {}, "data_type": null, "quote": null, "tags": []}, "squad_id": {"name": "squad_id", "description": "Squad the user belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the user. Possible values are 0 -> invited, 1 -> active, 2 -> suspended, 3 -> inactive", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_status": {"name": "sub_status", "description": "Sub status of user if active. Possible values are 1 -> normal, 2 -> probated, 3 -> reward limited, 4 -> work hour limited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suspended_at": {"name": "suspended_at", "description": "Suspended datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suspension_reason": {"name": "suspension_reason", "description": "Reason for suspension", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sync_hash": {"name": "sync_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Team the user belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_leader_id": {"name": "team_leader_id", "description": "Team leader id the user belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transition_expiry_date": {"name": "transition_expiry_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transit_at": {"name": "transit_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trial_id": {"name": "trial_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uid": {"name": "uid", "description": "User unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Datetime the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_earning": {"name": "weekly_earning", "description": "Current week earning of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_quality": {"name": "weekly_quality", "description": "Current week quality of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_hour_limit": {"name": "work_hour_limit", "description": "Current week work hour limit set for user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_id": {"name": "_id", "description": "ID of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_type": {"name": "_type", "description": "Type of user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp indicating when Stitch loaded the batch the record was a part of into the data warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp indicating when Stitch extracted the record from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp indicating when Stitch received the record for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "A Unix epoch (in milliseconds) that indicates the order in which data points were considered for loading.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Indicates the version of the table. This column is used to complete a switch-view operation, when necessary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cf2_workerplatform_stitch.workers"}, "source.edw.projects.api_keys": {"fqn": ["edw", "psa", "projects", "projects", "api_keys"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.api_keys", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "api_keys", "source_name": "projects", "source_description": "", "loader": "", "identifier": "api_keys", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.api_keys"}, "source.edw.projects.ar_internal_metadata": {"fqn": ["edw", "psa", "projects", "projects", "ar_internal_metadata"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.ar_internal_metadata", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "ar_internal_metadata", "source_name": "projects", "source_description": "", "loader": "", "identifier": "ar_internal_metadata", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.ar_internal_metadata"}, "source.edw.projects.capacity_distributions": {"fqn": ["edw", "psa", "projects", "projects", "capacity_distributions"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.capacity_distributions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "capacity_distributions", "source_name": "projects", "source_description": "", "loader": "", "identifier": "capacity_distributions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.capacity_distributions"}, "source.edw.projects.memberships": {"fqn": ["edw", "psa", "projects", "projects", "memberships"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.memberships", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "memberships", "source_name": "projects", "source_description": "", "loader": "", "identifier": "memberships", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.memberships"}, "source.edw.projects.membership_journals": {"fqn": ["edw", "psa", "projects", "projects", "membership_journals"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.membership_journals", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "membership_journals", "source_name": "projects", "source_description": "", "loader": "", "identifier": "membership_journals", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.membership_journals"}, "source.edw.projects.milestones": {"fqn": ["edw", "psa", "projects", "projects", "milestones"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.milestones", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "milestones", "source_name": "projects", "source_description": "", "loader": "", "identifier": "milestones", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.milestones"}, "source.edw.projects.projects": {"fqn": ["edw", "psa", "projects", "projects", "projects"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "projects", "source_name": "projects", "source_description": "", "loader": "", "identifier": "projects", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.projects"}, "source.edw.projects.project_activities": {"fqn": ["edw", "psa", "projects", "projects", "project_activities"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.project_activities", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "project_activities", "source_name": "projects", "source_description": "", "loader": "", "identifier": "project_activities", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.project_activities"}, "source.edw.projects.project_configurations": {"fqn": ["edw", "psa", "projects", "projects", "project_configurations"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.project_configurations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "project_configurations", "source_name": "projects", "source_description": "", "loader": "", "identifier": "project_configurations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.project_configurations"}, "source.edw.projects.schema_migrations": {"fqn": ["edw", "psa", "projects", "projects", "schema_migrations"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.schema_migrations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "schema_migrations", "source_name": "projects", "source_description": "", "loader": "", "identifier": "schema_migrations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.schema_migrations"}, "source.edw.projects.subscriptions": {"fqn": ["edw", "psa", "projects", "projects", "subscriptions"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.subscriptions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "subscriptions", "source_name": "projects", "source_description": "", "loader": "", "identifier": "subscriptions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.subscriptions"}, "source.edw.projects.tasks": {"fqn": ["edw", "psa", "projects", "projects", "tasks"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects.tasks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "tasks", "source_name": "projects", "source_description": "", "loader": "", "identifier": "tasks", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw.tasks"}, "source.edw.projects._sdc_rejected": {"fqn": ["edw", "psa", "projects", "projects", "_sdc_rejected"], "database": "raw", "schema": "projects_ppw", "unique_id": "source.edw.projects._sdc_rejected", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/projects/schema.yml", "original_file_path": "models/psa/projects/schema.yml", "name": "_sdc_rejected", "source_name": "projects", "source_description": "", "loader": "", "identifier": "_sdc_rejected", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.projects_ppw._sdc_rejected"}, "source.edw.payout_202008.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202008", "flow"], "database": "raw", "schema": "cw_payout_202008", "unique_id": "source.edw.payout_202008.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202008", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202008.flow"}, "source.edw.payout_202008.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202008", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202008", "unique_id": "source.edw.payout_202008.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202008", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202008.kenya_scheduled"}, "source.edw.payout_202008.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202008", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202008", "unique_id": "source.edw.payout_202008.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202008", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202008.nepal_scheduled"}, "source.edw.payout_202008.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202008", "adjustments"], "database": "raw", "schema": "cw_payout_202008", "unique_id": "source.edw.payout_202008.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202008", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202008.adjustments"}, "source.edw.payout_202007.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202007", "flow"], "database": "raw", "schema": "cw_payout_202007", "unique_id": "source.edw.payout_202007.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202007", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202007.flow"}, "source.edw.payout_202007.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202007", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202007", "unique_id": "source.edw.payout_202007.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202007", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202007.kenya_scheduled"}, "source.edw.payout_202007.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202007", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202007", "unique_id": "source.edw.payout_202007.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202007", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202007.nepal_scheduled"}, "source.edw.payout_202007.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202007", "adjustments"], "database": "raw", "schema": "cw_payout_202007", "unique_id": "source.edw.payout_202007.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202007", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202007.adjustments"}, "source.edw.payout_202009.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202009", "flow"], "database": "raw", "schema": "cw_payout_202009", "unique_id": "source.edw.payout_202009.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202009", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202009.flow"}, "source.edw.payout_202009.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202009", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202009", "unique_id": "source.edw.payout_202009.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202009", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202009.kenya_scheduled"}, "source.edw.payout_202009.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202009", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202009", "unique_id": "source.edw.payout_202009.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202009", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202009.nepal_scheduled"}, "source.edw.payout_202009.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202009", "adjustments"], "database": "raw", "schema": "cw_payout_202009", "unique_id": "source.edw.payout_202009.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202009", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202009.adjustments"}, "source.edw.payout_202010.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202010", "flow"], "database": "raw", "schema": "cw_payout_202010", "unique_id": "source.edw.payout_202010.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202010", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202010.flow"}, "source.edw.payout_202010.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202010", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202010", "unique_id": "source.edw.payout_202010.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202010", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202010.kenya_scheduled"}, "source.edw.payout_202010.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202010", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202010", "unique_id": "source.edw.payout_202010.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202010", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202010.nepal_scheduled"}, "source.edw.payout_202010.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202010", "adjustments"], "database": "raw", "schema": "cw_payout_202010", "unique_id": "source.edw.payout_202010.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202010", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202010.adjustments"}, "source.edw.payout_202011.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202011", "flow"], "database": "raw", "schema": "cw_payout_202011", "unique_id": "source.edw.payout_202011.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202011", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202011.flow"}, "source.edw.payout_202011.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202011", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202011", "unique_id": "source.edw.payout_202011.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202011", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202011.kenya_scheduled"}, "source.edw.payout_202011.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202011", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202011", "unique_id": "source.edw.payout_202011.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202011", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202011.nepal_scheduled"}, "source.edw.payout_202011.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202011", "adjustments"], "database": "raw", "schema": "cw_payout_202011", "unique_id": "source.edw.payout_202011.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202011", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202011.adjustments"}, "source.edw.payout_202012.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202012", "flow"], "database": "raw", "schema": "cw_payout_202012", "unique_id": "source.edw.payout_202012.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202012", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202012.flow"}, "source.edw.payout_202012.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202012", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202012", "unique_id": "source.edw.payout_202012.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202012", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202012.kenya_scheduled"}, "source.edw.payout_202012.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202012", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202012", "unique_id": "source.edw.payout_202012.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202012", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202012.nepal_scheduled"}, "source.edw.payout_202012.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202012", "adjustments"], "database": "raw", "schema": "cw_payout_202012", "unique_id": "source.edw.payout_202012.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202012", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202012.adjustments"}, "source.edw.payout_202101.flow": {"fqn": ["edw", "psa", "worker_payout", "payout_202101", "flow"], "database": "raw", "schema": "cw_payout_202101", "unique_id": "source.edw.payout_202101.flow", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "flow", "source_name": "payout_202101", "source_description": "", "loader": "", "identifier": "flow", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202101.flow"}, "source.edw.payout_202101.kenya_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202101", "kenya_scheduled"], "database": "raw", "schema": "cw_payout_202101", "unique_id": "source.edw.payout_202101.kenya_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "kenya_scheduled", "source_name": "payout_202101", "source_description": "", "loader": "", "identifier": "kenya_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202101.kenya_scheduled"}, "source.edw.payout_202101.nepal_scheduled": {"fqn": ["edw", "psa", "worker_payout", "payout_202101", "nepal_scheduled"], "database": "raw", "schema": "cw_payout_202101", "unique_id": "source.edw.payout_202101.nepal_scheduled", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "nepal_scheduled", "source_name": "payout_202101", "source_description": "", "loader": "", "identifier": "nepal_scheduled", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202101.nepal_scheduled"}, "source.edw.payout_202101.adjustments": {"fqn": ["edw", "psa", "worker_payout", "payout_202101", "adjustments"], "database": "raw", "schema": "cw_payout_202101", "unique_id": "source.edw.payout_202101.adjustments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/worker_payout/schema.yml", "original_file_path": "models/psa/worker_payout/schema.yml", "name": "adjustments", "source_name": "payout_202101", "source_description": "", "loader": "", "identifier": "adjustments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cw_payout_202101.adjustments"}, "source.edw.sheetload.people": {"fqn": ["edw", "psa", "sheetload", "sheetload", "people"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.people", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "people", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "people", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.people"}, "source.edw.sheetload.workstreams": {"fqn": ["edw", "psa", "sheetload", "sheetload", "workstreams"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.workstreams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "workstreams", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "workstreams", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.workstreams"}, "source.edw.sheetload.breezy_internal_pools": {"fqn": ["edw", "psa", "sheetload", "sheetload", "breezy_internal_pools"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.breezy_internal_pools", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "breezy_internal_pools", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "breezy_internal_pools", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.breezy_internal_pools"}, "source.edw.sheetload.breezy_external_pools": {"fqn": ["edw", "psa", "sheetload", "sheetload", "breezy_external_pools"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.breezy_external_pools", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "breezy_external_pools", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "breezy_external_pools", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"CAT+NUMBER": {"name": "CAT+NUMBER", "description": "", "meta": {}, "data_type": null, "quote": true, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.breezy_external_pools"}, "source.edw.sheetload.expensify_workers": {"fqn": ["edw", "psa", "sheetload", "sheetload", "expensify_workers"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.expensify_workers", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "expensify_workers", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "expensify_workers", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.expensify_workers"}, "source.edw.sheetload.skill_distribution": {"fqn": ["edw", "psa", "sheetload", "sheetload", "skill_distribution"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.skill_distribution", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "skill_distribution", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "skill_distribution", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.skill_distribution"}, "source.edw.sheetload.cpu_model_summary": {"fqn": ["edw", "psa", "sheetload", "sheetload", "cpu_model_summary"], "database": "raw", "schema": "sheetload", "unique_id": "source.edw.sheetload.cpu_model_summary", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/sheetload/schema.yml", "original_file_path": "models/psa/sheetload/schema.yml", "name": "cpu_model_summary", "source_name": "sheetload", "source_description": "", "loader": "", "identifier": "cpu_model_summary", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.sheetload.cpu_model_summary"}, "source.edw.breezyhr.candidates": {"fqn": ["edw", "psa", "breezyhr", "breezyhr", "candidates"], "database": "raw", "schema": "breezyhr_singer", "unique_id": "source.edw.breezyhr.candidates", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezyhr/schema.yml", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "candidates", "source_name": "breezyhr", "source_description": "", "loader": "singer", "identifier": "candidates", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"_ID": {"name": "_ID", "description": "ID of the candidate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COVER_LETTER": {"name": "COVER_LETTER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATION_DATE": {"name": "CREATION_DATE", "description": "Creation timestamp of the candidate's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOM_ATTRIBUTES": {"name": "CUSTOM_ATTRIBUTES", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISPOSITION_DATE": {"name": "DISPOSITION_DATE", "description": "disposition date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISPOSITION_REASON": {"name": "DISPOSITION_REASON", "description": "disposition reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EDUCATION": {"name": "EDUCATION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL_ADDRESS": {"name": "EMAIL_ADDRESS", "description": "Personal email address of the candidate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FOLLOWED_BY": {"name": "FOLLOWED_BY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HEADLINE": {"name": "HEADLINE", "description": "Candidate's proudful achievement as a headline", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INITIAL": {"name": "INITIAL", "description": "Initial name of the candidate (First letter of the name)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "META_ID": {"name": "META_ID", "description": "ID of the candidate's metadata", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "Name of the candidate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN": {"name": "ORIGIN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION_ID": {"name": "POSITION_ID", "description": "Position ID of the candidate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHONE_NUMBER": {"name": "PHONE_NUMBER", "description": "Contact number of the candidate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROFILE_PHOTO_URL": {"name": "PROFILE_PHOTO_URL", "description": "URL of the candidate's profile photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECRUITED_BY": {"name": "RECRUITED_BY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REFERRED_BY": {"name": "REFERRED_BY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RESUME": {"name": "RESUME", "description": "Information of the candidate's resume", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOCIAL_PROFILES": {"name": "SOCIAL_PROFILES", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOURCE": {"name": "SOURCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOURCED_BY": {"name": "SOURCED_BY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAGE": {"name": "STAGE", "description": "Information of the candidate's application's stage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUMMARY": {"name": "SUMMARY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAGS": {"name": "TAGS", "description": "Tags associated to the candidate's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_DATE": {"name": "UPDATED_DATE", "description": "Latest timestamp of the updates made on candidate's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WORK_HISTORY": {"name": "WORK_HISTORY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OVERALL_SCORE": {"name": "OVERALL_SCORE", "description": "overall score", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezyhr_singer.candidates"}, "source.edw.breezyhr.candidate_meta": {"fqn": ["edw", "psa", "breezyhr", "breezyhr", "candidate_meta"], "database": "raw", "schema": "breezyhr_singer", "unique_id": "source.edw.breezyhr.candidate_meta", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezyhr/schema.yml", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "candidate_meta", "source_name": "breezyhr", "source_description": "", "loader": "singer", "identifier": "candidate_meta", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"_ID": {"name": "_ID", "description": "ID of the candidate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSESSMENTS": {"name": "ASSESSMENTS", "description": "Details of the candidate's application's examination###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BACKGROUND_CHECKS": {"name": "BACKGROUND_CHECKS", "description": "BACKGROUND_CHECKS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONVERSATION": {"name": "CONVERSATION", "description": "CONVERSATION###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOM_FIELDS": {"name": "CUSTOM_FIELDS", "description": "CUSTOM_FIELDS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DOCUMENTS": {"name": "DOCUMENTS", "description": "DOCUMENTS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATCH_SCORE": {"name": "MATCH_SCORE", "description": "MATCH_SCORE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NOTEPAD": {"name": "NOTEPAD", "description": "NOTEPAD###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHER_ASSESSMENTS": {"name": "OTHER_ASSESSMENTS", "description": "OTHER_ASSESSMENTS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHER_DOCUMENTS": {"name": "OTHER_DOCUMENTS", "description": "OTHER_DOCUMENTS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHER_QUESTIONNAIRES": {"name": "OTHER_QUESTIONNAIRES", "description": "OTHER_QUESTIONNAIRES###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHER_REFERENCES": {"name": "OTHER_REFERENCES", "description": "OTHER_REFERENCES###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHERS": {"name": "OTHERS", "description": "OTHERS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUESTIONNAIRES": {"name": "QUESTIONNAIRES", "description": "QUESTIONNAIRES###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REFERENCES": {"name": "REFERENCES", "description": "REFERENCES###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE": {"name": "SCHEDULE", "description": "SCHEDULE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORECARDS": {"name": "SCORECARDS", "description": "SCORECARDS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STREAM": {"name": "STREAM", "description": "Details of the candidate's application's stage###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TASKS": {"name": "TASKS", "description": "TASKS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TEAM_NOTEPAD": {"name": "TEAM_NOTEPAD", "description": "TEAM_NOTEPAD###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_DATE": {"name": "UPDATED_DATE", "description": "UPDATED_DATE###", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezyhr_singer.candidate_meta"}, "source.edw.breezyhr.positions": {"fqn": ["edw", "psa", "breezyhr", "breezyhr", "positions"], "database": "raw", "schema": "breezyhr_singer", "unique_id": "source.edw.breezyhr.positions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezyhr/schema.yml", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "positions", "source_name": "breezyhr", "source_description": "", "loader": "singer", "identifier": "positions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"_ID": {"name": "_ID", "description": "_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALL_ADMINS": {"name": "ALL_ADMINS", "description": "ALL_ADMINS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALL_USERS": {"name": "ALL_USERS", "description": "ALL_USERS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "APPLICATION_FORM": {"name": "APPLICATION_FORM", "description": "APPLICATION_FORM###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANDIDATE_TYPE": {"name": "CANDIDATE_TYPE", "description": "CANDIDATE_TYPE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CATEGORY": {"name": "CATEGORY", "description": "CATEGORY###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATION_DATE": {"name": "CREATION_DATE", "description": "CREATION_DATE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ID": {"name": "CREATOR_ID", "description": "CREATOR_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOM_ATTRIBUTES": {"name": "CUSTOM_ATTRIBUTES", "description": "CUSTOM_ATTRIBUTES###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTMENT": {"name": "DEPARTMENT", "description": "DEPARTMENT###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "DESCRIPTION###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EDUCATION": {"name": "EDUCATION", "description": "EDUCATION###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXPERIENCE": {"name": "EXPERIENCE", "description": "EXPERIENCE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FRIENDLY_ID": {"name": "FRIENDLY_ID", "description": "FRIENDLY_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "LOCATION###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "NAME###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORG_TYPE": {"name": "ORG_TYPE", "description": "ORG_TYPE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PIPELINE_ID": {"name": "PIPELINE_ID", "description": "PIPELINE_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUESTIONNAIRE_ID": {"name": "QUESTIONNAIRE_ID", "description": "QUESTIONNAIRE_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REQUISITION_ID": {"name": "REQUISITION_ID", "description": "REQUISITION_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORECARD_ID": {"name": "SCORECARD_ID", "description": "SCORECARD_ID###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE": {"name": "STATE", "description": "STATE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAGS": {"name": "TAGS", "description": "TAGS###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "TYPE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATED_DATE": {"name": "UPDATED_DATE", "description": "UPDATED_DATE###", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PENDING_APPROVAL": {"name": "PENDING_APPROVAL", "description": "PENDING_APPROVAL###", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezyhr_singer.positions"}, "source.edw.breezyhr.companies": {"fqn": ["edw", "psa", "breezyhr", "breezyhr", "companies"], "database": "raw", "schema": "breezyhr_singer", "unique_id": "source.edw.breezyhr.companies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezyhr/schema.yml", "original_file_path": "models/psa/breezyhr/schema.yml", "name": "companies", "source_name": "breezyhr", "source_description": "", "loader": "singer", "identifier": "companies", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezyhr_singer.companies"}, "source.edw.users.adjusted_time_entries": {"fqn": ["edw", "psa", "users", "users", "adjusted_time_entries"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.adjusted_time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "adjusted_time_entries", "source_name": "users", "source_description": "", "loader": "", "identifier": "adjusted_time_entries", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.adjusted_time_entries"}, "source.edw.users.api_keys": {"fqn": ["edw", "psa", "users", "users", "api_keys"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.api_keys", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "api_keys", "source_name": "users", "source_description": "", "loader": "", "identifier": "api_keys", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.api_keys"}, "source.edw.users.ar_internal_metadata": {"fqn": ["edw", "psa", "users", "users", "ar_internal_metadata"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.ar_internal_metadata", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "ar_internal_metadata", "source_name": "users", "source_description": "", "loader": "", "identifier": "ar_internal_metadata", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.ar_internal_metadata"}, "source.edw.users.availabilities": {"fqn": ["edw", "psa", "users", "users", "availabilities"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.availabilities", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "availabilities", "source_name": "users", "source_description": "", "loader": "", "identifier": "availabilities", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.availabilities"}, "source.edw.users.banks": {"fqn": ["edw", "psa", "users", "users", "banks"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.banks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "banks", "source_name": "users", "source_description": "", "loader": "", "identifier": "banks", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.banks"}, "source.edw.users.bank_accounts": {"fqn": ["edw", "psa", "users", "users", "bank_accounts"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.bank_accounts", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "bank_accounts", "source_name": "users", "source_description": "", "loader": "", "identifier": "bank_accounts", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.bank_accounts"}, "source.edw.users.bank_branches": {"fqn": ["edw", "psa", "users", "users", "bank_branches"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.bank_branches", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "bank_branches", "source_name": "users", "source_description": "", "loader": "", "identifier": "bank_branches", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.bank_branches"}, "source.edw.users.delivery_hubs": {"fqn": ["edw", "psa", "users", "users", "delivery_hubs"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.delivery_hubs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "delivery_hubs", "source_name": "users", "source_description": "", "loader": "", "identifier": "delivery_hubs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.delivery_hubs"}, "source.edw.users.hub_slots": {"fqn": ["edw", "psa", "users", "users", "hub_slots"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.hub_slots", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "hub_slots", "source_name": "users", "source_description": "", "loader": "", "identifier": "hub_slots", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.hub_slots"}, "source.edw.users.idle_time_distributions": {"fqn": ["edw", "psa", "users", "users", "idle_time_distributions"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.idle_time_distributions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "idle_time_distributions", "source_name": "users", "source_description": "", "loader": "", "identifier": "idle_time_distributions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.idle_time_distributions"}, "source.edw.users.insurances": {"fqn": ["edw", "psa", "users", "users", "insurances"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.insurances", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "insurances", "source_name": "users", "source_description": "", "loader": "", "identifier": "insurances", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.insurances"}, "source.edw.users.profiles": {"fqn": ["edw", "psa", "users", "users", "profiles"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.profiles", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "profiles", "source_name": "users", "source_description": "", "loader": "", "identifier": "profiles", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.profiles"}, "source.edw.users.schema_migrations": {"fqn": ["edw", "psa", "users", "users", "schema_migrations"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.schema_migrations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "schema_migrations", "source_name": "users", "source_description": "", "loader": "", "identifier": "schema_migrations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.schema_migrations"}, "source.edw.users.slots": {"fqn": ["edw", "psa", "users", "users", "slots"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.slots", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "slots", "source_name": "users", "source_description": "", "loader": "", "identifier": "slots", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.slots"}, "source.edw.users.time_entries": {"fqn": ["edw", "psa", "users", "users", "time_entries"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_entries", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_entries", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_entries"}, "source.edw.users.time_logs": {"fqn": ["edw", "psa", "users", "users", "time_logs"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_logs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_logs", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_logs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_logs"}, "source.edw.users.time_log_incident_mappings": {"fqn": ["edw", "psa", "users", "users", "time_log_incident_mappings"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_log_incident_mappings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_log_incident_mappings", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_log_incident_mappings", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_log_incident_mappings"}, "source.edw.users.time_log_time_entry_mappings": {"fqn": ["edw", "psa", "users", "users", "time_log_time_entry_mappings"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_log_time_entry_mappings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_log_time_entry_mappings", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_log_time_entry_mappings", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_log_time_entry_mappings"}, "source.edw.users.time_offs": {"fqn": ["edw", "psa", "users", "users", "time_offs"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_offs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_offs", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_offs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_offs"}, "source.edw.users.time_off_policies": {"fqn": ["edw", "psa", "users", "users", "time_off_policies"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_off_policies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_off_policies", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_off_policies", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_off_policies"}, "source.edw.users.time_off_stats": {"fqn": ["edw", "psa", "users", "users", "time_off_stats"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_off_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_off_stats", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_off_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_off_stats"}, "source.edw.users.time_reports": {"fqn": ["edw", "psa", "users", "users", "time_reports"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.time_reports", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "time_reports", "source_name": "users", "source_description": "", "loader": "", "identifier": "time_reports", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.time_reports"}, "source.edw.users.users": {"fqn": ["edw", "psa", "users", "users", "users"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "users", "source_name": "users", "source_description": "", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.users"}, "source.edw.users.work_sessions": {"fqn": ["edw", "psa", "users", "users", "work_sessions"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users.work_sessions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "work_sessions", "source_name": "users", "source_description": "", "loader": "", "identifier": "work_sessions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw.work_sessions"}, "source.edw.users._sdc_rejected": {"fqn": ["edw", "psa", "users", "users", "_sdc_rejected"], "database": "raw", "schema": "users_ppw", "unique_id": "source.edw.users._sdc_rejected", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/users/schema.yml", "original_file_path": "models/psa/users/schema.yml", "name": "_sdc_rejected", "source_name": "users", "source_description": "", "loader": "", "identifier": "_sdc_rejected", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.users_ppw._sdc_rejected"}, "source.edw.breezy_categories.external": {"fqn": ["edw", "psa", "breezy", "breezy_categories", "external"], "database": "raw", "schema": "breezy_categories_stitch", "unique_id": "source.edw.breezy_categories.external", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezy/schema.yml", "original_file_path": "models/psa/breezy/schema.yml", "name": "external", "source_name": "breezy_categories", "source_description": "", "loader": "", "identifier": "external", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezy_categories_stitch.external"}, "source.edw.breezy_categories.internal": {"fqn": ["edw", "psa", "breezy", "breezy_categories", "internal"], "database": "raw", "schema": "breezy_categories_stitch", "unique_id": "source.edw.breezy_categories.internal", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezy/schema.yml", "original_file_path": "models/psa/breezy/schema.yml", "name": "internal", "source_name": "breezy_categories", "source_description": "", "loader": "", "identifier": "internal", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezy_categories_stitch.internal"}, "source.edw.breezy_categories.positions": {"fqn": ["edw", "psa", "breezy", "breezy_categories", "positions"], "database": "raw", "schema": "breezy_categories_stitch", "unique_id": "source.edw.breezy_categories.positions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/breezy/schema.yml", "original_file_path": "models/psa/breezy/schema.yml", "name": "positions", "source_name": "breezy_categories", "source_description": "", "loader": "", "identifier": "positions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.breezy_categories_stitch.positions"}, "source.edw.cpa_assessments.sheet1": {"fqn": ["edw", "psa", "gsheets", "cpa_assessments", "sheet1"], "database": "raw", "schema": "cpa_assessments_stitch", "unique_id": "source.edw.cpa_assessments.sheet1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/gsheets/schema.yml", "original_file_path": "models/psa/gsheets/schema.yml", "name": "sheet1", "source_name": "cpa_assessments", "source_description": "", "loader": "", "identifier": "sheet1", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cpa_assessments_stitch.sheet1"}, "source.edw.cpu_buckets.sheet1": {"fqn": ["edw", "psa", "gsheets", "cpu_buckets", "sheet1"], "database": "raw", "schema": "cpu_buckets_stitch", "unique_id": "source.edw.cpu_buckets.sheet1", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/gsheets/schema.yml", "original_file_path": "models/psa/gsheets/schema.yml", "name": "sheet1", "source_name": "cpu_buckets", "source_description": "", "loader": "", "identifier": "sheet1", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cpu_buckets_stitch.sheet1"}, "source.edw.salesforce.account": {"fqn": ["edw", "psa", "salesforce", "salesforce", "account"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.account", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "account", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "account", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"ACCOUNTSOURCE": {"name": "ACCOUNTSOURCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNTS__C": {"name": "ACCOUNTS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_18_DIGIT_ID__C": {"name": "ACCOUNT_18_DIGIT_ID__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_MONTHLY_COMMITMENT__C": {"name": "ACCOUNT_MONTHLY_COMMITMENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_MRR__C": {"name": "ACCOUNT_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_NUMBER__C": {"name": "ACCOUNT_NUMBER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_SOURCE_DETAIL__C": {"name": "ACCOUNT_SOURCE_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_STATUS__C": {"name": "ACCOUNT_STATUS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTIVE_CONTRACTS__C": {"name": "ACTIVE_CONTRACTS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTIVE_SUBSCRIPTION_CONTRACTS__C": {"name": "ACTIVE_SUBSCRIPTION_CONTRACTS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANNUALREVENUE": {"name": "ANNUALREVENUE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSIGNED_ACCOUNT__C": {"name": "ASSIGNED_ACCOUNT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BILLINGCITY": {"name": "BILLINGCITY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BILLINGCOUNTRY": {"name": "BILLINGCOUNTRY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BILLINGPOSTALCODE": {"name": "BILLINGPOSTALCODE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BILLINGSTATE": {"name": "BILLINGSTATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BILLINGSTREET": {"name": "BILLINGSTREET", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BOOKED_OPPORTUNITIES__C": {"name": "BOOKED_OPPORTUNITIES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BYPASS_NEW_OWNER_ALERT__C": {"name": "BYPASS_NEW_OWNER_ALERT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOUDFACTORY_LEAD_CHK__C": {"name": "CLOUDFACTORY_LEAD_CHK__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_CAREERS_PAGE__C": {"name": "COMPANY_CAREERS_PAGE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTENT_OFFER__C": {"name": "CONTENT_OFFER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDBYID": {"name": "CREATEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDDATE": {"name": "CREATEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CRUNCHBASE_CATEGORY__C": {"name": "CRUNCHBASE_CATEGORY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CRUNCHBASE_URL__C": {"name": "CRUNCHBASE_URL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CSM_CLIENT_SCORE__C": {"name": "CSM_CLIENT_SCORE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIGHTEDINC__DETRACTORS__C": {"name": "DELIGHTEDINC__DETRACTORS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIGHTEDINC__NPS__C": {"name": "DELIGHTEDINC__NPS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIGHTEDINC__PASSIVES__C": {"name": "DELIGHTEDINC__PASSIVES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIGHTEDINC__PROMOTERS__C": {"name": "DELIGHTEDINC__PROMOTERS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIVERY_MANAGER__C": {"name": "DELIVERY_MANAGER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIVERY_OWNER__C": {"name": "DELIVERY_OWNER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FAX": {"name": "FAX", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FIRST_BOOKED_OPPORTUNITY__C": {"name": "FIRST_BOOKED_OPPORTUNITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORTUNE_1000__C": {"name": "FORTUNE_1000__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HUBSPOT_ACCOUNT_CAMPAIGN__C": {"name": "HUBSPOT_ACCOUNT_CAMPAIGN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDEAL_CLIENT_PROFILE_SCORE__C": {"name": "IDEAL_CLIENT_PROFILE_SCORE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDUSTRY": {"name": "INDUSTRY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISDELETED": {"name": "ISDELETED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTACTIVITYDATE": {"name": "LASTACTIVITYDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDBYID": {"name": "LASTMODIFIEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDDATE": {"name": "LASTMODIFIEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_DQ_ACCOUNT_REASON__C": {"name": "LAST_DQ_ACCOUNT_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_ROUND_AMOUNT__C": {"name": "LAST_ROUND_AMOUNT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_ROUND_DATE__C": {"name": "LAST_ROUND_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_ROUND_TYPE__C": {"name": "LAST_ROUND_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_SALES_ACTIVITY__C": {"name": "LAST_SALES_ACTIVITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_CHANNEL__C": {"name": "LEAD_CHANNEL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_SOURCE__C": {"name": "LEAD_SOURCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEGAL_NAME__C": {"name": "LEGAL_NAME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINKEDIN__C": {"name": "LINKEDIN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MASTERRECORDID": {"name": "MASTERRECORDID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MICROMARKET__C": {"name": "MICROMARKET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOST_RECENT_ACQUISITION_MEDIUM__C": {"name": "MOST_RECENT_ACQUISITION_MEDIUM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOST_RECENT_REFERRING_SOURCE__C": {"name": "MOST_RECENT_REFERRING_SOURCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME__C": {"name": "NAME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEW_OWNER_MESSAGE__C": {"name": "NEW_OWNER_MESSAGE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NO_OF_LOGOS__C": {"name": "NO_OF_LOGOS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBEROFEMPLOYEES": {"name": "NUMBEROFEMPLOYEES", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_LOCATIONS__C": {"name": "NUMBER_OF_LOCATIONS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNERID": {"name": "OWNERID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENTID": {"name": "PARENTID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTNER_PROFILE__C": {"name": "PARTNER_PROFILE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHOTOURL": {"name": "PHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POD_EFFORT_SCORE__C": {"name": "POD_EFFORT_SCORE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POD__C": {"name": "POD__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIMARY_FOCUS__C": {"name": "PRIMARY_FOCUS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY_REASON_DETAIL__C": {"name": "PRIORITY_REASON_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY_REASON__C": {"name": "PRIORITY_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY_TYPE__C": {"name": "PRIORITY_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QBDIALER__DIALS__C": {"name": "QBDIALER__DIALS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATING": {"name": "RATING", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECORDTYPEID": {"name": "RECORDTYPEID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION__C": {"name": "REGION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SEGMENT__C": {"name": "SEGMENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPINGCITY": {"name": "SHIPPINGCITY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPINGCOUNTRY": {"name": "SHIPPINGCOUNTRY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPINGPOSTALCODE": {"name": "SHIPPINGPOSTALCODE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPINGSTATE": {"name": "SHIPPINGSTATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPINGSTREET": {"name": "SHIPPINGSTREET", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOLUTIONS_ARCHITECT__C": {"name": "SOLUTIONS_ARCHITECT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOURCED_PARTNER__C": {"name": "SOURCED_PARTNER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPEAKERTEXT_LEAD_CHK__C": {"name": "SPEAKERTEXT_LEAD_CHK__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEMMODSTAMP": {"name": "SYSTEMMODSTAMP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TECH_APPLICATION__C": {"name": "TECH_APPLICATION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FUNDING__C": {"name": "TOTAL_FUNDING__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TWITTER__C": {"name": "TWITTER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USE_CASE__C": {"name": "USE_CASE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VAT__C": {"name": "VAT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEBSITE": {"name": "WEBSITE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEIGHTED_CLIENT_SCORE__C": {"name": "WEIGHTED_CLIENT_SCORE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEIGHTED_POD_EFFORT_SCORE__C": {"name": "WEIGHTED_POD_EFFORT_SCORE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZISF__ZOOMINFO_INDUSTRY__C": {"name": "ZISF__ZOOMINFO_INDUSTRY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZISF__ZOOM_ID__C": {"name": "ZISF__ZOOM_ID__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZISF__ZOOM_LASTUPDATED__C": {"name": "ZISF__ZOOM_LASTUPDATED__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTREFERENCEDDATE": {"name": "LASTREFERENCEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDEAL_CLIENT_PROFILE__C": {"name": "IDEAL_CLIENT_PROFILE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QBDIALER__LASTCALLTIME__C": {"name": "QBDIALER__LASTCALLTIME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTVIEWEDDATE": {"name": "LASTVIEWEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_DESCRIPTION__C": {"name": "ZOOMINFO_DESCRIPTION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_STREET__C": {"name": "ZOOMINFO_STREET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_CITY__C": {"name": "ZOOMINFO_CITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_FAX__C": {"name": "ZOOMINFO_FAX__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_ACCOUNT_SOURCE__C": {"name": "ZOOMINFO_ACCOUNT_SOURCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO__C": {"name": "ZOOMINFO__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_PHONE__C": {"name": "ZOOMINFO_PHONE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_STATE__C": {"name": "ZOOMINFO_STATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_COUNTRY__C": {"name": "ZOOMINFO_COUNTRY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_REVENUE__C": {"name": "ZOOMINFO_REVENUE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_EMPLOYEE_COUNT__C": {"name": "ZOOMINFO_EMPLOYEE_COUNT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_WEBSITE__C": {"name": "ZOOMINFO_WEBSITE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION_DEFINITION__C": {"name": "REGION_DEFINITION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION_DEFINITION_NAME__C": {"name": "REGION_DEFINITION_NAME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION_DEFINITION_NAME_FORM__C": {"name": "REGION_DEFINITION_NAME_FORM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GET_REGION_DEFINITION__C": {"name": "GET_REGION_DEFINITION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDEAL_CLIENT_PROFILE_DETAIL__C": {"name": "IDEAL_CLIENT_PROFILE_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DOZISF__ZOOMINFO_LAST_UPDATED__C": {"name": "DOZISF__ZOOMINFO_LAST_UPDATED__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DOZISF__ZOOMINFO_FIRST_UPDATED__C": {"name": "DOZISF__ZOOMINFO_FIRST_UPDATED__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_ENRICHED_STATUS__C": {"name": "ZOOMINFO_ENRICHED_STATUS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DOZISF__ZOOMINFO_ID__C": {"name": "DOZISF__ZOOMINFO_ID__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_TOTAL_FUNDING__C": {"name": "ZOOMINFO_TOTAL_FUNDING__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_PARENT_COMPANY_ZOOMINFO_ID__C": {"name": "ZOOMINFO_PARENT_COMPANY_ZOOMINFO_ID__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_FUNDING_ROUNDS__C": {"name": "ZOOMINFO_FUNDING_ROUNDS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_INDUSTRY__C": {"name": "ZOOMINFO_INDUSTRY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_EMPLOYEE_RANGE__C": {"name": "ZOOMINFO_EMPLOYEE_RANGE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_PARENT_COMPANY_NAME__C": {"name": "ZOOMINFO_PARENT_COMPANY_NAME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_TOTAL_FUNDING__C__ST": {"name": "ZOOMINFO_TOTAL_FUNDING__C__ST", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_ULTIMATE_PARENT_COMPANY_ZOOMINF__C": {"name": "ZOOMINFO_ULTIMATE_PARENT_COMPANY_ZOOMINF__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ZOOMINFO_ULTIMATE_PARENT_COMPANY_NAME__C": {"name": "ZOOMINFO_ULTIMATE_PARENT_COMPANY_NAME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_MANAGER__C": {"name": "PROGRAM_MANAGER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_MINIMUM_MONTHLY_COMMITMENT__C": {"name": "ACCOUNT_MINIMUM_MONTHLY_COMMITMENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIER__C": {"name": "TIER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY__C": {"name": "PRIORITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.account"}, "source.edw.salesforce.opportunity": {"fqn": ["edw", "psa", "salesforce", "salesforce", "opportunity"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.opportunity", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "opportunity", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "opportunity", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"ACCOUNTID": {"name": "ACCOUNTID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_PRIMARY_FOCUS__C": {"name": "ACCOUNT_PRIMARY_FOCUS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_PRIORITY_TYPE__C": {"name": "ACCOUNT_PRIORITY_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_REGION__C": {"name": "ACCOUNT_REGION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_SEGMENT__C": {"name": "ACCOUNT_SEGMENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_GOOGLE_DOC__C": {"name": "ADD_GOOGLE_DOC__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AGE_IN_DAYS__C": {"name": "AGE_IN_DAYS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANALYSIS_DATE__C": {"name": "ANALYSIS_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANALYSIS__C": {"name": "ANALYSIS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_TIME_PER_TASK__C": {"name": "AVG_TIME_PER_TASK__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BOOKED_OPPS_TARGET__C": {"name": "BOOKED_OPPS_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BOOKED_STATUS__C": {"name": "BOOKED_STATUS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUSINESS_DIVISION__C": {"name": "BUSINESS_DIVISION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAMPAIGNID": {"name": "CAMPAIGNID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CBI__C": {"name": "CBI__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHALLENGES__C": {"name": "CHALLENGES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHANGE_EFFECTIVE_DATE__C": {"name": "CHANGE_EFFECTIVE_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHANNEL_CFQ_D1_OPP_TARGET__C": {"name": "CHANNEL_CFQ_D1_OPP_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHANNEL__C": {"name": "CHANNEL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSEDATE": {"name": "CLOSEDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSED_LOST_DETAIL__C": {"name": "CLOSED_LOST_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSE_FQ__C": {"name": "CLOSE_FQ__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOUDFACTORY_LEAD__C": {"name": "CLOUDFACTORY_LEAD__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMMITMENT__C": {"name": "COMMITMENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_DESCRIPTION__C": {"name": "COMPANY_DESCRIPTION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPETITOR_FORM__C": {"name": "COMPETITOR_FORM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACTING_DATE__C": {"name": "CONTRACTING_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACTING__C": {"name": "CONTRACTING__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_18_DIGIT_ID__C": {"name": "CONTRACT_18_DIGIT_ID__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_TERMS__C": {"name": "CONTRACT_TERMS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT__C": {"name": "CONTRACT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDBYID": {"name": "CREATEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDDATE": {"name": "CREATEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_BY_EQUALS_ME__C": {"name": "CREATED_BY_EQUALS_ME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENT_PROCESS__C": {"name": "CURRENT_PROCESS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "D1_CALLS_FQ_TARGET__C": {"name": "D1_CALLS_FQ_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "D1_CALL_DATE__C": {"name": "D1_CALL_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "D1_CALL__C": {"name": "D1_CALL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "D1_TO_SQL_DAYS__C": {"name": "D1_TO_SQL_DAYS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE_OF_FIRST_CONTACT__C": {"name": "DATE_OF_FIRST_CONTACT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAYS_SINCE_BASE__C": {"name": "DAYS_SINCE_BASE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DOWNGRADE_REASON__C": {"name": "DOWNGRADE_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "END_DATE__C": {"name": "END_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXISTING_SOLUTION_PRIMARY__C": {"name": "EXISTING_SOLUTION_PRIMARY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXPANSION_TYPE__C": {"name": "EXPANSION_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXPECTEDREVENUE": {"name": "EXPECTEDREVENUE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXPECTED_MRR__C": {"name": "EXPECTED_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FISCAL": {"name": "FISCAL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FISCALQUARTER": {"name": "FISCALQUARTER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FISCALYEAR": {"name": "FISCALYEAR", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORECASTCATEGORY": {"name": "FORECASTCATEGORY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORECASTCATEGORYNAME": {"name": "FORECASTCATEGORYNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GO_TO_MARKET_FQ_CREATED_OPP_TARGET__C": {"name": "GO_TO_MARKET_FQ_CREATED_OPP_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GO_TO_MARKET_FQ_D1_OPP_TARGET__C": {"name": "GO_TO_MARKET_FQ_D1_OPP_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GO_TO_MARKET_ROLLUP__C": {"name": "GO_TO_MARKET_ROLLUP__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASOPENACTIVITY": {"name": "HASOPENACTIVITY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASOPPORTUNITYLINEITEM": {"name": "HASOPPORTUNITYLINEITEM", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASOVERDUETASK": {"name": "HASOVERDUETASK", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HAS_DQ_ACCOUNT_REASON__C": {"name": "HAS_DQ_ACCOUNT_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDEAL_SOLUTION__C": {"name": "IDEAL_SOLUTION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMPACT__C": {"name": "IMPACT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDUSTRY__C": {"name": "INDUSTRY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISACTIVE_SDR__C": {"name": "ISACTIVE_SDR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISCLOSED": {"name": "ISCLOSED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISDELETED": {"name": "ISDELETED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISEXCLUDEDFROMTERRITORY2FILTER": {"name": "ISEXCLUDEDFROMTERRITORY2FILTER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISSPLIT": {"name": "ISSPLIT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISWON": {"name": "ISWON", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTACTIVITYDATE": {"name": "LASTACTIVITYDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDBYID": {"name": "LASTMODIFIEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDDATE": {"name": "LASTMODIFIEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEADSOURCE": {"name": "LEADSOURCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_CATEGORY__C": {"name": "LEAD_CATEGORY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_SOURCE_DETAIL__C": {"name": "LEAD_SOURCE_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LID__IS_INFLUENCED__C": {"name": "LID__IS_INFLUENCED__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOST_REASON__C": {"name": "LOST_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MARKETING_ORIGINAL_SOURCE__C": {"name": "MARKETING_ORIGINAL_SOURCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEANINGFUL_WORK_NUM__C": {"name": "MEANINGFUL_WORK_NUM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEANINGFUL_WORK_UNIT__C": {"name": "MEANINGFUL_WORK_UNIT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEANINGFUL_WORK__C": {"name": "MEANINGFUL_WORK__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MICROMARKET__C": {"name": "MICROMARKET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTHLY_AMOUNT__C": {"name": "MONTHLY_AMOUNT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTHLY_COMMITMENT_DIFFERENCE__C": {"name": "MONTHLY_COMMITMENT_DIFFERENCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTHLY_COMMITMENT__C": {"name": "MONTHLY_COMMITMENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_10__C": {"name": "MONTH_10__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_11__C": {"name": "MONTH_11__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_12__C": {"name": "MONTH_12__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_1__C": {"name": "MONTH_1__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_2__C": {"name": "MONTH_2__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_3__C": {"name": "MONTH_3__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_4__C": {"name": "MONTH_4__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_5__C": {"name": "MONTH_5__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_6__C": {"name": "MONTH_6__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_7__C": {"name": "MONTH_7__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_8__C": {"name": "MONTH_8__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_9__C": {"name": "MONTH_9__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MRR__C": {"name": "MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NET_EXPANSION_MRR__C": {"name": "NET_EXPANSION_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NET_NEW_MRR__C": {"name": "NET_NEW_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NET_REPORTING__C": {"name": "NET_REPORTING__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXTSTEP": {"name": "NEXTSTEP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_STEP__C": {"name": "NEXT_STEP__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ONBOARDING_START_DATE__C": {"name": "ONBOARDING_START_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPORTUNITIES__C": {"name": "OPPORTUNITIES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPORTUNITY_18_DIGIT_ID__C": {"name": "OPPORTUNITY_18_DIGIT_ID__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPORTUNITY_ATTRIBUTION__C": {"name": "OPPORTUNITY_ATTRIBUTION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPORTUNITY_NUMBER__C": {"name": "OPPORTUNITY_NUMBER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPS_CREATED_TARGET__C": {"name": "OPPS_CREATED_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNERID": {"name": "OWNERID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAIN_POINTS__C": {"name": "PAIN_POINTS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAYMENT_OPTION__C": {"name": "PAYMENT_OPTION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PER_UNIT_PRICE__C": {"name": "PER_UNIT_PRICE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHASE_1_AMOUNT__C": {"name": "PHASE_1_AMOUNT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLAN__C": {"name": "PLAN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POTENTIAL_IMPACT__C": {"name": "POTENTIAL_IMPACT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POTENTIAL_RISKS__C": {"name": "POTENTIAL_RISKS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIUM_WORKSTATION_CONNECTIVITY__C": {"name": "PREMIUM_WORKSTATION_CONNECTIVITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIUM_WORKSTATION_HARDWARE__C": {"name": "PREMIUM_WORKSTATION_HARDWARE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIUM_WORKSTATION_MONITORS__C": {"name": "PREMIUM_WORKSTATION_MONITORS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE__C": {"name": "PRICE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIMARY_COMPETITOR__C": {"name": "PRIMARY_COMPETITOR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY_REASON_DETAIL__C": {"name": "PRIORITY_REASON_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY_REASON__C": {"name": "PRIORITY_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIORITY_TYPE__C": {"name": "PRIORITY_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROBABILITY": {"name": "PROBABILITY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_LINE__C": {"name": "PRODUCTION_LINE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_MANAGER__C": {"name": "PRODUCTION_MANAGER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_START_DATE__C": {"name": "PRODUCTION_START_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCT_TYPE_FQ_BOOKED_OPP_TARGET__C": {"name": "PRODUCT_TYPE_FQ_BOOKED_OPP_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCT_TYPE__C": {"name": "PRODUCT_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_DATE__C": {"name": "PROPOSAL_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL__C": {"name": "PROPOSAL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUALIFIED_DEAL__C": {"name": "QUALIFIED_DEAL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUALIFIED_OPPORTUNITY__C": {"name": "QUALIFIED_OPPORTUNITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECORDTYPEID": {"name": "RECORDTYPEID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELATIONSHIP__C": {"name": "RELATIONSHIP__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REVENUE_TARGET__C": {"name": "REVENUE_TARGET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_DIVISION__C": {"name": "SALES_DIVISION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_REP__C": {"name": "SALES_REP__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SERVICE_DURATION__C": {"name": "SERVICE_DURATION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOLUTIONS_ARCHITECT__C": {"name": "SOLUTIONS_ARCHITECT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOLUTION__C": {"name": "SOLUTION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOURCE_DETAIL__C": {"name": "SOURCE_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOURCE__C": {"name": "SOURCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPEAKERTEXT_LEAD__C": {"name": "SPEAKERTEXT_LEAD__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SQL_DATE__C": {"name": "SQL_DATE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SQL__C": {"name": "SQL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAGENAME": {"name": "STAGENAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKEHOLDERS__C": {"name": "STAKEHOLDERS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEMMODSTAMP": {"name": "SYSTEMMODSTAMP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAT__C": {"name": "TAT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TECH_APPLICATION__C": {"name": "TECH_APPLICATION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TERMED_MRR__C": {"name": "TERMED_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIMELINE__C": {"name": "TIMELINE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNITS__C": {"name": "UNITS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIT_TYPE__C": {"name": "UNIT_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USE_CASE_CATEGORY__C": {"name": "USE_CASE_CATEGORY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USE_CASE__C": {"name": "USE_CASE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOLUME__C": {"name": "VOLUME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEIGHTED_MRR__C": {"name": "WEIGHTED_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHY_THEY_WILL_BUY__C": {"name": "WHY_THEY_WILL_BUY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WON_MRR__C": {"name": "WON_MRR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WORKSTREAM_MILESTONES__C": {"name": "WORKSTREAM_MILESTONES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "X3RD_PARTY_TOOL_FORM__C": {"name": "X3RD_PARTY_TOOL_FORM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXPANSION_LIKELIHOOD__C": {"name": "EXPANSION_LIKELIHOOD__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPECIAL_TERMS__C": {"name": "SPECIAL_TERMS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOST_RECENT_REFERRING_SOURCE__C": {"name": "MOST_RECENT_REFERRING_SOURCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EU_PERSONAL_DATA__C": {"name": "EU_PERSONAL_DATA__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TERMINATION_NOTICE__C": {"name": "TERMINATION_NOTICE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DQ_ACCOUNT_REASON__C": {"name": "DQ_ACCOUNT_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PUBLICITY__C": {"name": "PUBLICITY__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPETITOR__C": {"name": "COMPETITOR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WORKSTREAM_URL__C": {"name": "WORKSTREAM_URL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REFERRAL_ACCOUNT__C": {"name": "REFERRAL_ACCOUNT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SDR__C": {"name": "SDR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOST_REASON_DETAIL__C": {"name": "LOST_REASON_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOOL_DETAILS__C": {"name": "TOOL_DETAILS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIMARY_TOOL__C": {"name": "PRIMARY_TOOL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHER_NOTES__C": {"name": "OTHER_NOTES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NOTES__C": {"name": "NOTES__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FLOW_PLATFORM__C": {"name": "FLOW_PLATFORM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_SOURCE_MOST_RECENT__C": {"name": "LEAD_SOURCE_MOST_RECENT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPGRADE_REASON__C": {"name": "UPGRADE_REASON__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OF_WALLET__C": {"name": "OF_WALLET__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIUM_WORKSTATION_ADD_ONS__C": {"name": "PREMIUM_WORKSTATION_ADD_ONS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAMP_POTENTIAL__C": {"name": "RAMP_POTENTIAL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NURTURE_TRACK__C": {"name": "NURTURE_TRACK__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELIVERY_METHOD__C": {"name": "DELIVERY_METHOD__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NURTURE_PLAN__C": {"name": "NURTURE_PLAN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_SOURCE_MOST_RECENT_DETAIL__C": {"name": "LEAD_SOURCE_MOST_RECENT_DETAIL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOST_RECENT_ACQUISITION_MEDIUM__C": {"name": "MOST_RECENT_ACQUISITION_MEDIUM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LEAD_TYPE__C": {"name": "LEAD_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAMP_POTENTIAL_TIMING__C": {"name": "RAMP_POTENTIAL_TIMING__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAMP_POTENTIAL_HOURS__C": {"name": "RAMP_POTENTIAL_HOURS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OTHER_COMPETITOR__C": {"name": "OTHER_COMPETITOR__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTENT_OFFER__C": {"name": "CONTENT_OFFER__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_ANALYSIS_FORM__C": {"name": "LAST_ANALYSIS_FORM__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PACKAGE_TYPE__C": {"name": "PACKAGE_TYPE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HS_FORM_MESSAGE__C": {"name": "HS_FORM_MESSAGE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "X3RD_PARTY_TOOL__C": {"name": "X3RD_PARTY_TOOL__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIMARY_FEATURE__C": {"name": "PRIMARY_FEATURE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BILLABLE_UNIT__C": {"name": "BILLABLE_UNIT__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SEED_PACKAGE_PRICE__C": {"name": "SEED_PACKAGE_PRICE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "KPIS__C": {"name": "KPIS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "D1_OUTCOME__C": {"name": "D1_OUTCOME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TASK_LEARNING_CURVE__C": {"name": "TASK_LEARNING_CURVE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WORKFORCE__C": {"name": "WORKFORCE__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTREFERENCEDDATE": {"name": "LASTREFERENCEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTVIEWEDDATE": {"name": "LASTVIEWEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ANALYSIS_TO_PROPOSAL_DAYS__C": {"name": "ANALYSIS_TO_PROPOSAL_DAYS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACTING_TO_CLOSE_DAYS__C": {"name": "CONTRACTING_TO_CLOSE_DAYS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_TO_CONTRACTING_DAYS__C": {"name": "PROPOSAL_TO_CONTRACTING_DAYS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SQL_TO_ANALYSIS_DAYS__C": {"name": "SQL_TO_ANALYSIS_DAYS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION_DEFINITION__C": {"name": "REGION_DEFINITION__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TERRITORY2ID": {"name": "TERRITORY2ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.opportunity"}, "source.edw.salesforce.recordtype": {"fqn": ["edw", "psa", "salesforce", "salesforce", "recordtype"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.recordtype", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "recordtype", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "recordtype", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"CREATEDBYID": {"name": "CREATEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDDATE": {"name": "CREATEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEVELOPERNAME": {"name": "DEVELOPERNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISACTIVE": {"name": "ISACTIVE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDBYID": {"name": "LASTMODIFIEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDDATE": {"name": "LASTMODIFIEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAMESPACEPREFIX": {"name": "NAMESPACEPREFIX", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SOBJECTTYPE": {"name": "SOBJECTTYPE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEMMODSTAMP": {"name": "SYSTEMMODSTAMP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.recordtype"}, "source.edw.salesforce.user": {"fqn": ["edw", "psa", "salesforce", "salesforce", "user"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.user", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "user", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "user", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"ABOUTME": {"name": "ABOUTME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALIAS": {"name": "ALIAS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BANNERPHOTOURL": {"name": "BANNERPHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUSINESS_HOURS__C": {"name": "BUSINESS_HOURS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMMUNITYNICKNAME": {"name": "COMMUNITYNICKNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANYNAME": {"name": "COMPANYNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDBYID": {"name": "CREATEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDDATE": {"name": "CREATEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEFAULTGROUPNOTIFICATIONFREQUENCY": {"name": "DEFAULTGROUPNOTIFICATIONFREQUENCY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTMENT": {"name": "DEPARTMENT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIGESTFREQUENCY": {"name": "DIGESTFREQUENCY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIVISION": {"name": "DIVISION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAILENCODINGKEY": {"name": "EMAILENCODINGKEY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAILPREFERENCESAUTOBCC": {"name": "EMAILPREFERENCESAUTOBCC", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAILPREFERENCESAUTOBCCSTAYINTOUCH": {"name": "EMAILPREFERENCESAUTOBCCSTAYINTOUCH", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAILPREFERENCESSTAYINTOUCHREMINDER": {"name": "EMAILPREFERENCESSTAYINTOUCHREMINDER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMPLOYEENUMBER": {"name": "EMPLOYEENUMBER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FIRSTNAME": {"name": "FIRSTNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORECASTENABLED": {"name": "FORECASTENABLED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FULLPHOTOURL": {"name": "FULLPHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISACTIVE": {"name": "ISACTIVE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISEXTINDICATORVISIBLE": {"name": "ISEXTINDICATORVISIBLE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISPROFILEPHOTOACTIVE": {"name": "ISPROFILEPHOTOACTIVE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LANGUAGELOCALEKEY": {"name": "LANGUAGELOCALEKEY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTLOGINDATE": {"name": "LASTLOGINDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDBYID": {"name": "LASTMODIFIEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDDATE": {"name": "LASTMODIFIEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTNAME": {"name": "LASTNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTREFERENCEDDATE": {"name": "LASTREFERENCEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTVIEWEDDATE": {"name": "LASTVIEWEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCALESIDKEY": {"name": "LOCALESIDKEY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MANAGERID": {"name": "MANAGERID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEDIUMBANNERPHOTOURL": {"name": "MEDIUMBANNERPHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEDIUMPHOTOURL": {"name": "MEDIUMPHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOBILEPHONE": {"name": "MOBILEPHONE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSTALCODE": {"name": "POSTALCODE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROFILEID": {"name": "PROFILEID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROFILE_NAME__C": {"name": "PROFILE_NAME__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QBDIALER__INSIDESALES_ADMIN__C": {"name": "QBDIALER__INSIDESALES_ADMIN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QBDIALER__IS_SUBDOMAIN__C": {"name": "QBDIALER__IS_SUBDOMAIN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QBDIALER__IS_TOKEN__C": {"name": "QBDIALER__IS_TOKEN__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QBDIALER__PERMISSIONS__C": {"name": "QBDIALER__PERMISSIONS__C", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVESADMININFOEMAILS": {"name": "RECEIVESADMININFOEMAILS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVESINFOEMAILS": {"name": "RECEIVESINFOEMAILS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNATURE": {"name": "SIGNATURE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SMALLBANNERPHOTOURL": {"name": "SMALLBANNERPHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SMALLPHOTOURL": {"name": "SMALLPHOTOURL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE": {"name": "STATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STREET": {"name": "STREET", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEMMODSTAMP": {"name": "SYSTEMMODSTAMP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIMEZONESIDKEY": {"name": "TIMEZONESIDKEY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERNAME": {"name": "USERNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSAVANTGOUSER": {"name": "USERPERMISSIONSAVANTGOUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSCALLCENTERAUTOLOGIN": {"name": "USERPERMISSIONSCALLCENTERAUTOLOGIN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSINTERACTIONUSER": {"name": "USERPERMISSIONSINTERACTIONUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSMARKETINGUSER": {"name": "USERPERMISSIONSMARKETINGUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSMOBILEUSER": {"name": "USERPERMISSIONSMOBILEUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSOFFLINEUSER": {"name": "USERPERMISSIONSOFFLINEUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSSFCONTENTUSER": {"name": "USERPERMISSIONSSFCONTENTUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPERMISSIONSSUPPORTUSER": {"name": "USERPERMISSIONSSUPPORTUSER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESACTIVITYREMINDERSPOPUP": {"name": "USERPREFERENCESACTIVITYREMINDERSPOPUP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESAPEXPAGESDEVELOPERMODE": {"name": "USERPREFERENCESAPEXPAGESDEVELOPERMODE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESCACHEDIAGNOSTICS": {"name": "USERPREFERENCESCACHEDIAGNOSTICS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESCONTENTEMAILASANDWHEN": {"name": "USERPREFERENCESCONTENTEMAILASANDWHEN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESCONTENTNOEMAIL": {"name": "USERPREFERENCESCONTENTNOEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESCREATELEXAPPSWTSHOWN": {"name": "USERPREFERENCESCREATELEXAPPSWTSHOWN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEALLFEEDSEMAIL": {"name": "USERPREFERENCESDISABLEALLFEEDSEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEBOOKMARKEMAIL": {"name": "USERPREFERENCESDISABLEBOOKMARKEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLECHANGECOMMENTEMAIL": {"name": "USERPREFERENCESDISABLECHANGECOMMENTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEENDORSEMENTEMAIL": {"name": "USERPREFERENCESDISABLEENDORSEMENTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEFILESHARENOTIFICATIONSFORAPI": {"name": "USERPREFERENCESDISABLEFILESHARENOTIFICATIONSFORAPI", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEFOLLOWERSEMAIL": {"name": "USERPREFERENCESDISABLEFOLLOWERSEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLELATERCOMMENTEMAIL": {"name": "USERPREFERENCESDISABLELATERCOMMENTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLELIKEEMAIL": {"name": "USERPREFERENCESDISABLELIKEEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEMENTIONSPOSTEMAIL": {"name": "USERPREFERENCESDISABLEMENTIONSPOSTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEMESSAGEEMAIL": {"name": "USERPREFERENCESDISABLEMESSAGEEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLEPROFILEPOSTEMAIL": {"name": "USERPREFERENCESDISABLEPROFILEPOSTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISABLESHAREPOSTEMAIL": {"name": "USERPREFERENCESDISABLESHAREPOSTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISCOMMENTAFTERLIKEEMAIL": {"name": "USERPREFERENCESDISCOMMENTAFTERLIKEEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISMENTIONSCOMMENTEMAIL": {"name": "USERPREFERENCESDISMENTIONSCOMMENTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESDISPROFPOSTCOMMENTEMAIL": {"name": "USERPREFERENCESDISPROFPOSTCOMMENTEMAIL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESENABLEAUTOSUBFORFEEDS": {"name": "USERPREFERENCESENABLEAUTOSUBFORFEEDS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESEVENTREMINDERSCHECKBOXDEFAULT": {"name": "USERPREFERENCESEVENTREMINDERSCHECKBOXDEFAULT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESEXCLUDEMAILAPPATTACHMENTS": {"name": "USERPREFERENCESEXCLUDEMAILAPPATTACHMENTS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESFAVORITESSHOWTOPFAVORITES": {"name": "USERPREFERENCESFAVORITESSHOWTOPFAVORITES", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESFAVORITESWTSHOWN": {"name": "USERPREFERENCESFAVORITESWTSHOWN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESGLOBALNAVBARWTSHOWN": {"name": "USERPREFERENCESGLOBALNAVBARWTSHOWN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESGLOBALNAVGRIDMENUWTSHOWN": {"name": "USERPREFERENCESGLOBALNAVGRIDMENUWTSHOWN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDEBIGGERPHOTOCALLOUT": {"name": "USERPREFERENCESHIDEBIGGERPHOTOCALLOUT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDECHATTERONBOARDINGSPLASH": {"name": "USERPREFERENCESHIDECHATTERONBOARDINGSPLASH", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDECSNDESKTOPTASK": {"name": "USERPREFERENCESHIDECSNDESKTOPTASK", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDECSNGETCHATTERMOBILETASK": {"name": "USERPREFERENCESHIDECSNGETCHATTERMOBILETASK", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDEENDUSERONBOARDINGASSISTANTMODAL": {"name": "USERPREFERENCESHIDEENDUSERONBOARDINGASSISTANTMODAL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDELIGHTNINGMIGRATIONMODAL": {"name": "USERPREFERENCESHIDELIGHTNINGMIGRATIONMODAL", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDES1BROWSERUI": {"name": "USERPREFERENCESHIDES1BROWSERUI", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDESECONDCHATTERONBOARDINGSPLASH": {"name": "USERPREFERENCESHIDESECONDCHATTERONBOARDINGSPLASH", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESHIDESFXWELCOMEMAT": {"name": "USERPREFERENCESHIDESFXWELCOMEMAT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESLIGHTNINGEXPERIENCEPREFERRED": {"name": "USERPREFERENCESLIGHTNINGEXPERIENCEPREFERRED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESPATHASSISTANTCOLLAPSED": {"name": "USERPREFERENCESPATHASSISTANTCOLLAPSED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESRECORDHOMERESERVEDWTSHOWN": {"name": "USERPREFERENCESRECORDHOMERESERVEDWTSHOWN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESRECORDHOMESECTIONCOLLAPSEWTSHOWN": {"name": "USERPREFERENCESRECORDHOMESECTIONCOLLAPSEWTSHOWN", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESREMINDERSOUNDOFF": {"name": "USERPREFERENCESREMINDERSOUNDOFF", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWCITYTOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWCITYTOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWCITYTOGUESTUSERS": {"name": "USERPREFERENCESSHOWCITYTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWCOUNTRYTOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWCOUNTRYTOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWCOUNTRYTOGUESTUSERS": {"name": "USERPREFERENCESSHOWCOUNTRYTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWEMAILTOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWEMAILTOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWEMAILTOGUESTUSERS": {"name": "USERPREFERENCESSHOWEMAILTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWFAXTOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWFAXTOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWFAXTOGUESTUSERS": {"name": "USERPREFERENCESSHOWFAXTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWMANAGERTOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWMANAGERTOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWMANAGERTOGUESTUSERS": {"name": "USERPREFERENCESSHOWMANAGERTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWMOBILEPHONETOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWMOBILEPHONETOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWMOBILEPHONETOGUESTUSERS": {"name": "USERPREFERENCESSHOWMOBILEPHONETOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWPOSTALCODETOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWPOSTALCODETOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWPOSTALCODETOGUESTUSERS": {"name": "USERPREFERENCESSHOWPOSTALCODETOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWPROFILEPICTOGUESTUSERS": {"name": "USERPREFERENCESSHOWPROFILEPICTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWSTATETOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWSTATETOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWSTATETOGUESTUSERS": {"name": "USERPREFERENCESSHOWSTATETOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWSTREETADDRESSTOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWSTREETADDRESSTOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWSTREETADDRESSTOGUESTUSERS": {"name": "USERPREFERENCESSHOWSTREETADDRESSTOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWTITLETOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWTITLETOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWTITLETOGUESTUSERS": {"name": "USERPREFERENCESSHOWTITLETOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWWORKPHONETOEXTERNALUSERS": {"name": "USERPREFERENCESSHOWWORKPHONETOEXTERNALUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSHOWWORKPHONETOGUESTUSERS": {"name": "USERPREFERENCESSHOWWORKPHONETOGUESTUSERS", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESSORTFEEDBYCOMMENT": {"name": "USERPREFERENCESSORTFEEDBYCOMMENT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERPREFERENCESTASKREMINDERSCHECKBOXDEFAULT": {"name": "USERPREFERENCESTASKREMINDERSCHECKBOXDEFAULT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERROLEID": {"name": "USERROLEID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USERTYPE": {"name": "USERTYPE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.user"}, "source.edw.salesforce.opportunityhistory": {"fqn": ["edw", "psa", "salesforce", "salesforce", "opportunityhistory"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.opportunityhistory", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "opportunityhistory", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "opportunityhistory", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"AMOUNT": {"name": "AMOUNT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSEDATE": {"name": "CLOSEDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDBYID": {"name": "CREATEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDDATE": {"name": "CREATEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXPECTEDREVENUE": {"name": "EXPECTEDREVENUE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORECASTCATEGORY": {"name": "FORECASTCATEGORY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISDELETED": {"name": "ISDELETED", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPORTUNITYID": {"name": "OPPORTUNITYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROBABILITY": {"name": "PROBABILITY", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAGENAME": {"name": "STAGENAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEMMODSTAMP": {"name": "SYSTEMMODSTAMP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.opportunityhistory"}, "source.edw.salesforce.userrole": {"fqn": ["edw", "psa", "salesforce", "salesforce", "userrole"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.userrole", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "userrole", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "userrole", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": "_sdc_batched_at", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"CASEACCESSFORACCOUNTOWNER": {"name": "CASEACCESSFORACCOUNTOWNER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTACTACCESSFORACCOUNTOWNER": {"name": "CONTACTACCESSFORACCOUNTOWNER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEVELOPERNAME": {"name": "DEVELOPERNAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORECASTUSERID": {"name": "FORECASTUSERID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDBYID": {"name": "LASTMODIFIEDBYID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTMODIFIEDDATE": {"name": "LASTMODIFIEDDATE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAYFORECASTMANAGERSHARE": {"name": "MAYFORECASTMANAGERSHARE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPPORTUNITYACCESSFORACCOUNTOWNER": {"name": "OPPORTUNITYACCESSFORACCOUNTOWNER", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENTROLEID": {"name": "PARENTROLEID", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PORTALTYPE": {"name": "PORTALTYPE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLUPDESCRIPTION": {"name": "ROLLUPDESCRIPTION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEMMODSTAMP": {"name": "SYSTEMMODSTAMP", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_BATCHED_AT": {"name": "_SDC_BATCHED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_EXTRACTED_AT": {"name": "_SDC_EXTRACTED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_RECEIVED_AT": {"name": "_SDC_RECEIVED_AT", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_SEQUENCE": {"name": "_SDC_SEQUENCE", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_SDC_TABLE_VERSION": {"name": "_SDC_TABLE_VERSION", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.userrole"}, "source.edw.salesforce.contract__c": {"fqn": ["edw", "psa", "salesforce", "salesforce", "contract__c"], "database": "raw", "schema": "salesforce_stitch", "unique_id": "source.edw.salesforce.contract__c", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/salesforce/schema.yml", "original_file_path": "models/psa/salesforce/schema.yml", "name": "contract__c", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "contract__c", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"account_owner_first_name__c": {"name": "account_owner_first_name__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_owner_full_name__c": {"name": "account_owner_full_name__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account__c": {"name": "account__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_subscriptions_this_month__c": {"name": "active_subscriptions_this_month__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_this_month__c": {"name": "active_this_month__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actual_end__c": {"name": "actual_end__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_opportunity_close_date__c": {"name": "base_opportunity_close_date__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_opportunity_owner__c": {"name": "base_opportunity_owner__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_opportunity_pilot__c": {"name": "base_opportunity_pilot__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calculated_price__c": {"name": "calculated_price__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calculated_units__c": {"name": "calculated_units__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churn_detail__c": {"name": "churn_detail__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churn_reason__c": {"name": "churn_reason__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "complexity__c": {"name": "complexity__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_health_history_name__c": {"name": "contract_health_history_name__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_health_risk_reason__c": {"name": "contract_health_risk_reason__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_to_training_start_days__c": {"name": "contract_to_training_start_days__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdbyid": {"name": "createdbyid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createddate": {"name": "createddate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_since_base__c": {"name": "days_since_base__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_method__c": {"name": "delivery_method__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_owner__c": {"name": "delivery_owner__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eu_personal_data__c": {"name": "eu_personal_data__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expansion_likelihood__c": {"name": "expansion_likelihood__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "health_detail__c": {"name": "health_detail__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "health_icon__c": {"name": "health_icon__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "health__c": {"name": "health__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isdeleted": {"name": "isdeleted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastactivitydate": {"name": "lastactivitydate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastmodifiedbyid": {"name": "lastmodifiedbyid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastmodifieddate": {"name": "lastmodifieddate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lost_subscriptions_this_month__c": {"name": "lost_subscriptions_this_month__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_commitment__c": {"name": "monthly_commitment__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_type__c": {"name": "package_type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_version__c": {"name": "package_version__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pause_effective_date__c": {"name": "pause_effective_date__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pod__c": {"name": "pod__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premium_workstation_add_ons__c": {"name": "premium_workstation_add_ons__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premium_workstation_connectivity__c": {"name": "premium_workstation_connectivity__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premium_workstation_hardware__c": {"name": "premium_workstation_hardware__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premium_workstation_monitors__c": {"name": "premium_workstation_monitors__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "publicity__c": {"name": "publicity__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_package_price__c": {"name": "seed_package_price__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategic_priorities__c": {"name": "strategic_priorities__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "systemmodstamp": {"name": "systemmodstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tool_details__c": {"name": "tool_details__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "training_start__c": {"name": "training_start__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "use_case_change_frequency__c": {"name": "use_case_change_frequency__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "use_case__c": {"name": "use_case__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_description__c": {"name": "work_description__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "x3rd_party_tool__c": {"name": "x3rd_party_tool__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastreferenceddate": {"name": "lastreferenceddate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastvieweddate": {"name": "lastvieweddate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_display_for_flow__c": {"name": "contract_display_for_flow__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_client_health_score__c": {"name": "last_client_health_score__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_signals__c": {"name": "financial_signals__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "health_score__c": {"name": "health_score__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quality_of_product_delivery_score__c": {"name": "quality_of_product_delivery_score__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "human_market_input_score__c": {"name": "human_market_input_score__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_signals_score__c": {"name": "financial_signals_score__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "human_market_input__c": {"name": "human_market_input__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relationship_signals__c": {"name": "relationship_signals__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quality_of_product_delivery__c": {"name": "quality_of_product_delivery__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relationship_signals_score__c": {"name": "relationship_signals_score__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "health_history__c": {"name": "health_history__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.salesforce_stitch.contract__c"}, "source.edw.passmark.cpu_model_summary": {"fqn": ["edw", "psa", "passmark", "passmark", "cpu_model_summary"], "database": "raw", "schema": "passmark_ppw", "unique_id": "source.edw.passmark.cpu_model_summary", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/passmark/schema.yml", "original_file_path": "models/psa/passmark/schema.yml", "name": "cpu_model_summary", "source_name": "passmark", "source_description": "", "loader": "", "identifier": "cpu_model_summary", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.passmark_ppw.cpu_model_summary"}, "source.edw.cfclient.agile_subscriptions": {"fqn": ["edw", "psa", "cfclient", "cfclient", "agile_subscriptions"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.agile_subscriptions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "agile_subscriptions", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "agile_subscriptions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.agile_subscriptions"}, "source.edw.cfclient.attachments": {"fqn": ["edw", "psa", "cfclient", "cfclient", "attachments"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.attachments", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "attachments", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "attachments", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.attachments"}, "source.edw.cfclient.availabilities": {"fqn": ["edw", "psa", "cfclient", "cfclient", "availabilities"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.availabilities", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "availabilities", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "availabilities", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.availabilities"}, "source.edw.cfclient.avid_accuracy_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "avid_accuracy_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.avid_accuracy_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "avid_accuracy_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "avid_accuracy_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.avid_accuracy_stats"}, "source.edw.cfclient.avid_production_runs": {"fqn": ["edw", "psa", "cfclient", "cfclient", "avid_production_runs"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.avid_production_runs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "avid_production_runs", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "avid_production_runs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.avid_production_runs"}, "source.edw.cfclient.avid_raw_qc_data": {"fqn": ["edw", "psa", "cfclient", "cfclient", "avid_raw_qc_data"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.avid_raw_qc_data", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "avid_raw_qc_data", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "avid_raw_qc_data", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.avid_raw_qc_data"}, "source.edw.cfclient.avid_raw_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "avid_raw_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.avid_raw_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "avid_raw_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "avid_raw_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.avid_raw_stats"}, "source.edw.cfclient.avid_task_event_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "avid_task_event_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.avid_task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "avid_task_event_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "avid_task_event_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.avid_task_event_stats"}, "source.edw.cfclient.batch_subscriptions": {"fqn": ["edw", "psa", "cfclient", "cfclient", "batch_subscriptions"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.batch_subscriptions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "batch_subscriptions", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "batch_subscriptions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.batch_subscriptions"}, "source.edw.cfclient.collaborations": {"fqn": ["edw", "psa", "cfclient", "cfclient", "collaborations"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.collaborations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "collaborations", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "collaborations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.collaborations"}, "source.edw.cfclient.crm_api_keys": {"fqn": ["edw", "psa", "cfclient", "cfclient", "crm_api_keys"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.crm_api_keys", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "crm_api_keys", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "crm_api_keys", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.crm_api_keys"}, "source.edw.cfclient.crm_project_opportunities": {"fqn": ["edw", "psa", "cfclient", "cfclient", "crm_project_opportunities"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.crm_project_opportunities", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "crm_project_opportunities", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "crm_project_opportunities", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.crm_project_opportunities"}, "source.edw.cfclient.delivery_hubs": {"fqn": ["edw", "psa", "cfclient", "cfclient", "delivery_hubs"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.delivery_hubs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "delivery_hubs", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "delivery_hubs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.delivery_hubs"}, "source.edw.cfclient.delivery_hub_issues": {"fqn": ["edw", "psa", "cfclient", "cfclient", "delivery_hub_issues"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.delivery_hub_issues", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "delivery_hub_issues", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "delivery_hub_issues", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.delivery_hub_issues"}, "source.edw.cfclient.exp_task_event_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "exp_task_event_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.exp_task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "exp_task_event_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "exp_task_event_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.exp_task_event_stats"}, "source.edw.cfclient.flow_users": {"fqn": ["edw", "psa", "cfclient", "cfclient", "flow_users"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.flow_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "flow_users", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "flow_users", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.flow_users"}, "source.edw.cfclient.hub_slots": {"fqn": ["edw", "psa", "cfclient", "cfclient", "hub_slots"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.hub_slots", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "hub_slots", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "hub_slots", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.hub_slots"}, "source.edw.cfclient.lean_subscriptions": {"fqn": ["edw", "psa", "cfclient", "cfclient", "lean_subscriptions"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.lean_subscriptions", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "lean_subscriptions", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "lean_subscriptions", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.lean_subscriptions"}, "source.edw.cfclient.open_shift_entity_for_time_offs": {"fqn": ["edw", "psa", "cfclient", "cfclient", "open_shift_entity_for_time_offs"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.open_shift_entity_for_time_offs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "open_shift_entity_for_time_offs", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "open_shift_entity_for_time_offs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.open_shift_entity_for_time_offs"}, "source.edw.cfclient.projects": {"fqn": ["edw", "psa", "cfclient", "cfclient", "projects"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.projects", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "projects", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "projects", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.projects"}, "source.edw.cfclient.projects_users": {"fqn": ["edw", "psa", "cfclient", "cfclient", "projects_users"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.projects_users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "projects_users", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "projects_users", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.projects_users"}, "source.edw.cfclient.schedule_configs": {"fqn": ["edw", "psa", "cfclient", "cfclient", "schedule_configs"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.schedule_configs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "schedule_configs", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "schedule_configs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.schedule_configs"}, "source.edw.cfclient.schema_migrations": {"fqn": ["edw", "psa", "cfclient", "cfclient", "schema_migrations"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.schema_migrations", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "schema_migrations", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "schema_migrations", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.schema_migrations"}, "source.edw.cfclient.slots": {"fqn": ["edw", "psa", "cfclient", "cfclient", "slots"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.slots", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "slots", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "slots", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.slots"}, "source.edw.cfclient.summarized_exp_task_event_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "summarized_exp_task_event_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.summarized_exp_task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "summarized_exp_task_event_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "summarized_exp_task_event_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.summarized_exp_task_event_stats"}, "source.edw.cfclient.tasks": {"fqn": ["edw", "psa", "cfclient", "cfclient", "tasks"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.tasks", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "tasks", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "tasks", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.tasks"}, "source.edw.cfclient.task_event_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "task_event_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "task_event_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "task_event_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.task_event_stats"}, "source.edw.cfclient.time_entries": {"fqn": ["edw", "psa", "cfclient", "cfclient", "time_entries"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.time_entries", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "time_entries", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "time_entries", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.time_entries"}, "source.edw.cfclient.time_offs": {"fqn": ["edw", "psa", "cfclient", "cfclient", "time_offs"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.time_offs", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "time_offs", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "time_offs", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.time_offs"}, "source.edw.cfclient.time_off_policies": {"fqn": ["edw", "psa", "cfclient", "cfclient", "time_off_policies"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.time_off_policies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "time_off_policies", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "time_off_policies", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.time_off_policies"}, "source.edw.cfclient.time_off_stats": {"fqn": ["edw", "psa", "cfclient", "cfclient", "time_off_stats"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.time_off_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "time_off_stats", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "time_off_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.time_off_stats"}, "source.edw.cfclient.trade_options": {"fqn": ["edw", "psa", "cfclient", "cfclient", "trade_options"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.trade_options", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "trade_options", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "trade_options", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.trade_options"}, "source.edw.cfclient.usecases": {"fqn": ["edw", "psa", "cfclient", "cfclient", "usecases"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.usecases", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "usecases", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "usecases", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.usecases"}, "source.edw.cfclient.users": {"fqn": ["edw", "psa", "cfclient", "cfclient", "users"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "users", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.users"}, "source.edw.cfclient.user_time_off_policies": {"fqn": ["edw", "psa", "cfclient", "cfclient", "user_time_off_policies"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.user_time_off_policies", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "user_time_off_policies", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "user_time_off_policies", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.user_time_off_policies"}, "source.edw.cfclient.workers_schedules": {"fqn": ["edw", "psa", "cfclient", "cfclient", "workers_schedules"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.workers_schedules", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "workers_schedules", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "workers_schedules", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.workers_schedules"}, "source.edw.cfclient.worker_mappings": {"fqn": ["edw", "psa", "cfclient", "cfclient", "worker_mappings"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.worker_mappings", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "worker_mappings", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "worker_mappings", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.worker_mappings"}, "source.edw.cfclient.worker_schedule_notifications": {"fqn": ["edw", "psa", "cfclient", "cfclient", "worker_schedule_notifications"], "database": "raw", "schema": "cfclient_ppw", "unique_id": "source.edw.cfclient.worker_schedule_notifications", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cfclient/schema.yml", "original_file_path": "models/psa/cfclient/schema.yml", "name": "worker_schedule_notifications", "source_name": "cfclient", "source_description": "", "loader": "", "identifier": "worker_schedule_notifications", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cfclient_ppw.worker_schedule_notifications"}, "source.edw.cis_snowpipe.people": {"fqn": ["edw", "psa", "cis", "cis_snowpipe", "people"], "database": "raw", "schema": "cis_snowpipe", "unique_id": "source.edw.cis_snowpipe.people", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cis/schema.yml", "original_file_path": "models/psa/cis/schema.yml", "name": "people", "source_name": "cis_snowpipe", "source_description": "", "loader": "", "identifier": "people", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cis_snowpipe.people"}, "source.edw.cis_snowpipe.workstreams": {"fqn": ["edw", "psa", "cis", "cis_snowpipe", "workstreams"], "database": "raw", "schema": "cis_snowpipe", "unique_id": "source.edw.cis_snowpipe.workstreams", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/cis/schema.yml", "original_file_path": "models/psa/cis/schema.yml", "name": "workstreams", "source_name": "cis_snowpipe", "source_description": "", "loader": "", "identifier": "workstreams", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.cis_snowpipe.workstreams"}, "source.edw.talentlms.users": {"fqn": ["edw", "psa", "talentlms", "talentlms", "users"], "database": "raw", "schema": "talentlms_singer", "unique_id": "source.edw.talentlms.users", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/talentlms/schema.yml", "original_file_path": "models/psa/talentlms/schema.yml", "name": "users", "source_name": "talentlms", "source_description": "", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "talentlms users", "columns": {"avatar": {"name": "avatar", "description": "image of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "badges": {"name": "badges", "description": "rewards for user achievements with talentlms", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bio": {"name": "bio", "description": "description of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "branches": {"name": "branches", "description": "learning paths assigned to the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "certifications": {"name": "certifications", "description": "certifications achieved by the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "courses": {"name": "courses", "description": "courses to which user is or has been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits": {"name": "credits", "description": "waiting on SME", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deactivation_date": {"name": "deactivation_date", "description": "date user access was removed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "user email address; historically a personal email address, now moving to es.cloudfactory.com accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "user's given name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "groups": {"name": "groups", "description": "groups to which the user is assigned. can be administrative or content based", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "unique id for the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "user preferred language", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "user's surname", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated": {"name": "last_updated", "description": "timestamp of the most recent change to user information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_timestamp": {"name": "last_updated_timestamp", "description": "integer value representing the time of the most recent change", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level": {"name": "level", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "login_key": {"name": "login_key", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "points": {"name": "points", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "restrict_email": {"name": "restrict_email", "description": "bit value (boolean); if true email is restricted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "current status of user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "timezone of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "user category (Admin-Type, SuperAdmin, Cloud-Worker-Applicant, Learner-Type, PlatformDeveloper)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_field_1": {"name": "custom_field_1", "description": "Breezy Candidate Id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_field_2": {"name": "custom_field_2", "description": "Breezy Position Id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_field_3": {"name": "custom_field_3", "description": "Personal email address", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.talentlms_singer.users"}, "source.edw.talentlms.courses": {"fqn": ["edw", "psa", "talentlms", "talentlms", "courses"], "database": "raw", "schema": "talentlms_singer", "unique_id": "source.edw.talentlms.courses", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/talentlms/schema.yml", "original_file_path": "models/psa/talentlms/schema.yml", "name": "courses", "source_name": "talentlms", "source_description": "", "loader": "", "identifier": "courses", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "talent lms courses", "columns": {"avatar": {"name": "avatar", "description": "course image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "big_avatar": {"name": "big_avatar", "description": "large course image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "the category of the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "certification": {"name": "certification", "description": "type of certification", "meta": {}, "data_type": null, "quote": null, "tags": []}, "certification_duration": {"name": "certification_duration", "description": "timeframe for which the certification is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code": {"name": "code", "description": "alphanumeric identifier of the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creation_date": {"name": "creation_date", "description": "date the course was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_id": {"name": "creator_id", "description": "id of the user who created the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "summary of course content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hide_from_catalog": {"name": "hide_from_catalog", "description": "bit value indicating whether the course should show in the catalog", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "unique identifier of the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_update_on": {"name": "last_update_on", "description": "timestamp of the last change to the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level": {"name": "level", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "title of the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "cost of the course", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shared": {"name": "shared", "description": "bit value indicating .... TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shared_url": {"name": "shared_url", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_limit": {"name": "time_limit", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prerequisite_rule_sets": {"name": "prerequisite_rule_sets", "description": "Unkonwn", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prerequisites": {"name": "prerequisites", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rules": {"name": "rules", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "units": {"name": "units", "description": "Smaller learning components which make a course when put together", "meta": {}, "data_type": null, "quote": null, "tags": []}, "users": {"name": "users", "description": "All users assigned to the course", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.talentlms_singer.courses"}, "source.edw.talentlms.categories": {"fqn": ["edw", "psa", "talentlms", "talentlms", "categories"], "database": "raw", "schema": "talentlms_singer", "unique_id": "source.edw.talentlms.categories", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/talentlms/schema.yml", "original_file_path": "models/psa/talentlms/schema.yml", "name": "categories", "source_name": "talentlms", "source_description": "", "loader": "", "identifier": "categories", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {"courses": {"name": "courses", "description": "list of all courses within the category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "unique identifier of the category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "title of the category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_category_id": {"name": "parent_category_id", "description": "id of higher level category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.talentlms_singer.categories"}, "source.edw.talentlms.groups": {"fqn": ["edw", "psa", "talentlms", "talentlms", "groups"], "database": "raw", "schema": "talentlms_singer", "unique_id": "source.edw.talentlms.groups", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/talentlms/schema.yml", "original_file_path": "models/psa/talentlms/schema.yml", "name": "groups", "source_name": "talentlms", "source_description": "", "loader": "", "identifier": "groups", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "unknown", "columns": {"belongs_to_branch": {"name": "belongs_to_branch", "description": "branch owning group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "courses": {"name": "courses", "description": "list of courses in a group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "summary of the group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "unique identifier for a group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_redemptions": {"name": "max_redemptions", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "title of group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "user responsible for a group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redemptions_sofar": {"name": "redemptions_sofar", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "users": {"name": "users", "description": "list of users assigned to a group", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.talentlms_singer.groups"}, "source.edw.talentlms.branches": {"fqn": ["edw", "psa", "talentlms", "talentlms", "branches"], "database": "raw", "schema": "talentlms_singer", "unique_id": "source.edw.talentlms.branches", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/talentlms/schema.yml", "original_file_path": "models/psa/talentlms/schema.yml", "name": "branches", "source_name": "talentlms", "source_description": "", "loader": "", "identifier": "branches", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "unknown", "columns": {"avatar": {"name": "avatar", "description": "image of branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "badge_set_id": {"name": "badge_set_id", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "courses": {"name": "courses", "description": "list of courses assigned to the branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "summary of branch contents", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disallow_global_login": {"name": "disallow_global_login", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ecommerce_credits": {"name": "ecommerce_credits", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ecommerce_subscription": {"name": "ecommerce_subscription", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ecommerce_subscription_interval": {"name": "ecommerce_subscription_interval", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ecommerce_subscription_price": {"name": "ecommerce_subscription_price", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ecommerce_subscription_trial_period": {"name": "ecommerce_subscription_trial_period", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_announcement": {"name": "external_announcement", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "unique identifier of associated group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "unique identifier of the branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_announcement": {"name": "internal_announcement", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "title of branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_processor": {"name": "payment_processor", "description": "company or service used to take payments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paypal_email": {"name": "paypal_email", "description": "email of paypal account accepting payments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "registration_email_restriction": {"name": "registration_email_restriction", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_method": {"name": "signup_method", "description": "method used to register for courses in branch (manual, email, direct, admin)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "theme": {"name": "theme", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "unknown", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type": {"name": "user_type", "description": "Type of user associated with branch? (Cloud-Worker-Applicant, Learner-Type, Trainer-Type)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_type_id": {"name": "user_type_id", "description": "unique identifier of user type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "users": {"name": "users", "description": "list of users associated with branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "users_limit": {"name": "users_limit", "description": "total number of users that can be assigned to the branch (maybe)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.talentlms_singer.branches"}, "source.edw.pulseviz.task_event_stats": {"fqn": ["edw", "psa", "pulseviz", "pulseviz", "task_event_stats"], "database": "raw", "schema": "pulseviz_ppw", "unique_id": "source.edw.pulseviz.task_event_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/pulseviz/schema.yml", "original_file_path": "models/psa/pulseviz/schema.yml", "name": "task_event_stats", "source_name": "pulseviz", "source_description": "", "loader": "", "identifier": "task_event_stats", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.pulseviz_ppw.task_event_stats"}, "source.edw.system_checker.system_checker": {"fqn": ["edw", "psa", "system_checker", "system_checker", "system_checker"], "database": "raw", "schema": "systemchecker_singer", "unique_id": "source.edw.system_checker.system_checker", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/system_checker/schema.yml", "original_file_path": "models/psa/system_checker/schema.yml", "name": "system_checker", "source_name": "system_checker", "source_description": "", "loader": "", "identifier": "system_checker", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.systemchecker_singer.system_checker"}, "source.edw.system_checker.cw_data": {"fqn": ["edw", "psa", "system_checker", "system_checker", "cw_data"], "database": "raw", "schema": "systemchecker_singer", "unique_id": "source.edw.system_checker.cw_data", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "models/psa/system_checker/schema.yml", "original_file_path": "models/psa/system_checker/schema.yml", "name": "cw_data", "source_name": "system_checker", "source_description": "", "loader": "", "identifier": "cw_data", "resource_type": "source", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.systemchecker_singer.cw_data"}}, "macros": {"macro.edw.grant_select_on_schemas": {"unique_id": "macro.edw.grant_select_on_schemas", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "macros/grant_select_on_all_schemas.sql", "original_file_path": "macros/grant_select_on_all_schemas.sql", "name": "grant_select_on_schemas", "macro_sql": "{% macro grant_select_on_schemas(schemas, role) %}\n  {%- set default_database = target.database -%}\n  {% for schema in schemas %}\n    grant usage on schema {{ default_database }}.{{ schema }} to role {{ role }};\n    grant select on all tables in schema {{ default_database }}.{{ schema }} to role {{ role }};\n    grant select on all views in schema {{ default_database }}.{{ schema }} to role {{ role }};\n    grant select on future tables in schema {{ default_database }}.{{ schema }} to role {{ role }};\n    grant select on future views in schema {{ default_database }}.{{ schema }} to role {{ role }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.edw.clone_schema": {"unique_id": "macro.edw.clone_schema", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "macros/productivity.sql", "original_file_path": "macros/productivity.sql", "name": "clone_schema", "macro_sql": "{% macro clone_schema (source_db, source_schema, destination_db, destination_schema) -%}\n        {% set full_source_schema = source_db ~ '.' ~ source_schema %}\n        {% set full_destination_schema = destination_db ~ '.' ~ destination_schema %}\n        {% set all_tables_query %}\n            show tables in schema {{ full_source_schema }}\n        {% endset %}\n        {% set results = run_query(all_tables_query) %}\n        {{  log(\"create schema \" ~ full_destination_schema ~ \";\", true) }}\n        {%- call statement() -%}\n            {{ \"create schema \" ~ full_destination_schema ~ \";\" }}\n        {%- endcall -%}\n        {% if execute %}\n            {% for result_row in results %}\n                {{ log(\"create transient table \" ~ full_destination_schema ~ \".\" ~ result_row[1] ~ \" clone \" ~ full_source_schema ~ \".\" ~ result_row[1] ~ \";\", true) }}\n                {%- call statement() -%}\n                    {{ \"create transient table \" ~ full_destination_schema ~ \".\" ~ result_row[1] ~ \" clone \" ~ full_source_schema ~ \".\" ~ result_row[1] ~ \";\" }}\n                {%- endcall -%}\n            {% endfor %}\n        {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.edw.load_date": {"unique_id": "macro.edw.load_date", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "load_date", "macro_sql": "{% macro load_date(timezone) %}\n    {{ dbt_utils.date_trunc(timezone,dbt_utils.current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.edw.generate_schema_name": {"unique_id": "macro.edw.generate_schema_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set custom_schema_name = custom_schema_name | trim -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name }}\n\n    {%- elif target.name == 'uat' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name }}\n\n    {%- else -%}\n\n        scratch_{{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.edw.generate_database_name": {"unique_id": "macro.edw.generate_database_name", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "macros/get_custom_database.sql", "original_file_path": "macros/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n\n    {%- set default_database = target.database -%}\n    {%- if target.name == 'prod' and custom_database_name is not none -%}\n        \n        {%- if custom_database_name is none -%}\n\n            {{ default_database }}\n\n        {%- else -%}\n\n            {{ custom_database_name | trim }}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if custom_database_name == \"raw\" -%}\n\n            {{ custom_database_name }}\n\n        {%- else -%}\n\n            {%- if custom_database_name is none -%}\n\n                {{ default_database }}_dev\n\n            {%- else -%}\n\n                {{ custom_database_name | trim }}_dev\n            \n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        );\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n\n  -- setup\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._get_utils_namespaces": {"unique_id": "macro.dbt_utils._get_utils_namespaces", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_get_utils_namespaces.sql", "original_file_path": "macros/cross_db_utils/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    {{ exceptions.raise_compiler_error(\n        \"dbt_utils.last_day is not supported for datepart 'quarter' on this adapter\") }}\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1,lon1,lat2,lon2) -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1,lon1,lat2,lon2) -%}\n\n    2 * 3961 * asin(sqrt((sin(radians(({{lat2}} - {{lat1}}) / 2))) ^ 2 +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    (sin(radians(({{lon2}} - {{lon1}}) / 2))) ^ 2))\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ column_name }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not({{expression}})\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound < upper_bound,\n            false\n        ) as lower_bound_less_than_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_less_than_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast({{ col.column }} as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name,database_name=target.database) %}\n\n    {% set tables=dbt_utils.get_relations_by_prefix(\n            schema=schema_name,\n            prefix='',\n            database=database_name\n        )\n    %}\n\n    {% set table_list= tables | map(attribute = 'identifier') %}\n\n    {{ return(table_list | sort) }}\n    {{ log(\"*** table list ***\", info=True) }}\n    {{ log(table_list, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt/dbt_modules/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False) %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"edw.freshdesk_tickets_custom_fields": {"unique_id": "edw.freshdesk_tickets_custom_fields", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_tickets_custom_fields", "block_contents": "json array that holds custom field objects.  Each object represents a field of information used for the ticket.  typically: \n\n- cf_request - Categorical field holding the reason for the ticket.\n- cf_related_with - categorical field holding the issue of the ticket\n- cf_question - categorical field holding the type of question."}, "edw.freshdesk_tickets_requester": {"unique_id": "edw.freshdesk_tickets_requester", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_tickets_requester", "block_contents": "json object containing requester details.  Typically:\n- email - email address of the requester\n- id - freshdesk unique id for the requester\n- mobile - unknown\n- name - Full name of the requester\n- phone - phone number of the requester"}, "edw.freshdesk_tickets_stats": {"unique_id": "edw.freshdesk_tickets_stats", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_tickets_stats", "block_contents": "json object containing timestamps relevant to calculating ticket lifecycle durations.  Typically:\n- agent_responded_at - \n- closed_at - \n- first_responded_at - \n- pending_since_at - \n- reopened_at - \n- requester_responded_at - \n- resolved_at - \n- status_updated_at -"}, "edw.freshdesk_agents_contact": {"unique_id": "edw.freshdesk_agents_contact", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_agents_contact", "block_contents": "json object containing info relevant to contacting an agent.  Typically:\n\n- active - Set to true if the agent is verified\n- created_at - Creation timestamp\n- email - Email address of the agent\n- job_title - Job title of the agent\n- language - Language of the agent. Default language is \"en\"\n- last_login_at - Timestamp of the agent's last successful login\n- mobile - Mobile number of the agent\n- name - Name of the agent\n- phone - Telephone number of the agent\n- time_zone - Time zone of the agent\n- updated_at - Timestamp of the last update"}, "edw.freshdesk_tickets_source": {"unique_id": "edw.freshdesk_tickets_source", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_tickets_source", "block_contents": "Enumerator describing the channel through which the ticket was created.\n\n||Source|Value||\n|Email|1|\n|Portal|2|\n|Phone|3|\n|Chat|7|\n|Mobihelp|8|\n|Feedback Widget|9|\n|Outbound Email|10|"}, "edw.freshdesk_tickets_status": {"unique_id": "edw.freshdesk_tickets_status", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_tickets_status", "block_contents": "Enumerator describing the status of the ticket.\n\n||Status|Value||\n|Open|2|\n|Pending|3|\n|Resolvede|4|\n|Closed|5|"}, "edw.freshdesk_tickets_priority": {"unique_id": "edw.freshdesk_tickets_priority", "package_name": "edw", "root_path": "/Users/bardanrana/projects/cf/edw/edw-dbt", "path": "sources.md", "original_file_path": "models/sources.md", "name": "freshdesk_tickets_priority", "block_contents": "Enumerator describing the priority of the ticket.\n\n||Priority|Value||\n|Low|1|\n|Medium|2|\n|High|3|\n|Urgent|4|"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/bardanrana/opt/anaconda3/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.edw.dim_location": ["model.edw.stg_hist_freshdesk_locations"], "model.edw.dim_rating": ["model.edw.stg_hist_freshdesk_ticket_ratings"], "model.edw.dim_agent": ["model.edw.stg_hist_freshdesk_agents"], "model.edw.dim_ticket": ["model.edw.stg_hist_freshdesk_tickets"], "model.edw.dim_requester": ["model.edw.stg_freshdesk_requesters"], "model.edw.fact_ratings": ["model.edw.stg_hist_freshdesk_ticket_ratings", "model.edw.stg_hist_freshdesk_tickets"], "model.edw.fact_tickets": ["model.edw.stg_hist_freshdesk_tickets"], "model.edw.dataloop_asset_stages": ["model.edw.base_projects_projects", "model.edw.stg_pulseviz_task_event_stats"], "model.edw.agt_asset_stages": ["model.edw.base_v7_agt"], "model.edw.agt_datasets": ["model.edw.base_v7_agt"], "model.edw.avid_quality_control": ["model.edw.stg_avid_accuracy_stats", "model.edw.stg_avid_raw_qc_data"], "model.edw.ibotta_completed_task": ["model.edw.base_projects_projects", "model.edw.stg_pulseviz_task_event_stats"], "model.edw.football_volleyball_performance": ["model.edw.base_hudl_daily_fb_vb_production", "model.edw.base_hudl_daily_fb_vb_training", "seed.edw.hudl_grid_formation_shifts", "seed.edw.hudl_new_workers", "seed.edw.hudl_quality_tier_payouts", "seed.edw.hudl_t_values"], "model.edw.soccer_performance": ["model.edw.base_hudl_daily_player_tracking", "model.edw.base_hudl_quality_scores", "seed.edw.hudl_soccer_quality_modifiers", "seed.edw.hudl_soccer_shifts"], "model.edw.abyss_asset_stages": ["model.edw.base_abyss_solutions_v7"], "model.edw.abyss_datasets": ["model.edw.base_abyss_solutions_v7"], "model.edw.vw_abyss_qaqc_sample": ["model.edw.abyss_asset_stages", "model.edw.abyss_datasets"], "model.edw.video_walks": ["model.edw.base_struction_site_video_walks", "model.edw.stg_video_walk_events"], "model.edw.video_walk_sessions": ["model.edw.base_struction_site_video_walks", "model.edw.stg_video_walk_events"], "model.edw.dim_sale": ["model.edw.stg_hist_salesforce_opportunity"], "model.edw.dim_account": ["model.edw.stg_hist_salesforce_client"], "model.edw.dim_salesperson": ["model.edw.stg_hist_salesforce_salesperson"], "model.edw.fact_sales": ["model.edw.stg_hist_salesforce_opportunity"], "model.edw.worker_payout_monthly": ["model.edw.stg_worker_payout_line_items"], "model.edw.dim_incident": ["model.edw.stg_hist_solarwinds_incidents"], "model.edw.dim_user": ["model.edw.stg_hist_solarwinds_users"], "model.edw.fact_incidents": ["model.edw.stg_hist_solarwinds_incidents"], "model.edw.vw_avid_incidents": ["model.edw.dim_date", "model.edw.dim_incident", "model.edw.fact_incidents"], "model.edw.dim_course": ["model.edw.base_tlms_categories", "model.edw.base_tlms_courses"], "model.edw.fact_learning": ["model.edw.base_hist_tlms_course_users", "model.edw.base_hist_tlms_course_users", "model.edw.dim_learner"], "model.edw.csp_summary": ["source.edw.csp.reports"], "model.edw.dim_learner": ["model.edw.base_tlms_users", "model.edw.worker_pool"], "model.edw.vw_abyss_adherence": ["model.edw.adherence"], "model.edw.adherence": ["model.edw.base_calendar_schedules", "model.edw.base_projects_projects", "model.edw.base_projects_tasks", "model.edw.base_users_delivery_hubs", "model.edw.base_users_slots", "model.edw.base_users_time_entries", "model.edw.base_users_users"], "model.edw.time_entries": ["model.edw.base_calendar_schedules", "model.edw.base_projects_projects", "model.edw.base_projects_tasks", "model.edw.base_users_time_entries", "model.edw.base_users_users", "model.edw.dim_client"], "model.edw.dim_workstream": ["model.edw.stg_cis_workstreams_current"], "model.edw.dim_worker": ["model.edw.stg_cis_workers_current"], "model.edw.dim_client": ["model.edw.stg_hist_salesforce_client"], "model.edw.dim_date": ["model.edw.dates"], "model.edw.dim_month": ["model.edw.dim_date"], "model.edw.dim_task": ["model.edw.stg_pulseviz_subtasks", "model.edw.stg_pulseviz_task_event_stats"], "model.edw.fact_tasks": ["model.edw.dim_client", "model.edw.dim_date", "model.edw.dim_task", "model.edw.dim_task_asset", "model.edw.dim_worker", "model.edw.dim_workstream", "model.edw.stg_cis_workstreams_current", "model.edw.stg_pulseviz_subtasks", "model.edw.stg_pulseviz_task_event_stats"], "model.edw.fact_reviews": ["model.edw.dim_client", "model.edw.dim_task", "model.edw.dim_task_asset", "model.edw.dim_worker", "model.edw.dim_workstream", "model.edw.stg_cis_workstreams_current", "model.edw.stg_pulseviz_task_event_stats"], "model.edw.dim_task_asset": ["model.edw.stg_pulseviz_task_event_stats"], "model.edw.daily_projects_hours__grouped": ["model.edw.daily_projects_time__grouped"], "model.edw.daily_projects_time__grouped": ["model.edw.time_entries"], "model.edw.monthly_projects__grouped": ["model.edw.daily_projects_hours__grouped", "model.edw.dim_date"], "model.edw.worker_payout_line_items": ["model.edw.stg_worker_payout_line_items"], "model.edw.worker_workstreams": ["model.edw.stg_worker_workstreams", "model.edw.worker_pool"], "model.edw.worker_hardware": ["model.edw.base_sheetload_people", "model.edw.base_sheets_cpu_buckets", "model.edw.stg_cpu_model_summary", "model.edw.stg_system_checker_hardware"], "model.edw.worker_pool": ["model.edw.stg_breezy_worker_pool", "model.edw.stg_cis_worker_pool", "model.edw.stg_payout_workers", "model.edw.stg_worker_workstreams"], "model.edw.struction_site_time_entries": ["model.edw.time_entries"], "model.edw.stg_hist_solarwinds_incidents": ["model.edw.base_hist_solarwinds_incidents", "model.edw.stg_hist_solarwinds_users"], "model.edw.stg_hist_solarwinds_users": ["model.edw.base_hist_solarwinds_users"], "model.edw.base_solarwinds_categories": ["source.edw.solarwinds.categories"], "model.edw.base_solarwinds_users": ["source.edw.solarwinds.users"], "model.edw.base_hist_solarwinds_incidents": ["snapshot.edw.incidents"], "model.edw.base_solarwinds_roles": ["source.edw.solarwinds.roles"], "model.edw.base_solarwinds_incidents": ["source.edw.solarwinds.incidents"], "model.edw.base_solarwinds_sites": ["source.edw.solarwinds.sites"], "model.edw.base_hist_solarwinds_users": ["snapshot.edw.solarwinds_users"], "model.edw.base_solarwinds_departments": ["source.edw.solarwinds.departments"], "model.edw.stg_hist_freshdesk_ticket_ratings": ["model.edw.base_hist_freshdesk_satisfaction_ratings"], "model.edw.stg_freshdesk_requesters": ["model.edw.base_freshdesk_tickets"], "model.edw.stg_hist_freshdesk_tickets": ["model.edw.base_hist_freshdesk_tickets", "seed.edw.association_type_lu", "seed.edw.priority_lu", "seed.edw.source_lu", "seed.edw.status_lu"], "model.edw.stg_hist_freshdesk_requesters": ["model.edw.stg_hist_freshdesk_tickets"], "model.edw.stg_hist_freshdesk_locations": ["model.edw.base_hist_freshdesk_companies"], "model.edw.stg_hist_freshdesk_agents": ["model.edw.base_hist_freshdesk_agents"], "model.edw.base_hist_freshdesk_tickets": ["snapshot.edw.tickets"], "model.edw.base_freshdesk_satisfaction_ratings": ["source.edw.freshdesk.satisfaction_ratings"], "model.edw.base_hist_freshdesk_satisfaction_ratings": ["snapshot.edw.satisfaction_ratings"], "model.edw.base_freshdesk_agents": ["source.edw.freshdesk.agents"], "model.edw.base_freshdesk_companies": ["source.edw.freshdesk.companies"], "model.edw.base_hist_freshdesk_agents": ["snapshot.edw.agents"], "model.edw.base_freshdesk_tickets": ["source.edw.freshdesk.tickets"], "model.edw.base_hist_freshdesk_companies": ["snapshot.edw.companies"], "model.edw.base_v7_agt": ["source.edw.v7.agt"], "model.edw.base_hudl_daily_player_tracking": ["source.edw.hudl.daily_player_tracking"], "model.edw.base_hudl_daily_fb_vb_training": ["source.edw.hudl.daily_fb_vb_training"], "model.edw.base_hudl_quality_scores": ["source.edw.hudl_qa_scores.sheet1"], "model.edw.base_hudl_daily_fb_vb_production": ["source.edw.hudl.daily_fb_vb_production"], "model.edw.base_abyss_solutions_v7": ["source.edw.abyss.abyss_solutions_v7"], "model.edw.stg_video_walk_events": ["model.edw.base_struction_site_status_changes"], "model.edw.base_struction_site_video_walks": ["source.edw.struction_site.shr_video_walks"], "model.edw.base_struction_site_status_changes": ["source.edw.struction_site.shr_cf_status_changes"], "model.edw.base_struction_site_st_projects": ["source.edw.struction_site.shr_st_projects"], "model.edw.base_struction_site_areas": ["source.edw.struction_site.shr_cf_areas"], "model.edw.base_struction_site_projects": ["source.edw.struction_site.shr_cf_projects"], "model.edw.base_hist_calendar_schedules": ["snapshot.edw.schedules"], "model.edw.base_calendar_schedules": ["source.edw.calendar.schedules"], "model.edw.base_projects_projects": ["source.edw.projects.projects"], "model.edw.base_projects_tasks": ["source.edw.projects.tasks"], "model.edw.stg_payout_scheduled": [], "model.edw.stg_payout_adjustments": [], "model.edw.stg_payout_workers": ["model.edw.stg_payout_adjustments", "model.edw.stg_payout_flow", "model.edw.stg_payout_scheduled"], "model.edw.stg_worker_payout_line_items": ["model.edw.stg_payout_adjustments", "model.edw.stg_payout_flow", "model.edw.stg_payout_scheduled", "model.edw.worker_pool"], "model.edw.stg_payout_flow": [], "model.edw.stg_cis_worker_pool": ["model.edw.stg_candidate_assessments", "model.edw.stg_cis_workers_current"], "model.edw.stg_worker_workstreams": ["model.edw.base_sheetload_expensify_workers", "model.edw.base_sheetload_people", "model.edw.base_sheetload_skill_distribution"], "model.edw.base_sheetload_breezy_internal": ["source.edw.sheetload.breezy_internal_pools"], "model.edw.base_sheetload_people": ["source.edw.sheetload.people"], "model.edw.base_sheetload_breezy_external": ["source.edw.sheetload.breezy_external_pools"], "model.edw.base_sheetload_cpu_model_summary": ["source.edw.sheetload.cpu_model_summary"], "model.edw.base_sheetload_skill_distribution": ["source.edw.sheetload.skill_distribution"], "model.edw.base_sheetload_expensify_workers": ["source.edw.sheetload.expensify_workers"], "model.edw.stg_breezyhr_candidate_note_streams": ["model.edw.base_breezyhr_candidate_streams"], "model.edw.stg_breezy_worker_pool": ["model.edw.base_breezy_categories", "model.edw.stg_breezyhr_candidate_status_streams", "model.edw.stg_breezyhr_candidates", "model.edw.stg_breezyhr_positions", "model.edw.stg_candidate_assessments", "seed.edw.available_hours_tags", "source.edw.breezy_categories.positions"], "model.edw.stg_breezyhr_candidate_document_streams": ["model.edw.base_breezyhr_candidate_streams"], "model.edw.stg_breezyhr_candidates": ["model.edw.base_breezyhr_candidates"], "model.edw.stg_breezyhr_positions": ["model.edw.base_breezyhr_positions"], "model.edw.stg_worker_conversion": ["model.edw.stg_worker_lifecycle"], "model.edw.stg_breezyhr_candidate_status_streams": ["model.edw.base_breezyhr_candidate_streams"], "model.edw.stg_worker_lifecycle": ["model.edw.stg_breezyhr_candidate_status_streams", "model.edw.stg_breezyhr_positions", "source.edw.breezy_categories.external", "source.edw.breezy_categories.internal", "source.edw.breezy_categories.positions"], "model.edw.stg_breezyhr_candidate_questionnaire_streams": ["model.edw.base_breezyhr_candidate_streams"], "model.edw.base_breezyhr_candidate_meta": ["source.edw.breezyhr.candidate_meta"], "model.edw.base_breezyhr_candidates": ["source.edw.breezyhr.candidates"], "model.edw.base_breezyhr_candidate_streams": ["model.edw.base_breezyhr_candidate_meta"], "model.edw.base_breezyhr_positions": ["source.edw.breezyhr.positions"], "model.edw.base_users_delivery_hubs": ["source.edw.users.delivery_hubs"], "model.edw.base_users_users": ["source.edw.users.users"], "model.edw.base_users_slots": ["source.edw.users.slots"], "model.edw.base_users_time_entries": ["source.edw.users.time_entries"], "model.edw.base_users_profiles": ["source.edw.users.profiles"], "model.edw.base_breezy_categories": ["source.edw.breezy_categories.external", "source.edw.breezy_categories.internal"], "model.edw.stg_candidate_assessments": ["model.edw.base_sheets_cpa_assessments"], "model.edw.base_sheets_cpa_assessments": ["source.edw.cpa_assessments.sheet1"], "model.edw.base_sheets_cpu_buckets": ["source.edw.cpu_buckets.sheet1"], "model.edw.stg_hist_salesforce_salesperson": ["model.edw.base_hist_salesforce_user", "model.edw.base_hist_salesforce_userrole"], "model.edw.stg_hist_salesforce_opportunity": ["model.edw.base_hist_salesforce_opportunity"], "model.edw.stg_hist_salesforce_client": ["model.edw.base_hist_salesforce_account"], "model.edw.stg_hist_salesforce_contract": ["model.edw.base_hist_salesforce_contract"], "model.edw.stg_hist_salesforce_opportunity_history": ["model.edw.base_hist_salesforce_opportunityhistory"], "model.edw.base_fixture_salesforce_contract_20210405": ["seed.edw.fixture_contracts_extracted_20210405"], "model.edw.base_hist_salesforce_contract": ["snapshot.edw.contract"], "model.edw.base_hist_salesforce_userrole": ["snapshot.edw.userrole"], "model.edw.base_salesforce_contract": ["source.edw.salesforce.contract__c"], "model.edw.base_salesforce_userrole": ["source.edw.salesforce.userrole"], "model.edw.base_salesforce_recordtype": ["source.edw.salesforce.recordtype"], "model.edw.base_salesforce_opportunity": ["source.edw.salesforce.opportunity"], "model.edw.base_salesforce_opportunityhistory": ["source.edw.salesforce.opportunityhistory"], "model.edw.base_salesforce_account": ["source.edw.salesforce.account"], "model.edw.base_hist_salesforce_opportunityhistory": ["snapshot.edw.opportunityhistory"], "model.edw.base_hist_salesforce_opportunity": ["snapshot.edw.opportunity"], "model.edw.base_hist_salesforce_user": ["snapshot.edw.user"], "model.edw.base_hist_salesforce_recordtype": ["snapshot.edw.recordtype"], "model.edw.base_hist_salesforce_account": ["snapshot.edw.account"], "model.edw.base_salesforce_user": ["source.edw.salesforce.user"], "model.edw.stg_cpu_model_summary": ["model.edw.base_passmark_cpu"], "model.edw.base_passmark_cpu": ["source.edw.passmark.cpu_model_summary"], "model.edw.stg_avid_raw_qc_data": ["model.edw.base_avid_raw_qc_data", "model.edw.base_users_profiles", "model.edw.base_users_users"], "model.edw.stg_avid_accuracy_stats": ["model.edw.base_avid_accuracy_stats", "model.edw.base_avid_raw_stats", "model.edw.base_users_profiles"], "model.edw.base_avid_raw_stats": ["source.edw.cfclient.avid_raw_stats"], "model.edw.base_avid_raw_qc_data": ["source.edw.cfclient.avid_raw_qc_data"], "model.edw.base_avid_accuracy_stats": ["source.edw.cfclient.avid_accuracy_stats"], "model.edw.stg_cis_workstreams_current": ["model.edw.base_cis_workstreams"], "model.edw.stg_cis_workers_current": ["model.edw.base_cis_people"], "model.edw.base_cis_people": ["source.edw.cis_snowpipe.people"], "model.edw.base_cis_workstreams": ["source.edw.cis_snowpipe.workstreams"], "model.edw.stg_tlms_user_activity": ["model.edw.base_tlms_course_users", "model.edw.base_tlms_users"], "model.edw.base_tlms_categories": ["source.edw.talentlms.categories"], "model.edw.base_hist_tlms_course_users": ["snapshot.edw.courses_snapshot"], "model.edw.base_tlms_group_courses": ["source.edw.talentlms.groups"], "model.edw.base_tlms_group_users": ["source.edw.talentlms.groups"], "model.edw.base_tlms_groups": ["source.edw.talentlms.groups"], "model.edw.base_tlms_branches": ["source.edw.talentlms.branches"], "model.edw.base_tlms_users": ["source.edw.talentlms.users"], "model.edw.base_tlms_courses": ["source.edw.talentlms.courses"], "model.edw.base_tlms_course_users": ["source.edw.talentlms.courses"], "model.edw.stg_pulseviz_task_event_stats": ["model.edw.base_pulseviz_task_event_stats"], "model.edw.stg_pulseviz_subtasks": ["model.edw.base_pulseviz_task_event_stats"], "model.edw.base_pulseviz_task_event_stats": ["source.edw.pulseviz.task_event_stats"], "model.edw.dates": [], "model.edw.stg_system_checker_hardware": ["model.edw.base_system_checker_cw_data", "model.edw.base_system_checker_hardware"], "model.edw.base_system_checker_cw_data": ["source.edw.system_checker.cw_data"], "model.edw.base_system_checker_hardware": ["source.edw.system_checker.system_checker"], "snapshot.edw.departments": ["source.edw.solarwinds.departments"], "snapshot.edw.categories": ["source.edw.solarwinds.categories"], "snapshot.edw.sites": ["source.edw.solarwinds.sites"], "snapshot.edw.incidents": ["source.edw.solarwinds.incidents"], "snapshot.edw.roles": ["source.edw.solarwinds.roles"], "snapshot.edw.solarwinds_users": ["source.edw.solarwinds.users"], "snapshot.edw.companies": ["source.edw.freshdesk.companies"], "snapshot.edw.satisfaction_ratings": ["source.edw.freshdesk.satisfaction_ratings"], "snapshot.edw.tickets": ["source.edw.freshdesk.tickets"], "snapshot.edw.agents": ["source.edw.freshdesk.agents"], "snapshot.edw.schedules": ["source.edw.calendar.schedules"], "snapshot.edw.projects": ["source.edw.projects.projects"], "snapshot.edw.users": ["source.edw.users.users"], "snapshot.edw.delivery_hubs": ["source.edw.users.delivery_hubs"], "snapshot.edw.slots": ["source.edw.users.slots"], "snapshot.edw.recordtype": ["source.edw.salesforce.recordtype"], "snapshot.edw.opportunityhistory": ["source.edw.salesforce.opportunityhistory"], "snapshot.edw.userrole": ["source.edw.salesforce.userrole"], "snapshot.edw.contract": ["source.edw.salesforce.contract__c"], "snapshot.edw.opportunity": ["source.edw.salesforce.opportunity"], "snapshot.edw.account": ["source.edw.salesforce.account"], "snapshot.edw.user": ["source.edw.salesforce.user"], "snapshot.edw.courses_snapshot": ["source.edw.talentlms.courses"], "test.edw.test_fixture_salesforce_contract_20210405": ["model.edw.base_fixture_salesforce_contract_20210405", "model.edw.stg_hist_salesforce_contract"], "test.edw.test_package_version_not_null": ["model.edw.base_hist_salesforce_contract", "model.edw.base_hist_salesforce_contract"], "test.edw.test_package_type_not_null": ["model.edw.base_hist_salesforce_contract", "model.edw.base_hist_salesforce_contract"], "seed.edw.source_lu": [], "seed.edw.priority_lu": [], "seed.edw.status_lu": [], "seed.edw.association_type_lu": [], "seed.edw.billing_invoice_20210228": [], "seed.edw.hudl_new_workers": [], "seed.edw.hudl_soccer_quality_modifiers": [], "seed.edw.hudl_grid_formation_shifts": [], "seed.edw.hudl_t_values": [], "seed.edw.hudl_quality_tier_payouts": [], "seed.edw.hudl_soccer_shifts": [], "seed.edw.fixture_contracts_extracted_20210405": [], "seed.edw.available_hours_tags": [], "seed.edw.stages_lookup": [], "test.edw.not_null_dataloop_asset_stages_email": ["model.edw.dataloop_asset_stages"], "test.edw.not_null_agt_asset_stages_dataset_id": ["model.edw.agt_asset_stages"], "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_": ["model.edw.agt_asset_stages", "model.edw.agt_datasets"], "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_": ["model.edw.agt_asset_stages", "model.edw.base_v7_agt"], "test.edw.not_null_agt_asset_stages_cw_email": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_task_submitted_at": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_task_submitted_date": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_asset_id": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_from_stage_number": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_to_stage_name": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_stage_duration": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_asset_annotation_running_total": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_asset_stages_annotation_count": ["model.edw.agt_asset_stages"], "test.edw.not_null_agt_datasets_dataset_id": ["model.edw.agt_datasets"], "test.edw.unique_agt_datasets_dataset_id": ["model.edw.agt_datasets"], "test.edw.relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_": ["model.edw.agt_asset_stages", "model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_dataset_name": ["model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_dataset_owner_id": ["model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_cloudfactory_workstream_id": ["model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_dataset_inserted_at": ["model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_dataset_inserted_date": ["model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_dataset_updated_at": ["model.edw.agt_datasets"], "test.edw.not_null_agt_datasets_dataset_updated_date": ["model.edw.agt_datasets"], "test.edw.not_null_ibotta_asset_stages_email": [], "test.edw.not_null_abyss_asset_stages_dataset_id": ["model.edw.abyss_asset_stages"], "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_": ["model.edw.abyss_asset_stages", "model.edw.abyss_datasets"], "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_cw_email": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_task_submitted_at": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_task_submitted_date": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_asset_id": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_from_stage_number": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_to_stage_name": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_stage_duration": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_asset_annotation_running_total": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_asset_stages_annotation_count": ["model.edw.abyss_asset_stages"], "test.edw.not_null_abyss_datasets_dataset_id": ["model.edw.abyss_datasets"], "test.edw.unique_abyss_datasets_dataset_id": ["model.edw.abyss_datasets"], "test.edw.relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_": ["model.edw.abyss_asset_stages", "model.edw.abyss_datasets"], "test.edw.not_null_abyss_datasets_dataset_name": ["model.edw.abyss_datasets"], "test.edw.not_null_abyss_datasets_cloudfactory_workstream_id": ["model.edw.abyss_datasets"], "test.edw.unique_dim_course_course_key": ["model.edw.dim_course"], "test.edw.not_null_dim_course_course_key": ["model.edw.dim_course"], "test.edw.not_null_dim_course_course_name": ["model.edw.dim_course"], "test.edw.not_null_dim_course_category_name": ["model.edw.dim_course"], "test.edw.not_null_dim_course_course_status": ["model.edw.dim_course"], "test.edw.not_null_dim_course_is_shared": ["model.edw.dim_course"], "test.edw.not_null_dim_course_course_id": ["model.edw.dim_course"], "test.edw.relationships_dim_course_course_id__course_id__ref_base_tlms_courses_": ["model.edw.base_tlms_courses", "model.edw.dim_course"], "test.edw.not_null_dim_learner_learner_key": ["model.edw.dim_learner"], "test.edw.unique_dim_learner_learner_key": ["model.edw.dim_learner"], "test.edw.not_null_dim_learner_email": ["model.edw.dim_learner"], "test.edw.not_null_dim_learner_country": ["model.edw.dim_learner"], "test.edw.not_null_dim_learner_worker_status": ["model.edw.dim_learner"], "test.edw.accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown": ["model.edw.dim_learner"], "test.edw.not_null_dim_learner_learner_id": ["model.edw.dim_learner"], "test.edw.relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_": ["model.edw.base_tlms_users", "model.edw.dim_learner"], "test.edw.not_null_fact_learning_learner_key": ["model.edw.fact_learning"], "test.edw.relationships_fact_learning_learner_key__learner_key__ref_dim_learner_": ["model.edw.dim_learner", "model.edw.fact_learning"], "test.edw.not_null_fact_learning_course_key": ["model.edw.fact_learning"], "test.edw.relationships_fact_learning_course_key__course_key__ref_dim_course_": ["model.edw.dim_course", "model.edw.fact_learning"], "test.edw.not_null_fact_learning_completed_percent": ["model.edw.fact_learning"], "test.edw.not_null_fact_learning_learning_total_time_seconds": ["model.edw.fact_learning"], "test.edw.not_null_fact_learning_learner_course_count": ["model.edw.fact_learning"], "test.edw.not_null_time_entries_time_entry_date_key": ["model.edw.time_entries"], "test.edw.not_null_time_entries_client_key": ["model.edw.time_entries"], "test.edw.not_null_time_entries_client_name": ["model.edw.time_entries"], "test.edw.not_null_time_entries_project_key": ["model.edw.time_entries"], "test.edw.not_null_time_entries_project_name": ["model.edw.time_entries"], "test.edw.not_null_time_entries_workstream_name": ["model.edw.time_entries"], "test.edw.not_null_time_entries_worker_id": ["model.edw.time_entries"], "test.edw.not_null_time_entries_worker_email_address": ["model.edw.time_entries"], "test.edw.not_null_time_entries_task_key": ["model.edw.time_entries"], "test.edw.not_null_time_entries_is_billable": ["model.edw.time_entries"], "test.edw.not_null_time_entries_schedule_id": ["model.edw.time_entries"], "test.edw.not_null_time_entries_schedule_start_at": ["model.edw.time_entries"], "test.edw.not_null_time_entries_time_entry_start_at": ["model.edw.time_entries"], "test.edw.not_null_time_entries_time_entry_type": ["model.edw.time_entries"], "test.edw.accepted_values_time_entries_time_entry_type__training__production": ["model.edw.time_entries"], "test.edw.not_null_time_entries_time_entry_duration": ["model.edw.time_entries"], "test.edw.not_null_dim_client_client_key": ["model.edw.dim_client"], "test.edw.unique_dim_client_client_key": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_id": ["model.edw.dim_client"], "test.edw.unique_dim_client_client_id": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_name": ["model.edw.dim_client"], "test.edw.not_null_dim_client_delivery_manager": ["model.edw.dim_client"], "test.edw.not_null_dim_client_delivery_owner": ["model.edw.dim_client"], "test.edw.not_null_dim_client_lead_channel": ["model.edw.dim_client"], "test.edw.not_null_dim_client_lead_source": ["model.edw.dim_client"], "test.edw.not_null_dim_client_last_round_type": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_industry": ["model.edw.dim_client"], "test.edw.not_null_dim_client_ideal_client_profile_score": ["model.edw.dim_client"], "test.edw.not_null_dim_client_crunchbase_category": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_country": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_state": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_city": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_status": ["model.edw.dim_client"], "test.edw.not_null_dim_client_annual_revenue": ["model.edw.dim_client"], "test.edw.not_null_dim_client_employee_range": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_phone": ["model.edw.dim_client"], "test.edw.not_null_dim_client_primary_focus": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_region": ["model.edw.dim_client"], "test.edw.not_null_dim_client_client_segment": ["model.edw.dim_client"], "test.edw.not_null_dim_workstream_workstream_key": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_workstream_name": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_commitment": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_package_type": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_package_version": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_workstream_status": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_billing_type": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_tool_access": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_connectivity": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_team_lead_email": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_tool_name": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_has_required_training": ["model.edw.dim_workstream"], "test.edw.not_null_dim_workstream_type": ["model.edw.dim_workstream"], "test.edw.not_null_dim_worker_worker_key": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_email": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_full_name": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_country": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_city": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_gender": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_worker_type": ["model.edw.dim_worker"], "test.edw.not_null_dim_worker_worker_status": ["model.edw.dim_worker"], "test.edw.not_null_dim_task_task_key": ["model.edw.dim_task"], "test.edw.not_null_dim_task_task_category": ["model.edw.dim_task"], "test.edw.accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match": ["model.edw.dim_task"], "test.edw.not_null_dim_task_task_type": ["model.edw.dim_task"], "test.edw.not_null_dim_task_lvl1": ["model.edw.dim_task"], "test.edw.not_null_dim_task_lvl2": ["model.edw.dim_task"], "test.edw.not_null_dim_task_task_full_name": ["model.edw.dim_task"], "test.edw.not_null_fact_reviews_workstream_key": ["model.edw.fact_reviews"], "test.edw.relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_": ["model.edw.dim_workstream", "model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_worker_key": ["model.edw.fact_reviews"], "test.edw.relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_": ["model.edw.dim_worker", "model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_task_key": ["model.edw.fact_reviews"], "test.edw.relationships_fact_reviews_task_key__task_key__ref_dim_task_": ["model.edw.dim_task", "model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_reviewer_key": ["model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_review_start_date_key": ["model.edw.fact_reviews"], "test.edw.relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_": ["model.edw.dim_date", "model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_review_complete_date_key": ["model.edw.fact_reviews"], "test.edw.relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_": ["model.edw.dim_date", "model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_review_count": ["model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_review_duration": ["model.edw.fact_reviews"], "test.edw.not_null_fact_reviews_review_score": ["model.edw.fact_reviews"], "test.edw.not_null_fact_tasks_client_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_client_key__client_key__ref_dim_client_": ["model.edw.dim_client", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_workstream_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_": ["model.edw.dim_workstream", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_worker_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_": ["model.edw.dim_worker", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_task_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_task_key__task_key__ref_dim_task_": ["model.edw.dim_task", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_task_started_date_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_": ["model.edw.dim_date", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_task_completed_date_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_": ["model.edw.dim_date", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_task_asset_key": ["model.edw.fact_tasks"], "test.edw.relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_": ["model.edw.dim_task_asset", "model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_task_count": ["model.edw.fact_tasks"], "test.edw.not_null_fact_tasks_task_duration": ["model.edw.fact_tasks"], "test.edw.not_null_dim_task_asset_task_asset_key": ["model.edw.dim_task_asset"], "test.edw.not_null_dim_task_asset_dataset_name": ["model.edw.dim_task_asset"], "test.edw.not_null_dim_task_asset_asset_name": ["model.edw.dim_task_asset"], "test.edw.not_null_dim_task_asset_tool_project_name": ["model.edw.dim_task_asset"], "test.edw.not_null_dim_task_asset_sample_source": ["model.edw.dim_task_asset"], "test.edw.not_null_worker_hardware_person_key": ["model.edw.worker_hardware"], "test.edw.unique_worker_hardware_person_key": ["model.edw.worker_hardware"], "test.edw.not_null_worker_hardware_email": ["model.edw.worker_hardware"], "test.edw.unique_worker_hardware_email": ["model.edw.worker_hardware"], "test.edw.not_null_worker_pool_person_key": ["model.edw.worker_pool"], "test.edw.not_null_worker_pool_email": ["model.edw.worker_pool"], "test.edw.not_null_worker_workstreams_person_key": ["model.edw.worker_workstreams"], "test.edw.relationships_worker_workstreams_person_key__person_key__ref_worker_pool_": ["model.edw.worker_pool", "model.edw.worker_workstreams"], "test.edw.not_null_base_hist_freshdesk_tickets_created_at": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.not_null_base_hist_freshdesk_tickets_priority": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.not_null_base_hist_freshdesk_tickets_source": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.not_null_base_hist_freshdesk_tickets_status": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.not_null_base_hist_freshdesk_tickets_ticket_id": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.not_null_base_hist_freshdesk_tickets_updated_at": ["model.edw.base_hist_freshdesk_tickets"], "test.edw.not_null_base_hist_freshdesk_agents_is_available": ["model.edw.base_hist_freshdesk_agents"], "test.edw.not_null_base_hist_freshdesk_agents_is_active": ["model.edw.base_hist_freshdesk_agents"], "test.edw.not_null_base_hist_freshdesk_agents_agent_name": ["model.edw.base_hist_freshdesk_agents"], "test.edw.not_null_base_hist_freshdesk_agents_agent_id": ["model.edw.base_hist_freshdesk_agents"], "test.edw.not_null_base_hist_freshdesk_agents_agent_type": ["model.edw.base_hist_freshdesk_agents"], "test.edw.not_null_base_hist_freshdesk_agents_updated_at": ["model.edw.base_hist_freshdesk_agents"], "test.edw.not_null_base_freshdesk_tickets_created_at": ["model.edw.base_freshdesk_tickets"], "test.edw.not_null_base_freshdesk_tickets_priority": ["model.edw.base_freshdesk_tickets"], "test.edw.accepted_values_base_freshdesk_tickets_priority__1__2__3__4": ["model.edw.base_freshdesk_tickets"], "test.edw.not_null_base_freshdesk_tickets_source": ["model.edw.base_freshdesk_tickets"], "test.edw.accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12": ["model.edw.base_freshdesk_tickets"], "test.edw.not_null_base_freshdesk_tickets_status": ["model.edw.base_freshdesk_tickets"], "test.edw.accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9": ["model.edw.base_freshdesk_tickets"], "test.edw.not_null_base_freshdesk_tickets_updated_at": ["model.edw.base_freshdesk_tickets"], "test.edw.not_null_base_freshdesk_agents_is_available": ["model.edw.base_freshdesk_agents"], "test.edw.not_null_base_freshdesk_agents_is_active": ["model.edw.base_freshdesk_agents"], "test.edw.not_null_base_freshdesk_agents_agent_name": ["model.edw.base_freshdesk_agents"], "test.edw.not_null_base_freshdesk_agents_agent_id": ["model.edw.base_freshdesk_agents"], "test.edw.unique_base_freshdesk_agents_agent_id": ["model.edw.base_freshdesk_agents"], "test.edw.not_null_base_freshdesk_agents_agent_type": ["model.edw.base_freshdesk_agents"], "test.edw.not_null_base_freshdesk_agents_updated_at": ["model.edw.base_freshdesk_agents"], "test.edw.not_null_base_v7_agt_dataset_id": ["model.edw.base_v7_agt"], "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_": ["model.edw.agt_datasets", "model.edw.base_v7_agt"], "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_": ["model.edw.agt_asset_stages", "model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_cw_email": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_task_submitted_at": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_asset_id": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_from_stage_number": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_to_stage_name": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_stage_duration": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_asset_annotation_running_total": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_dataset_name": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_dataset_owner_id": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_cloudfactory_workstream_id": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_dataset_inserted_at": ["model.edw.base_v7_agt"], "test.edw.not_null_base_v7_agt_dataset_updated_at": ["model.edw.base_v7_agt"], "test.edw.not_null_base_abyss_solutions_v7_dataset_id": ["model.edw.base_abyss_solutions_v7"], "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_": ["model.edw.abyss_datasets", "model.edw.base_abyss_solutions_v7"], "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_": ["model.edw.abyss_asset_stages", "model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_cw_email": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_task_submitted_at": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_asset_id": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_from_stage_number": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_to_stage_name": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_stage_duration": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_asset_annotation_running_total": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_dataset_name": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_abyss_solutions_v7_cloudfactory_workstream_id": ["model.edw.base_abyss_solutions_v7"], "test.edw.not_null_base_projects_projects_project_key": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_project_name": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_project_uid": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_client_key": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_project_id": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_project_status": ["model.edw.base_projects_projects"], "test.edw.accepted_values_base_projects_projects_project_status__0__1": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_subscription_type": ["model.edw.base_projects_projects"], "test.edw.accepted_values_base_projects_projects_subscription_type__0__1": ["model.edw.base_projects_projects"], "test.edw.accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_billable_unit_code": ["model.edw.base_projects_projects"], "test.edw.accepted_values_base_projects_projects_billable_unit_code__0__1": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_billable_unit": ["model.edw.base_projects_projects"], "test.edw.accepted_values_base_projects_projects_billable_unit__Hourly__Unit": ["model.edw.base_projects_projects"], "test.edw.not_null_base_projects_projects_ws_shield_enabled": ["model.edw.base_projects_projects"], "test.edw.unique_stg_breezyhr_candidates_candidate_id": ["model.edw.stg_breezyhr_candidates"], "test.edw.not_null_stg_breezyhr_candidates_candidate_id": ["model.edw.stg_breezyhr_candidates"], "test.edw.unique_base_breezyhr_candidate_meta_candidate_id": ["model.edw.base_breezyhr_candidate_meta"], "test.edw.not_null_base_breezyhr_candidate_streams_stream_type": ["model.edw.base_breezyhr_candidate_streams"], "test.edw.accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted": ["model.edw.base_breezyhr_candidate_streams"], "test.edw.dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id": ["model.edw.base_breezyhr_candidate_streams"], "test.edw.unique_stg_breezyhr_positions_position_id": ["model.edw.stg_breezyhr_positions"], "test.edw.unique_stg_worker_conversion_candidate_id": ["model.edw.stg_worker_conversion"], "test.edw.not_null_stg_worker_conversion_candidate_id": ["model.edw.stg_worker_conversion"], "test.edw.not_null_stg_breezy_worker_pool_candidate_id": ["model.edw.stg_breezy_worker_pool"], "test.edw.not_null_stg_breezy_worker_pool_email": ["model.edw.stg_breezy_worker_pool"], "test.edw.not_null_stg_worker_lifecycle_candidate_id": ["model.edw.stg_worker_lifecycle"], "test.edw.not_null_base_hist_salesforce_contract_contract_id": ["model.edw.base_hist_salesforce_contract"], "test.edw.not_null_base_hist_salesforce_contract_client_id": ["model.edw.base_hist_salesforce_contract"], "test.edw.dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False": ["model.edw.base_hist_salesforce_contract"], "test.edw.not_null_base_hist_salesforce_contract_last_modified_at": ["model.edw.base_hist_salesforce_contract"], "test.edw.not_null_base_hist_salesforce_contract_contract_name": ["model.edw.base_hist_salesforce_contract"], "test.edw.not_null_base_hist_salesforce_contract_system_mod_stamp": ["model.edw.base_hist_salesforce_contract"], "test.edw.not_null_base_passmark_cpu_cores_per_cpu": ["model.edw.base_passmark_cpu"], "test.edw.not_null_base_passmark_cpu_cpu_name": ["model.edw.base_passmark_cpu"], "test.edw.unique_base_passmark_cpu_cpu_name": ["model.edw.base_passmark_cpu"], "test.edw.not_null_base_passmark_cpu_rank": ["model.edw.base_passmark_cpu"], "test.edw.not_null_stg_cpu_model_summary_cores_per_cpu": ["model.edw.stg_cpu_model_summary"], "test.edw.not_null_stg_cpu_model_summary_cpu_name": ["model.edw.stg_cpu_model_summary"], "test.edw.not_null_stg_cpu_model_summary_rank": ["model.edw.stg_cpu_model_summary"], "test.edw.not_null_base_cis_workstreams_id": ["model.edw.base_cis_workstreams"], "test.edw.not_null_base_cis_workstreams_client_key": ["model.edw.base_cis_workstreams"], "test.edw.not_null_base_cis_workstreams_project_key": ["model.edw.base_cis_workstreams"], "test.edw.not_null_base_tlms_users_user_id": ["model.edw.base_tlms_users"], "test.edw.unique_base_tlms_users_user_id": ["model.edw.base_tlms_users"], "test.edw.not_null_base_tlms_courses_course_id": ["model.edw.base_tlms_courses"], "test.edw.unique_base_tlms_courses_course_id": ["model.edw.base_tlms_courses"], "test.edw.not_null_base_tlms_categories_category_id": ["model.edw.base_tlms_categories"], "test.edw.unique_base_tlms_categories_category_id": ["model.edw.base_tlms_categories"], "test.edw.not_null_base_tlms_branches_branch_id": ["model.edw.base_tlms_branches"], "test.edw.unique_base_tlms_branches_branch_id": ["model.edw.base_tlms_branches"], "test.edw.not_null_base_tlms_group_users_user_id": ["model.edw.base_tlms_group_users"], "test.edw.relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_": ["model.edw.base_tlms_group_users", "model.edw.base_tlms_users"], "test.edw.not_null_base_tlms_group_courses_course_id": ["model.edw.base_tlms_group_courses"], "test.edw.relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_": ["model.edw.base_tlms_courses", "model.edw.base_tlms_group_courses"], "test.edw.not_null_base_tlms_group_courses_group_course_key": ["model.edw.base_tlms_group_courses"], "test.edw.unique_base_tlms_group_courses_group_course_key": ["model.edw.base_tlms_group_courses"], "test.edw.not_null_base_tlms_group_courses_group_id": ["model.edw.base_tlms_group_courses"], "test.edw.not_null_base_tlms_course_users_user_id": ["model.edw.base_tlms_course_users"], "test.edw.relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_": ["model.edw.base_tlms_course_users", "model.edw.base_tlms_users"], "test.edw.not_null_base_tlms_course_users_course_id": ["model.edw.base_tlms_course_users"], "test.edw.relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_": ["model.edw.base_tlms_course_users", "model.edw.base_tlms_courses"], "test.edw.unique_base_tlms_groups_group_id": ["model.edw.base_tlms_groups"], "test.edw.not_null_base_tlms_groups_group_id": ["model.edw.base_tlms_groups"], "test.edw.not_null_stg_tlms_user_activity_user_id": ["model.edw.stg_tlms_user_activity"], "test.edw.relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_": ["model.edw.base_tlms_users", "model.edw.stg_tlms_user_activity"], "test.edw.not_null_stg_tlms_user_activity_course_id": ["model.edw.stg_tlms_user_activity"], "test.edw.relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_": ["model.edw.base_tlms_courses", "model.edw.stg_tlms_user_activity"], "test.edw.not_null_base_pulseviz_task_event_stats_task_event_stats_record_id": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.unique_base_pulseviz_task_event_stats_task_event_stats_record_id": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_base_pulseviz_task_event_stats_task_event_id": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_base_pulseviz_task_event_stats_event_type": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_": ["model.edw.base_projects_projects", "model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_base_pulseviz_task_event_stats_task_id": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_base_pulseviz_task_event_stats_task_type": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_base_pulseviz_task_event_stats_task_started_at": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_base_pulseviz_task_event_stats_task_completed_at": ["model.edw.base_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.unique_stg_pulseviz_task_event_stats_task_event_stats_record_id": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_id": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_event_type": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_": ["model.edw.base_projects_projects", "model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_task_id": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_task_type": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_task_started_at": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_task_event_stats_task_completed_at": ["model.edw.stg_pulseviz_task_event_stats"], "test.edw.not_null_stg_pulseviz_subtasks_task_event_stats_record_id": ["model.edw.stg_pulseviz_subtasks"], "test.edw.unique_stg_pulseviz_subtasks_task_event_stats_record_id": ["model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_stg_pulseviz_subtasks_task_event_id": ["model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_stg_pulseviz_subtasks_event_type": ["model.edw.stg_pulseviz_subtasks"], "test.edw.accepted_values_stg_pulseviz_subtasks_event_type__False__1__2": ["model.edw.stg_pulseviz_subtasks"], "test.edw.relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_": ["model.edw.base_projects_projects", "model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_stg_pulseviz_subtasks_task_id": ["model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_stg_pulseviz_subtasks_task_type": ["model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_stg_pulseviz_subtasks_task_started_at": ["model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_stg_pulseviz_subtasks_task_completed_at": ["model.edw.stg_pulseviz_subtasks"], "test.edw.not_null_base_system_checker_hardware_email_address": ["model.edw.base_system_checker_hardware"], "test.edw.not_null_base_system_checker_hardware_created_at": ["model.edw.base_system_checker_hardware"], "test.edw.not_null_base_system_checker_hardware_processor_type": ["model.edw.base_system_checker_hardware"], "test.edw.not_null_base_system_checker_hardware_operating_system": ["model.edw.base_system_checker_hardware"], "test.edw.not_null_base_system_checker_hardware_memory": ["model.edw.base_system_checker_hardware"], "test.edw.not_null_base_system_checker_cw_data_email_address": ["model.edw.base_system_checker_cw_data"], "test.edw.not_null_base_system_checker_cw_data_created_at": ["model.edw.base_system_checker_cw_data"], "test.edw.not_null_base_system_checker_cw_data_cpu": ["model.edw.base_system_checker_cw_data"], "test.edw.not_null_base_system_checker_cw_data_operating_system": ["model.edw.base_system_checker_cw_data"], "test.edw.not_null_base_system_checker_cw_data_memory": ["model.edw.base_system_checker_cw_data"], "test.edw.not_null_stg_system_checker_hardware_email_address": ["model.edw.stg_system_checker_hardware"], "test.edw.unique_stg_system_checker_hardware_email_address": ["model.edw.stg_system_checker_hardware"], "test.edw.not_null_stg_system_checker_hardware_created_at": ["model.edw.stg_system_checker_hardware"], "test.edw.not_null_stg_system_checker_hardware_cpu_type": ["model.edw.stg_system_checker_hardware"], "test.edw.not_null_stg_system_checker_hardware_operating_system": ["model.edw.stg_system_checker_hardware"], "source.edw.csp.reports": [], "source.edw.struction_site.shr_cf_areas": [], "source.edw.struction_site.shr_cf_projects": [], "source.edw.struction_site.shr_cf_status_changes": [], "source.edw.struction_site.shr_st_projects": [], "source.edw.struction_site.shr_video_walks": [], "source.edw.solarwinds.incidents": [], "source.edw.solarwinds.users": [], "source.edw.solarwinds.categories": [], "source.edw.solarwinds.departments": [], "source.edw.solarwinds.roles": [], "source.edw.solarwinds.sites": [], "source.edw.freshdesk.tickets": [], "source.edw.freshdesk.agents": [], "source.edw.freshdesk.companies": [], "source.edw.freshdesk.satisfaction_ratings": [], "source.edw.freshdesk.conversations": [], "source.edw.freshdesk.groups": [], "source.edw.freshdesk.roles": [], "source.edw.freshdesk.time_entries": [], "source.edw.v7.agt": [], "source.edw.hudl.daily_fb_vb_training": [], "source.edw.hudl.daily_player_tracking": [], "source.edw.hudl.daily_fb_vb_production": [], "source.edw.hudl_qa_scores.sheet1": [], "source.edw.abyss.abyss_solutions_v7": [], "source.edw.calendar.api_keys": [], "source.edw.calendar.ar_internal_metadata": [], "source.edw.calendar.calendars": [], "source.edw.calendar.claims": [], "source.edw.calendar.delayed_jobs": [], "source.edw.calendar.events": [], "source.edw.calendar.event_instances": [], "source.edw.calendar.open_shifts": [], "source.edw.calendar.open_shift_requests": [], "source.edw.calendar.reject_schedules": [], "source.edw.calendar.schedules": [], "source.edw.calendar.schema_migrations": [], "source.edw.calendar.trades": [], "source.edw.calendar._sdc_rejected": [], "source.edw.clientplatform.accounts": [], "source.edw.clientplatform.job_types": [], "source.edw.clientplatform.opt_out_station_details": [], "source.edw.clientplatform.skills": [], "source.edw.clientplatform.transaction_types": [], "source.edw.clientplatform.transactions": [], "source.edw.clientplatform.worker_skill_gold_standard_counters": [], "source.edw.clientplatform.worker_skills": [], "source.edw.workerplatform.opt_out_details": [], "source.edw.workerplatform.payments": [], "source.edw.workerplatform.tasks": [], "source.edw.workerplatform.teams": [], "source.edw.workerplatform.work_histories": [], "source.edw.workerplatform.workers": [], "source.edw.projects.api_keys": [], "source.edw.projects.ar_internal_metadata": [], "source.edw.projects.capacity_distributions": [], "source.edw.projects.memberships": [], "source.edw.projects.membership_journals": [], "source.edw.projects.milestones": [], "source.edw.projects.projects": [], "source.edw.projects.project_activities": [], "source.edw.projects.project_configurations": [], "source.edw.projects.schema_migrations": [], "source.edw.projects.subscriptions": [], "source.edw.projects.tasks": [], "source.edw.projects._sdc_rejected": [], "source.edw.payout_202008.flow": [], "source.edw.payout_202008.kenya_scheduled": [], "source.edw.payout_202008.nepal_scheduled": [], "source.edw.payout_202008.adjustments": [], "source.edw.payout_202007.flow": [], "source.edw.payout_202007.kenya_scheduled": [], "source.edw.payout_202007.nepal_scheduled": [], "source.edw.payout_202007.adjustments": [], "source.edw.payout_202009.flow": [], "source.edw.payout_202009.kenya_scheduled": [], "source.edw.payout_202009.nepal_scheduled": [], "source.edw.payout_202009.adjustments": [], "source.edw.payout_202010.flow": [], "source.edw.payout_202010.kenya_scheduled": [], "source.edw.payout_202010.nepal_scheduled": [], "source.edw.payout_202010.adjustments": [], "source.edw.payout_202011.flow": [], "source.edw.payout_202011.kenya_scheduled": [], "source.edw.payout_202011.nepal_scheduled": [], "source.edw.payout_202011.adjustments": [], "source.edw.payout_202012.flow": [], "source.edw.payout_202012.kenya_scheduled": [], "source.edw.payout_202012.nepal_scheduled": [], "source.edw.payout_202012.adjustments": [], "source.edw.payout_202101.flow": [], "source.edw.payout_202101.kenya_scheduled": [], "source.edw.payout_202101.nepal_scheduled": [], "source.edw.payout_202101.adjustments": [], "source.edw.sheetload.people": [], "source.edw.sheetload.workstreams": [], "source.edw.sheetload.breezy_internal_pools": [], "source.edw.sheetload.breezy_external_pools": [], "source.edw.sheetload.expensify_workers": [], "source.edw.sheetload.skill_distribution": [], "source.edw.sheetload.cpu_model_summary": [], "source.edw.breezyhr.candidates": [], "source.edw.breezyhr.candidate_meta": [], "source.edw.breezyhr.positions": [], "source.edw.breezyhr.companies": [], "source.edw.users.adjusted_time_entries": [], "source.edw.users.api_keys": [], "source.edw.users.ar_internal_metadata": [], "source.edw.users.availabilities": [], "source.edw.users.banks": [], "source.edw.users.bank_accounts": [], "source.edw.users.bank_branches": [], "source.edw.users.delivery_hubs": [], "source.edw.users.hub_slots": [], "source.edw.users.idle_time_distributions": [], "source.edw.users.insurances": [], "source.edw.users.profiles": [], "source.edw.users.schema_migrations": [], "source.edw.users.slots": [], "source.edw.users.time_entries": [], "source.edw.users.time_logs": [], "source.edw.users.time_log_incident_mappings": [], "source.edw.users.time_log_time_entry_mappings": [], "source.edw.users.time_offs": [], "source.edw.users.time_off_policies": [], "source.edw.users.time_off_stats": [], "source.edw.users.time_reports": [], "source.edw.users.users": [], "source.edw.users.work_sessions": [], "source.edw.users._sdc_rejected": [], "source.edw.breezy_categories.external": [], "source.edw.breezy_categories.internal": [], "source.edw.breezy_categories.positions": [], "source.edw.cpa_assessments.sheet1": [], "source.edw.cpu_buckets.sheet1": [], "source.edw.salesforce.account": [], "source.edw.salesforce.opportunity": [], "source.edw.salesforce.recordtype": [], "source.edw.salesforce.user": [], "source.edw.salesforce.opportunityhistory": [], "source.edw.salesforce.userrole": [], "source.edw.salesforce.contract__c": [], "source.edw.passmark.cpu_model_summary": [], "source.edw.cfclient.agile_subscriptions": [], "source.edw.cfclient.attachments": [], "source.edw.cfclient.availabilities": [], "source.edw.cfclient.avid_accuracy_stats": [], "source.edw.cfclient.avid_production_runs": [], "source.edw.cfclient.avid_raw_qc_data": [], "source.edw.cfclient.avid_raw_stats": [], "source.edw.cfclient.avid_task_event_stats": [], "source.edw.cfclient.batch_subscriptions": [], "source.edw.cfclient.collaborations": [], "source.edw.cfclient.crm_api_keys": [], "source.edw.cfclient.crm_project_opportunities": [], "source.edw.cfclient.delivery_hubs": [], "source.edw.cfclient.delivery_hub_issues": [], "source.edw.cfclient.exp_task_event_stats": [], "source.edw.cfclient.flow_users": [], "source.edw.cfclient.hub_slots": [], "source.edw.cfclient.lean_subscriptions": [], "source.edw.cfclient.open_shift_entity_for_time_offs": [], "source.edw.cfclient.projects": [], "source.edw.cfclient.projects_users": [], "source.edw.cfclient.schedule_configs": [], "source.edw.cfclient.schema_migrations": [], "source.edw.cfclient.slots": [], "source.edw.cfclient.summarized_exp_task_event_stats": [], "source.edw.cfclient.tasks": [], "source.edw.cfclient.task_event_stats": [], "source.edw.cfclient.time_entries": [], "source.edw.cfclient.time_offs": [], "source.edw.cfclient.time_off_policies": [], "source.edw.cfclient.time_off_stats": [], "source.edw.cfclient.trade_options": [], "source.edw.cfclient.usecases": [], "source.edw.cfclient.users": [], "source.edw.cfclient.user_time_off_policies": [], "source.edw.cfclient.workers_schedules": [], "source.edw.cfclient.worker_mappings": [], "source.edw.cfclient.worker_schedule_notifications": [], "source.edw.cis_snowpipe.people": [], "source.edw.cis_snowpipe.workstreams": [], "source.edw.talentlms.users": [], "source.edw.talentlms.courses": [], "source.edw.talentlms.categories": [], "source.edw.talentlms.groups": [], "source.edw.talentlms.branches": [], "source.edw.pulseviz.task_event_stats": [], "source.edw.system_checker.system_checker": [], "source.edw.system_checker.cw_data": []}, "child_map": {"model.edw.dim_location": [], "model.edw.dim_rating": [], "model.edw.dim_agent": [], "model.edw.dim_ticket": [], "model.edw.dim_requester": [], "model.edw.fact_ratings": [], "model.edw.fact_tickets": [], "model.edw.dataloop_asset_stages": ["test.edw.not_null_dataloop_asset_stages_email"], "model.edw.agt_asset_stages": ["test.edw.not_null_agt_asset_stages_annotation_count", "test.edw.not_null_agt_asset_stages_asset_annotation_running_total", "test.edw.not_null_agt_asset_stages_asset_id", "test.edw.not_null_agt_asset_stages_cw_email", "test.edw.not_null_agt_asset_stages_dataset_id", "test.edw.not_null_agt_asset_stages_from_stage_number", "test.edw.not_null_agt_asset_stages_stage_duration", "test.edw.not_null_agt_asset_stages_task_submitted_at", "test.edw.not_null_agt_asset_stages_task_submitted_date", "test.edw.not_null_agt_asset_stages_to_stage_name", "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_", "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_", "test.edw.relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_", "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_"], "model.edw.agt_datasets": ["test.edw.not_null_agt_datasets_cloudfactory_workstream_id", "test.edw.not_null_agt_datasets_dataset_id", "test.edw.not_null_agt_datasets_dataset_inserted_at", "test.edw.not_null_agt_datasets_dataset_inserted_date", "test.edw.not_null_agt_datasets_dataset_name", "test.edw.not_null_agt_datasets_dataset_owner_id", "test.edw.not_null_agt_datasets_dataset_updated_at", "test.edw.not_null_agt_datasets_dataset_updated_date", "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_", "test.edw.relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_", "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_", "test.edw.unique_agt_datasets_dataset_id"], "model.edw.avid_quality_control": [], "model.edw.ibotta_completed_task": [], "model.edw.football_volleyball_performance": [], "model.edw.soccer_performance": [], "model.edw.abyss_asset_stages": ["model.edw.vw_abyss_qaqc_sample", "test.edw.not_null_abyss_asset_stages_annotation_count", "test.edw.not_null_abyss_asset_stages_asset_annotation_running_total", "test.edw.not_null_abyss_asset_stages_asset_id", "test.edw.not_null_abyss_asset_stages_cw_email", "test.edw.not_null_abyss_asset_stages_dataset_id", "test.edw.not_null_abyss_asset_stages_from_stage_number", "test.edw.not_null_abyss_asset_stages_stage_duration", "test.edw.not_null_abyss_asset_stages_task_submitted_at", "test.edw.not_null_abyss_asset_stages_task_submitted_date", "test.edw.not_null_abyss_asset_stages_to_stage_name", "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_", "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_", "test.edw.relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_", "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_"], "model.edw.abyss_datasets": ["model.edw.vw_abyss_qaqc_sample", "test.edw.not_null_abyss_datasets_cloudfactory_workstream_id", "test.edw.not_null_abyss_datasets_dataset_id", "test.edw.not_null_abyss_datasets_dataset_name", "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_", "test.edw.relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_", "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_", "test.edw.unique_abyss_datasets_dataset_id"], "model.edw.vw_abyss_qaqc_sample": [], "model.edw.video_walks": [], "model.edw.video_walk_sessions": [], "model.edw.dim_sale": [], "model.edw.dim_account": [], "model.edw.dim_salesperson": [], "model.edw.fact_sales": [], "model.edw.worker_payout_monthly": [], "model.edw.dim_incident": ["model.edw.vw_avid_incidents"], "model.edw.dim_user": [], "model.edw.fact_incidents": ["model.edw.vw_avid_incidents"], "model.edw.vw_avid_incidents": [], "model.edw.dim_course": ["test.edw.not_null_dim_course_category_name", "test.edw.not_null_dim_course_course_id", "test.edw.not_null_dim_course_course_key", "test.edw.not_null_dim_course_course_name", "test.edw.not_null_dim_course_course_status", "test.edw.not_null_dim_course_is_shared", "test.edw.relationships_dim_course_course_id__course_id__ref_base_tlms_courses_", "test.edw.relationships_fact_learning_course_key__course_key__ref_dim_course_", "test.edw.unique_dim_course_course_key"], "model.edw.fact_learning": ["test.edw.not_null_fact_learning_completed_percent", "test.edw.not_null_fact_learning_course_key", "test.edw.not_null_fact_learning_learner_course_count", "test.edw.not_null_fact_learning_learner_key", "test.edw.not_null_fact_learning_learning_total_time_seconds", "test.edw.relationships_fact_learning_course_key__course_key__ref_dim_course_", "test.edw.relationships_fact_learning_learner_key__learner_key__ref_dim_learner_"], "model.edw.csp_summary": [], "model.edw.dim_learner": ["model.edw.fact_learning", "test.edw.accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown", "test.edw.not_null_dim_learner_country", "test.edw.not_null_dim_learner_email", "test.edw.not_null_dim_learner_learner_id", "test.edw.not_null_dim_learner_learner_key", "test.edw.not_null_dim_learner_worker_status", "test.edw.relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_", "test.edw.relationships_fact_learning_learner_key__learner_key__ref_dim_learner_", "test.edw.unique_dim_learner_learner_key"], "model.edw.vw_abyss_adherence": [], "model.edw.adherence": ["model.edw.vw_abyss_adherence"], "model.edw.time_entries": ["model.edw.daily_projects_time__grouped", "model.edw.struction_site_time_entries", "test.edw.accepted_values_time_entries_time_entry_type__training__production", "test.edw.not_null_time_entries_client_key", "test.edw.not_null_time_entries_client_name", "test.edw.not_null_time_entries_is_billable", "test.edw.not_null_time_entries_project_key", "test.edw.not_null_time_entries_project_name", "test.edw.not_null_time_entries_schedule_id", "test.edw.not_null_time_entries_schedule_start_at", "test.edw.not_null_time_entries_task_key", "test.edw.not_null_time_entries_time_entry_date_key", "test.edw.not_null_time_entries_time_entry_duration", "test.edw.not_null_time_entries_time_entry_start_at", "test.edw.not_null_time_entries_time_entry_type", "test.edw.not_null_time_entries_worker_email_address", "test.edw.not_null_time_entries_worker_id", "test.edw.not_null_time_entries_workstream_name"], "model.edw.dim_workstream": ["model.edw.fact_reviews", "model.edw.fact_tasks", "test.edw.not_null_dim_workstream_billing_type", "test.edw.not_null_dim_workstream_commitment", "test.edw.not_null_dim_workstream_connectivity", "test.edw.not_null_dim_workstream_has_required_training", "test.edw.not_null_dim_workstream_package_type", "test.edw.not_null_dim_workstream_package_version", "test.edw.not_null_dim_workstream_team_lead_email", "test.edw.not_null_dim_workstream_tool_access", "test.edw.not_null_dim_workstream_tool_name", "test.edw.not_null_dim_workstream_type", "test.edw.not_null_dim_workstream_workstream_key", "test.edw.not_null_dim_workstream_workstream_name", "test.edw.not_null_dim_workstream_workstream_status", "test.edw.relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_", "test.edw.relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_"], "model.edw.dim_worker": ["model.edw.fact_reviews", "model.edw.fact_tasks", "test.edw.not_null_dim_worker_city", "test.edw.not_null_dim_worker_country", "test.edw.not_null_dim_worker_email", "test.edw.not_null_dim_worker_full_name", "test.edw.not_null_dim_worker_gender", "test.edw.not_null_dim_worker_worker_key", "test.edw.not_null_dim_worker_worker_status", "test.edw.not_null_dim_worker_worker_type", "test.edw.relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_", "test.edw.relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_"], "model.edw.dim_client": ["model.edw.fact_reviews", "model.edw.fact_tasks", "model.edw.time_entries", "test.edw.not_null_dim_client_annual_revenue", "test.edw.not_null_dim_client_client_city", "test.edw.not_null_dim_client_client_country", "test.edw.not_null_dim_client_client_id", "test.edw.not_null_dim_client_client_industry", "test.edw.not_null_dim_client_client_key", "test.edw.not_null_dim_client_client_name", "test.edw.not_null_dim_client_client_phone", "test.edw.not_null_dim_client_client_region", "test.edw.not_null_dim_client_client_segment", "test.edw.not_null_dim_client_client_state", "test.edw.not_null_dim_client_client_status", "test.edw.not_null_dim_client_crunchbase_category", "test.edw.not_null_dim_client_delivery_manager", "test.edw.not_null_dim_client_delivery_owner", "test.edw.not_null_dim_client_employee_range", "test.edw.not_null_dim_client_ideal_client_profile_score", "test.edw.not_null_dim_client_last_round_type", "test.edw.not_null_dim_client_lead_channel", "test.edw.not_null_dim_client_lead_source", "test.edw.not_null_dim_client_primary_focus", "test.edw.relationships_fact_tasks_client_key__client_key__ref_dim_client_", "test.edw.unique_dim_client_client_id", "test.edw.unique_dim_client_client_key"], "model.edw.dim_date": ["model.edw.dim_month", "model.edw.fact_tasks", "model.edw.monthly_projects__grouped", "model.edw.vw_avid_incidents", "test.edw.relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_"], "model.edw.dim_month": [], "model.edw.dim_task": ["model.edw.fact_reviews", "model.edw.fact_tasks", "test.edw.accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match", "test.edw.not_null_dim_task_lvl1", "test.edw.not_null_dim_task_lvl2", "test.edw.not_null_dim_task_task_category", "test.edw.not_null_dim_task_task_full_name", "test.edw.not_null_dim_task_task_key", "test.edw.not_null_dim_task_task_type", "test.edw.relationships_fact_reviews_task_key__task_key__ref_dim_task_", "test.edw.relationships_fact_tasks_task_key__task_key__ref_dim_task_"], "model.edw.fact_tasks": ["test.edw.not_null_fact_tasks_client_key", "test.edw.not_null_fact_tasks_task_asset_key", "test.edw.not_null_fact_tasks_task_completed_date_key", "test.edw.not_null_fact_tasks_task_count", "test.edw.not_null_fact_tasks_task_duration", "test.edw.not_null_fact_tasks_task_key", "test.edw.not_null_fact_tasks_task_started_date_key", "test.edw.not_null_fact_tasks_worker_key", "test.edw.not_null_fact_tasks_workstream_key", "test.edw.relationships_fact_tasks_client_key__client_key__ref_dim_client_", "test.edw.relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_", "test.edw.relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_tasks_task_key__task_key__ref_dim_task_", "test.edw.relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_", "test.edw.relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_"], "model.edw.fact_reviews": ["test.edw.not_null_fact_reviews_review_complete_date_key", "test.edw.not_null_fact_reviews_review_count", "test.edw.not_null_fact_reviews_review_duration", "test.edw.not_null_fact_reviews_review_score", "test.edw.not_null_fact_reviews_review_start_date_key", "test.edw.not_null_fact_reviews_reviewer_key", "test.edw.not_null_fact_reviews_task_key", "test.edw.not_null_fact_reviews_worker_key", "test.edw.not_null_fact_reviews_workstream_key", "test.edw.relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_", "test.edw.relationships_fact_reviews_task_key__task_key__ref_dim_task_", "test.edw.relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_", "test.edw.relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_"], "model.edw.dim_task_asset": ["model.edw.fact_reviews", "model.edw.fact_tasks", "test.edw.not_null_dim_task_asset_asset_name", "test.edw.not_null_dim_task_asset_dataset_name", "test.edw.not_null_dim_task_asset_sample_source", "test.edw.not_null_dim_task_asset_task_asset_key", "test.edw.not_null_dim_task_asset_tool_project_name", "test.edw.relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_"], "model.edw.daily_projects_hours__grouped": ["model.edw.monthly_projects__grouped"], "model.edw.daily_projects_time__grouped": ["model.edw.daily_projects_hours__grouped"], "model.edw.monthly_projects__grouped": [], "model.edw.worker_payout_line_items": [], "model.edw.worker_workstreams": ["test.edw.not_null_worker_workstreams_person_key", "test.edw.relationships_worker_workstreams_person_key__person_key__ref_worker_pool_"], "model.edw.worker_hardware": ["test.edw.not_null_worker_hardware_email", "test.edw.not_null_worker_hardware_person_key", "test.edw.unique_worker_hardware_email", "test.edw.unique_worker_hardware_person_key"], "model.edw.worker_pool": ["model.edw.dim_learner", "model.edw.stg_worker_payout_line_items", "model.edw.worker_workstreams", "test.edw.not_null_worker_pool_email", "test.edw.not_null_worker_pool_person_key", "test.edw.relationships_worker_workstreams_person_key__person_key__ref_worker_pool_"], "model.edw.struction_site_time_entries": [], "model.edw.stg_hist_solarwinds_incidents": ["model.edw.dim_incident", "model.edw.fact_incidents"], "model.edw.stg_hist_solarwinds_users": ["model.edw.dim_user", "model.edw.stg_hist_solarwinds_incidents"], "model.edw.base_solarwinds_categories": [], "model.edw.base_solarwinds_users": [], "model.edw.base_hist_solarwinds_incidents": ["model.edw.stg_hist_solarwinds_incidents"], "model.edw.base_solarwinds_roles": [], "model.edw.base_solarwinds_incidents": [], "model.edw.base_solarwinds_sites": [], "model.edw.base_hist_solarwinds_users": ["model.edw.stg_hist_solarwinds_users"], "model.edw.base_solarwinds_departments": [], "model.edw.stg_hist_freshdesk_ticket_ratings": ["model.edw.dim_rating", "model.edw.fact_ratings"], "model.edw.stg_freshdesk_requesters": ["model.edw.dim_requester"], "model.edw.stg_hist_freshdesk_tickets": ["model.edw.dim_ticket", "model.edw.fact_ratings", "model.edw.fact_tickets", "model.edw.stg_hist_freshdesk_requesters"], "model.edw.stg_hist_freshdesk_requesters": [], "model.edw.stg_hist_freshdesk_locations": ["model.edw.dim_location"], "model.edw.stg_hist_freshdesk_agents": ["model.edw.dim_agent"], "model.edw.base_hist_freshdesk_tickets": ["model.edw.stg_hist_freshdesk_tickets", "test.edw.accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4", "test.edw.accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "test.edw.accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9", "test.edw.not_null_base_hist_freshdesk_tickets_created_at", "test.edw.not_null_base_hist_freshdesk_tickets_priority", "test.edw.not_null_base_hist_freshdesk_tickets_source", "test.edw.not_null_base_hist_freshdesk_tickets_status", "test.edw.not_null_base_hist_freshdesk_tickets_ticket_id", "test.edw.not_null_base_hist_freshdesk_tickets_updated_at"], "model.edw.base_freshdesk_satisfaction_ratings": [], "model.edw.base_hist_freshdesk_satisfaction_ratings": ["model.edw.stg_hist_freshdesk_ticket_ratings"], "model.edw.base_freshdesk_agents": ["test.edw.not_null_base_freshdesk_agents_agent_id", "test.edw.not_null_base_freshdesk_agents_agent_name", "test.edw.not_null_base_freshdesk_agents_agent_type", "test.edw.not_null_base_freshdesk_agents_is_active", "test.edw.not_null_base_freshdesk_agents_is_available", "test.edw.not_null_base_freshdesk_agents_updated_at", "test.edw.unique_base_freshdesk_agents_agent_id"], "model.edw.base_freshdesk_companies": [], "model.edw.base_hist_freshdesk_agents": ["model.edw.stg_hist_freshdesk_agents", "test.edw.not_null_base_hist_freshdesk_agents_agent_id", "test.edw.not_null_base_hist_freshdesk_agents_agent_name", "test.edw.not_null_base_hist_freshdesk_agents_agent_type", "test.edw.not_null_base_hist_freshdesk_agents_is_active", "test.edw.not_null_base_hist_freshdesk_agents_is_available", "test.edw.not_null_base_hist_freshdesk_agents_updated_at"], "model.edw.base_freshdesk_tickets": ["model.edw.stg_freshdesk_requesters", "test.edw.accepted_values_base_freshdesk_tickets_priority__1__2__3__4", "test.edw.accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12", "test.edw.accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9", "test.edw.not_null_base_freshdesk_tickets_created_at", "test.edw.not_null_base_freshdesk_tickets_priority", "test.edw.not_null_base_freshdesk_tickets_source", "test.edw.not_null_base_freshdesk_tickets_status", "test.edw.not_null_base_freshdesk_tickets_updated_at"], "model.edw.base_hist_freshdesk_companies": ["model.edw.stg_hist_freshdesk_locations"], "model.edw.base_v7_agt": ["model.edw.agt_asset_stages", "model.edw.agt_datasets", "test.edw.not_null_base_v7_agt_asset_annotation_running_total", "test.edw.not_null_base_v7_agt_asset_id", "test.edw.not_null_base_v7_agt_cloudfactory_workstream_id", "test.edw.not_null_base_v7_agt_cw_email", "test.edw.not_null_base_v7_agt_dataset_id", "test.edw.not_null_base_v7_agt_dataset_inserted_at", "test.edw.not_null_base_v7_agt_dataset_name", "test.edw.not_null_base_v7_agt_dataset_owner_id", "test.edw.not_null_base_v7_agt_dataset_updated_at", "test.edw.not_null_base_v7_agt_from_stage_number", "test.edw.not_null_base_v7_agt_stage_duration", "test.edw.not_null_base_v7_agt_task_submitted_at", "test.edw.not_null_base_v7_agt_to_stage_name", "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_", "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_", "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_"], "model.edw.base_hudl_daily_player_tracking": ["model.edw.soccer_performance"], "model.edw.base_hudl_daily_fb_vb_training": ["model.edw.football_volleyball_performance"], "model.edw.base_hudl_quality_scores": ["model.edw.soccer_performance"], "model.edw.base_hudl_daily_fb_vb_production": ["model.edw.football_volleyball_performance"], "model.edw.base_abyss_solutions_v7": ["model.edw.abyss_asset_stages", "model.edw.abyss_datasets", "test.edw.not_null_base_abyss_solutions_v7_asset_annotation_running_total", "test.edw.not_null_base_abyss_solutions_v7_asset_id", "test.edw.not_null_base_abyss_solutions_v7_cloudfactory_workstream_id", "test.edw.not_null_base_abyss_solutions_v7_cw_email", "test.edw.not_null_base_abyss_solutions_v7_dataset_id", "test.edw.not_null_base_abyss_solutions_v7_dataset_name", "test.edw.not_null_base_abyss_solutions_v7_from_stage_number", "test.edw.not_null_base_abyss_solutions_v7_stage_duration", "test.edw.not_null_base_abyss_solutions_v7_task_submitted_at", "test.edw.not_null_base_abyss_solutions_v7_to_stage_name", "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_", "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_"], "model.edw.stg_video_walk_events": ["model.edw.video_walk_sessions", "model.edw.video_walks"], "model.edw.base_struction_site_video_walks": ["model.edw.video_walk_sessions", "model.edw.video_walks"], "model.edw.base_struction_site_status_changes": ["model.edw.stg_video_walk_events"], "model.edw.base_struction_site_st_projects": [], "model.edw.base_struction_site_areas": [], "model.edw.base_struction_site_projects": [], "model.edw.base_hist_calendar_schedules": [], "model.edw.base_calendar_schedules": ["model.edw.adherence", "model.edw.time_entries"], "model.edw.base_projects_projects": ["model.edw.adherence", "model.edw.dataloop_asset_stages", "model.edw.ibotta_completed_task", "model.edw.time_entries", "test.edw.accepted_values_base_projects_projects_billable_unit__Hourly__Unit", "test.edw.accepted_values_base_projects_projects_billable_unit_code__0__1", "test.edw.accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution", "test.edw.accepted_values_base_projects_projects_project_status__0__1", "test.edw.accepted_values_base_projects_projects_subscription_type__0__1", "test.edw.not_null_base_projects_projects_billable_unit", "test.edw.not_null_base_projects_projects_billable_unit_code", "test.edw.not_null_base_projects_projects_client_key", "test.edw.not_null_base_projects_projects_project_id", "test.edw.not_null_base_projects_projects_project_key", "test.edw.not_null_base_projects_projects_project_name", "test.edw.not_null_base_projects_projects_project_status", "test.edw.not_null_base_projects_projects_project_uid", "test.edw.not_null_base_projects_projects_subscription_type", "test.edw.not_null_base_projects_projects_ws_shield_enabled", "test.edw.relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "test.edw.relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_", "test.edw.relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_"], "model.edw.base_projects_tasks": ["model.edw.adherence", "model.edw.time_entries"], "model.edw.stg_payout_scheduled": ["model.edw.stg_payout_workers", "model.edw.stg_worker_payout_line_items"], "model.edw.stg_payout_adjustments": ["model.edw.stg_payout_workers", "model.edw.stg_worker_payout_line_items"], "model.edw.stg_payout_workers": ["model.edw.worker_pool"], "model.edw.stg_worker_payout_line_items": ["model.edw.worker_payout_line_items", "model.edw.worker_payout_monthly"], "model.edw.stg_payout_flow": ["model.edw.stg_payout_workers", "model.edw.stg_worker_payout_line_items"], "model.edw.stg_cis_worker_pool": ["model.edw.worker_pool"], "model.edw.stg_worker_workstreams": ["model.edw.worker_pool", "model.edw.worker_workstreams"], "model.edw.base_sheetload_breezy_internal": [], "model.edw.base_sheetload_people": ["model.edw.stg_worker_workstreams", "model.edw.worker_hardware"], "model.edw.base_sheetload_breezy_external": [], "model.edw.base_sheetload_cpu_model_summary": [], "model.edw.base_sheetload_skill_distribution": ["model.edw.stg_worker_workstreams"], "model.edw.base_sheetload_expensify_workers": ["model.edw.stg_worker_workstreams"], "model.edw.stg_breezyhr_candidate_note_streams": [], "model.edw.stg_breezy_worker_pool": ["model.edw.worker_pool", "test.edw.not_null_stg_breezy_worker_pool_candidate_id", "test.edw.not_null_stg_breezy_worker_pool_email"], "model.edw.stg_breezyhr_candidate_document_streams": [], "model.edw.stg_breezyhr_candidates": ["model.edw.stg_breezy_worker_pool", "test.edw.not_null_stg_breezyhr_candidates_candidate_id", "test.edw.unique_stg_breezyhr_candidates_candidate_id"], "model.edw.stg_breezyhr_positions": ["model.edw.stg_breezy_worker_pool", "model.edw.stg_worker_lifecycle", "test.edw.unique_stg_breezyhr_positions_position_id"], "model.edw.stg_worker_conversion": ["test.edw.not_null_stg_worker_conversion_candidate_id", "test.edw.unique_stg_worker_conversion_candidate_id"], "model.edw.stg_breezyhr_candidate_status_streams": ["model.edw.stg_breezy_worker_pool", "model.edw.stg_worker_lifecycle"], "model.edw.stg_worker_lifecycle": ["model.edw.stg_worker_conversion", "test.edw.not_null_stg_worker_lifecycle_candidate_id"], "model.edw.stg_breezyhr_candidate_questionnaire_streams": [], "model.edw.base_breezyhr_candidate_meta": ["model.edw.base_breezyhr_candidate_streams", "test.edw.unique_base_breezyhr_candidate_meta_candidate_id"], "model.edw.base_breezyhr_candidates": ["model.edw.stg_breezyhr_candidates"], "model.edw.base_breezyhr_candidate_streams": ["model.edw.stg_breezyhr_candidate_document_streams", "model.edw.stg_breezyhr_candidate_note_streams", "model.edw.stg_breezyhr_candidate_questionnaire_streams", "model.edw.stg_breezyhr_candidate_status_streams", "test.edw.accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted", "test.edw.dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id", "test.edw.not_null_base_breezyhr_candidate_streams_stream_type"], "model.edw.base_breezyhr_positions": ["model.edw.stg_breezyhr_positions"], "model.edw.base_users_delivery_hubs": ["model.edw.adherence"], "model.edw.base_users_users": ["model.edw.adherence", "model.edw.stg_avid_raw_qc_data", "model.edw.time_entries"], "model.edw.base_users_slots": ["model.edw.adherence"], "model.edw.base_users_time_entries": ["model.edw.adherence", "model.edw.time_entries"], "model.edw.base_users_profiles": ["model.edw.stg_avid_accuracy_stats", "model.edw.stg_avid_raw_qc_data"], "model.edw.base_breezy_categories": ["model.edw.stg_breezy_worker_pool"], "model.edw.stg_candidate_assessments": ["model.edw.stg_breezy_worker_pool", "model.edw.stg_cis_worker_pool"], "model.edw.base_sheets_cpa_assessments": ["model.edw.stg_candidate_assessments"], "model.edw.base_sheets_cpu_buckets": ["model.edw.worker_hardware"], "model.edw.stg_hist_salesforce_salesperson": ["model.edw.dim_salesperson"], "model.edw.stg_hist_salesforce_opportunity": ["model.edw.dim_sale", "model.edw.fact_sales"], "model.edw.stg_hist_salesforce_client": ["model.edw.dim_account", "model.edw.dim_client"], "model.edw.stg_hist_salesforce_contract": ["test.edw.test_fixture_salesforce_contract_20210405"], "model.edw.stg_hist_salesforce_opportunity_history": [], "model.edw.base_fixture_salesforce_contract_20210405": ["test.edw.test_fixture_salesforce_contract_20210405"], "model.edw.base_hist_salesforce_contract": ["model.edw.stg_hist_salesforce_contract", "test.edw.dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False", "test.edw.not_null_base_hist_salesforce_contract_client_id", "test.edw.not_null_base_hist_salesforce_contract_contract_id", "test.edw.not_null_base_hist_salesforce_contract_contract_name", "test.edw.not_null_base_hist_salesforce_contract_last_modified_at", "test.edw.not_null_base_hist_salesforce_contract_system_mod_stamp", "test.edw.test_package_type_not_null", "test.edw.test_package_type_not_null", "test.edw.test_package_version_not_null", "test.edw.test_package_version_not_null"], "model.edw.base_hist_salesforce_userrole": ["model.edw.stg_hist_salesforce_salesperson"], "model.edw.base_salesforce_contract": [], "model.edw.base_salesforce_userrole": [], "model.edw.base_salesforce_recordtype": [], "model.edw.base_salesforce_opportunity": [], "model.edw.base_salesforce_opportunityhistory": [], "model.edw.base_salesforce_account": [], "model.edw.base_hist_salesforce_opportunityhistory": ["model.edw.stg_hist_salesforce_opportunity_history"], "model.edw.base_hist_salesforce_opportunity": ["model.edw.stg_hist_salesforce_opportunity"], "model.edw.base_hist_salesforce_user": ["model.edw.stg_hist_salesforce_salesperson"], "model.edw.base_hist_salesforce_recordtype": [], "model.edw.base_hist_salesforce_account": ["model.edw.stg_hist_salesforce_client"], "model.edw.base_salesforce_user": [], "model.edw.stg_cpu_model_summary": ["model.edw.worker_hardware", "test.edw.not_null_stg_cpu_model_summary_cores_per_cpu", "test.edw.not_null_stg_cpu_model_summary_cpu_name", "test.edw.not_null_stg_cpu_model_summary_rank"], "model.edw.base_passmark_cpu": ["model.edw.stg_cpu_model_summary", "test.edw.not_null_base_passmark_cpu_cores_per_cpu", "test.edw.not_null_base_passmark_cpu_cpu_name", "test.edw.not_null_base_passmark_cpu_rank", "test.edw.unique_base_passmark_cpu_cpu_name"], "model.edw.stg_avid_raw_qc_data": ["model.edw.avid_quality_control"], "model.edw.stg_avid_accuracy_stats": ["model.edw.avid_quality_control"], "model.edw.base_avid_raw_stats": ["model.edw.stg_avid_accuracy_stats"], "model.edw.base_avid_raw_qc_data": ["model.edw.stg_avid_raw_qc_data"], "model.edw.base_avid_accuracy_stats": ["model.edw.stg_avid_accuracy_stats"], "model.edw.stg_cis_workstreams_current": ["model.edw.dim_workstream", "model.edw.fact_reviews", "model.edw.fact_tasks"], "model.edw.stg_cis_workers_current": ["model.edw.dim_worker", "model.edw.stg_cis_worker_pool"], "model.edw.base_cis_people": ["model.edw.stg_cis_workers_current"], "model.edw.base_cis_workstreams": ["model.edw.stg_cis_workstreams_current", "test.edw.not_null_base_cis_workstreams_client_key", "test.edw.not_null_base_cis_workstreams_id", "test.edw.not_null_base_cis_workstreams_project_key"], "model.edw.stg_tlms_user_activity": ["test.edw.not_null_stg_tlms_user_activity_course_id", "test.edw.not_null_stg_tlms_user_activity_user_id", "test.edw.relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_", "test.edw.relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_"], "model.edw.base_tlms_categories": ["model.edw.dim_course", "test.edw.not_null_base_tlms_categories_category_id", "test.edw.unique_base_tlms_categories_category_id"], "model.edw.base_hist_tlms_course_users": ["model.edw.fact_learning", "model.edw.fact_learning"], "model.edw.base_tlms_group_courses": ["test.edw.not_null_base_tlms_group_courses_course_id", "test.edw.not_null_base_tlms_group_courses_group_course_key", "test.edw.not_null_base_tlms_group_courses_group_id", "test.edw.relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_", "test.edw.unique_base_tlms_group_courses_group_course_key"], "model.edw.base_tlms_group_users": ["test.edw.not_null_base_tlms_group_users_user_id", "test.edw.relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_"], "model.edw.base_tlms_groups": ["test.edw.not_null_base_tlms_groups_group_id", "test.edw.unique_base_tlms_groups_group_id"], "model.edw.base_tlms_branches": ["test.edw.not_null_base_tlms_branches_branch_id", "test.edw.unique_base_tlms_branches_branch_id"], "model.edw.base_tlms_users": ["model.edw.dim_learner", "model.edw.stg_tlms_user_activity", "test.edw.not_null_base_tlms_users_user_id", "test.edw.relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_", "test.edw.relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_", "test.edw.relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_", "test.edw.relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_", "test.edw.unique_base_tlms_users_user_id"], "model.edw.base_tlms_courses": ["model.edw.dim_course", "test.edw.not_null_base_tlms_courses_course_id", "test.edw.relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_", "test.edw.relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_", "test.edw.relationships_dim_course_course_id__course_id__ref_base_tlms_courses_", "test.edw.relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_", "test.edw.unique_base_tlms_courses_course_id"], "model.edw.base_tlms_course_users": ["model.edw.stg_tlms_user_activity", "test.edw.not_null_base_tlms_course_users_course_id", "test.edw.not_null_base_tlms_course_users_user_id", "test.edw.relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_", "test.edw.relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_"], "model.edw.stg_pulseviz_task_event_stats": ["model.edw.dataloop_asset_stages", "model.edw.dim_task", "model.edw.dim_task_asset", "model.edw.fact_reviews", "model.edw.fact_tasks", "model.edw.ibotta_completed_task", "test.edw.accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2", "test.edw.not_null_stg_pulseviz_task_event_stats_event_type", "test.edw.not_null_stg_pulseviz_task_event_stats_task_completed_at", "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_id", "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id", "test.edw.not_null_stg_pulseviz_task_event_stats_task_id", "test.edw.not_null_stg_pulseviz_task_event_stats_task_started_at", "test.edw.not_null_stg_pulseviz_task_event_stats_task_type", "test.edw.relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "test.edw.unique_stg_pulseviz_task_event_stats_task_event_stats_record_id"], "model.edw.stg_pulseviz_subtasks": ["model.edw.dim_task", "model.edw.fact_tasks", "test.edw.accepted_values_stg_pulseviz_subtasks_event_type__False__1__2", "test.edw.not_null_stg_pulseviz_subtasks_event_type", "test.edw.not_null_stg_pulseviz_subtasks_task_completed_at", "test.edw.not_null_stg_pulseviz_subtasks_task_event_id", "test.edw.not_null_stg_pulseviz_subtasks_task_event_stats_record_id", "test.edw.not_null_stg_pulseviz_subtasks_task_id", "test.edw.not_null_stg_pulseviz_subtasks_task_started_at", "test.edw.not_null_stg_pulseviz_subtasks_task_type", "test.edw.relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_", "test.edw.unique_stg_pulseviz_subtasks_task_event_stats_record_id"], "model.edw.base_pulseviz_task_event_stats": ["model.edw.stg_pulseviz_subtasks", "model.edw.stg_pulseviz_task_event_stats", "test.edw.accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2", "test.edw.not_null_base_pulseviz_task_event_stats_event_type", "test.edw.not_null_base_pulseviz_task_event_stats_task_completed_at", "test.edw.not_null_base_pulseviz_task_event_stats_task_event_id", "test.edw.not_null_base_pulseviz_task_event_stats_task_event_stats_record_id", "test.edw.not_null_base_pulseviz_task_event_stats_task_id", "test.edw.not_null_base_pulseviz_task_event_stats_task_started_at", "test.edw.not_null_base_pulseviz_task_event_stats_task_type", "test.edw.relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_", "test.edw.unique_base_pulseviz_task_event_stats_task_event_stats_record_id"], "model.edw.dates": ["model.edw.dim_date"], "model.edw.stg_system_checker_hardware": ["model.edw.worker_hardware", "test.edw.not_null_stg_system_checker_hardware_cpu_type", "test.edw.not_null_stg_system_checker_hardware_created_at", "test.edw.not_null_stg_system_checker_hardware_email_address", "test.edw.not_null_stg_system_checker_hardware_operating_system", "test.edw.unique_stg_system_checker_hardware_email_address"], "model.edw.base_system_checker_cw_data": ["model.edw.stg_system_checker_hardware", "test.edw.not_null_base_system_checker_cw_data_cpu", "test.edw.not_null_base_system_checker_cw_data_created_at", "test.edw.not_null_base_system_checker_cw_data_email_address", "test.edw.not_null_base_system_checker_cw_data_memory", "test.edw.not_null_base_system_checker_cw_data_operating_system"], "model.edw.base_system_checker_hardware": ["model.edw.stg_system_checker_hardware", "test.edw.not_null_base_system_checker_hardware_created_at", "test.edw.not_null_base_system_checker_hardware_email_address", "test.edw.not_null_base_system_checker_hardware_memory", "test.edw.not_null_base_system_checker_hardware_operating_system", "test.edw.not_null_base_system_checker_hardware_processor_type"], "snapshot.edw.departments": [], "snapshot.edw.categories": [], "snapshot.edw.sites": [], "snapshot.edw.incidents": ["model.edw.base_hist_solarwinds_incidents"], "snapshot.edw.roles": [], "snapshot.edw.solarwinds_users": ["model.edw.base_hist_solarwinds_users"], "snapshot.edw.companies": ["model.edw.base_hist_freshdesk_companies"], "snapshot.edw.satisfaction_ratings": ["model.edw.base_hist_freshdesk_satisfaction_ratings"], "snapshot.edw.tickets": ["model.edw.base_hist_freshdesk_tickets"], "snapshot.edw.agents": ["model.edw.base_hist_freshdesk_agents"], "snapshot.edw.schedules": ["model.edw.base_hist_calendar_schedules"], "snapshot.edw.projects": [], "snapshot.edw.users": [], "snapshot.edw.delivery_hubs": [], "snapshot.edw.slots": [], "snapshot.edw.recordtype": ["model.edw.base_hist_salesforce_recordtype"], "snapshot.edw.opportunityhistory": ["model.edw.base_hist_salesforce_opportunityhistory"], "snapshot.edw.userrole": ["model.edw.base_hist_salesforce_userrole"], "snapshot.edw.contract": ["model.edw.base_hist_salesforce_contract"], "snapshot.edw.opportunity": ["model.edw.base_hist_salesforce_opportunity"], "snapshot.edw.account": ["model.edw.base_hist_salesforce_account"], "snapshot.edw.user": ["model.edw.base_hist_salesforce_user"], "snapshot.edw.courses_snapshot": ["model.edw.base_hist_tlms_course_users"], "test.edw.test_fixture_salesforce_contract_20210405": [], "test.edw.test_package_version_not_null": [], "test.edw.test_package_type_not_null": [], "seed.edw.source_lu": ["model.edw.stg_hist_freshdesk_tickets"], "seed.edw.priority_lu": ["model.edw.stg_hist_freshdesk_tickets"], "seed.edw.status_lu": ["model.edw.stg_hist_freshdesk_tickets"], "seed.edw.association_type_lu": ["model.edw.stg_hist_freshdesk_tickets"], "seed.edw.billing_invoice_20210228": [], "seed.edw.hudl_new_workers": ["model.edw.football_volleyball_performance"], "seed.edw.hudl_soccer_quality_modifiers": ["model.edw.soccer_performance"], "seed.edw.hudl_grid_formation_shifts": ["model.edw.football_volleyball_performance"], "seed.edw.hudl_t_values": ["model.edw.football_volleyball_performance"], "seed.edw.hudl_quality_tier_payouts": ["model.edw.football_volleyball_performance"], "seed.edw.hudl_soccer_shifts": ["model.edw.soccer_performance"], "seed.edw.fixture_contracts_extracted_20210405": ["model.edw.base_fixture_salesforce_contract_20210405"], "seed.edw.available_hours_tags": ["model.edw.stg_breezy_worker_pool"], "seed.edw.stages_lookup": [], "test.edw.not_null_dataloop_asset_stages_email": [], "test.edw.not_null_agt_asset_stages_dataset_id": [], "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_agt_datasets_": [], "test.edw.relationships_agt_asset_stages_dataset_id__dataset_id__ref_base_v7_agt_": [], "test.edw.not_null_agt_asset_stages_cw_email": [], "test.edw.not_null_agt_asset_stages_task_submitted_at": [], "test.edw.not_null_agt_asset_stages_task_submitted_date": [], "test.edw.not_null_agt_asset_stages_asset_id": [], "test.edw.not_null_agt_asset_stages_from_stage_number": [], "test.edw.not_null_agt_asset_stages_to_stage_name": [], "test.edw.not_null_agt_asset_stages_stage_duration": [], "test.edw.not_null_agt_asset_stages_asset_annotation_running_total": [], "test.edw.not_null_agt_asset_stages_annotation_count": [], "test.edw.not_null_agt_datasets_dataset_id": [], "test.edw.unique_agt_datasets_dataset_id": [], "test.edw.relationships_agt_datasets_dataset_id__dataset_id__ref_agt_asset_stages_": [], "test.edw.not_null_agt_datasets_dataset_name": [], "test.edw.not_null_agt_datasets_dataset_owner_id": [], "test.edw.not_null_agt_datasets_cloudfactory_workstream_id": [], "test.edw.not_null_agt_datasets_dataset_inserted_at": [], "test.edw.not_null_agt_datasets_dataset_inserted_date": [], "test.edw.not_null_agt_datasets_dataset_updated_at": [], "test.edw.not_null_agt_datasets_dataset_updated_date": [], "test.edw.not_null_ibotta_asset_stages_email": [], "test.edw.not_null_abyss_asset_stages_dataset_id": [], "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_abyss_datasets_": [], "test.edw.relationships_abyss_asset_stages_dataset_id__dataset_id__ref_base_v7_abyss_": [], "test.edw.not_null_abyss_asset_stages_cw_email": [], "test.edw.not_null_abyss_asset_stages_task_submitted_at": [], "test.edw.not_null_abyss_asset_stages_task_submitted_date": [], "test.edw.not_null_abyss_asset_stages_asset_id": [], "test.edw.not_null_abyss_asset_stages_from_stage_number": [], "test.edw.not_null_abyss_asset_stages_to_stage_name": [], "test.edw.not_null_abyss_asset_stages_stage_duration": [], "test.edw.not_null_abyss_asset_stages_asset_annotation_running_total": [], "test.edw.not_null_abyss_asset_stages_annotation_count": [], "test.edw.not_null_abyss_datasets_dataset_id": [], "test.edw.unique_abyss_datasets_dataset_id": [], "test.edw.relationships_abyss_datasets_dataset_id__dataset_id__ref_abyss_asset_stages_": [], "test.edw.not_null_abyss_datasets_dataset_name": [], "test.edw.not_null_abyss_datasets_cloudfactory_workstream_id": [], "test.edw.unique_dim_course_course_key": [], "test.edw.not_null_dim_course_course_key": [], "test.edw.not_null_dim_course_course_name": [], "test.edw.not_null_dim_course_category_name": [], "test.edw.not_null_dim_course_course_status": [], "test.edw.not_null_dim_course_is_shared": [], "test.edw.not_null_dim_course_course_id": [], "test.edw.relationships_dim_course_course_id__course_id__ref_base_tlms_courses_": [], "test.edw.not_null_dim_learner_learner_key": [], "test.edw.unique_dim_learner_learner_key": [], "test.edw.not_null_dim_learner_email": [], "test.edw.not_null_dim_learner_country": [], "test.edw.not_null_dim_learner_worker_status": [], "test.edw.accepted_values_dim_learner_worker_status__Applying__Disqualified__Active__Inactive__Screened__Onboarded__Unknown": [], "test.edw.not_null_dim_learner_learner_id": [], "test.edw.relationships_dim_learner_learner_id__user_id__ref_base_tlms_users_": [], "test.edw.not_null_fact_learning_learner_key": [], "test.edw.relationships_fact_learning_learner_key__learner_key__ref_dim_learner_": [], "test.edw.not_null_fact_learning_course_key": [], "test.edw.relationships_fact_learning_course_key__course_key__ref_dim_course_": [], "test.edw.not_null_fact_learning_completed_percent": [], "test.edw.not_null_fact_learning_learning_total_time_seconds": [], "test.edw.not_null_fact_learning_learner_course_count": [], "test.edw.not_null_time_entries_time_entry_date_key": [], "test.edw.not_null_time_entries_client_key": [], "test.edw.not_null_time_entries_client_name": [], "test.edw.not_null_time_entries_project_key": [], "test.edw.not_null_time_entries_project_name": [], "test.edw.not_null_time_entries_workstream_name": [], "test.edw.not_null_time_entries_worker_id": [], "test.edw.not_null_time_entries_worker_email_address": [], "test.edw.not_null_time_entries_task_key": [], "test.edw.not_null_time_entries_is_billable": [], "test.edw.not_null_time_entries_schedule_id": [], "test.edw.not_null_time_entries_schedule_start_at": [], "test.edw.not_null_time_entries_time_entry_start_at": [], "test.edw.not_null_time_entries_time_entry_type": [], "test.edw.accepted_values_time_entries_time_entry_type__training__production": [], "test.edw.not_null_time_entries_time_entry_duration": [], "test.edw.not_null_dim_client_client_key": [], "test.edw.unique_dim_client_client_key": [], "test.edw.not_null_dim_client_client_id": [], "test.edw.unique_dim_client_client_id": [], "test.edw.not_null_dim_client_client_name": [], "test.edw.not_null_dim_client_delivery_manager": [], "test.edw.not_null_dim_client_delivery_owner": [], "test.edw.not_null_dim_client_lead_channel": [], "test.edw.not_null_dim_client_lead_source": [], "test.edw.not_null_dim_client_last_round_type": [], "test.edw.not_null_dim_client_client_industry": [], "test.edw.not_null_dim_client_ideal_client_profile_score": [], "test.edw.not_null_dim_client_crunchbase_category": [], "test.edw.not_null_dim_client_client_country": [], "test.edw.not_null_dim_client_client_state": [], "test.edw.not_null_dim_client_client_city": [], "test.edw.not_null_dim_client_client_status": [], "test.edw.not_null_dim_client_annual_revenue": [], "test.edw.not_null_dim_client_employee_range": [], "test.edw.not_null_dim_client_client_phone": [], "test.edw.not_null_dim_client_primary_focus": [], "test.edw.not_null_dim_client_client_region": [], "test.edw.not_null_dim_client_client_segment": [], "test.edw.not_null_dim_workstream_workstream_key": [], "test.edw.not_null_dim_workstream_workstream_name": [], "test.edw.not_null_dim_workstream_commitment": [], "test.edw.not_null_dim_workstream_package_type": [], "test.edw.not_null_dim_workstream_package_version": [], "test.edw.not_null_dim_workstream_workstream_status": [], "test.edw.not_null_dim_workstream_billing_type": [], "test.edw.not_null_dim_workstream_tool_access": [], "test.edw.not_null_dim_workstream_connectivity": [], "test.edw.not_null_dim_workstream_team_lead_email": [], "test.edw.not_null_dim_workstream_tool_name": [], "test.edw.not_null_dim_workstream_has_required_training": [], "test.edw.not_null_dim_workstream_type": [], "test.edw.not_null_dim_worker_worker_key": [], "test.edw.not_null_dim_worker_email": [], "test.edw.not_null_dim_worker_full_name": [], "test.edw.not_null_dim_worker_country": [], "test.edw.not_null_dim_worker_city": [], "test.edw.not_null_dim_worker_gender": [], "test.edw.not_null_dim_worker_worker_type": [], "test.edw.not_null_dim_worker_worker_status": [], "test.edw.not_null_dim_task_task_key": [], "test.edw.not_null_dim_task_task_category": [], "test.edw.accepted_values_dim_task_task_category__Review_Task__Work_Task__Unknown__No_Match": [], "test.edw.not_null_dim_task_task_type": [], "test.edw.not_null_dim_task_lvl1": [], "test.edw.not_null_dim_task_lvl2": [], "test.edw.not_null_dim_task_task_full_name": [], "test.edw.not_null_fact_reviews_workstream_key": [], "test.edw.relationships_fact_reviews_workstream_key__workstream_key__ref_dim_workstream_": [], "test.edw.not_null_fact_reviews_worker_key": [], "test.edw.relationships_fact_reviews_worker_key__worker_key__ref_dim_worker_": [], "test.edw.not_null_fact_reviews_task_key": [], "test.edw.relationships_fact_reviews_task_key__task_key__ref_dim_task_": [], "test.edw.not_null_fact_reviews_reviewer_key": [], "test.edw.not_null_fact_reviews_review_start_date_key": [], "test.edw.relationships_fact_reviews_review_start_date_key__date_key__ref_dim_date_": [], "test.edw.not_null_fact_reviews_review_complete_date_key": [], "test.edw.relationships_fact_reviews_review_complete_date_key__date_key__ref_dim_date_": [], "test.edw.not_null_fact_reviews_review_count": [], "test.edw.not_null_fact_reviews_review_duration": [], "test.edw.not_null_fact_reviews_review_score": [], "test.edw.not_null_fact_tasks_client_key": [], "test.edw.relationships_fact_tasks_client_key__client_key__ref_dim_client_": [], "test.edw.not_null_fact_tasks_workstream_key": [], "test.edw.relationships_fact_tasks_workstream_key__workstream_key__ref_dim_workstream_": [], "test.edw.not_null_fact_tasks_worker_key": [], "test.edw.relationships_fact_tasks_worker_key__worker_key__ref_dim_worker_": [], "test.edw.not_null_fact_tasks_task_key": [], "test.edw.relationships_fact_tasks_task_key__task_key__ref_dim_task_": [], "test.edw.not_null_fact_tasks_task_started_date_key": [], "test.edw.relationships_fact_tasks_task_started_date_key__date_key__ref_dim_date_": [], "test.edw.not_null_fact_tasks_task_completed_date_key": [], "test.edw.relationships_fact_tasks_task_completed_date_key__date_key__ref_dim_date_": [], "test.edw.not_null_fact_tasks_task_asset_key": [], "test.edw.relationships_fact_tasks_task_asset_key__task_asset_key__ref_dim_task_asset_": [], "test.edw.not_null_fact_tasks_task_count": [], "test.edw.not_null_fact_tasks_task_duration": [], "test.edw.not_null_dim_task_asset_task_asset_key": [], "test.edw.not_null_dim_task_asset_dataset_name": [], "test.edw.not_null_dim_task_asset_asset_name": [], "test.edw.not_null_dim_task_asset_tool_project_name": [], "test.edw.not_null_dim_task_asset_sample_source": [], "test.edw.not_null_worker_hardware_person_key": [], "test.edw.unique_worker_hardware_person_key": [], "test.edw.not_null_worker_hardware_email": [], "test.edw.unique_worker_hardware_email": [], "test.edw.not_null_worker_pool_person_key": [], "test.edw.not_null_worker_pool_email": [], "test.edw.not_null_worker_workstreams_person_key": [], "test.edw.relationships_worker_workstreams_person_key__person_key__ref_worker_pool_": [], "test.edw.not_null_base_hist_freshdesk_tickets_created_at": [], "test.edw.not_null_base_hist_freshdesk_tickets_priority": [], "test.edw.accepted_values_base_hist_freshdesk_tickets_priority__1__2__3__4": [], "test.edw.not_null_base_hist_freshdesk_tickets_source": [], "test.edw.accepted_values_base_hist_freshdesk_tickets_source__1__2__3__7__8__9__10__12": [], "test.edw.not_null_base_hist_freshdesk_tickets_status": [], "test.edw.accepted_values_base_hist_freshdesk_tickets_status__2__3__4__5__6__7__9": [], "test.edw.not_null_base_hist_freshdesk_tickets_ticket_id": [], "test.edw.not_null_base_hist_freshdesk_tickets_updated_at": [], "test.edw.not_null_base_hist_freshdesk_agents_is_available": [], "test.edw.not_null_base_hist_freshdesk_agents_is_active": [], "test.edw.not_null_base_hist_freshdesk_agents_agent_name": [], "test.edw.not_null_base_hist_freshdesk_agents_agent_id": [], "test.edw.not_null_base_hist_freshdesk_agents_agent_type": [], "test.edw.not_null_base_hist_freshdesk_agents_updated_at": [], "test.edw.not_null_base_freshdesk_tickets_created_at": [], "test.edw.not_null_base_freshdesk_tickets_priority": [], "test.edw.accepted_values_base_freshdesk_tickets_priority__1__2__3__4": [], "test.edw.not_null_base_freshdesk_tickets_source": [], "test.edw.accepted_values_base_freshdesk_tickets_source__1__2__3__7__8__9__10__12": [], "test.edw.not_null_base_freshdesk_tickets_status": [], "test.edw.accepted_values_base_freshdesk_tickets_status__2__3__4__5__6__7__9": [], "test.edw.not_null_base_freshdesk_tickets_updated_at": [], "test.edw.not_null_base_freshdesk_agents_is_available": [], "test.edw.not_null_base_freshdesk_agents_is_active": [], "test.edw.not_null_base_freshdesk_agents_agent_name": [], "test.edw.not_null_base_freshdesk_agents_agent_id": [], "test.edw.unique_base_freshdesk_agents_agent_id": [], "test.edw.not_null_base_freshdesk_agents_agent_type": [], "test.edw.not_null_base_freshdesk_agents_updated_at": [], "test.edw.not_null_base_v7_agt_dataset_id": [], "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_datasets_": [], "test.edw.relationships_base_v7_agt_dataset_id__dataset_id__ref_agt_asset_stages_": [], "test.edw.not_null_base_v7_agt_cw_email": [], "test.edw.not_null_base_v7_agt_task_submitted_at": [], "test.edw.not_null_base_v7_agt_asset_id": [], "test.edw.not_null_base_v7_agt_from_stage_number": [], "test.edw.not_null_base_v7_agt_to_stage_name": [], "test.edw.not_null_base_v7_agt_stage_duration": [], "test.edw.not_null_base_v7_agt_asset_annotation_running_total": [], "test.edw.not_null_base_v7_agt_dataset_name": [], "test.edw.not_null_base_v7_agt_dataset_owner_id": [], "test.edw.not_null_base_v7_agt_cloudfactory_workstream_id": [], "test.edw.not_null_base_v7_agt_dataset_inserted_at": [], "test.edw.not_null_base_v7_agt_dataset_updated_at": [], "test.edw.not_null_base_abyss_solutions_v7_dataset_id": [], "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_datasets_": [], "test.edw.relationships_base_abyss_solutions_v7_dataset_id__dataset_id__ref_abyss_asset_stages_": [], "test.edw.not_null_base_abyss_solutions_v7_cw_email": [], "test.edw.not_null_base_abyss_solutions_v7_task_submitted_at": [], "test.edw.not_null_base_abyss_solutions_v7_asset_id": [], "test.edw.not_null_base_abyss_solutions_v7_from_stage_number": [], "test.edw.not_null_base_abyss_solutions_v7_to_stage_name": [], "test.edw.not_null_base_abyss_solutions_v7_stage_duration": [], "test.edw.not_null_base_abyss_solutions_v7_asset_annotation_running_total": [], "test.edw.not_null_base_abyss_solutions_v7_dataset_name": [], "test.edw.not_null_base_abyss_solutions_v7_cloudfactory_workstream_id": [], "test.edw.not_null_base_projects_projects_project_key": [], "test.edw.not_null_base_projects_projects_project_name": [], "test.edw.not_null_base_projects_projects_project_uid": [], "test.edw.not_null_base_projects_projects_client_key": [], "test.edw.not_null_base_projects_projects_project_id": [], "test.edw.not_null_base_projects_projects_project_status": [], "test.edw.accepted_values_base_projects_projects_project_status__0__1": [], "test.edw.not_null_base_projects_projects_subscription_type": [], "test.edw.accepted_values_base_projects_projects_subscription_type__0__1": [], "test.edw.accepted_values_base_projects_projects_package_type__legacy_workstream_1_0__NLP_Managed_Workforce__Efficient_Managed_Workforce__CV_Managed_Workforce__Elastic_Managed_Workforce__Agile_Managed_Workforce__Data_Annotation_Solution": [], "test.edw.not_null_base_projects_projects_billable_unit_code": [], "test.edw.accepted_values_base_projects_projects_billable_unit_code__0__1": [], "test.edw.not_null_base_projects_projects_billable_unit": [], "test.edw.accepted_values_base_projects_projects_billable_unit__Hourly__Unit": [], "test.edw.not_null_base_projects_projects_ws_shield_enabled": [], "test.edw.unique_stg_breezyhr_candidates_candidate_id": [], "test.edw.not_null_stg_breezyhr_candidates_candidate_id": [], "test.edw.unique_base_breezyhr_candidate_meta_candidate_id": [], "test.edw.not_null_base_breezyhr_candidate_streams_stream_type": [], "test.edw.accepted_values_base_breezyhr_candidate_streams_stream_type__candidateAdded__candidateAssignedPosted__candidateDocumentAdded__candidateDocumentDeleted__candidateStatusUpdated__companyNotePosted__questionnaireResponsePosted__questionnaireToCandidatePosted": [], "test.edw.dbt_utils_unique_combination_of_columns_base_breezyhr_candidate_streams_candidate_id__stream_each_id": [], "test.edw.unique_stg_breezyhr_positions_position_id": [], "test.edw.unique_stg_worker_conversion_candidate_id": [], "test.edw.not_null_stg_worker_conversion_candidate_id": [], "test.edw.not_null_stg_breezy_worker_pool_candidate_id": [], "test.edw.not_null_stg_breezy_worker_pool_email": [], "test.edw.not_null_stg_worker_lifecycle_candidate_id": [], "test.edw.not_null_base_hist_salesforce_contract_contract_id": [], "test.edw.not_null_base_hist_salesforce_contract_client_id": [], "test.edw.dbt_utils_expression_is_true_base_hist_salesforce_contract_is_deleted__is_deleted_False": [], "test.edw.not_null_base_hist_salesforce_contract_last_modified_at": [], "test.edw.not_null_base_hist_salesforce_contract_contract_name": [], "test.edw.not_null_base_hist_salesforce_contract_system_mod_stamp": [], "test.edw.not_null_base_passmark_cpu_cores_per_cpu": [], "test.edw.not_null_base_passmark_cpu_cpu_name": [], "test.edw.unique_base_passmark_cpu_cpu_name": [], "test.edw.not_null_base_passmark_cpu_rank": [], "test.edw.not_null_stg_cpu_model_summary_cores_per_cpu": [], "test.edw.not_null_stg_cpu_model_summary_cpu_name": [], "test.edw.not_null_stg_cpu_model_summary_rank": [], "test.edw.not_null_base_cis_workstreams_id": [], "test.edw.not_null_base_cis_workstreams_client_key": [], "test.edw.not_null_base_cis_workstreams_project_key": [], "test.edw.not_null_base_tlms_users_user_id": [], "test.edw.unique_base_tlms_users_user_id": [], "test.edw.not_null_base_tlms_courses_course_id": [], "test.edw.unique_base_tlms_courses_course_id": [], "test.edw.not_null_base_tlms_categories_category_id": [], "test.edw.unique_base_tlms_categories_category_id": [], "test.edw.not_null_base_tlms_branches_branch_id": [], "test.edw.unique_base_tlms_branches_branch_id": [], "test.edw.not_null_base_tlms_group_users_user_id": [], "test.edw.relationships_base_tlms_group_users_user_id__user_id__ref_base_tlms_users_": [], "test.edw.not_null_base_tlms_group_courses_course_id": [], "test.edw.relationships_base_tlms_group_courses_course_id__course_id__ref_base_tlms_courses_": [], "test.edw.not_null_base_tlms_group_courses_group_course_key": [], "test.edw.unique_base_tlms_group_courses_group_course_key": [], "test.edw.not_null_base_tlms_group_courses_group_id": [], "test.edw.not_null_base_tlms_course_users_user_id": [], "test.edw.relationships_base_tlms_course_users_user_id__user_id__ref_base_tlms_users_": [], "test.edw.not_null_base_tlms_course_users_course_id": [], "test.edw.relationships_base_tlms_course_users_course_id__course_id__ref_base_tlms_courses_": [], "test.edw.unique_base_tlms_groups_group_id": [], "test.edw.not_null_base_tlms_groups_group_id": [], "test.edw.not_null_stg_tlms_user_activity_user_id": [], "test.edw.relationships_stg_tlms_user_activity_user_id__user_id__ref_base_tlms_users_": [], "test.edw.not_null_stg_tlms_user_activity_course_id": [], "test.edw.relationships_stg_tlms_user_activity_course_id__course_id__ref_base_tlms_courses_": [], "test.edw.not_null_base_pulseviz_task_event_stats_task_event_stats_record_id": [], "test.edw.unique_base_pulseviz_task_event_stats_task_event_stats_record_id": [], "test.edw.not_null_base_pulseviz_task_event_stats_task_event_id": [], "test.edw.not_null_base_pulseviz_task_event_stats_event_type": [], "test.edw.accepted_values_base_pulseviz_task_event_stats_event_type__False__1__2": [], "test.edw.relationships_base_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_": [], "test.edw.not_null_base_pulseviz_task_event_stats_task_id": [], "test.edw.not_null_base_pulseviz_task_event_stats_task_type": [], "test.edw.not_null_base_pulseviz_task_event_stats_task_started_at": [], "test.edw.not_null_base_pulseviz_task_event_stats_task_completed_at": [], "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_stats_record_id": [], "test.edw.unique_stg_pulseviz_task_event_stats_task_event_stats_record_id": [], "test.edw.not_null_stg_pulseviz_task_event_stats_task_event_id": [], "test.edw.not_null_stg_pulseviz_task_event_stats_event_type": [], "test.edw.accepted_values_stg_pulseviz_task_event_stats_event_type__False__1__2": [], "test.edw.relationships_stg_pulseviz_task_event_stats_project_id__project_uid__ref_base_projects_projects_": [], "test.edw.not_null_stg_pulseviz_task_event_stats_task_id": [], "test.edw.not_null_stg_pulseviz_task_event_stats_task_type": [], "test.edw.not_null_stg_pulseviz_task_event_stats_task_started_at": [], "test.edw.not_null_stg_pulseviz_task_event_stats_task_completed_at": [], "test.edw.not_null_stg_pulseviz_subtasks_task_event_stats_record_id": [], "test.edw.unique_stg_pulseviz_subtasks_task_event_stats_record_id": [], "test.edw.not_null_stg_pulseviz_subtasks_task_event_id": [], "test.edw.not_null_stg_pulseviz_subtasks_event_type": [], "test.edw.accepted_values_stg_pulseviz_subtasks_event_type__False__1__2": [], "test.edw.relationships_stg_pulseviz_subtasks_project_id__project_uid__ref_base_projects_projects_": [], "test.edw.not_null_stg_pulseviz_subtasks_task_id": [], "test.edw.not_null_stg_pulseviz_subtasks_task_type": [], "test.edw.not_null_stg_pulseviz_subtasks_task_started_at": [], "test.edw.not_null_stg_pulseviz_subtasks_task_completed_at": [], "test.edw.not_null_base_system_checker_hardware_email_address": [], "test.edw.not_null_base_system_checker_hardware_created_at": [], "test.edw.not_null_base_system_checker_hardware_processor_type": [], "test.edw.not_null_base_system_checker_hardware_operating_system": [], "test.edw.not_null_base_system_checker_hardware_memory": [], "test.edw.not_null_base_system_checker_cw_data_email_address": [], "test.edw.not_null_base_system_checker_cw_data_created_at": [], "test.edw.not_null_base_system_checker_cw_data_cpu": [], "test.edw.not_null_base_system_checker_cw_data_operating_system": [], "test.edw.not_null_base_system_checker_cw_data_memory": [], "test.edw.not_null_stg_system_checker_hardware_email_address": [], "test.edw.unique_stg_system_checker_hardware_email_address": [], "test.edw.not_null_stg_system_checker_hardware_created_at": [], "test.edw.not_null_stg_system_checker_hardware_cpu_type": [], "test.edw.not_null_stg_system_checker_hardware_operating_system": [], "source.edw.csp.reports": ["model.edw.csp_summary"], "source.edw.struction_site.shr_cf_areas": ["model.edw.base_struction_site_areas"], "source.edw.struction_site.shr_cf_projects": ["model.edw.base_struction_site_projects"], "source.edw.struction_site.shr_cf_status_changes": ["model.edw.base_struction_site_status_changes"], "source.edw.struction_site.shr_st_projects": ["model.edw.base_struction_site_st_projects"], "source.edw.struction_site.shr_video_walks": ["model.edw.base_struction_site_video_walks"], "source.edw.solarwinds.incidents": ["model.edw.base_solarwinds_incidents", "snapshot.edw.incidents"], "source.edw.solarwinds.users": ["model.edw.base_solarwinds_users", "snapshot.edw.solarwinds_users"], "source.edw.solarwinds.categories": ["model.edw.base_solarwinds_categories", "snapshot.edw.categories"], "source.edw.solarwinds.departments": ["model.edw.base_solarwinds_departments", "snapshot.edw.departments"], "source.edw.solarwinds.roles": ["model.edw.base_solarwinds_roles", "snapshot.edw.roles"], "source.edw.solarwinds.sites": ["model.edw.base_solarwinds_sites", "snapshot.edw.sites"], "source.edw.freshdesk.tickets": ["model.edw.base_freshdesk_tickets", "snapshot.edw.tickets"], "source.edw.freshdesk.agents": ["model.edw.base_freshdesk_agents", "snapshot.edw.agents"], "source.edw.freshdesk.companies": ["model.edw.base_freshdesk_companies", "snapshot.edw.companies"], "source.edw.freshdesk.satisfaction_ratings": ["model.edw.base_freshdesk_satisfaction_ratings", "snapshot.edw.satisfaction_ratings"], "source.edw.freshdesk.conversations": [], "source.edw.freshdesk.groups": [], "source.edw.freshdesk.roles": [], "source.edw.freshdesk.time_entries": [], "source.edw.v7.agt": ["model.edw.base_v7_agt"], "source.edw.hudl.daily_fb_vb_training": ["model.edw.base_hudl_daily_fb_vb_training"], "source.edw.hudl.daily_player_tracking": ["model.edw.base_hudl_daily_player_tracking"], "source.edw.hudl.daily_fb_vb_production": ["model.edw.base_hudl_daily_fb_vb_production"], "source.edw.hudl_qa_scores.sheet1": ["model.edw.base_hudl_quality_scores"], "source.edw.abyss.abyss_solutions_v7": ["model.edw.base_abyss_solutions_v7"], "source.edw.calendar.api_keys": [], "source.edw.calendar.ar_internal_metadata": [], "source.edw.calendar.calendars": [], "source.edw.calendar.claims": [], "source.edw.calendar.delayed_jobs": [], "source.edw.calendar.events": [], "source.edw.calendar.event_instances": [], "source.edw.calendar.open_shifts": [], "source.edw.calendar.open_shift_requests": [], "source.edw.calendar.reject_schedules": [], "source.edw.calendar.schedules": ["model.edw.base_calendar_schedules", "snapshot.edw.schedules"], "source.edw.calendar.schema_migrations": [], "source.edw.calendar.trades": [], "source.edw.calendar._sdc_rejected": [], "source.edw.clientplatform.accounts": [], "source.edw.clientplatform.job_types": [], "source.edw.clientplatform.opt_out_station_details": [], "source.edw.clientplatform.skills": [], "source.edw.clientplatform.transaction_types": [], "source.edw.clientplatform.transactions": [], "source.edw.clientplatform.worker_skill_gold_standard_counters": [], "source.edw.clientplatform.worker_skills": [], "source.edw.workerplatform.opt_out_details": [], "source.edw.workerplatform.payments": [], "source.edw.workerplatform.tasks": [], "source.edw.workerplatform.teams": [], "source.edw.workerplatform.work_histories": [], "source.edw.workerplatform.workers": [], "source.edw.projects.api_keys": [], "source.edw.projects.ar_internal_metadata": [], "source.edw.projects.capacity_distributions": [], "source.edw.projects.memberships": [], "source.edw.projects.membership_journals": [], "source.edw.projects.milestones": [], "source.edw.projects.projects": ["model.edw.base_projects_projects", "snapshot.edw.projects"], "source.edw.projects.project_activities": [], "source.edw.projects.project_configurations": [], "source.edw.projects.schema_migrations": [], "source.edw.projects.subscriptions": [], "source.edw.projects.tasks": ["model.edw.base_projects_tasks"], "source.edw.projects._sdc_rejected": [], "source.edw.payout_202008.flow": [], "source.edw.payout_202008.kenya_scheduled": [], "source.edw.payout_202008.nepal_scheduled": [], "source.edw.payout_202008.adjustments": [], "source.edw.payout_202007.flow": [], "source.edw.payout_202007.kenya_scheduled": [], "source.edw.payout_202007.nepal_scheduled": [], "source.edw.payout_202007.adjustments": [], "source.edw.payout_202009.flow": [], "source.edw.payout_202009.kenya_scheduled": [], "source.edw.payout_202009.nepal_scheduled": [], "source.edw.payout_202009.adjustments": [], "source.edw.payout_202010.flow": [], "source.edw.payout_202010.kenya_scheduled": [], "source.edw.payout_202010.nepal_scheduled": [], "source.edw.payout_202010.adjustments": [], "source.edw.payout_202011.flow": [], "source.edw.payout_202011.kenya_scheduled": [], "source.edw.payout_202011.nepal_scheduled": [], "source.edw.payout_202011.adjustments": [], "source.edw.payout_202012.flow": [], "source.edw.payout_202012.kenya_scheduled": [], "source.edw.payout_202012.nepal_scheduled": [], "source.edw.payout_202012.adjustments": [], "source.edw.payout_202101.flow": [], "source.edw.payout_202101.kenya_scheduled": [], "source.edw.payout_202101.nepal_scheduled": [], "source.edw.payout_202101.adjustments": [], "source.edw.sheetload.people": ["model.edw.base_sheetload_people"], "source.edw.sheetload.workstreams": [], "source.edw.sheetload.breezy_internal_pools": ["model.edw.base_sheetload_breezy_internal"], "source.edw.sheetload.breezy_external_pools": ["model.edw.base_sheetload_breezy_external"], "source.edw.sheetload.expensify_workers": ["model.edw.base_sheetload_expensify_workers"], "source.edw.sheetload.skill_distribution": ["model.edw.base_sheetload_skill_distribution"], "source.edw.sheetload.cpu_model_summary": ["model.edw.base_sheetload_cpu_model_summary"], "source.edw.breezyhr.candidates": ["model.edw.base_breezyhr_candidates"], "source.edw.breezyhr.candidate_meta": ["model.edw.base_breezyhr_candidate_meta"], "source.edw.breezyhr.positions": ["model.edw.base_breezyhr_positions"], "source.edw.breezyhr.companies": [], "source.edw.users.adjusted_time_entries": [], "source.edw.users.api_keys": [], "source.edw.users.ar_internal_metadata": [], "source.edw.users.availabilities": [], "source.edw.users.banks": [], "source.edw.users.bank_accounts": [], "source.edw.users.bank_branches": [], "source.edw.users.delivery_hubs": ["model.edw.base_users_delivery_hubs", "snapshot.edw.delivery_hubs"], "source.edw.users.hub_slots": [], "source.edw.users.idle_time_distributions": [], "source.edw.users.insurances": [], "source.edw.users.profiles": ["model.edw.base_users_profiles"], "source.edw.users.schema_migrations": [], "source.edw.users.slots": ["model.edw.base_users_slots", "snapshot.edw.slots"], "source.edw.users.time_entries": ["model.edw.base_users_time_entries"], "source.edw.users.time_logs": [], "source.edw.users.time_log_incident_mappings": [], "source.edw.users.time_log_time_entry_mappings": [], "source.edw.users.time_offs": [], "source.edw.users.time_off_policies": [], "source.edw.users.time_off_stats": [], "source.edw.users.time_reports": [], "source.edw.users.users": ["model.edw.base_users_users", "snapshot.edw.users"], "source.edw.users.work_sessions": [], "source.edw.users._sdc_rejected": [], "source.edw.breezy_categories.external": ["model.edw.base_breezy_categories", "model.edw.stg_worker_lifecycle"], "source.edw.breezy_categories.internal": ["model.edw.base_breezy_categories", "model.edw.stg_worker_lifecycle"], "source.edw.breezy_categories.positions": ["model.edw.stg_breezy_worker_pool", "model.edw.stg_worker_lifecycle"], "source.edw.cpa_assessments.sheet1": ["model.edw.base_sheets_cpa_assessments"], "source.edw.cpu_buckets.sheet1": ["model.edw.base_sheets_cpu_buckets"], "source.edw.salesforce.account": ["model.edw.base_salesforce_account", "snapshot.edw.account"], "source.edw.salesforce.opportunity": ["model.edw.base_salesforce_opportunity", "snapshot.edw.opportunity"], "source.edw.salesforce.recordtype": ["model.edw.base_salesforce_recordtype", "snapshot.edw.recordtype"], "source.edw.salesforce.user": ["model.edw.base_salesforce_user", "snapshot.edw.user"], "source.edw.salesforce.opportunityhistory": ["model.edw.base_salesforce_opportunityhistory", "snapshot.edw.opportunityhistory"], "source.edw.salesforce.userrole": ["model.edw.base_salesforce_userrole", "snapshot.edw.userrole"], "source.edw.salesforce.contract__c": ["model.edw.base_salesforce_contract", "snapshot.edw.contract"], "source.edw.passmark.cpu_model_summary": ["model.edw.base_passmark_cpu"], "source.edw.cfclient.agile_subscriptions": [], "source.edw.cfclient.attachments": [], "source.edw.cfclient.availabilities": [], "source.edw.cfclient.avid_accuracy_stats": ["model.edw.base_avid_accuracy_stats"], "source.edw.cfclient.avid_production_runs": [], "source.edw.cfclient.avid_raw_qc_data": ["model.edw.base_avid_raw_qc_data"], "source.edw.cfclient.avid_raw_stats": ["model.edw.base_avid_raw_stats"], "source.edw.cfclient.avid_task_event_stats": [], "source.edw.cfclient.batch_subscriptions": [], "source.edw.cfclient.collaborations": [], "source.edw.cfclient.crm_api_keys": [], "source.edw.cfclient.crm_project_opportunities": [], "source.edw.cfclient.delivery_hubs": [], "source.edw.cfclient.delivery_hub_issues": [], "source.edw.cfclient.exp_task_event_stats": [], "source.edw.cfclient.flow_users": [], "source.edw.cfclient.hub_slots": [], "source.edw.cfclient.lean_subscriptions": [], "source.edw.cfclient.open_shift_entity_for_time_offs": [], "source.edw.cfclient.projects": [], "source.edw.cfclient.projects_users": [], "source.edw.cfclient.schedule_configs": [], "source.edw.cfclient.schema_migrations": [], "source.edw.cfclient.slots": [], "source.edw.cfclient.summarized_exp_task_event_stats": [], "source.edw.cfclient.tasks": [], "source.edw.cfclient.task_event_stats": [], "source.edw.cfclient.time_entries": [], "source.edw.cfclient.time_offs": [], "source.edw.cfclient.time_off_policies": [], "source.edw.cfclient.time_off_stats": [], "source.edw.cfclient.trade_options": [], "source.edw.cfclient.usecases": [], "source.edw.cfclient.users": [], "source.edw.cfclient.user_time_off_policies": [], "source.edw.cfclient.workers_schedules": [], "source.edw.cfclient.worker_mappings": [], "source.edw.cfclient.worker_schedule_notifications": [], "source.edw.cis_snowpipe.people": ["model.edw.base_cis_people"], "source.edw.cis_snowpipe.workstreams": ["model.edw.base_cis_workstreams"], "source.edw.talentlms.users": ["model.edw.base_tlms_users"], "source.edw.talentlms.courses": ["model.edw.base_tlms_course_users", "model.edw.base_tlms_courses", "snapshot.edw.courses_snapshot"], "source.edw.talentlms.categories": ["model.edw.base_tlms_categories"], "source.edw.talentlms.groups": ["model.edw.base_tlms_group_courses", "model.edw.base_tlms_group_users", "model.edw.base_tlms_groups"], "source.edw.talentlms.branches": ["model.edw.base_tlms_branches"], "source.edw.pulseviz.task_event_stats": ["model.edw.base_pulseviz_task_event_stats"], "source.edw.system_checker.system_checker": ["model.edw.base_system_checker_hardware"], "source.edw.system_checker.cw_data": ["model.edw.base_system_checker_cw_data"]}}